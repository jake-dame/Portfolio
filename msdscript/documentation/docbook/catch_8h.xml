<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_catch_8h" xml:lang="en-US">
<title>/Users/u0858882/Desktop/msdscript/msdscript/src/catch.h File Reference</title>
<indexterm><primary>/Users/u0858882/Desktop/msdscript/msdscript/src/catch.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;iosfwd&gt;<?linebreak?>#include &lt;string&gt;<?linebreak?>#include &lt;cstdint&gt;<?linebreak?>#include &lt;vector&gt;<?linebreak?>#include &lt;cstddef&gt;<?linebreak?>#include &lt;cassert&gt;<?linebreak?>#include &lt;type_traits&gt;<?linebreak?>#include &lt;ostream&gt;<?linebreak?>#include &lt;chrono&gt;<?linebreak?>#include &lt;memory&gt;<?linebreak?>#include &lt;exception&gt;<?linebreak?>#include &lt;functional&gt;<?linebreak?>#include &lt;algorithm&gt;<?linebreak?>#include &lt;utility&gt;<?linebreak?>#include &lt;random&gt;<?linebreak?></programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_catch__global__namespace__dummy">Catch_global_namespace_dummy</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_case_sensitive">Catch::CaseSensitive</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_non_copyable">Catch::NonCopyable</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_source_line_info">Catch::SourceLineInfo</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_stream_end_stop">Catch::StreamEndStop</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_registrar_for_tag_aliases">Catch::RegistrarForTagAliases</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_test_invoker">Catch::ITestInvoker</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_test_case_registry">Catch::ITestCaseRegistry</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_string_ref">Catch::StringRef</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1always__false">Catch::always_false&lt; T &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1true__given">Catch::true_given&lt; typename &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1is__callable__tester">Catch::is_callable_tester</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1is__callable_3_01_fun_07_args_8_8_8_08_4">Catch::is_callable&lt; Fun(Args...)&gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_test_invoker_as_method">Catch::TestInvokerAsMethod&lt; C &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_name_and_tags">Catch::NameAndTags</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_auto_reg">Catch::AutoReg</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_result_was">Catch::ResultWas</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_result_disposition">Catch::ResultDisposition</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_assertion_info">Catch::AssertionInfo</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_stream">Catch::IStream</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_reusable_string_stream">Catch::ReusableStringStream</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_detail_1_1_enum_info">Catch::Detail::EnumInfo</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_mutable_enum_values_registry">Catch::IMutableEnumValuesRegistry</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_detail_1_1_is_stream_insertable">Catch::Detail::IsStreamInsertable&lt; T &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker">Catch::StringMaker&lt; T, typename &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01std_1_1string_01_4">Catch::StringMaker&lt; std::string &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01char_01const_01_5_01_4">Catch::StringMaker&lt; char const * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01char_01_5_01_4">Catch::StringMaker&lt; char * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01std_1_1wstring_01_4">Catch::StringMaker&lt; std::wstring &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01wchar__t_01const_01_5_01_4">Catch::StringMaker&lt; wchar_t const * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01wchar__t_01_5_01_4">Catch::StringMaker&lt; wchar_t * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01char_0f_s_z_0e_4">Catch::StringMaker&lt; char[SZ]&gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01signed_01char_0f_s_z_0e_4">Catch::StringMaker&lt; signed char[SZ]&gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01unsigned_01char_0f_s_z_0e_4">Catch::StringMaker&lt; unsigned char[SZ]&gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01int_01_4">Catch::StringMaker&lt; int &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01long_01_4">Catch::StringMaker&lt; long &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01long_01long_01_4">Catch::StringMaker&lt; long long &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01unsigned_01int_01_4">Catch::StringMaker&lt; unsigned int &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01unsigned_01long_01_4">Catch::StringMaker&lt; unsigned long &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01unsigned_01long_01long_01_4">Catch::StringMaker&lt; unsigned long long &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01bool_01_4">Catch::StringMaker&lt; bool &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01char_01_4">Catch::StringMaker&lt; char &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01signed_01char_01_4">Catch::StringMaker&lt; signed char &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01unsigned_01char_01_4">Catch::StringMaker&lt; unsigned char &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01std_1_1nullptr__t_01_4">Catch::StringMaker&lt; std::nullptr_t &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01float_01_4">Catch::StringMaker&lt; float &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01double_01_4">Catch::StringMaker&lt; double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01_t_01_5_01_4">Catch::StringMaker&lt; T * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01_r_01_c_1_1_5_01_4">Catch::StringMaker&lt; R C::* &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1detail_1_1void__type">Catch::detail::void_type&lt;... &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1detail_1_1is__range__impl">Catch::detail::is_range_impl&lt; T, typename &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1detail_1_1is__range__impl_3_01_t_00_01typename_01void__type_3_01decltype_07begin8604ecb9de16ea7789f2f694ac896ffd">Catch::detail::is_range_impl&lt; T, typename void_type&lt; decltype(begin(std::declval&lt; T &gt;()))&gt;::type &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1is__range">Catch::is_range&lt; T &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01_r_00_01typename_01std_1_1enable__if_3_01is__range_3_01_r_01_4536d8fedfff6d62432b3dc59b56e1380">Catch::StringMaker&lt; R, typename std::enable_if&lt; is_range&lt; R &gt;::value &amp;&amp;!::Catch::Detail::IsStreamInsertable&lt; R &gt;::value &gt;::type &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01_t_0f_s_z_0e_4">Catch::StringMaker&lt; T[SZ]&gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_transient_expression">Catch::ITransientExpression</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_binary_expr">Catch::BinaryExpr&lt; LhsT, RhsT &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_unary_expr">Catch::UnaryExpr&lt; LhsT &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_expr_lhs">Catch::ExprLhs&lt; LhsT &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_decomposer">Catch::Decomposer</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_result_capture">Catch::IResultCapture</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_test_failure_exception">Catch::TestFailureException</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_lazy_expression">Catch::LazyExpression</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_assertion_reaction">Catch::AssertionReaction</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_assertion_handler">Catch::AssertionHandler</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_message_info">Catch::MessageInfo</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_message_stream">Catch::MessageStream</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_message_builder">Catch::MessageBuilder</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_scoped_message">Catch::ScopedMessage</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_capturer">Catch::Capturer</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_counts">Catch::Counts</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_totals">Catch::Totals</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_section_info">Catch::SectionInfo</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_section_end_info">Catch::SectionEndInfo</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_timer">Catch::Timer</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_section">Catch::Section</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_registry_hub">Catch::IRegistryHub</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_mutable_registry_hub">Catch::IMutableRegistryHub</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_exception_translator">Catch::IExceptionTranslator</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_exception_translator_registry">Catch::IExceptionTranslatorRegistry</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_exception_translator_registrar">Catch::ExceptionTranslatorRegistrar</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_exception_translator_registrar_1_1_exception_translator">Catch::ExceptionTranslatorRegistrar::ExceptionTranslator&lt; T &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_detail_1_1_approx">Catch::Detail::Approx</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01_catch_1_1_detail_1_1_approx_01_4">Catch::StringMaker&lt; Catch::Detail::Approx &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1pluralise">Catch::pluralise</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base">Catch::Matchers::Impl::MatcherUntypedBase</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_method">Catch::Matchers::Impl::MatcherMethod&lt; ObjectT &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">Catch::Matchers::Impl::MatcherBase&lt; T &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_match_all_of">Catch::Matchers::Impl::MatchAllOf&lt; ArgT &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_match_any_of">Catch::Matchers::Impl::MatchAnyOf&lt; ArgT &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_match_not_of">Catch::Matchers::Impl::MatchNotOf&lt; ArgT &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_matchers_1_1_exception_1_1_exception_message_matcher">Catch::Matchers::Exception::ExceptionMessageMatcher</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_abs_matcher">Catch::Matchers::Floating::WithinAbsMatcher</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_ulps_matcher">Catch::Matchers::Floating::WithinUlpsMatcher</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_rel_matcher">Catch::Matchers::Floating::WithinRelMatcher</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_matchers_1_1_generic_1_1_predicate_matcher">Catch::Matchers::Generic::PredicateMatcher&lt; T &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string">Catch::Matchers::StdString::CasedString</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_string_matcher_base">Catch::Matchers::StdString::StringMatcherBase</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_equals_matcher">Catch::Matchers::StdString::EqualsMatcher</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_contains_matcher">Catch::Matchers::StdString::ContainsMatcher</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_starts_with_matcher">Catch::Matchers::StdString::StartsWithMatcher</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_ends_with_matcher">Catch::Matchers::StdString::EndsWithMatcher</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_regex_matcher">Catch::Matchers::StdString::RegexMatcher</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_contains_element_matcher">Catch::Matchers::Vector::ContainsElementMatcher&lt; T, Alloc &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_contains_matcher">Catch::Matchers::Vector::ContainsMatcher&lt; T, AllocComp, AllocMatch &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_equals_matcher">Catch::Matchers::Vector::EqualsMatcher&lt; T, AllocComp, AllocMatch &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher">Catch::Matchers::Vector::ApproxMatcher&lt; T, AllocComp, AllocMatch &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_unordered_equals_matcher">Catch::Matchers::Vector::UnorderedEqualsMatcher&lt; T, AllocComp, AllocMatch &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_match_expr">Catch::MatchExpr&lt; ArgT, MatcherT &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_generators_1_1_generator_untyped_base">Catch::Generators::GeneratorUntypedBase</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_generator_tracker">Catch::IGeneratorTracker</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_generator_exception">Catch::GeneratorException</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_generators_1_1_i_generator">Catch::Generators::IGenerator&lt; T &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_generators_1_1_single_value_generator">Catch::Generators::SingleValueGenerator&lt; T &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_generators_1_1_fixed_values_generator">Catch::Generators::FixedValuesGenerator&lt; T &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">Catch::Generators::GeneratorWrapper&lt; T &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_generators_1_1_generators">Catch::Generators::Generators&lt; T &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_generators_1_1as">Catch::Generators::as&lt; T &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_generators_1_1_take_generator">Catch::Generators::TakeGenerator&lt; T &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_generators_1_1_filter_generator">Catch::Generators::FilterGenerator&lt; T, Predicate &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_generators_1_1_repeat_generator">Catch::Generators::RepeatGenerator&lt; T &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_generators_1_1_map_generator">Catch::Generators::MapGenerator&lt; T, U, Func &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_generators_1_1_chunk_generator">Catch::Generators::ChunkGenerator&lt; T &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_context">Catch::IContext</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_mutable_context">Catch::IMutableContext</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_option">Catch::Option&lt; T &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_warn_about">Catch::WarnAbout</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_show_durations">Catch::ShowDurations</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_run_tests">Catch::RunTests</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_use_colour">Catch::UseColour</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_wait_for_keypress">Catch::WaitForKeypress</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_config">Catch::IConfig</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_simple_pcg32">Catch::SimplePcg32</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_generators_1_1_random_floating_generator">Catch::Generators::RandomFloatingGenerator&lt; Float &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_generators_1_1_random_integer_generator">Catch::Generators::RandomIntegerGenerator&lt; Integer &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_generators_1_1_range_generator">Catch::Generators::RangeGenerator&lt; T &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_generators_1_1_iterator_generator">Catch::Generators::IteratorGenerator&lt; T &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_test_case_info">Catch::TestCaseInfo</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_test_case">Catch::TestCase</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_runner">Catch::IRunner</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespace_catch">Catch</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespacempl__">mpl_</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_catch_1_1_detail">Catch::Detail</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_catch_1_1detail">Catch::detail</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_catch_1_1literals">Catch::literals</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_catch_1_1_matchers">Catch::Matchers</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_catch_1_1_matchers_1_1_impl">Catch::Matchers::Impl</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_catch_1_1_matchers_1_1_exception">Catch::Matchers::Exception</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_catch_1_1_matchers_1_1_floating">Catch::Matchers::Floating</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_catch_1_1_matchers_1_1_generic">Catch::Matchers::Generic</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_catch_1_1_matchers_1_1_generic_1_1_detail">Catch::Matchers::Generic::Detail</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_catch_1_1_matchers_1_1_std_string">Catch::Matchers::StdString</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_catch_1_1_matchers_1_1_vector">Catch::Matchers::Vector</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_catch_1_1_generators">Catch::Generators</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_catch_1_1_generators_1_1pf">Catch::Generators::pf</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_catch_8h_1aed4b3022e5b389a59ee3e1633c0a70a8">CATCH_VERSION_MAJOR</link>&#160;&#160;&#160;2</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a7c36daa8f2e725fe5e1ff2a9c2559d4f">CATCH_VERSION_MINOR</link>&#160;&#160;&#160;13</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ab6adfb1d16a244d790dc1fe385831a52">CATCH_VERSION_PATCH</link>&#160;&#160;&#160;10</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a3c8d4b828da004fc3ad2511c1900ec19">CATCH_INTERNAL_CONFIG_POSIX_SIGNALS</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a18b42ab8d6d1efdf417f97e5474dc450">CATCH_INTERNAL_CONFIG_COUNTER</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a48ae5ed6ff9168c5ad3d5058527fbfae">CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1aa70cff16ca513ff81704961bed5e01b0">CATCH_CONFIG_COUNTER</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ac5eee4f90512985d2043f971c6f08707">CATCH_CONFIG_POSIX_SIGNALS</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ac6675f48ca221c1b9124ea02fe88324b">CATCH_CONFIG_WCHAR</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a5e8669f07e3db1e9e1604508689bc28a">CATCH_CONFIG_CPP11_TO_STRING</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a893712b2ba6e7400136a0a023b12e9db">CATCH_CONFIG_DISABLE_EXCEPTIONS</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a3271a306c531fd4a2c6c6180e4903fd9">CATCH_CONFIG_GLOBAL_NEXTAFTER</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a1500dca9a578a0bd2f85771cfa3fd35d">CATCH_INTERNAL_START_WARNINGS_SUPPRESSION</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ad9594e9891b032f0dd0279960dc861a5">CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a89c1608a68775aca1bb7c265f7ba923a">CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1aa0200c23b35ba2bd8ebed69a8f3c1c66">CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a828d81ce73c46941460c92ecbd7b8fc2">CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1af9c2d6807f17109481b536551c0c10bf">CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1aa7ffc39ff2307d382e766a867d49b67a">CATCH_INTERNAL_IGNORE_BUT_WARN</link>(...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a10a275cf93b99d6f1246d9d9df09d1d8">CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ab76c2d22e571ab1a828f5c60d2f485a6">CATCH_TRY</link>&#160;&#160;&#160;if ((true))</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1afa0ae14e70806dca4f8bf06d06645fa9">CATCH_CATCH_ALL</link>&#160;&#160;&#160;if ((false))</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a3caecf3cbc55848423d744df50d84d5b">CATCH_CATCH_ANON</link>(type)&#160;&#160;&#160;if ((false))</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a7c21e89d8b7727757ce9ca2b848f1cda">INTERNAL_CATCH_UNIQUE_NAME_LINE2</link>(name,  line)&#160;&#160;&#160;name##line</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a1b51a086ea21a750bd306ac0ed4d2a95">INTERNAL_CATCH_UNIQUE_NAME_LINE</link>(name,  line)&#160;&#160;&#160;<link linkend="_catch_8h_1a7c21e89d8b7727757ce9ca2b848f1cda">INTERNAL_CATCH_UNIQUE_NAME_LINE2</link>( name, line )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>(name)&#160;&#160;&#160;<link linkend="_catch_8h_1a1b51a086ea21a750bd306ac0ed4d2a95">INTERNAL_CATCH_UNIQUE_NAME_LINE</link>( name, __COUNTER__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>&#160;&#160;&#160;    <link linkend="_struct_catch_1_1_source_line_info">::Catch::SourceLineInfo</link>( __FILE__, static_cast&lt;std::size_t&gt;( __LINE__ ) )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1af7f9d4a12274e1ccf4b1021e5d35e0c5">CATCH_REGISTER_TAG_ALIAS</link>(alias,  spec)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1aedfa83a9b9671b2f3ce5d64207eab45f">CATCH_RECURSION_LEVEL0</link>(...)&#160;&#160;&#160;__VA_ARGS__</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ad1cc1127b3a8ed84d336fd86c25571a9">CATCH_RECURSION_LEVEL1</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1aedfa83a9b9671b2f3ce5d64207eab45f">CATCH_RECURSION_LEVEL0</link>(<link linkend="_catch_8h_1aedfa83a9b9671b2f3ce5d64207eab45f">CATCH_RECURSION_LEVEL0</link>(<link linkend="_catch_8h_1aedfa83a9b9671b2f3ce5d64207eab45f">CATCH_RECURSION_LEVEL0</link>(__VA_ARGS__)))</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a2a7ccfd6ceda0c723d1c81ed0a8ea7aa">CATCH_RECURSION_LEVEL2</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1ad1cc1127b3a8ed84d336fd86c25571a9">CATCH_RECURSION_LEVEL1</link>(<link linkend="_catch_8h_1ad1cc1127b3a8ed84d336fd86c25571a9">CATCH_RECURSION_LEVEL1</link>(<link linkend="_catch_8h_1ad1cc1127b3a8ed84d336fd86c25571a9">CATCH_RECURSION_LEVEL1</link>(__VA_ARGS__)))</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ac5ead3b79069ca9b5de9cad80029bc71">CATCH_RECURSION_LEVEL3</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1a2a7ccfd6ceda0c723d1c81ed0a8ea7aa">CATCH_RECURSION_LEVEL2</link>(<link linkend="_catch_8h_1a2a7ccfd6ceda0c723d1c81ed0a8ea7aa">CATCH_RECURSION_LEVEL2</link>(<link linkend="_catch_8h_1a2a7ccfd6ceda0c723d1c81ed0a8ea7aa">CATCH_RECURSION_LEVEL2</link>(__VA_ARGS__)))</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a7738534acacfd54ef5b9f89cf07fa16d">CATCH_RECURSION_LEVEL4</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1ac5ead3b79069ca9b5de9cad80029bc71">CATCH_RECURSION_LEVEL3</link>(<link linkend="_catch_8h_1ac5ead3b79069ca9b5de9cad80029bc71">CATCH_RECURSION_LEVEL3</link>(<link linkend="_catch_8h_1ac5ead3b79069ca9b5de9cad80029bc71">CATCH_RECURSION_LEVEL3</link>(__VA_ARGS__)))</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a761d2ca7a5b0393ae7a6edf086a9c3da">CATCH_RECURSION_LEVEL5</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1a7738534acacfd54ef5b9f89cf07fa16d">CATCH_RECURSION_LEVEL4</link>(<link linkend="_catch_8h_1a7738534acacfd54ef5b9f89cf07fa16d">CATCH_RECURSION_LEVEL4</link>(<link linkend="_catch_8h_1a7738534acacfd54ef5b9f89cf07fa16d">CATCH_RECURSION_LEVEL4</link>(__VA_ARGS__)))</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ae3ce5d9c8e50eba755111a19a62432e5">CATCH_RECURSE</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1a761d2ca7a5b0393ae7a6edf086a9c3da">CATCH_RECURSION_LEVEL5</link>(__VA_ARGS__)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1aebb9e7be881ac3dcd10db9fb45830649">CATCH_REC_END</link>(...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ab469d9696504fd14e36fd1d8b6e47b7f">CATCH_REC_OUT</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a8ac224562b8423a7c07e368216d0f0e9">CATCH_EMPTY</link>()</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a83c1ab15f3d715f25fe504c114cf6144">CATCH_DEFER</link>(id)&#160;&#160;&#160;id <link linkend="_catch_8h_1a8ac224562b8423a7c07e368216d0f0e9">CATCH_EMPTY</link>()</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1aa335d39d6fdb7e20c94edaa4de21d1a3">CATCH_REC_GET_END2</link>()&#160;&#160;&#160;0, <link linkend="_catch_8h_1aebb9e7be881ac3dcd10db9fb45830649">CATCH_REC_END</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a476d332d716d4691f874195acea4931b">CATCH_REC_GET_END1</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1aa335d39d6fdb7e20c94edaa4de21d1a3">CATCH_REC_GET_END2</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a536dd24bc8e72ec8eb14c3676f20c778">CATCH_REC_GET_END</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1a476d332d716d4691f874195acea4931b">CATCH_REC_GET_END1</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ae25889c34b72704724f5797b6103c463">CATCH_REC_NEXT0</link>(test,  next, ...)&#160;&#160;&#160;next <link linkend="_catch_8h_1ab469d9696504fd14e36fd1d8b6e47b7f">CATCH_REC_OUT</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a0ddf3b75cc3780765a2cb551d6536721">CATCH_REC_NEXT1</link>(test,  next)&#160;&#160;&#160;<link linkend="_catch_8h_1a83c1ab15f3d715f25fe504c114cf6144">CATCH_DEFER</link> ( <link linkend="_catch_8h_1ae25889c34b72704724f5797b6103c463">CATCH_REC_NEXT0</link> ) ( test, next, 0)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1abaddf93f755cea9e20aee254aa566adf">CATCH_REC_NEXT</link>(test,  next)&#160;&#160;&#160;<link linkend="_catch_8h_1a0ddf3b75cc3780765a2cb551d6536721">CATCH_REC_NEXT1</link>(<link linkend="_catch_8h_1a536dd24bc8e72ec8eb14c3676f20c778">CATCH_REC_GET_END</link> test, next)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a3e07fd613c41bd44cb4bd14fccc3c388">CATCH_REC_LIST0</link>(f,  x,  peek, ...)&#160;&#160;&#160;, f(x) <link linkend="_catch_8h_1a83c1ab15f3d715f25fe504c114cf6144">CATCH_DEFER</link> ( <link linkend="_catch_8h_1abaddf93f755cea9e20aee254aa566adf">CATCH_REC_NEXT</link>(peek, <link linkend="_catch_8h_1abedd1ae08e12478704233e9bf29e0fe9">CATCH_REC_LIST1</link>) ) ( f, peek, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1abedd1ae08e12478704233e9bf29e0fe9">CATCH_REC_LIST1</link>(f,  x,  peek, ...)&#160;&#160;&#160;, f(x) <link linkend="_catch_8h_1a83c1ab15f3d715f25fe504c114cf6144">CATCH_DEFER</link> ( <link linkend="_catch_8h_1abaddf93f755cea9e20aee254aa566adf">CATCH_REC_NEXT</link>(peek, <link linkend="_catch_8h_1a3e07fd613c41bd44cb4bd14fccc3c388">CATCH_REC_LIST0</link>) ) ( f, peek, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1abe3c205d4ba8406d45439abb91366ce9">CATCH_REC_LIST2</link>(f,  x,  peek, ...)&#160;&#160;&#160;f(x) <link linkend="_catch_8h_1a83c1ab15f3d715f25fe504c114cf6144">CATCH_DEFER</link> ( <link linkend="_catch_8h_1abaddf93f755cea9e20aee254aa566adf">CATCH_REC_NEXT</link>(peek, <link linkend="_catch_8h_1abedd1ae08e12478704233e9bf29e0fe9">CATCH_REC_LIST1</link>) ) ( f, peek, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1aea894953d28c5ed83e59ce6c74d0a665">CATCH_REC_LIST0_UD</link>(f,  userdata,  x,  peek, ...)&#160;&#160;&#160;, f(userdata, x) <link linkend="_catch_8h_1a83c1ab15f3d715f25fe504c114cf6144">CATCH_DEFER</link> ( <link linkend="_catch_8h_1abaddf93f755cea9e20aee254aa566adf">CATCH_REC_NEXT</link>(peek, <link linkend="_catch_8h_1abbcff29ced4d413bc121f7b761558c16">CATCH_REC_LIST1_UD</link>) ) ( f, userdata, peek, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1abbcff29ced4d413bc121f7b761558c16">CATCH_REC_LIST1_UD</link>(f,  userdata,  x,  peek, ...)&#160;&#160;&#160;, f(userdata, x) <link linkend="_catch_8h_1a83c1ab15f3d715f25fe504c114cf6144">CATCH_DEFER</link> ( <link linkend="_catch_8h_1abaddf93f755cea9e20aee254aa566adf">CATCH_REC_NEXT</link>(peek, <link linkend="_catch_8h_1aea894953d28c5ed83e59ce6c74d0a665">CATCH_REC_LIST0_UD</link>) ) ( f, userdata, peek, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a0c2dd548d178fbc2202ecd74ce4be91b">CATCH_REC_LIST2_UD</link>(f,  userdata,  x,  peek, ...)&#160;&#160;&#160;f(userdata, x) <link linkend="_catch_8h_1a83c1ab15f3d715f25fe504c114cf6144">CATCH_DEFER</link> ( <link linkend="_catch_8h_1abaddf93f755cea9e20aee254aa566adf">CATCH_REC_NEXT</link>(peek, <link linkend="_catch_8h_1abbcff29ced4d413bc121f7b761558c16">CATCH_REC_LIST1_UD</link>) ) ( f, userdata, peek, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a8e404d42a6d0402698c1d4d16e831d28">CATCH_REC_LIST_UD</link>(f,  userdata, ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ae3ce5d9c8e50eba755111a19a62432e5">CATCH_RECURSE</link>(<link linkend="_catch_8h_1a0c2dd548d178fbc2202ecd74ce4be91b">CATCH_REC_LIST2_UD</link>(f, userdata, __VA_ARGS__, ()()(), ()()(), ()()(), 0))</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a060f5fa141c247b4d07dfe9bf3c54079">CATCH_REC_LIST</link>(f, ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ae3ce5d9c8e50eba755111a19a62432e5">CATCH_RECURSE</link>(<link linkend="_catch_8h_1abe3c205d4ba8406d45439abb91366ce9">CATCH_REC_LIST2</link>(f, __VA_ARGS__, ()()(), ()()(), ()()(), 0))</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1afec78f8054a97a6ecb38ff098f275efb">INTERNAL_CATCH_EXPAND1</link>(param)&#160;&#160;&#160;<link linkend="_catch_8h_1a163ac3d9bea0921d546f125ef5d58a2d">INTERNAL_CATCH_EXPAND2</link>(param)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a163ac3d9bea0921d546f125ef5d58a2d">INTERNAL_CATCH_EXPAND2</link>(...)&#160;&#160;&#160;INTERNAL_CATCH_NO## __VA_ARGS__</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a053610cf96d1be50463e9cb08e818ed1">INTERNAL_CATCH_DEF</link>(...)&#160;&#160;&#160;INTERNAL_CATCH_DEF __VA_ARGS__</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a6868a4eb7481605e628a3aaf0c1fbb01">INTERNAL_CATCH_NOINTERNAL_CATCH_DEF</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a13733e49e752d29b735e94d9e72c7d6b">INTERNAL_CATCH_STRINGIZE</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1a6fedc6934bac0e22dbbd13aabf81ad3f">INTERNAL_CATCH_STRINGIZE2</link>(__VA_ARGS__)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a6fedc6934bac0e22dbbd13aabf81ad3f">INTERNAL_CATCH_STRINGIZE2</link>(...)&#160;&#160;&#160;#__VA_ARGS__</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1aa66562537dd49bc33e53f9aa01acedaf">INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS</link>(param)&#160;&#160;&#160;<link linkend="_catch_8h_1a13733e49e752d29b735e94d9e72c7d6b">INTERNAL_CATCH_STRINGIZE</link>(<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(param))</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a5d544d56630e5c6e293d49a825127646">INTERNAL_CATCH_MAKE_NAMESPACE2</link>(...)&#160;&#160;&#160;ns_##__VA_ARGS__</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a6b5bf9be0310bb60ec9738cbf4ea53f4">INTERNAL_CATCH_MAKE_NAMESPACE</link>(name)&#160;&#160;&#160;<link linkend="_catch_8h_1a5d544d56630e5c6e293d49a825127646">INTERNAL_CATCH_MAKE_NAMESPACE2</link>(name)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1afec78f8054a97a6ecb38ff098f275efb">INTERNAL_CATCH_EXPAND1</link>(<link linkend="_catch_8h_1a053610cf96d1be50463e9cb08e818ed1">INTERNAL_CATCH_DEF</link> __VA_ARGS__)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ab0c28a0a25d0d138ca5f4049a1094227">INTERNAL_CATCH_MAKE_TYPE_LIST2</link>(...)&#160;&#160;&#160;decltype(get_wrapper&lt;<link linkend="_catch_8h_1ab71d7147401833586d6ef7c7db0cb463">INTERNAL_CATCH_REMOVE_PARENS_GEN</link>(__VA_ARGS__)&gt;())</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a74ceed46879d878afcd12648df097264">INTERNAL_CATCH_MAKE_TYPE_LIST</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1ab0c28a0a25d0d138ca5f4049a1094227">INTERNAL_CATCH_MAKE_TYPE_LIST2</link>(<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(__VA_ARGS__))</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a3125bdc64f326e6c65f60e3d0b917e0e">INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES</link>(...)&#160;&#160;&#160;    <link linkend="_catch_8h_1a060f5fa141c247b4d07dfe9bf3c54079">CATCH_REC_LIST</link>(<link linkend="_catch_8h_1a74ceed46879d878afcd12648df097264">INTERNAL_CATCH_MAKE_TYPE_LIST</link>,__VA_ARGS__)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1aaff4fdf9d9447a3e896ff3c940aa63bf">INTERNAL_CATCH_REMOVE_PARENS_1_ARG</link>(_0)&#160;&#160;&#160;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(_0)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ad922f8cb04e51fa4d1fc7136c2170ec7">INTERNAL_CATCH_REMOVE_PARENS_2_ARG</link>(_0,  _1)&#160;&#160;&#160;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(_0), <link linkend="_catch_8h_1aaff4fdf9d9447a3e896ff3c940aa63bf">INTERNAL_CATCH_REMOVE_PARENS_1_ARG</link>(_1)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a3e122b37a4a905554e927a298e96ba4e">INTERNAL_CATCH_REMOVE_PARENS_3_ARG</link>(_0,  _1,  _2)&#160;&#160;&#160;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(_0), <link linkend="_catch_8h_1ad922f8cb04e51fa4d1fc7136c2170ec7">INTERNAL_CATCH_REMOVE_PARENS_2_ARG</link>(_1, _2)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ad13badf823db63f70503f46977ff7664">INTERNAL_CATCH_REMOVE_PARENS_4_ARG</link>(_0,  _1,  _2,  _3)&#160;&#160;&#160;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(_0), <link linkend="_catch_8h_1a3e122b37a4a905554e927a298e96ba4e">INTERNAL_CATCH_REMOVE_PARENS_3_ARG</link>(_1, _2, _3)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a886c6ae574320d8aae6415985b19426c">INTERNAL_CATCH_REMOVE_PARENS_5_ARG</link>(_0,  _1,  _2,  _3,  _4)&#160;&#160;&#160;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(_0), <link linkend="_catch_8h_1ad13badf823db63f70503f46977ff7664">INTERNAL_CATCH_REMOVE_PARENS_4_ARG</link>(_1, _2, _3, _4)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a261dd3f6db0cd3199456d5be891bec22">INTERNAL_CATCH_REMOVE_PARENS_6_ARG</link>(_0,  _1,  _2,  _3,  _4,  _5)&#160;&#160;&#160;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(_0), <link linkend="_catch_8h_1a886c6ae574320d8aae6415985b19426c">INTERNAL_CATCH_REMOVE_PARENS_5_ARG</link>(_1, _2, _3, _4, _5)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a4ff89b8d8438fa571ccebd4611679cb0">INTERNAL_CATCH_REMOVE_PARENS_7_ARG</link>(_0,  _1,  _2,  _3,  _4,  _5,  _6)&#160;&#160;&#160;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(_0), <link linkend="_catch_8h_1a261dd3f6db0cd3199456d5be891bec22">INTERNAL_CATCH_REMOVE_PARENS_6_ARG</link>(_1, _2, _3, _4, _5, _6)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a2bc5383346d063d8aa13169a86101f8a">INTERNAL_CATCH_REMOVE_PARENS_8_ARG</link>(_0,  _1,  _2,  _3,  _4,  _5,  _6,  _7)&#160;&#160;&#160;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(_0), <link linkend="_catch_8h_1a4ff89b8d8438fa571ccebd4611679cb0">INTERNAL_CATCH_REMOVE_PARENS_7_ARG</link>(_1, _2, _3, _4, _5, _6, _7)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1aac325e60ff7ae083ea5378a57ad0853e">INTERNAL_CATCH_REMOVE_PARENS_9_ARG</link>(_0,  _1,  _2,  _3,  _4,  _5,  _6,  _7,  _8)&#160;&#160;&#160;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(_0), <link linkend="_catch_8h_1a2bc5383346d063d8aa13169a86101f8a">INTERNAL_CATCH_REMOVE_PARENS_8_ARG</link>(_1, _2, _3, _4, _5, _6, _7, _8)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ad456e4d0700058feab367df4dfdb034a">INTERNAL_CATCH_REMOVE_PARENS_10_ARG</link>(_0,  _1,  _2,  _3,  _4,  _5,  _6,  _7,  _8,  _9)&#160;&#160;&#160;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(_0), <link linkend="_catch_8h_1aac325e60ff7ae083ea5378a57ad0853e">INTERNAL_CATCH_REMOVE_PARENS_9_ARG</link>(_1, _2, _3, _4, _5, _6, _7, _8, _9)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1adda79d552d6615a64b064426fe5d8347">INTERNAL_CATCH_REMOVE_PARENS_11_ARG</link>(_0,  _1,  _2,  _3,  _4,  _5,  _6,  _7,  _8,  _9,  _10)&#160;&#160;&#160;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(_0), <link linkend="_catch_8h_1ad456e4d0700058feab367df4dfdb034a">INTERNAL_CATCH_REMOVE_PARENS_10_ARG</link>(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a053a90e2d222ba1c12095556aa8db44a">INTERNAL_CATCH_VA_NARGS_IMPL</link>(_0,  _1,  _2,  _3,  _4,  _5,  _6,  _7,  _8,  _9,  _10,  N, ...)&#160;&#160;&#160;N</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1aea71652955762dc6db3912ec66740b7a">INTERNAL_CATCH_TYPE_GEN</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ac74ba3aed32e3cfe16e9aaa7e5229fef">INTERNAL_CATCH_NTTP_1</link>(signature, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a4f7507c7b536901dbb97dea59df86078">INTERNAL_CATCH_DECLARE_SIG_TEST0</link>(TestName)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ae9b9c3b580df7d3aa3df12e31d07b228">INTERNAL_CATCH_DECLARE_SIG_TEST1</link>(TestName,  signature)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1aa74256b09ddc9f24b9d5e99e6b8cd7f5">INTERNAL_CATCH_DECLARE_SIG_TEST_X</link>(TestName,  signature, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a0687445db41b1402c3b63677f5fb855f">INTERNAL_CATCH_DEFINE_SIG_TEST0</link>(TestName)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a9d259f87ac04160887d8dc58f223298b">INTERNAL_CATCH_DEFINE_SIG_TEST1</link>(TestName,  signature)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a700005dc1f5d4d1c9b4977dfbcc39553">INTERNAL_CATCH_DEFINE_SIG_TEST_X</link>(TestName,  signature, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a46d03d475b2d70c812ae2fbb7c62e2e1">INTERNAL_CATCH_NTTP_REGISTER0</link>(TestFunc,  signature)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a3f4b5b59a0890d8f4b5ccde153f52b91">INTERNAL_CATCH_NTTP_REGISTER</link>(TestFunc,  signature, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a3ec09fcab86a0d09313b48d4e8275594">INTERNAL_CATCH_NTTP_REGISTER_METHOD0</link>(TestName,  signature, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a50f42674ac12901035ad2357a85e160f">INTERNAL_CATCH_NTTP_REGISTER_METHOD</link>(TestName,  signature, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a2101df7508291ca3898e52c34c40599b">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0</link>(TestName,  ClassName)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a4378072081595eeb217cfa656cbcbfad">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1</link>(TestName,  ClassName,  signature)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a3a61470086671485bf5f3d8139a8b379">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X</link>(TestName,  ClassName,  signature, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1aabc65a509a1d132b7a5fe6c4320c82fc">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0</link>(TestName)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ae0cccd56ac66f873543f3dede228dbe9">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1</link>(TestName,  signature)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a9c7bb282d50599e94b665ad7f9ffed31">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X</link>(TestName,  signature, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a6e4eddcee92aabb74a7fa182650307c3">INTERNAL_CATCH_NTTP_0</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a22d82768693e811fd08acca9c0e44726">INTERNAL_CATCH_NTTP_GEN</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1a053a90e2d222ba1c12095556aa8db44a">INTERNAL_CATCH_VA_NARGS_IMPL</link>(__VA_ARGS__, <link linkend="_catch_8h_1ac74ba3aed32e3cfe16e9aaa7e5229fef">INTERNAL_CATCH_NTTP_1</link>(__VA_ARGS__), <link linkend="_catch_8h_1ac74ba3aed32e3cfe16e9aaa7e5229fef">INTERNAL_CATCH_NTTP_1</link>(__VA_ARGS__), <link linkend="_catch_8h_1ac74ba3aed32e3cfe16e9aaa7e5229fef">INTERNAL_CATCH_NTTP_1</link>(__VA_ARGS__), <link linkend="_catch_8h_1ac74ba3aed32e3cfe16e9aaa7e5229fef">INTERNAL_CATCH_NTTP_1</link>(__VA_ARGS__), <link linkend="_catch_8h_1ac74ba3aed32e3cfe16e9aaa7e5229fef">INTERNAL_CATCH_NTTP_1</link>(__VA_ARGS__), <link linkend="_catch_8h_1ac74ba3aed32e3cfe16e9aaa7e5229fef">INTERNAL_CATCH_NTTP_1</link>( __VA_ARGS__), <link linkend="_catch_8h_1ac74ba3aed32e3cfe16e9aaa7e5229fef">INTERNAL_CATCH_NTTP_1</link>( __VA_ARGS__), <link linkend="_catch_8h_1ac74ba3aed32e3cfe16e9aaa7e5229fef">INTERNAL_CATCH_NTTP_1</link>( __VA_ARGS__), <link linkend="_catch_8h_1ac74ba3aed32e3cfe16e9aaa7e5229fef">INTERNAL_CATCH_NTTP_1</link>( __VA_ARGS__),<link linkend="_catch_8h_1ac74ba3aed32e3cfe16e9aaa7e5229fef">INTERNAL_CATCH_NTTP_1</link>( __VA_ARGS__), <link linkend="_catch_8h_1a6e4eddcee92aabb74a7fa182650307c3">INTERNAL_CATCH_NTTP_0</link>)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a871da5e60f2ec529a6df64220e9c0790">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD</link>(TestName, ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a053a90e2d222ba1c12095556aa8db44a">INTERNAL_CATCH_VA_NARGS_IMPL</link>( &quot;dummy&quot;, __VA_ARGS__, <link linkend="_catch_8h_1a9c7bb282d50599e94b665ad7f9ffed31">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X</link>,<link linkend="_catch_8h_1a9c7bb282d50599e94b665ad7f9ffed31">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1a9c7bb282d50599e94b665ad7f9ffed31">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1a9c7bb282d50599e94b665ad7f9ffed31">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1a9c7bb282d50599e94b665ad7f9ffed31">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1a9c7bb282d50599e94b665ad7f9ffed31">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1a9c7bb282d50599e94b665ad7f9ffed31">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X</link>,<link linkend="_catch_8h_1a9c7bb282d50599e94b665ad7f9ffed31">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X</link>,<link linkend="_catch_8h_1a9c7bb282d50599e94b665ad7f9ffed31">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1ae0cccd56ac66f873543f3dede228dbe9">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1</link>, <link linkend="_catch_8h_1aabc65a509a1d132b7a5fe6c4320c82fc">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0</link>)(TestName, __VA_ARGS__)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a3df212478ac0ede0c8a0fe9b8e186c8f">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD</link>(TestName,  ClassName, ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a053a90e2d222ba1c12095556aa8db44a">INTERNAL_CATCH_VA_NARGS_IMPL</link>( &quot;dummy&quot;, __VA_ARGS__, <link linkend="_catch_8h_1a3a61470086671485bf5f3d8139a8b379">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X</link>,<link linkend="_catch_8h_1a3a61470086671485bf5f3d8139a8b379">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1a3a61470086671485bf5f3d8139a8b379">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1a3a61470086671485bf5f3d8139a8b379">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1a3a61470086671485bf5f3d8139a8b379">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1a3a61470086671485bf5f3d8139a8b379">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1a3a61470086671485bf5f3d8139a8b379">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X</link>,<link linkend="_catch_8h_1a3a61470086671485bf5f3d8139a8b379">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X</link>,<link linkend="_catch_8h_1a3a61470086671485bf5f3d8139a8b379">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1a4378072081595eeb217cfa656cbcbfad">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1</link>, <link linkend="_catch_8h_1a2101df7508291ca3898e52c34c40599b">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0</link>)(TestName, ClassName, __VA_ARGS__)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a960369279996cfc00d2e1a913afd98e8">INTERNAL_CATCH_NTTP_REG_METHOD_GEN</link>(TestName, ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a053a90e2d222ba1c12095556aa8db44a">INTERNAL_CATCH_VA_NARGS_IMPL</link>( &quot;dummy&quot;, __VA_ARGS__, <link linkend="_catch_8h_1a50f42674ac12901035ad2357a85e160f">INTERNAL_CATCH_NTTP_REGISTER_METHOD</link>, <link linkend="_catch_8h_1a50f42674ac12901035ad2357a85e160f">INTERNAL_CATCH_NTTP_REGISTER_METHOD</link>, <link linkend="_catch_8h_1a50f42674ac12901035ad2357a85e160f">INTERNAL_CATCH_NTTP_REGISTER_METHOD</link>, <link linkend="_catch_8h_1a50f42674ac12901035ad2357a85e160f">INTERNAL_CATCH_NTTP_REGISTER_METHOD</link>, <link linkend="_catch_8h_1a50f42674ac12901035ad2357a85e160f">INTERNAL_CATCH_NTTP_REGISTER_METHOD</link>, <link linkend="_catch_8h_1a50f42674ac12901035ad2357a85e160f">INTERNAL_CATCH_NTTP_REGISTER_METHOD</link>, <link linkend="_catch_8h_1a50f42674ac12901035ad2357a85e160f">INTERNAL_CATCH_NTTP_REGISTER_METHOD</link>, <link linkend="_catch_8h_1a50f42674ac12901035ad2357a85e160f">INTERNAL_CATCH_NTTP_REGISTER_METHOD</link>, <link linkend="_catch_8h_1a50f42674ac12901035ad2357a85e160f">INTERNAL_CATCH_NTTP_REGISTER_METHOD</link>, <link linkend="_catch_8h_1a3ec09fcab86a0d09313b48d4e8275594">INTERNAL_CATCH_NTTP_REGISTER_METHOD0</link>, <link linkend="_catch_8h_1a3ec09fcab86a0d09313b48d4e8275594">INTERNAL_CATCH_NTTP_REGISTER_METHOD0</link>)(TestName, __VA_ARGS__)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a534515713c8464b85add867ec4166ecf">INTERNAL_CATCH_NTTP_REG_GEN</link>(TestFunc, ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a053a90e2d222ba1c12095556aa8db44a">INTERNAL_CATCH_VA_NARGS_IMPL</link>( &quot;dummy&quot;, __VA_ARGS__, <link linkend="_catch_8h_1a3f4b5b59a0890d8f4b5ccde153f52b91">INTERNAL_CATCH_NTTP_REGISTER</link>, <link linkend="_catch_8h_1a3f4b5b59a0890d8f4b5ccde153f52b91">INTERNAL_CATCH_NTTP_REGISTER</link>, <link linkend="_catch_8h_1a3f4b5b59a0890d8f4b5ccde153f52b91">INTERNAL_CATCH_NTTP_REGISTER</link>, <link linkend="_catch_8h_1a3f4b5b59a0890d8f4b5ccde153f52b91">INTERNAL_CATCH_NTTP_REGISTER</link>, <link linkend="_catch_8h_1a3f4b5b59a0890d8f4b5ccde153f52b91">INTERNAL_CATCH_NTTP_REGISTER</link>, <link linkend="_catch_8h_1a3f4b5b59a0890d8f4b5ccde153f52b91">INTERNAL_CATCH_NTTP_REGISTER</link>, <link linkend="_catch_8h_1a3f4b5b59a0890d8f4b5ccde153f52b91">INTERNAL_CATCH_NTTP_REGISTER</link>, <link linkend="_catch_8h_1a3f4b5b59a0890d8f4b5ccde153f52b91">INTERNAL_CATCH_NTTP_REGISTER</link>, <link linkend="_catch_8h_1a3f4b5b59a0890d8f4b5ccde153f52b91">INTERNAL_CATCH_NTTP_REGISTER</link>, <link linkend="_catch_8h_1a46d03d475b2d70c812ae2fbb7c62e2e1">INTERNAL_CATCH_NTTP_REGISTER0</link>, <link linkend="_catch_8h_1a46d03d475b2d70c812ae2fbb7c62e2e1">INTERNAL_CATCH_NTTP_REGISTER0</link>)(TestFunc, __VA_ARGS__)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a812cb39b5411a0f1a3ab2e91cb537f4c">INTERNAL_CATCH_DEFINE_SIG_TEST</link>(TestName, ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a053a90e2d222ba1c12095556aa8db44a">INTERNAL_CATCH_VA_NARGS_IMPL</link>( &quot;dummy&quot;, __VA_ARGS__, <link linkend="_catch_8h_1a700005dc1f5d4d1c9b4977dfbcc39553">INTERNAL_CATCH_DEFINE_SIG_TEST_X</link>, <link linkend="_catch_8h_1a700005dc1f5d4d1c9b4977dfbcc39553">INTERNAL_CATCH_DEFINE_SIG_TEST_X</link>, <link linkend="_catch_8h_1a700005dc1f5d4d1c9b4977dfbcc39553">INTERNAL_CATCH_DEFINE_SIG_TEST_X</link>, <link linkend="_catch_8h_1a700005dc1f5d4d1c9b4977dfbcc39553">INTERNAL_CATCH_DEFINE_SIG_TEST_X</link>, <link linkend="_catch_8h_1a700005dc1f5d4d1c9b4977dfbcc39553">INTERNAL_CATCH_DEFINE_SIG_TEST_X</link>, <link linkend="_catch_8h_1a700005dc1f5d4d1c9b4977dfbcc39553">INTERNAL_CATCH_DEFINE_SIG_TEST_X</link>, <link linkend="_catch_8h_1a700005dc1f5d4d1c9b4977dfbcc39553">INTERNAL_CATCH_DEFINE_SIG_TEST_X</link>, <link linkend="_catch_8h_1a700005dc1f5d4d1c9b4977dfbcc39553">INTERNAL_CATCH_DEFINE_SIG_TEST_X</link>,<link linkend="_catch_8h_1a700005dc1f5d4d1c9b4977dfbcc39553">INTERNAL_CATCH_DEFINE_SIG_TEST_X</link>,<link linkend="_catch_8h_1a9d259f87ac04160887d8dc58f223298b">INTERNAL_CATCH_DEFINE_SIG_TEST1</link>, <link linkend="_catch_8h_1a0687445db41b1402c3b63677f5fb855f">INTERNAL_CATCH_DEFINE_SIG_TEST0</link>)(TestName, __VA_ARGS__)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a00d8d21b6aeab72bf51f5b7d14afd201">INTERNAL_CATCH_DECLARE_SIG_TEST</link>(TestName, ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a053a90e2d222ba1c12095556aa8db44a">INTERNAL_CATCH_VA_NARGS_IMPL</link>( &quot;dummy&quot;, __VA_ARGS__, <link linkend="_catch_8h_1aa74256b09ddc9f24b9d5e99e6b8cd7f5">INTERNAL_CATCH_DECLARE_SIG_TEST_X</link>,<link linkend="_catch_8h_1aa74256b09ddc9f24b9d5e99e6b8cd7f5">INTERNAL_CATCH_DECLARE_SIG_TEST_X</link>, <link linkend="_catch_8h_1aa74256b09ddc9f24b9d5e99e6b8cd7f5">INTERNAL_CATCH_DECLARE_SIG_TEST_X</link>, <link linkend="_catch_8h_1aa74256b09ddc9f24b9d5e99e6b8cd7f5">INTERNAL_CATCH_DECLARE_SIG_TEST_X</link>, <link linkend="_catch_8h_1aa74256b09ddc9f24b9d5e99e6b8cd7f5">INTERNAL_CATCH_DECLARE_SIG_TEST_X</link>, <link linkend="_catch_8h_1aa74256b09ddc9f24b9d5e99e6b8cd7f5">INTERNAL_CATCH_DECLARE_SIG_TEST_X</link>, <link linkend="_catch_8h_1a700005dc1f5d4d1c9b4977dfbcc39553">INTERNAL_CATCH_DEFINE_SIG_TEST_X</link>,<link linkend="_catch_8h_1aa74256b09ddc9f24b9d5e99e6b8cd7f5">INTERNAL_CATCH_DECLARE_SIG_TEST_X</link>,<link linkend="_catch_8h_1aa74256b09ddc9f24b9d5e99e6b8cd7f5">INTERNAL_CATCH_DECLARE_SIG_TEST_X</link>, <link linkend="_catch_8h_1ae9b9c3b580df7d3aa3df12e31d07b228">INTERNAL_CATCH_DECLARE_SIG_TEST1</link>, <link linkend="_catch_8h_1a4f7507c7b536901dbb97dea59df86078">INTERNAL_CATCH_DECLARE_SIG_TEST0</link>)(TestName, __VA_ARGS__)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ab71d7147401833586d6ef7c7db0cb463">INTERNAL_CATCH_REMOVE_PARENS_GEN</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1a053a90e2d222ba1c12095556aa8db44a">INTERNAL_CATCH_VA_NARGS_IMPL</link>(__VA_ARGS__, <link linkend="_catch_8h_1adda79d552d6615a64b064426fe5d8347">INTERNAL_CATCH_REMOVE_PARENS_11_ARG</link>,<link linkend="_catch_8h_1ad456e4d0700058feab367df4dfdb034a">INTERNAL_CATCH_REMOVE_PARENS_10_ARG</link>,<link linkend="_catch_8h_1aac325e60ff7ae083ea5378a57ad0853e">INTERNAL_CATCH_REMOVE_PARENS_9_ARG</link>,<link linkend="_catch_8h_1a2bc5383346d063d8aa13169a86101f8a">INTERNAL_CATCH_REMOVE_PARENS_8_ARG</link>,<link linkend="_catch_8h_1a4ff89b8d8438fa571ccebd4611679cb0">INTERNAL_CATCH_REMOVE_PARENS_7_ARG</link>,<link linkend="_catch_8h_1a261dd3f6db0cd3199456d5be891bec22">INTERNAL_CATCH_REMOVE_PARENS_6_ARG</link>,<link linkend="_catch_8h_1a886c6ae574320d8aae6415985b19426c">INTERNAL_CATCH_REMOVE_PARENS_5_ARG</link>,<link linkend="_catch_8h_1ad13badf823db63f70503f46977ff7664">INTERNAL_CATCH_REMOVE_PARENS_4_ARG</link>,<link linkend="_catch_8h_1a3e122b37a4a905554e927a298e96ba4e">INTERNAL_CATCH_REMOVE_PARENS_3_ARG</link>,<link linkend="_catch_8h_1ad922f8cb04e51fa4d1fc7136c2170ec7">INTERNAL_CATCH_REMOVE_PARENS_2_ARG</link>,<link linkend="_catch_8h_1aaff4fdf9d9447a3e896ff3c940aa63bf">INTERNAL_CATCH_REMOVE_PARENS_1_ARG</link>)(__VA_ARGS__)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a33905c95a4d545efcf34abfbf790ad9c">INTERNAL_CATCH_TESTCASE2</link>(TestName, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a83f221452b6494c1eb0ae9bab79faa3c">INTERNAL_CATCH_TESTCASE</link>(...)&#160;&#160;&#160;        <link linkend="_catch_8h_1a33905c95a4d545efcf34abfbf790ad9c">INTERNAL_CATCH_TESTCASE2</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_S_T_ ), __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1af5bedfdbfc32cddf5287a77cf860f242">INTERNAL_CATCH_METHOD_AS_TEST_CASE</link>(QualifiedMethod, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a60e66c178de977271dd864ade805a250">INTERNAL_CATCH_TEST_CASE_METHOD2</link>(TestName,  ClassName, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a4755a44f041605a731180e1e19e72bee">INTERNAL_CATCH_TEST_CASE_METHOD</link>(ClassName, ...)&#160;&#160;&#160;        <link linkend="_catch_8h_1a60e66c178de977271dd864ade805a250">INTERNAL_CATCH_TEST_CASE_METHOD2</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_S_T_ ), ClassName, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ad7fc9293cc800a6f2fde7a0a211533c8">INTERNAL_CATCH_REGISTER_TESTCASE</link>(Function, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a7a9fab8f42ff86d3985c11b474efdaec">INTERNAL_CATCH_TEMPLATE_TEST_CASE_2</link>(TestName,  TestFunc,  Name,  Tags,  Signature, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a8190f00b563c3efb52f8057be41db45f">INTERNAL_CATCH_TEMPLATE_TEST_CASE</link>(Name,  Tags, ...)&#160;&#160;&#160;        <link linkend="_catch_8h_1a7a9fab8f42ff86d3985c11b474efdaec">INTERNAL_CATCH_TEMPLATE_TEST_CASE_2</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_ ), <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_ ), Name, Tags, typename TestType, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1acdd7766753f3768c537a9a0747dc15fc">INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG</link>(Name,  Tags,  Signature, ...)&#160;&#160;&#160;        <link linkend="_catch_8h_1a7a9fab8f42ff86d3985c11b474efdaec">INTERNAL_CATCH_TEMPLATE_TEST_CASE_2</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_ ), <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_ ), Name, Tags, Signature, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a52cf4aaf39fe85c5af878c432296a46d">INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2</link>(TestName,  TestFuncName,  Name,  Tags,  Signature,  TmplTypes,  TypesList)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1acd8f967bc841a9ab05774e8863cf9506">INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE</link>(Name,  Tags, ...)&#160;&#160;&#160;        <link linkend="_catch_8h_1a52cf4aaf39fe85c5af878c432296a46d">INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2</link>(<link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_ ), <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_ ), Name, Tags, typename T,__VA_ARGS__)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ab1e624e6e831f5f15df243f97bf7e962">INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG</link>(Name,  Tags,  Signature, ...)&#160;&#160;&#160;        <link linkend="_catch_8h_1a52cf4aaf39fe85c5af878c432296a46d">INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2</link>(<link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_ ), <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_ ), Name, Tags, Signature, __VA_ARGS__)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a1ddeb0664108fbef4c50e5dab4dbc567">INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2</link>(TestName,  TestFunc,  Name,  Tags,  TmplList)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ac9ef0e27a1dcfda5fe253f1767e2fab8">INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE</link>(Name,  Tags,  TmplList)&#160;&#160;&#160;        <link linkend="_catch_8h_1a1ddeb0664108fbef4c50e5dab4dbc567">INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_ ), <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_ ), Name, Tags, TmplList )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a8d7a6f4bac6e19a2d5ed5b35fd0a7efb">INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2</link>(TestNameClass,  TestName,  ClassName,  Name,  Tags,  Signature, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a582f90e5f7c36e9e69fff5f4c891ac29">INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD</link>(ClassName,  Name,  Tags, ...)&#160;&#160;&#160;        <link linkend="_catch_8h_1a8d7a6f4bac6e19a2d5ed5b35fd0a7efb">INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_C_L_A_S_S_ ), <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_ ) , ClassName, Name, Tags, typename T, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ab536a2ad12ea4a01b8037d0c953e1ddf">INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG</link>(ClassName,  Name,  Tags,  Signature, ...)&#160;&#160;&#160;        <link linkend="_catch_8h_1a8d7a6f4bac6e19a2d5ed5b35fd0a7efb">INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_C_L_A_S_S_ ), <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_ ) , ClassName, Name, Tags, Signature, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1aa50cacf2bbca5f9ddd2625403e649799">INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2</link>(TestNameClass,  TestName,  ClassName,  Name,  Tags,  Signature,  TmplTypes,  TypesList)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a1a4839fc44923f817dec5694f0bd1f33">INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD</link>(ClassName,  Name,  Tags, ...)&#160;&#160;&#160;        <link linkend="_catch_8h_1aa50cacf2bbca5f9ddd2625403e649799">INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_ ), <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_ ), ClassName, Name, Tags, typename T, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a09fd24fffbc23194f538de357e9714f7">INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG</link>(ClassName,  Name,  Tags,  Signature, ...)&#160;&#160;&#160;        <link linkend="_catch_8h_1aa50cacf2bbca5f9ddd2625403e649799">INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_ ), <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_ ), ClassName, Name, Tags, Signature, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a9f5b6affb41be524dcd4b28723ffcfc8">INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2</link>(TestNameClass,  TestName,  ClassName,  Name,  Tags,  TmplList)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a6e9c5f2b3bc07068ad3bd78d224989f3">INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD</link>(ClassName,  Name,  Tags,  TmplList)&#160;&#160;&#160;        <link linkend="_catch_8h_1a9f5b6affb41be524dcd4b28723ffcfc8">INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_ ), <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_ ), ClassName, Name, Tags, TmplList )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a1c3c601bf24488800bdf3f634a2a6b11">INTERNAL_CATCH_REGISTER_ENUM</link>(enumName, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a3063d7b316c984044916079ab8b7dad6">CATCH_REGISTER_ENUM</link>(enumName, ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a1c3c601bf24488800bdf3f634a2a6b11">INTERNAL_CATCH_REGISTER_ENUM</link>( enumName, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ab6dc42a98c8854e2e1d91874b1fe406c">CATCH_INTERNAL_STRINGIFY</link>(...)&#160;&#160;&#160;#__VA_ARGS__</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1af21395add3cdee3109e0a2e7c15a54bc">INTERNAL_CATCH_TRY</link></para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a3ef8d1213eac4fd0e2fdb4e13bdb8070">INTERNAL_CATCH_CATCH</link>(capturer)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a87986fec7b6b65bdae29cd2fa62bec20">INTERNAL_CATCH_REACT</link>(handler)&#160;&#160;&#160;handler.complete();</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ac3284f56c2f755d2b79fdb663cf9fb72">INTERNAL_CATCH_TEST</link>(macroName,  resultDisposition, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1abfd240b1bdcc699638464fb3c7131c1d">INTERNAL_CATCH_IF</link>(macroName,  resultDisposition, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1aaf2139c8903264bfe442e4b23b6673a9">INTERNAL_CATCH_ELSE</link>(macroName,  resultDisposition, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ac340cc35716115abaec4dfbcb061da52">INTERNAL_CATCH_NO_THROW</link>(macroName,  resultDisposition, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a2f3028d4fd4510f2f47ddd20626cccae">INTERNAL_CATCH_THROWS</link>(macroName,  resultDisposition, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a5e87b48ab40b7b128ae8428c14c25a91">INTERNAL_CATCH_THROWS_AS</link>(macroName,  exceptionType,  resultDisposition,  expr)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ad1f7d83040ad9b09020dc72c57019638">INTERNAL_CATCH_MSG</link>(macroName,  messageType,  resultDisposition, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ad8c51fdad7ab7e39414cd1bf90a3ce06">INTERNAL_CATCH_CAPTURE</link>(varName,  macroName, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ab0eb5cfab90a80f3113f0ecb65c62a1c">INTERNAL_CATCH_INFO</link>(macroName,  log)&#160;&#160;&#160;    <link linkend="_class_catch_1_1_scoped_message">Catch::ScopedMessage</link> <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( scopedMessage )( <link linkend="_struct_catch_1_1_message_builder">Catch::MessageBuilder</link>( macroName##_catch_sr, <link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>, <link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa30222063929ca1b6318faa78e8242f1c">Catch::ResultWas::Info</link> ) &lt;&lt; log );</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ab268c09b68167db4b163234f9934463f">INTERNAL_CATCH_UNSCOPED_INFO</link>(macroName,  log)&#160;&#160;&#160;    <link linkend="_namespace_catch_1af718eeab870712f292ed8dc6ee3f6488">Catch::getResultCapture</link>().emplaceUnscopedMessage( <link linkend="_struct_catch_1_1_message_builder">Catch::MessageBuilder</link>( macroName##_catch_sr, <link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>, <link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa30222063929ca1b6318faa78e8242f1c">Catch::ResultWas::Info</link> ) &lt;&lt; log )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a4296ab989dbc1f6c52c24d60012144d6">INTERNAL_CATCH_THROWS_STR_MATCHES</link>(macroName,  resultDisposition,  matcher, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a2969ec50cc661169e94b1b80ac799c07">INTERNAL_CATCH_SECTION</link>(...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1abe92a5063c83dec8143bf685e4b4a198">INTERNAL_CATCH_DYNAMIC_SECTION</link>(...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ab5314f401394dc4f7d1ac8b59370af09">INTERNAL_CATCH_TRANSLATE_EXCEPTION2</link>(translatorName,  signature)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a109d814750b0a695e2b66e9c53e748c0">INTERNAL_CATCH_TRANSLATE_EXCEPTION</link>(signature)&#160;&#160;&#160;<link linkend="_catch_8h_1ab5314f401394dc4f7d1ac8b59370af09">INTERNAL_CATCH_TRANSLATE_EXCEPTION2</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( catch_internal_ExceptionTranslator ), signature )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a877690adc04f1fbfe944df6bebe6f8b5">INTERNAL_CHECK_THAT</link>(macroName,  matcher,  resultDisposition,  arg)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ace8fc7b74db8a1b2916554ad64e5b036">INTERNAL_CATCH_THROWS_MATCHES</link>(macroName,  exceptionType,  resultDisposition,  matcher, ...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a8e47cad0b28262f193e489df151fed27">CATCH_MAKE_MSG</link>(...)&#160;&#160;&#160;    (<link linkend="_class_catch_1_1_reusable_string_stream">Catch::ReusableStringStream</link>() &lt;&lt; __VA_ARGS__).str()</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1af445c1e136fadba0e92f3c22d68a7641">CATCH_INTERNAL_ERROR</link>(...)&#160;&#160;&#160;    <link linkend="_namespace_catch_1a707884e681203fef6bf7dbf752532fa5">Catch::throw_logic_error</link>(<link linkend="_catch_8h_1a8e47cad0b28262f193e489df151fed27">CATCH_MAKE_MSG</link>( <link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link> &lt;&lt; &quot;: Internal Catch2 error: &quot; &lt;&lt; __VA_ARGS__))</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ad9884641eb178d2628cf3ad19c394f47">CATCH_ERROR</link>(...)&#160;&#160;&#160;    <link linkend="_namespace_catch_1ae67297c3e265b0fcd55de371bf408e4e">Catch::throw_domain_error</link>(<link linkend="_catch_8h_1a8e47cad0b28262f193e489df151fed27">CATCH_MAKE_MSG</link>( __VA_ARGS__ ))</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a834a24a39cf448d5a0f812e716be1c76">CATCH_RUNTIME_ERROR</link>(...)&#160;&#160;&#160;    <link linkend="_namespace_catch_1a48d2c35022dd9d56a1b7ee78ad581eea">Catch::throw_runtime_error</link>(<link linkend="_catch_8h_1a8e47cad0b28262f193e489df151fed27">CATCH_MAKE_MSG</link>( __VA_ARGS__ ))</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1aba552c917b9ac8604f50a914a745e974">CATCH_ENFORCE</link>(condition, ...)&#160;&#160;&#160;    do{ if( !(condition) ) <link linkend="_catch_8h_1ad9884641eb178d2628cf3ad19c394f47">CATCH_ERROR</link>( __VA_ARGS__ ); } while(false)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a4941c6427cfa36ee7c52d734e460f9df">GENERATE</link>(...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a44e2fff00253a218f0a392ad6abac624">GENERATE_COPY</link>(...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1aebcb76dcf5cbbbd3dca153a21d6f78fe">GENERATE_REF</link>(...)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1ac3284f56c2f755d2b79fdb663cf9fb72">INTERNAL_CATCH_TEST</link>( &quot;REQUIRE&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8af3bd52347ed6f8796e8ce2f77bb39ea5">Catch::ResultDisposition::Normal</link>, __VA_ARGS__  )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ada5065594bafc152162761ace47c1dcb">REQUIRE_FALSE</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1ac3284f56c2f755d2b79fdb663cf9fb72">INTERNAL_CATCH_TEST</link>( &quot;REQUIRE_FALSE&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8af3bd52347ed6f8796e8ce2f77bb39ea5">Catch::ResultDisposition::Normal</link> | <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8a9980604245f19884691f941dec03eeb8">Catch::ResultDisposition::FalseTest</link>, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ae3c33faa1d31a2bb0811dac74b994e3e">REQUIRE_THROWS</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1a2f3028d4fd4510f2f47ddd20626cccae">INTERNAL_CATCH_THROWS</link>( &quot;REQUIRE_THROWS&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8af3bd52347ed6f8796e8ce2f77bb39ea5">Catch::ResultDisposition::Normal</link>, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ae24a059e3c28ff3eea69be48282f5f81">REQUIRE_THROWS_AS</link>(expr,  exceptionType)&#160;&#160;&#160;<link linkend="_catch_8h_1a5e87b48ab40b7b128ae8428c14c25a91">INTERNAL_CATCH_THROWS_AS</link>( &quot;REQUIRE_THROWS_AS&quot;, exceptionType, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8af3bd52347ed6f8796e8ce2f77bb39ea5">Catch::ResultDisposition::Normal</link>, expr )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1aa39a017db507132071d2819f087b2f28">REQUIRE_THROWS_WITH</link>(expr,  matcher)&#160;&#160;&#160;<link linkend="_catch_8h_1a4296ab989dbc1f6c52c24d60012144d6">INTERNAL_CATCH_THROWS_STR_MATCHES</link>( &quot;REQUIRE_THROWS_WITH&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8af3bd52347ed6f8796e8ce2f77bb39ea5">Catch::ResultDisposition::Normal</link>, matcher, expr )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a54473a48ac2ac55bfe1165b69e1b8010">REQUIRE_THROWS_MATCHES</link>(expr,  exceptionType,  matcher)&#160;&#160;&#160;<link linkend="_catch_8h_1ace8fc7b74db8a1b2916554ad64e5b036">INTERNAL_CATCH_THROWS_MATCHES</link>( &quot;REQUIRE_THROWS_MATCHES&quot;, exceptionType, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8af3bd52347ed6f8796e8ce2f77bb39ea5">Catch::ResultDisposition::Normal</link>, matcher, expr )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ab0148f0dfca438f7aa01974e9c33216a">REQUIRE_NOTHROW</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1ac340cc35716115abaec4dfbcb061da52">INTERNAL_CATCH_NO_THROW</link>( &quot;REQUIRE_NOTHROW&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8af3bd52347ed6f8796e8ce2f77bb39ea5">Catch::ResultDisposition::Normal</link>, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a836cca6b6ed3a1706353f6d1bca0935f">CHECK</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1ac3284f56c2f755d2b79fdb663cf9fb72">INTERNAL_CATCH_TEST</link>( &quot;CHECK&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a7bf095d8512cb180f8ff3a2258a6eaac">CHECK_FALSE</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1ac3284f56c2f755d2b79fdb663cf9fb72">INTERNAL_CATCH_TEST</link>( &quot;CHECK_FALSE&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link> | <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8a9980604245f19884691f941dec03eeb8">Catch::ResultDisposition::FalseTest</link>, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a354466c7b989ec55784c02d74013263c">CHECKED_IF</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1abfd240b1bdcc699638464fb3c7131c1d">INTERNAL_CATCH_IF</link>( &quot;CHECKED_IF&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a5fa42bb950a65e22eac778c86b27d832">CHECKED_ELSE</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1aaf2139c8903264bfe442e4b23b6673a9">INTERNAL_CATCH_ELSE</link>( &quot;CHECKED_ELSE&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a13c6feaf82c3c419104c50dbb8caa3ef">CHECK_NOFAIL</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1ac3284f56c2f755d2b79fdb663cf9fb72">INTERNAL_CATCH_TEST</link>( &quot;CHECK_NOFAIL&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link> | <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8a1a88eb6004bddee4ccae4b421991bf54">Catch::ResultDisposition::SuppressFail</link>, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a5c646dfe831e596b59073014c1c8b9e5">CHECK_THROWS</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1a2f3028d4fd4510f2f47ddd20626cccae">INTERNAL_CATCH_THROWS</link>( &quot;CHECK_THROWS&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a1fb6439098d2a12bb69188034e03baf2">CHECK_THROWS_AS</link>(expr,  exceptionType)&#160;&#160;&#160;<link linkend="_catch_8h_1a5e87b48ab40b7b128ae8428c14c25a91">INTERNAL_CATCH_THROWS_AS</link>( &quot;CHECK_THROWS_AS&quot;, exceptionType, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, expr )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a4903733490f526b58053836575e99066">CHECK_THROWS_WITH</link>(expr,  matcher)&#160;&#160;&#160;<link linkend="_catch_8h_1a4296ab989dbc1f6c52c24d60012144d6">INTERNAL_CATCH_THROWS_STR_MATCHES</link>( &quot;CHECK_THROWS_WITH&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, matcher, expr )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a74fcc14d39e8cc35ff39f69c5b60e375">CHECK_THROWS_MATCHES</link>(expr,  exceptionType,  matcher)&#160;&#160;&#160;<link linkend="_catch_8h_1ace8fc7b74db8a1b2916554ad64e5b036">INTERNAL_CATCH_THROWS_MATCHES</link>( &quot;CHECK_THROWS_MATCHES&quot;, exceptionType, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, matcher, expr )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a78e70f011f20c4ade1d1ac2b8fd33626">CHECK_NOTHROW</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1ac340cc35716115abaec4dfbcb061da52">INTERNAL_CATCH_NO_THROW</link>( &quot;CHECK_NOTHROW&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a5b8c33c63e0804d4458e2c761370b75d">CHECK_THAT</link>(arg,  matcher)&#160;&#160;&#160;<link linkend="_catch_8h_1a877690adc04f1fbfe944df6bebe6f8b5">INTERNAL_CHECK_THAT</link>( &quot;CHECK_THAT&quot;, matcher, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, arg )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ac1354db6f3e9c1e0a8eda0eea7ff1f0a">REQUIRE_THAT</link>(arg,  matcher)&#160;&#160;&#160;<link linkend="_catch_8h_1a877690adc04f1fbfe944df6bebe6f8b5">INTERNAL_CHECK_THAT</link>( &quot;REQUIRE_THAT&quot;, matcher, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8af3bd52347ed6f8796e8ce2f77bb39ea5">Catch::ResultDisposition::Normal</link>, arg )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a3ae64706314066fdc8b6c8029a915aa7">INFO</link>(msg)&#160;&#160;&#160;<link linkend="_catch_8h_1ab0eb5cfab90a80f3113f0ecb65c62a1c">INTERNAL_CATCH_INFO</link>( &quot;INFO&quot;, msg )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a8dd723bbdb751f1c2f3af8c4f264b7a3">UNSCOPED_INFO</link>(msg)&#160;&#160;&#160;<link linkend="_catch_8h_1ab268c09b68167db4b163234f9934463f">INTERNAL_CATCH_UNSCOPED_INFO</link>( &quot;UNSCOPED_INFO&quot;, msg )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a108d6c5c51dd46e82a62b262394f0242">WARN</link>(msg)&#160;&#160;&#160;<link linkend="_catch_8h_1ad1f7d83040ad9b09020dc72c57019638">INTERNAL_CATCH_MSG</link>( &quot;WARN&quot;, <link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa67e9d36ba0f04a60a19896834d840c21">Catch::ResultWas::Warning</link>, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, msg )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1aaf9fe43c53965ff8d94bbd522fd1fd7a">CAPTURE</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1ad8c51fdad7ab7e39414cd1bf90a3ce06">INTERNAL_CATCH_CAPTURE</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>(capturer), &quot;CAPTURE&quot;,__VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1abd6e2aec703006b3da62cf7860c9808f">TEST_CASE</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1a83f221452b6494c1eb0ae9bab79faa3c">INTERNAL_CATCH_TESTCASE</link>( __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1adf06142f54a9e271590fa0e270bc41d2">TEST_CASE_METHOD</link>(className, ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a4755a44f041605a731180e1e19e72bee">INTERNAL_CATCH_TEST_CASE_METHOD</link>( className, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1add790b4107e8b013f21b0272be7bcc76">METHOD_AS_TEST_CASE</link>(method, ...)&#160;&#160;&#160;<link linkend="_catch_8h_1af5bedfdbfc32cddf5287a77cf860f242">INTERNAL_CATCH_METHOD_AS_TEST_CASE</link>( method, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a784b9192db328b4f21186f9b26e4146e">REGISTER_TEST_CASE</link>(Function, ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ad7fc9293cc800a6f2fde7a0a211533c8">INTERNAL_CATCH_REGISTER_TESTCASE</link>( Function, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ad512fd95a78b95770b9759823f8fbc21">SECTION</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1a2969ec50cc661169e94b1b80ac799c07">INTERNAL_CATCH_SECTION</link>( __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1aa1caa37b980555de35faefa9191b5128">DYNAMIC_SECTION</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1abe92a5063c83dec8143bf685e4b4a198">INTERNAL_CATCH_DYNAMIC_SECTION</link>( __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ac8d1eaf65528f86b445cf6e45b2d72c9">FAIL</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1ad1f7d83040ad9b09020dc72c57019638">INTERNAL_CATCH_MSG</link>( &quot;FAIL&quot;, <link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efacecfc052e2499499b13304249303cc36">Catch::ResultWas::ExplicitFailure</link>, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8af3bd52347ed6f8796e8ce2f77bb39ea5">Catch::ResultDisposition::Normal</link>, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a3c2341a3238242fdc02d33a1968bd1d2">FAIL_CHECK</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1ad1f7d83040ad9b09020dc72c57019638">INTERNAL_CATCH_MSG</link>( &quot;FAIL_CHECK&quot;, <link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efacecfc052e2499499b13304249303cc36">Catch::ResultWas::ExplicitFailure</link>, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a8e852a9421caf4fda4e1903d9f02bcf5">SUCCEED</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1ad1f7d83040ad9b09020dc72c57019638">INTERNAL_CATCH_MSG</link>( &quot;SUCCEED&quot;, <link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efae7cbe89bb9ec7ece9b44d48b63d01b63">Catch::ResultWas::Ok</link>, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ab41cb63be394c30d48fa579bf8352f18">ANON_TEST_CASE</link>()&#160;&#160;&#160;<link linkend="_catch_8h_1a83f221452b6494c1eb0ae9bab79faa3c">INTERNAL_CATCH_TESTCASE</link>()</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a9a88d21bfca0d58782cc5f0811801303">TEMPLATE_TEST_CASE</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1a8190f00b563c3efb52f8057be41db45f">INTERNAL_CATCH_TEMPLATE_TEST_CASE</link>( __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a4286bffddeb38a4e793ef35b7555f474">TEMPLATE_TEST_CASE_SIG</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1acdd7766753f3768c537a9a0747dc15fc">INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG</link>( __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a5922ee8a997f9f6c5016b186f148b73b">TEMPLATE_TEST_CASE_METHOD</link>(className, ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a582f90e5f7c36e9e69fff5f4c891ac29">INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD</link>( className, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a7b7cfca8f5e204e872ec31dc186957ac">TEMPLATE_TEST_CASE_METHOD_SIG</link>(className, ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ab536a2ad12ea4a01b8037d0c953e1ddf">INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG</link>( className, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a76578a19e481e4ccdb928e68a17478d5">TEMPLATE_PRODUCT_TEST_CASE</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1acd8f967bc841a9ab05774e8863cf9506">INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE</link>( __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a52bd728f9409ff8fc6a24d49282a1994">TEMPLATE_PRODUCT_TEST_CASE_SIG</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1ab1e624e6e831f5f15df243f97bf7e962">INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG</link>( __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a15aefc2b8f75059606bebf400a348870">TEMPLATE_PRODUCT_TEST_CASE_METHOD</link>(className, ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a1a4839fc44923f817dec5694f0bd1f33">INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD</link>( className, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1af9e44fff2a2bdba1d66ee625e8ed126d">TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG</link>(className, ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a09fd24fffbc23194f538de357e9714f7">INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG</link>( className, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a6c5f7165be1abd8331be1a47a446f20a">TEMPLATE_LIST_TEST_CASE</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1ac9ef0e27a1dcfda5fe253f1767e2fab8">INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE</link>(__VA_ARGS__)</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a00cdc7c1452d76b386c3b85f9cce80c0">TEMPLATE_LIST_TEST_CASE_METHOD</link>(className, ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a6e9c5f2b3bc07068ad3bd78d224989f3">INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD</link>( className, __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1abad9ff23b730469f209b010e0ac4687c">STATIC_REQUIRE</link>(...)&#160;&#160;&#160;static_assert(   __VA_ARGS__,  #__VA_ARGS__ ); <link linkend="_catch_8h_1a8e852a9421caf4fda4e1903d9f02bcf5">SUCCEED</link>( #__VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ae7506af68f12e7efdb22e951b911b5a0">STATIC_REQUIRE_FALSE</link>(...)&#160;&#160;&#160;static_assert( !(__VA_ARGS__), &quot;!(&quot; #__VA_ARGS__ &quot;)&quot; ); <link linkend="_catch_8h_1a8e852a9421caf4fda4e1903d9f02bcf5">SUCCEED</link>( &quot;!(&quot; #__VA_ARGS__ &quot;)&quot; )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a094602ff56422c96e501eaaef1ef8c12">CATCH_TRANSLATE_EXCEPTION</link>(signature)&#160;&#160;&#160;<link linkend="_catch_8h_1a109d814750b0a695e2b66e9c53e748c0">INTERNAL_CATCH_TRANSLATE_EXCEPTION</link>( signature )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1acf8f441c7b9d70251ccbb7ccd8b83183">SCENARIO</link>(...)&#160;&#160;&#160;<link linkend="_catch_8h_1abd6e2aec703006b3da62cf7860c9808f">TEST_CASE</link>( &quot;Scenario: &quot; __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1add17eb8f8d85412a08a8a048cd38f33b">SCENARIO_METHOD</link>(className, ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a4755a44f041605a731180e1e19e72bee">INTERNAL_CATCH_TEST_CASE_METHOD</link>( className, &quot;Scenario: &quot; __VA_ARGS__ )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a2b70c603786d759242856d883dbe93bd">GIVEN</link>(desc)&#160;&#160;&#160;<link linkend="_catch_8h_1abe92a5063c83dec8143bf685e4b4a198">INTERNAL_CATCH_DYNAMIC_SECTION</link>( &quot;    Given: &quot; &lt;&lt; desc )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a89dcfbe509f3f81fd865d4acd1632b66">AND_GIVEN</link>(desc)&#160;&#160;&#160;<link linkend="_catch_8h_1abe92a5063c83dec8143bf685e4b4a198">INTERNAL_CATCH_DYNAMIC_SECTION</link>( &quot;And given: &quot; &lt;&lt; desc )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1ab09e9b8186233f676ce6a23aebe89d6e">WHEN</link>(desc)&#160;&#160;&#160;<link linkend="_catch_8h_1abe92a5063c83dec8143bf685e4b4a198">INTERNAL_CATCH_DYNAMIC_SECTION</link>( &quot;     When: &quot; &lt;&lt; desc )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a054a37584492a5dfbdb5ee0f2fc10b7a">AND_WHEN</link>(desc)&#160;&#160;&#160;<link linkend="_catch_8h_1abe92a5063c83dec8143bf685e4b4a198">INTERNAL_CATCH_DYNAMIC_SECTION</link>( &quot; And when: &quot; &lt;&lt; desc )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1a27987092139727fd7a471b5f74dc62de">THEN</link>(desc)&#160;&#160;&#160;<link linkend="_catch_8h_1abe92a5063c83dec8143bf685e4b4a198">INTERNAL_CATCH_DYNAMIC_SECTION</link>( &quot;     Then: &quot; &lt;&lt; desc )</para>
</listitem>
            <listitem><para>#define <link linkend="_catch_8h_1aafdc2a6cfbcecedec25e64bcbd6c09c6">AND_THEN</link>(desc)&#160;&#160;&#160;<link linkend="_catch_8h_1abe92a5063c83dec8143bf685e4b4a198">INTERNAL_CATCH_DYNAMIC_SECTION</link>( &quot;      And: &quot; &lt;&lt; desc )</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">Func</link> , typename... U&gt; </para><para><link linkend="_struct_catch_1_1true__given">using</link> <link linkend="_namespace_catch_1a9670af24a66c8f5cbe9d69b92b1c4383">Catch::FunctionReturnType</link> = <link linkend="_struct_catch_1_1true__given">typename</link> std::remove_reference&lt;<link linkend="_struct_catch_1_1true__given">typename</link> std::remove_cv&lt;<link linkend="_struct_catch_1_1true__given">typename</link> std::result_of&lt;<link linkend="_struct_catch_1_1true__given">Func</link>(U...)&gt;::type&gt;::type&gt;::type</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">using</link> <link linkend="_namespace_catch_1a4e6617700df10519be17cc0e62ab427e">Catch::IReporterFactoryPtr</link> = std::shared_ptr&lt;<link linkend="_struct_catch_1_1true__given">IReporterFactory</link>&gt;</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">using</link> <link linkend="_namespace_catch_1a7f2ab9adc3729f9c197f43e5cfcd4b40">Catch::exceptionTranslateFunction</link> = std::string(*)()</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">using</link> <link linkend="_namespace_catch_1a49b7a6b4679e1b57f1646f0ebda713b6">Catch::ExceptionTranslators</link> = std::vector&lt;std::unique_ptr&lt;<link linkend="_struct_catch_1_1_i_exception_translator">IExceptionTranslator</link> <link linkend="_struct_catch_1_1true__given">const</link>&gt;&gt;</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">using</link> <link linkend="_namespace_catch_1a6c439c538de1e945919d96fb986b42eb">Catch::StringMatcher</link> = <link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">Matchers::Impl::MatcherBase</link>&lt;std::string&gt;</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">using</link> <link linkend="_namespace_catch_1_1_generators_1a9578dfa233a0ab3fb14f58203161b6b8">Catch::Generators::GeneratorBasePtr</link> = std::unique_ptr&lt;<link linkend="_class_catch_1_1_generators_1_1_generator_untyped_base">GeneratorUntypedBase</link>&gt;</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">using</link> <link linkend="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6">Catch::IConfigPtr</link> = std::shared_ptr&lt;<link linkend="_struct_catch_1_1_i_config">IConfig</link> <link linkend="_struct_catch_1_1true__given">const</link>&gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum class <link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737">Catch::Verbosity</link> { <link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737a098753f8980036f4b936e3d4b6997111">Catch::Quiet</link> = 0
, <link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737a960b44c579bc2f6818d2daaf9e4c16f0">Catch::Normal</link>
, <link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737a655d20c1ca69519ca647684edbb2db35">Catch::High</link>
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct_catch_1_1true__given">unsigned</link> <link linkend="_struct_catch_1_1true__given">int</link> <link linkend="_namespace_catch_1acf5ea05e942d2d7fe79111e12754ed76">Catch::rngSeed</link> ()</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_catch_8h_1aae0cdd5d2f0ac242b9ab18b0f66ba26e">operator&lt;&lt;</link> (std::ostream &amp;, <link linkend="_struct_catch__global__namespace__dummy">Catch_global_namespace_dummy</link>)</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespace_catch_1a8c8ea1f66bc1cdc3e1254ed7fa57c06d">Catch::operator&lt;&lt;</link> (std::ostream &amp;<link linkend="_struct_catch_1_1true__given">os</link>, <link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">info</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">T</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; <link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">Catch::operator+</link> (<link linkend="_struct_catch_1_1true__given">T</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;value, <link linkend="_struct_catch_1_1_stream_end_stop">StreamEndStop</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1af3e820574c7a0b38d71328c5bd54b0e0">Catch::isThrowSafe</link> (<link linkend="_class_catch_1_1_test_case">TestCase</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">testCase</link>, <link linkend="_struct_catch_1_1_i_config">IConfig</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">config</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1aadef80fbc6bc84589777a462770cef49">Catch::matchTest</link> (<link linkend="_class_catch_1_1_test_case">TestCase</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">testCase</link>, <link linkend="_struct_catch_1_1true__given">TestSpec</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;testSpec, <link linkend="_struct_catch_1_1_i_config">IConfig</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">config</link>)</para>
</listitem>
            <listitem><para>std::vector&lt; <link linkend="_class_catch_1_1_test_case">TestCase</link> &gt; <link linkend="_namespace_catch_1a105d5acdec8a6b401e12a592557c9dd1">Catch::filterTests</link> (std::vector&lt; <link linkend="_class_catch_1_1_test_case">TestCase</link> &gt; <link linkend="_struct_catch_1_1true__given">const</link> &amp;testCases, <link linkend="_struct_catch_1_1true__given">TestSpec</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;testSpec, <link linkend="_struct_catch_1_1_i_config">IConfig</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">config</link>)</para>
</listitem>
            <listitem><para>std::vector&lt; <link linkend="_class_catch_1_1_test_case">TestCase</link> &gt; <link linkend="_struct_catch_1_1true__given">const</link> &amp; <link linkend="_namespace_catch_1a97039bab95e97f059410f67425f1f2da">Catch::getAllTestCasesSorted</link> (<link linkend="_struct_catch_1_1_i_config">IConfig</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">config</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">Catch::operator+=</link> (std::string &amp;<link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">sr</link>) -&gt; std::string &amp;</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1a5e37b333d756a28e12d44977f063af43">Catch::operator&lt;&lt;</link> (std::ostream &amp;<link linkend="_struct_catch_1_1true__given">os</link>, <link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">sr</link>) -&gt; std::ostream &amp;</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">constexpr</link> <link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1adc1e84abf2d7a8b971948ec4ab373280">Catch::operator&quot;&quot;_sr</link> (<link linkend="_struct_catch_1_1true__given">char</link> <link linkend="_struct_catch_1_1true__given">const</link> *<link linkend="_struct_catch_1_1true__given">rawChars</link>, std::size_t size) <link linkend="_struct_catch_1_1true__given">noexcept</link> -&gt; <link linkend="_class_catch_1_1_string_ref">StringRef</link></para>
</listitem>
            <listitem><para>constexpr auto <link linkend="_catch_8h_1ad678c2afffe520362e3bb7d51f0e8f8d">operator&quot;&quot;_catch_sr</link> (char const *rawChars, std::size_t size) noexcept -&gt; <link linkend="_class_catch_1_1_string_ref">Catch::StringRef</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1ab3d8ccbc900fe50322c39ecbba52f536">Catch::makeTestInvoker</link> (<link linkend="_struct_catch_1_1true__given">void</link>(*<link linkend="_struct_catch_1_1true__given">testAsFunction</link>)()) <link linkend="_struct_catch_1_1true__given">noexcept</link> -&gt; <link linkend="_struct_catch_1_1_i_test_invoker">ITestInvoker</link> *</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">C</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1a82a954c4d70afa716115820dc7dc8d24">Catch::makeTestInvoker</link> (<link linkend="_struct_catch_1_1true__given">void</link>(C::*<link linkend="_struct_catch_1_1true__given">testAsMethod</link>)()) <link linkend="_struct_catch_1_1true__given">noexcept</link> -&gt; <link linkend="_struct_catch_1_1_i_test_invoker">ITestInvoker</link> *</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1a5205869c81c06d3460759cb86676ae68">Catch::isOk</link> (<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link> <link linkend="_struct_catch_1_1true__given">resultType</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1a54b01af61673a3e1f21f31713639b180">Catch::isJustInfo</link> (<link linkend="_struct_catch_1_1true__given">int</link> <link linkend="_struct_catch_1_1true__given">flags</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8">ResultDisposition::Flags</link> <link linkend="_namespace_catch_1ab32a083e442cc09f736327d2e2865999">Catch::operator|</link> (<link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8">ResultDisposition::Flags</link> <link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8">ResultDisposition::Flags</link> <link linkend="_struct_catch_1_1true__given">rhs</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1a7f7480b15d74965459c844f0d393ed87">Catch::shouldContinueOnFailure</link> (<link linkend="_struct_catch_1_1true__given">int</link> <link linkend="_struct_catch_1_1true__given">flags</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1a93ef4e3e307a2021ca0d41b32c0e54b0">Catch::isFalseTest</link> (<link linkend="_struct_catch_1_1true__given">int</link> <link linkend="_struct_catch_1_1true__given">flags</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1ab91eb13081203d634fe48d3d2ab386d7">Catch::shouldSuppressFailure</link> (<link linkend="_struct_catch_1_1true__given">int</link> <link linkend="_struct_catch_1_1true__given">flags</link>)</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link> ()</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespace_catch_1a54c1ce08041448d684ae8edc14162cd2">Catch::cerr</link> ()</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespace_catch_1a1b2213f54e4d31a659db49827e81856b">Catch::clog</link> ()</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1af6d27462573d60c30c51acf1c980e3ff">Catch::makeStream</link> (<link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">filename</link>) -&gt; <link linkend="_struct_catch_1_1_i_stream">IStream</link> <link linkend="_struct_catch_1_1true__given">const</link> *</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespace_catch_1_1_detail_1ac5d6c510e565ee5bddcc2236194ce29e">Catch::Detail::rawMemoryToString</link> (<link linkend="_struct_catch_1_1true__given">const</link> <link linkend="_struct_catch_1_1true__given">void</link> *<link linkend="_struct_catch_1_1true__given">object</link>, std::size_t size)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para>std::string <link linkend="_namespace_catch_1_1_detail_1a371620ed524abfcae5c3772bf49b563a">Catch::Detail::rawMemoryToString</link> (<link linkend="_struct_catch_1_1true__given">const</link> <link linkend="_struct_catch_1_1true__given">T</link> &amp;<link linkend="_struct_catch_1_1true__given">object</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">E</link> &gt; </para><para>std::string <link linkend="_namespace_catch_1_1_detail_1a242396de537c5176710d680cc9ca6b93">Catch::Detail::convertUnknownEnumToString</link> (<link linkend="_struct_catch_1_1true__given">E</link> <link linkend="_struct_catch_1_1true__given">e</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para>std::enable_if&lt;!std::is_enum&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt;::value &amp;&amp;!std::is_base_of&lt; std::exception, <link linkend="_struct_catch_1_1true__given">T</link> &gt;::value, std::string &gt;::type <link linkend="_namespace_catch_1_1_detail_1aa4fbd846029625d08378606ffe9ebc3b">Catch::Detail::convertUnstreamable</link> (<link linkend="_struct_catch_1_1true__given">T</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para>std::enable_if&lt;!std::is_enum&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt;::value &amp;&amp;std::is_base_of&lt; std::exception, <link linkend="_struct_catch_1_1true__given">T</link> &gt;::value, std::string &gt;::type <link linkend="_namespace_catch_1_1_detail_1a669969ab020f5a314d6fa97749a99f56">Catch::Detail::convertUnstreamable</link> (<link linkend="_struct_catch_1_1true__given">T</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">ex</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para>std::enable_if&lt; std::is_enum&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt;::value, std::string &gt;::type <link linkend="_namespace_catch_1_1_detail_1af5310e4687d8c000e7911b91164756e6">Catch::Detail::convertUnstreamable</link> (<link linkend="_struct_catch_1_1true__given">T</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;value)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para>std::string <link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">Catch::Detail::stringify</link> (<link linkend="_struct_catch_1_1true__given">const</link> <link linkend="_struct_catch_1_1true__given">T</link> &amp;<link linkend="_struct_catch_1_1true__given">e</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">InputIterator</link> , <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">Sentinel</link>  = InputIterator&gt; </para><para>std::string <link linkend="_namespace_catch_1_1_detail_1ac954cf158347a76a5b0c3f4fa9a9fa52">Catch::Detail::rangeToString</link> (<link linkend="_struct_catch_1_1true__given">InputIterator</link> <link linkend="_struct_catch_1_1true__given">first</link>, <link linkend="_struct_catch_1_1true__given">Sentinel</link> <link linkend="_struct_catch_1_1true__given">last</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">Range</link> &gt; </para><para>std::string <link linkend="_namespace_catch_1af13494e925a793e3e7143c6ce6f442c2">Catch::rangeToString</link> (<link linkend="_struct_catch_1_1true__given">Range</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;range)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">Allocator</link> &gt; </para><para>std::string <link linkend="_namespace_catch_1ae162dc66b7767a52e7e4283915fd3d9f">Catch::rangeToString</link> (std::vector&lt; <link linkend="_struct_catch_1_1true__given">bool</link>, <link linkend="_struct_catch_1_1true__given">Allocator</link> &gt; <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">v</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1a520110c31f26cf9892595772ab814fc0">Catch::formatReconstructedExpression</link> (std::ostream &amp;<link linkend="_struct_catch_1_1true__given">os</link>, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">op</link>, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">rhs</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">LhsT</link> , <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1af89b8df30cfaf09abd048c6ff67359ee">Catch::compareEqual</link> (<link linkend="_struct_catch_1_1true__given">LhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1a68f451c45e65f242dde5f21c19a4cf7a">Catch::compareEqual</link> (<link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_struct_catch_1_1true__given">int</link> <link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1afca4a005e1053c542462dc7a603b41b3">Catch::compareEqual</link> (<link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_struct_catch_1_1true__given">long</link> <link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1a6af99378569fc6f68270b6af669f1c3b">Catch::compareEqual</link> (<link linkend="_struct_catch_1_1true__given">int</link> <link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1a72f10ec2cad6db16029d48c8c1d9df2f">Catch::compareEqual</link> (<link linkend="_struct_catch_1_1true__given">long</link> <link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">LhsT</link> , <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1a8bec217f5ef5f09c17074c311c958f3c">Catch::compareNotEqual</link> (<link linkend="_struct_catch_1_1true__given">LhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> &amp;&amp;<link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1aa81c95898f22dce1f61d7710e495d1ee">Catch::compareNotEqual</link> (<link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_struct_catch_1_1true__given">int</link> <link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1adad6539b3780b9a8953221efd038e2e4">Catch::compareNotEqual</link> (<link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_struct_catch_1_1true__given">long</link> <link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1adb4b3e912b89a987025ca28cf0c92ba8">Catch::compareNotEqual</link> (<link linkend="_struct_catch_1_1true__given">int</link> <link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1a3db634a0adf44a1148767ba149ccf34d">Catch::compareNotEqual</link> (<link linkend="_struct_catch_1_1true__given">long</link> <link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1a65af25091f2ab61056e166765963e525">Catch::handleExpression</link> (<link linkend="_struct_catch_1_1_i_transient_expression">ITransientExpression</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">expr</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1af2c93db76668a981e75ae835699efce7">Catch::handleExpression</link> (<link linkend="_class_catch_1_1_expr_lhs">ExprLhs</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt; <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">expr</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_i_result_capture">IResultCapture</link> &amp; <link linkend="_namespace_catch_1af718eeab870712f292ed8dc6ee3f6488">Catch::getResultCapture</link> ()</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1aea6f8ff3b3838829d4a61694e4bc41ca">Catch::handleExceptionMatchExpr</link> (<link linkend="_class_catch_1_1_assertion_handler">AssertionHandler</link> &amp;<link linkend="_struct_catch_1_1true__given">handler</link>, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;str, <link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">matcherString</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1a98d058468488c486a9cb5c8463f3ba29">Catch::getCurrentNanosecondsSinceEpoch</link> () -&gt; <link linkend="_struct_catch_1_1true__given">uint64_t</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1ac8e1ed37624bd0d97b2c0d4ec099d31f">Catch::getEstimatedClockResolution</link> () -&gt; <link linkend="_struct_catch_1_1true__given">uint64_t</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_i_registry_hub">IRegistryHub</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; <link linkend="_namespace_catch_1a5d328566cb8da87b48f1fac3f319ac7a">Catch::getRegistryHub</link> ()</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_i_mutable_registry_hub">IMutableRegistryHub</link> &amp; <link linkend="_namespace_catch_1a585459763f2c7610e57de2dd22dd1ad8">Catch::getMutableRegistryHub</link> ()</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1a0f78e9afdebc6d4512d18e76fbf54b8c">Catch::cleanUp</link> ()</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespace_catch_1adafff91485eeeeb9e9333f317cc0e3b1">Catch::translateActiveException</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_catch_1_1_detail_1_1_approx">Detail::Approx</link> <link linkend="_namespace_catch_1_1literals_1aed9bf4d544c60a074440a055a54ea6c3">Catch::literals::operator&quot;&quot;_a</link> (<link linkend="_struct_catch_1_1true__given">long</link> <link linkend="_struct_catch_1_1true__given">double</link> <link linkend="_struct_catch_1_1true__given">val</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_catch_1_1_detail_1_1_approx">Detail::Approx</link> <link linkend="_namespace_catch_1_1literals_1aded81112b3a271a8b9538dff17acd093">Catch::literals::operator&quot;&quot;_a</link> (<link linkend="_struct_catch_1_1true__given">unsigned</link> <link linkend="_struct_catch_1_1true__given">long</link> <link linkend="_struct_catch_1_1true__given">long</link> <link linkend="_struct_catch_1_1true__given">val</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1a695f62327be0676e046291eeaae15110">Catch::startsWith</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">s</link>, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">prefix</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1acad23751846ac23d0f379e34f5adebb1">Catch::startsWith</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">s</link>, <link linkend="_struct_catch_1_1true__given">char</link> <link linkend="_struct_catch_1_1true__given">prefix</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1ada025504f627feaf9ac68ca391515dff">Catch::endsWith</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">s</link>, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">suffix</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1afd801a3e33fd7a8b91ded0d02747a93f">Catch::endsWith</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">s</link>, <link linkend="_struct_catch_1_1true__given">char</link> <link linkend="_struct_catch_1_1true__given">suffix</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1aa52974b0e426e7e2fbd725a900e9c36e">Catch::contains</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">s</link>, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">infix</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1a0760dbe87d090a55a35414db57d272c4">Catch::toLowerInPlace</link> (std::string &amp;<link linkend="_struct_catch_1_1true__given">s</link>)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespace_catch_1ac036a17412d318598ffda8e1fe7a1177">Catch::toLower</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">s</link>)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespace_catch_1a084108b47f37d8bfd5db51c50c7451b3">Catch::trim</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;str)</para>

<para>Returns a new string without whitespace at the start/end. </para>
</listitem>
            <listitem><para><link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_namespace_catch_1a6f6d8ef0349688290bd242b50a702c28">Catch::trim</link> (<link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">ref</link>)</para>

<para>Returns a substring of the original ref without whitespace. Beware lifetimes! </para>
</listitem>
            <listitem><para>std::vector&lt; <link linkend="_class_catch_1_1_string_ref">StringRef</link> &gt; <link linkend="_namespace_catch_1a678e3c779388970bb3ec5802245f93d7">Catch::splitStringRef</link> (<link linkend="_class_catch_1_1_string_ref">StringRef</link> str, <link linkend="_struct_catch_1_1true__given">char</link> <link linkend="_struct_catch_1_1true__given">delimiter</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1afe4e6770da547e43e9e4eeaa05f946ea">Catch::replaceInPlace</link> (std::string &amp;str, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">replaceThis</link>, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">withThis</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_catch_1_1_matchers_1_1_exception_1_1_exception_message_matcher">Exception::ExceptionMessageMatcher</link> <link linkend="_namespace_catch_1_1_matchers_1a0fcd8bd126bb510a6bb99e6360aa270a">Catch::Matchers::Message</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;message)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_ulps_matcher">Floating::WithinUlpsMatcher</link> <link linkend="_namespace_catch_1_1_matchers_1ae77e233c3ed735ea12b7c726153798d1">Catch::Matchers::WithinULP</link> (<link linkend="_struct_catch_1_1true__given">double</link> <link linkend="_struct_catch_1_1true__given">target</link>, <link linkend="_struct_catch_1_1true__given">uint64_t</link> <link linkend="_struct_catch_1_1true__given">maxUlpDiff</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_ulps_matcher">Floating::WithinUlpsMatcher</link> <link linkend="_namespace_catch_1_1_matchers_1a5d108ff6aaeac40f20f4978dfb3f51fc">Catch::Matchers::WithinULP</link> (<link linkend="_struct_catch_1_1true__given">float</link> <link linkend="_struct_catch_1_1true__given">target</link>, <link linkend="_struct_catch_1_1true__given">uint64_t</link> <link linkend="_struct_catch_1_1true__given">maxUlpDiff</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_abs_matcher">Floating::WithinAbsMatcher</link> <link linkend="_namespace_catch_1_1_matchers_1a4c9ea76d47d02de0cf2d354c87c26e95">Catch::Matchers::WithinAbs</link> (<link linkend="_struct_catch_1_1true__given">double</link> <link linkend="_struct_catch_1_1true__given">target</link>, <link linkend="_struct_catch_1_1true__given">double</link> margin)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_rel_matcher">Floating::WithinRelMatcher</link> <link linkend="_namespace_catch_1_1_matchers_1a0c559d9cfda02a81941ad6933f4ca450">Catch::Matchers::WithinRel</link> (<link linkend="_struct_catch_1_1true__given">double</link> <link linkend="_struct_catch_1_1true__given">target</link>, <link linkend="_struct_catch_1_1true__given">double</link> <link linkend="_struct_catch_1_1true__given">eps</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_rel_matcher">Floating::WithinRelMatcher</link> <link linkend="_namespace_catch_1_1_matchers_1a46e2f1efab13b85e2cbe36958a27d518">Catch::Matchers::WithinRel</link> (<link linkend="_struct_catch_1_1true__given">double</link> <link linkend="_struct_catch_1_1true__given">target</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_rel_matcher">Floating::WithinRelMatcher</link> <link linkend="_namespace_catch_1_1_matchers_1a494b4c8c68ac883e29dc35da71a4cd72">Catch::Matchers::WithinRel</link> (<link linkend="_struct_catch_1_1true__given">float</link> <link linkend="_struct_catch_1_1true__given">target</link>, <link linkend="_struct_catch_1_1true__given">float</link> <link linkend="_struct_catch_1_1true__given">eps</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_rel_matcher">Floating::WithinRelMatcher</link> <link linkend="_namespace_catch_1_1_matchers_1a18cfb571dd191377674bad0cbb50078e">Catch::Matchers::WithinRel</link> (<link linkend="_struct_catch_1_1true__given">float</link> <link linkend="_struct_catch_1_1true__given">target</link>)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespace_catch_1_1_matchers_1_1_generic_1_1_detail_1a79ef1103073f7a8d31735436d2012835">Catch::Matchers::Generic::Detail::finalizeDescription</link> (<link linkend="_struct_catch_1_1true__given">const</link> std::string &amp;<link linkend="_struct_catch_1_1true__given">desc</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_class_catch_1_1_matchers_1_1_generic_1_1_predicate_matcher">Generic::PredicateMatcher</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt; <link linkend="_namespace_catch_1_1_matchers_1a70a7c65c44f6ea7f739402c0b6f28657">Catch::Matchers::Predicate</link> (std::function&lt; <link linkend="_struct_catch_1_1true__given">bool</link>(<link linkend="_struct_catch_1_1true__given">T</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;)&gt; <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">predicate</link>, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;description=&quot;&quot;)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_equals_matcher">StdString::EqualsMatcher</link> <link linkend="_namespace_catch_1_1_matchers_1af8af7dfc338335ed4c788cb1b37fc59f">Catch::Matchers::Equals</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;str, <link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6a">CaseSensitive::Choice</link> <link linkend="_struct_catch_1_1true__given">caseSensitivity</link>=<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6aa7c5550b69ec3c502e6f609b67f9613c6">CaseSensitive::Yes</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_contains_matcher">StdString::ContainsMatcher</link> <link linkend="_namespace_catch_1_1_matchers_1a1f6c2accdc6cd75a84d7112dcad647b4">Catch::Matchers::Contains</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;str, <link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6a">CaseSensitive::Choice</link> <link linkend="_struct_catch_1_1true__given">caseSensitivity</link>=<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6aa7c5550b69ec3c502e6f609b67f9613c6">CaseSensitive::Yes</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_ends_with_matcher">StdString::EndsWithMatcher</link> <link linkend="_namespace_catch_1_1_matchers_1ae5a45efb4538c57c43e04f3f9043ad6e">Catch::Matchers::EndsWith</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;str, <link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6a">CaseSensitive::Choice</link> <link linkend="_struct_catch_1_1true__given">caseSensitivity</link>=<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6aa7c5550b69ec3c502e6f609b67f9613c6">CaseSensitive::Yes</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_starts_with_matcher">StdString::StartsWithMatcher</link> <link linkend="_namespace_catch_1_1_matchers_1a97c9ee09a70378ca7e8c6f9f01b0d6d1">Catch::Matchers::StartsWith</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;str, <link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6a">CaseSensitive::Choice</link> <link linkend="_struct_catch_1_1true__given">caseSensitivity</link>=<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6aa7c5550b69ec3c502e6f609b67f9613c6">CaseSensitive::Yes</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_regex_matcher">StdString::RegexMatcher</link> <link linkend="_namespace_catch_1_1_matchers_1a82f1893cf50ae4c14b9b3e0980bf22b8">Catch::Matchers::Matches</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">regex</link>, <link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6a">CaseSensitive::Choice</link> <link linkend="_struct_catch_1_1true__given">caseSensitivity</link>=<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6aa7c5550b69ec3c502e6f609b67f9613c6">CaseSensitive::Yes</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> , <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">AllocComp</link>  = std::allocator&lt;T&gt;, <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">AllocMatch</link>  = AllocComp&gt; </para><para><link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_contains_matcher">Vector::ContainsMatcher</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link>, <link linkend="_struct_catch_1_1true__given">AllocComp</link>, <link linkend="_struct_catch_1_1true__given">AllocMatch</link> &gt; <link linkend="_namespace_catch_1_1_matchers_1a0eacc3d8729e9a1dcf76387ec60195ce">Catch::Matchers::Contains</link> (std::vector&lt; <link linkend="_struct_catch_1_1true__given">T</link>, <link linkend="_struct_catch_1_1true__given">AllocComp</link> &gt; <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">comparator</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> , <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">Alloc</link>  = std::allocator&lt;T&gt;&gt; </para><para><link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_contains_element_matcher">Vector::ContainsElementMatcher</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link>, <link linkend="_struct_catch_1_1true__given">Alloc</link> &gt; <link linkend="_namespace_catch_1_1_matchers_1ad8092d8b34128390dbff20b87f2f6f99">Catch::Matchers::VectorContains</link> (<link linkend="_struct_catch_1_1true__given">T</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">comparator</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> , <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">AllocComp</link>  = std::allocator&lt;T&gt;, <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">AllocMatch</link>  = AllocComp&gt; </para><para><link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_equals_matcher">Vector::EqualsMatcher</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link>, <link linkend="_struct_catch_1_1true__given">AllocComp</link>, <link linkend="_struct_catch_1_1true__given">AllocMatch</link> &gt; <link linkend="_namespace_catch_1_1_matchers_1a5b76944eeb2b65329fabbac487a31d66">Catch::Matchers::Equals</link> (std::vector&lt; <link linkend="_struct_catch_1_1true__given">T</link>, <link linkend="_struct_catch_1_1true__given">AllocComp</link> &gt; <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">comparator</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> , <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">AllocComp</link>  = std::allocator&lt;T&gt;, <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">AllocMatch</link>  = AllocComp&gt; </para><para><link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher">Vector::ApproxMatcher</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link>, <link linkend="_struct_catch_1_1true__given">AllocComp</link>, <link linkend="_struct_catch_1_1true__given">AllocMatch</link> &gt; <link linkend="_namespace_catch_1_1_matchers_1a02bf172177011d09780a98635dc5a124">Catch::Matchers::Approx</link> (std::vector&lt; <link linkend="_struct_catch_1_1true__given">T</link>, <link linkend="_struct_catch_1_1true__given">AllocComp</link> &gt; <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">comparator</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> , <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">AllocComp</link>  = std::allocator&lt;T&gt;, <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">AllocMatch</link>  = AllocComp&gt; </para><para><link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_unordered_equals_matcher">Vector::UnorderedEqualsMatcher</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link>, <link linkend="_struct_catch_1_1true__given">AllocComp</link>, <link linkend="_struct_catch_1_1true__given">AllocMatch</link> &gt; <link linkend="_namespace_catch_1_1_matchers_1a3b1784cd26bd7e3fea38505eb138b186">Catch::Matchers::UnorderedEquals</link> (std::vector&lt; <link linkend="_struct_catch_1_1true__given">T</link>, <link linkend="_struct_catch_1_1true__given">AllocComp</link> &gt; <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">target</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1a3a96a82307107087642e22fc4be5844d">Catch::handleExceptionMatchExpr</link> (<link linkend="_class_catch_1_1_assertion_handler">AssertionHandler</link> &amp;<link linkend="_struct_catch_1_1true__given">handler</link>, <link linkend="_namespace_catch_1a6c439c538de1e945919d96fb986b42eb">StringMatcher</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">matcher</link>, <link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">matcherString</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">ArgT</link> , <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">MatcherT</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1a23a9a9a6dfef7ecd5e0eaf553fc52de6">Catch::makeMatchExpr</link> (<link linkend="_struct_catch_1_1true__given">ArgT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">arg</link>, <link linkend="_struct_catch_1_1true__given">MatcherT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">matcher</link>, <link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">matcherString</link>) -&gt; <link linkend="_class_catch_1_1_match_expr">MatchExpr</link>&lt; <link linkend="_struct_catch_1_1true__given">ArgT</link>, <link linkend="_struct_catch_1_1true__given">MatcherT</link> &gt;</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1a3cbceeab9252d1b752f66a2826e92548">Catch::throw_exception</link> (std::exception <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">e</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1a707884e681203fef6bf7dbf752532fa5">Catch::throw_logic_error</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">msg</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1ae67297c3e265b0fcd55de371bf408e4e">Catch::throw_domain_error</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">msg</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1a48d2c35022dd9d56a1b7ee78ad581eea">Catch::throw_runtime_error</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">msg</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> , typename... Args&gt; </para><para>std::unique_ptr&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt; <link linkend="_namespace_catch_1_1_generators_1_1pf_1a015e8fcef2972da878a07023e40d46d8">Catch::Generators::pf::make_unique</link> (<link linkend="_struct_catch_1_1true__given">Args</link> &amp;&amp;... <link linkend="_struct_catch_1_1true__given">args</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">GeneratorWrapper</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt; <link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">Catch::Generators::value</link> (<link linkend="_struct_catch_1_1true__given">T</link> &amp;&amp;value)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">GeneratorWrapper</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt; <link linkend="_namespace_catch_1_1_generators_1aff55717239311a0e8352a4de5d29967f">Catch::Generators::values</link> (std::initializer_list&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt; values)</para>
</listitem>
            <listitem><para>template&lt;typename... Ts&gt; </para><para><link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">GeneratorWrapper</link>&lt; std::tuple&lt; Ts... &gt; &gt; <link linkend="_namespace_catch_1_1_generators_1ae980a8b181bc56242a73161a05b312ee">Catch::Generators::table</link> (std::initializer_list&lt; std::tuple&lt; <link linkend="_struct_catch_1_1true__given">typename</link> std::decay&lt; <link linkend="_struct_catch_1_1true__given">Ts</link> &gt;::type... &gt; &gt; <link linkend="_struct_catch_1_1true__given">tuples</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> , typename... Gs&gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1_1_generators_1a7cc95d72b060e2819b2edbbdbf8c646b">Catch::Generators::makeGenerators</link> (<link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">GeneratorWrapper</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt; &amp;&amp;<link linkend="_struct_catch_1_1true__given">generator</link>, <link linkend="_struct_catch_1_1true__given">Gs</link> &amp;&amp;... <link linkend="_struct_catch_1_1true__given">moreGenerators</link>) -&gt; <link linkend="_class_catch_1_1_generators_1_1_generators">Generators</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1_1_generators_1abefb1a0fab3c669b98a53037b3286d22">Catch::Generators::makeGenerators</link> (<link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">GeneratorWrapper</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt; &amp;&amp;<link linkend="_struct_catch_1_1true__given">generator</link>) -&gt; <link linkend="_class_catch_1_1_generators_1_1_generators">Generators</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> , typename... Gs&gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1_1_generators_1ab22ab581e83e71530d8bbd1c14f94abc">Catch::Generators::makeGenerators</link> (<link linkend="_struct_catch_1_1true__given">T</link> &amp;&amp;<link linkend="_struct_catch_1_1true__given">val</link>, <link linkend="_struct_catch_1_1true__given">Gs</link> &amp;&amp;... <link linkend="_struct_catch_1_1true__given">moreGenerators</link>) -&gt; <link linkend="_class_catch_1_1_generators_1_1_generators">Generators</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> , <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">U</link> , typename... Gs&gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1_1_generators_1aac8c5682b95d3467b013de492f21e7e2">Catch::Generators::makeGenerators</link> (<link linkend="_struct_catch_1_1_generators_1_1as">as</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt;, <link linkend="_struct_catch_1_1true__given">U</link> &amp;&amp;<link linkend="_struct_catch_1_1true__given">val</link>, <link linkend="_struct_catch_1_1true__given">Gs</link> &amp;&amp;... <link linkend="_struct_catch_1_1true__given">moreGenerators</link>) -&gt; <link linkend="_class_catch_1_1_generators_1_1_generators">Generators</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt;</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1_1_generators_1ac1fe3550c5f97370fc6729e04d7571b8">Catch::Generators::acquireGeneratorTracker</link> (<link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">generatorName</link>, <link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;lineInfo) -&gt; <link linkend="_struct_catch_1_1_i_generator_tracker">IGeneratorTracker</link> &amp;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">L</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1_1_generators_1a3b0ab1f589b1d1e0e92afcd12cf4ab12">Catch::Generators::generate</link> (<link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">generatorName</link>, <link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;lineInfo, <link linkend="_struct_catch_1_1true__given">L</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">generatorExpression</link>) -&gt; <link linkend="_struct_catch_1_1true__given">decltype</link>(std::declval&lt; <link linkend="_struct_catch_1_1true__given">decltype</link>(<link linkend="_struct_catch_1_1true__given">generatorExpression</link>())&gt;().get())</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">GeneratorWrapper</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt; <link linkend="_namespace_catch_1_1_generators_1adedfdb318219078ce9107690745d2f2f">Catch::Generators::take</link> (<link linkend="_struct_catch_1_1true__given">size_t</link> <link linkend="_struct_catch_1_1true__given">target</link>, <link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">GeneratorWrapper</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt; &amp;&amp;<link linkend="_struct_catch_1_1true__given">generator</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> , <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_namespace_catch_1_1_matchers_1a70a7c65c44f6ea7f739402c0b6f28657">Predicate</link> &gt; </para><para><link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">GeneratorWrapper</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt; <link linkend="_namespace_catch_1_1_generators_1a4df89be8072a9685ee89b6776a54bb93">Catch::Generators::filter</link> (<link linkend="_namespace_catch_1_1_matchers_1a70a7c65c44f6ea7f739402c0b6f28657">Predicate</link> &amp;&amp;<link linkend="_struct_catch_1_1true__given">pred</link>, <link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">GeneratorWrapper</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt; &amp;&amp;<link linkend="_struct_catch_1_1true__given">generator</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">GeneratorWrapper</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt; <link linkend="_namespace_catch_1_1_generators_1a510cc0d72a7bab8f967827e695b981ba">Catch::Generators::repeat</link> (<link linkend="_struct_catch_1_1true__given">size_t</link> <link linkend="_struct_catch_1_1true__given">repeats</link>, <link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">GeneratorWrapper</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt; &amp;&amp;<link linkend="_struct_catch_1_1true__given">generator</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">Func</link> , <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">U</link> , <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link>  = FunctionReturnType&lt;Func, U&gt;&gt; </para><para><link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">GeneratorWrapper</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt; <link linkend="_namespace_catch_1_1_generators_1af33fd06c51ac9173c3bee2ddee2559a6">Catch::Generators::map</link> (<link linkend="_struct_catch_1_1true__given">Func</link> &amp;&amp;<link linkend="_struct_catch_1_1true__given">function</link>, <link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">GeneratorWrapper</link>&lt; <link linkend="_struct_catch_1_1true__given">U</link> &gt; &amp;&amp;<link linkend="_struct_catch_1_1true__given">generator</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">GeneratorWrapper</link>&lt; std::vector&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt; &gt; <link linkend="_namespace_catch_1_1_generators_1acb4654b4e840e438e3bc204ac4d8e157">Catch::Generators::chunk</link> (<link linkend="_struct_catch_1_1true__given">size_t</link> size, <link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">GeneratorWrapper</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt; &amp;&amp;<link linkend="_struct_catch_1_1true__given">generator</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_i_mutable_context">IMutableContext</link> &amp; <link linkend="_namespace_catch_1a710841d4732b86c06f816bd4822bd425">Catch::getCurrentMutableContext</link> ()</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_i_context">IContext</link> &amp; <link linkend="_namespace_catch_1a228a625318bb6183842e394eeba17d50">Catch::getCurrentContext</link> ()</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1ae50508f10ffc4ed873a31a4db4caea16">Catch::cleanUpContext</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_catch_1_1_simple_pcg32">SimplePcg32</link> &amp; <link linkend="_namespace_catch_1a66ea553511cbbc59d99e1720d8da514e">Catch::rng</link> ()</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para>std::enable_if&lt; std::is_integral&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">::value</link> &amp;&amp;!std::is_same&lt; <link linkend="_struct_catch_1_1true__given">T</link>, <link linkend="_struct_catch_1_1true__given">bool</link> &gt;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">::value</link>, <link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">GeneratorWrapper</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt; &gt;::type <link linkend="_namespace_catch_1_1_generators_1a079a48b510a5f171707e87f351328e52">Catch::Generators::random</link> (<link linkend="_struct_catch_1_1true__given">T</link> <link linkend="_struct_catch_1_1true__given">a</link>, <link linkend="_struct_catch_1_1true__given">T</link> <link linkend="_struct_catch_1_1true__given">b</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para>std::enable_if&lt; std::is_floating_point&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">::value</link>, <link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">GeneratorWrapper</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt; &gt;::type <link linkend="_namespace_catch_1_1_generators_1a4dd41578e2ccba6d255d7f850ef211bf">Catch::Generators::random</link> (<link linkend="_struct_catch_1_1true__given">T</link> <link linkend="_struct_catch_1_1true__given">a</link>, <link linkend="_struct_catch_1_1true__given">T</link> <link linkend="_struct_catch_1_1true__given">b</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">GeneratorWrapper</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt; <link linkend="_namespace_catch_1_1_generators_1a6e53e65dfedc4d39febcb7b2b862afd9">Catch::Generators::range</link> (<link linkend="_struct_catch_1_1true__given">T</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;start, <link linkend="_struct_catch_1_1true__given">T</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;end, <link linkend="_struct_catch_1_1true__given">T</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">step</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">GeneratorWrapper</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt; <link linkend="_namespace_catch_1_1_generators_1a758d34927bfde268b60ea6b7dc4be6bd">Catch::Generators::range</link> (<link linkend="_struct_catch_1_1true__given">T</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;start, <link linkend="_struct_catch_1_1true__given">T</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;end)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">InputIterator</link> , <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">InputSentinel</link> , <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">ResultType</link>  = typename std::iterator_traits&lt;InputIterator&gt;::value_type&gt; </para><para><link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">GeneratorWrapper</link>&lt; <link linkend="_struct_catch_1_1true__given">ResultType</link> &gt; <link linkend="_namespace_catch_1_1_generators_1a62a768a07d44903a0691ec620d4f72c4">Catch::Generators::from_range</link> (<link linkend="_struct_catch_1_1true__given">InputIterator</link> <link linkend="_struct_catch_1_1true__given">from</link>, <link linkend="_struct_catch_1_1true__given">InputSentinel</link> <link linkend="_struct_catch_1_1true__given">to</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">Container</link> , <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">ResultType</link>  = typename Container::value_type&gt; </para><para><link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">GeneratorWrapper</link>&lt; <link linkend="_struct_catch_1_1true__given">ResultType</link> &gt; <link linkend="_namespace_catch_1_1_generators_1a68e6a1dcf08dbd4c4aa3244e59dfc0f4">Catch::Generators::from_range</link> (<link linkend="_struct_catch_1_1true__given">Container</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">cnt</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_catch_1_1_test_case">TestCase</link> <link linkend="_namespace_catch_1a5e63df38d06a43d4cee17454e724b5c0">Catch::makeTestCase</link> (<link linkend="_struct_catch_1_1_i_test_invoker">ITestInvoker</link> *<link linkend="_struct_catch_1_1true__given">testCase</link>, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;className, <link linkend="_struct_catch_1_1_name_and_tags">NameAndTags</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">nameAndTags</link>, <link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;lineInfo)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct_catch_1_1true__given">const</link> std::string <link linkend="_namespace_catch_1_1_detail_1a466775f4eec29ffef29ab334cd885136">Catch::Detail::unprintableString</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_catch_8h_1a89dcfbe509f3f81fd865d4acd1632b66"/><section>
    <title>AND_GIVEN</title>
<indexterm><primary>AND_GIVEN</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>AND_GIVEN</secondary></indexterm>
<para><computeroutput>#define AND_GIVEN( desc)&#160;&#160;&#160;<link linkend="_catch_8h_1abe92a5063c83dec8143bf685e4b4a198">INTERNAL_CATCH_DYNAMIC_SECTION</link>( &quot;And given: &quot; &lt;&lt; desc )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1aafdc2a6cfbcecedec25e64bcbd6c09c6"/><section>
    <title>AND_THEN</title>
<indexterm><primary>AND_THEN</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>AND_THEN</secondary></indexterm>
<para><computeroutput>#define AND_THEN( desc)&#160;&#160;&#160;<link linkend="_catch_8h_1abe92a5063c83dec8143bf685e4b4a198">INTERNAL_CATCH_DYNAMIC_SECTION</link>( &quot;      And: &quot; &lt;&lt; desc )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a054a37584492a5dfbdb5ee0f2fc10b7a"/><section>
    <title>AND_WHEN</title>
<indexterm><primary>AND_WHEN</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>AND_WHEN</secondary></indexterm>
<para><computeroutput>#define AND_WHEN( desc)&#160;&#160;&#160;<link linkend="_catch_8h_1abe92a5063c83dec8143bf685e4b4a198">INTERNAL_CATCH_DYNAMIC_SECTION</link>( &quot; And when: &quot; &lt;&lt; desc )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ab41cb63be394c30d48fa579bf8352f18"/><section>
    <title>ANON_TEST_CASE</title>
<indexterm><primary>ANON_TEST_CASE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>ANON_TEST_CASE</secondary></indexterm>
<para><computeroutput>#define ANON_TEST_CASE( )&#160;&#160;&#160;<link linkend="_catch_8h_1a83f221452b6494c1eb0ae9bab79faa3c">INTERNAL_CATCH_TESTCASE</link>()</computeroutput></para></section>
<anchor xml:id="_catch_8h_1aaf9fe43c53965ff8d94bbd522fd1fd7a"/><section>
    <title>CAPTURE</title>
<indexterm><primary>CAPTURE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CAPTURE</secondary></indexterm>
<para><computeroutput>#define CAPTURE( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ad8c51fdad7ab7e39414cd1bf90a3ce06">INTERNAL_CATCH_CAPTURE</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>(capturer), &quot;CAPTURE&quot;,__VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1afa0ae14e70806dca4f8bf06d06645fa9"/><section>
    <title>CATCH_CATCH_ALL</title>
<indexterm><primary>CATCH_CATCH_ALL</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_CATCH_ALL</secondary></indexterm>
<para><computeroutput>#define CATCH_CATCH_ALL&#160;&#160;&#160;if ((false))</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a3caecf3cbc55848423d744df50d84d5b"/><section>
    <title>CATCH_CATCH_ANON</title>
<indexterm><primary>CATCH_CATCH_ANON</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_CATCH_ANON</secondary></indexterm>
<para><computeroutput>#define CATCH_CATCH_ANON( type)&#160;&#160;&#160;if ((false))</computeroutput></para></section>
<anchor xml:id="_catch_8h_1aa70cff16ca513ff81704961bed5e01b0"/><section>
    <title>CATCH_CONFIG_COUNTER</title>
<indexterm><primary>CATCH_CONFIG_COUNTER</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_CONFIG_COUNTER</secondary></indexterm>
<para><computeroutput>#define CATCH_CONFIG_COUNTER</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a5e8669f07e3db1e9e1604508689bc28a"/><section>
    <title>CATCH_CONFIG_CPP11_TO_STRING</title>
<indexterm><primary>CATCH_CONFIG_CPP11_TO_STRING</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_CONFIG_CPP11_TO_STRING</secondary></indexterm>
<para><computeroutput>#define CATCH_CONFIG_CPP11_TO_STRING</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a893712b2ba6e7400136a0a023b12e9db"/><section>
    <title>CATCH_CONFIG_DISABLE_EXCEPTIONS</title>
<indexterm><primary>CATCH_CONFIG_DISABLE_EXCEPTIONS</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_CONFIG_DISABLE_EXCEPTIONS</secondary></indexterm>
<para><computeroutput>#define CATCH_CONFIG_DISABLE_EXCEPTIONS</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a3271a306c531fd4a2c6c6180e4903fd9"/><section>
    <title>CATCH_CONFIG_GLOBAL_NEXTAFTER</title>
<indexterm><primary>CATCH_CONFIG_GLOBAL_NEXTAFTER</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_CONFIG_GLOBAL_NEXTAFTER</secondary></indexterm>
<para><computeroutput>#define CATCH_CONFIG_GLOBAL_NEXTAFTER</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ac5eee4f90512985d2043f971c6f08707"/><section>
    <title>CATCH_CONFIG_POSIX_SIGNALS</title>
<indexterm><primary>CATCH_CONFIG_POSIX_SIGNALS</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_CONFIG_POSIX_SIGNALS</secondary></indexterm>
<para><computeroutput>#define CATCH_CONFIG_POSIX_SIGNALS</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ac6675f48ca221c1b9124ea02fe88324b"/><section>
    <title>CATCH_CONFIG_WCHAR</title>
<indexterm><primary>CATCH_CONFIG_WCHAR</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_CONFIG_WCHAR</secondary></indexterm>
<para><computeroutput>#define CATCH_CONFIG_WCHAR</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a83c1ab15f3d715f25fe504c114cf6144"/><section>
    <title>CATCH_DEFER</title>
<indexterm><primary>CATCH_DEFER</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_DEFER</secondary></indexterm>
<para><computeroutput>#define CATCH_DEFER( id)&#160;&#160;&#160;id <link linkend="_catch_8h_1a8ac224562b8423a7c07e368216d0f0e9">CATCH_EMPTY</link>()</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a8ac224562b8423a7c07e368216d0f0e9"/><section>
    <title>CATCH_EMPTY</title>
<indexterm><primary>CATCH_EMPTY</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_EMPTY</secondary></indexterm>
<para><computeroutput>#define CATCH_EMPTY( )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1aba552c917b9ac8604f50a914a745e974"/><section>
    <title>CATCH_ENFORCE</title>
<indexterm><primary>CATCH_ENFORCE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_ENFORCE</secondary></indexterm>
<para><computeroutput>#define CATCH_ENFORCE( condition,  ...)&#160;&#160;&#160;    do{ if( !(condition) ) <link linkend="_catch_8h_1ad9884641eb178d2628cf3ad19c394f47">CATCH_ERROR</link>( __VA_ARGS__ ); } while(false)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ad9884641eb178d2628cf3ad19c394f47"/><section>
    <title>CATCH_ERROR</title>
<indexterm><primary>CATCH_ERROR</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_ERROR</secondary></indexterm>
<para><computeroutput>#define CATCH_ERROR( ...)&#160;&#160;&#160;    <link linkend="_namespace_catch_1ae67297c3e265b0fcd55de371bf408e4e">Catch::throw_domain_error</link>(<link linkend="_catch_8h_1a8e47cad0b28262f193e489df151fed27">CATCH_MAKE_MSG</link>( __VA_ARGS__ ))</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a18b42ab8d6d1efdf417f97e5474dc450"/><section>
    <title>CATCH_INTERNAL_CONFIG_COUNTER</title>
<indexterm><primary>CATCH_INTERNAL_CONFIG_COUNTER</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_INTERNAL_CONFIG_COUNTER</secondary></indexterm>
<para><computeroutput>#define CATCH_INTERNAL_CONFIG_COUNTER</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a48ae5ed6ff9168c5ad3d5058527fbfae"/><section>
    <title>CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER</title>
<indexterm><primary>CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER</secondary></indexterm>
<para><computeroutput>#define CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a3c8d4b828da004fc3ad2511c1900ec19"/><section>
    <title>CATCH_INTERNAL_CONFIG_POSIX_SIGNALS</title>
<indexterm><primary>CATCH_INTERNAL_CONFIG_POSIX_SIGNALS</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_INTERNAL_CONFIG_POSIX_SIGNALS</secondary></indexterm>
<para><computeroutput>#define CATCH_INTERNAL_CONFIG_POSIX_SIGNALS</computeroutput></para></section>
<anchor xml:id="_catch_8h_1af445c1e136fadba0e92f3c22d68a7641"/><section>
    <title>CATCH_INTERNAL_ERROR</title>
<indexterm><primary>CATCH_INTERNAL_ERROR</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_INTERNAL_ERROR</secondary></indexterm>
<para><computeroutput>#define CATCH_INTERNAL_ERROR( ...)&#160;&#160;&#160;    <link linkend="_namespace_catch_1a707884e681203fef6bf7dbf752532fa5">Catch::throw_logic_error</link>(<link linkend="_catch_8h_1a8e47cad0b28262f193e489df151fed27">CATCH_MAKE_MSG</link>( <link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link> &lt;&lt; &quot;: Internal Catch2 error: &quot; &lt;&lt; __VA_ARGS__))</computeroutput></para></section>
<anchor xml:id="_catch_8h_1aa7ffc39ff2307d382e766a867d49b67a"/><section>
    <title>CATCH_INTERNAL_IGNORE_BUT_WARN</title>
<indexterm><primary>CATCH_INTERNAL_IGNORE_BUT_WARN</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_INTERNAL_IGNORE_BUT_WARN</secondary></indexterm>
<para><computeroutput>#define CATCH_INTERNAL_IGNORE_BUT_WARN( ...)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1"/><section>
    <title>CATCH_INTERNAL_LINEINFO</title>
<indexterm><primary>CATCH_INTERNAL_LINEINFO</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_INTERNAL_LINEINFO</secondary></indexterm>
<para><computeroutput>#define CATCH_INTERNAL_LINEINFO&#160;&#160;&#160;    <link linkend="_struct_catch_1_1_source_line_info">::Catch::SourceLineInfo</link>( __FILE__, static_cast&lt;std::size_t&gt;( __LINE__ ) )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a1500dca9a578a0bd2f85771cfa3fd35d"/><section>
    <title>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION</title>
<indexterm><primary>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION</secondary></indexterm>
<para><computeroutput>#define CATCH_INTERNAL_START_WARNINGS_SUPPRESSION</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ad9594e9891b032f0dd0279960dc861a5"/><section>
    <title>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</title>
<indexterm><primary>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</secondary></indexterm>
<para><computeroutput>#define CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ab6dc42a98c8854e2e1d91874b1fe406c"/><section>
    <title>CATCH_INTERNAL_STRINGIFY</title>
<indexterm><primary>CATCH_INTERNAL_STRINGIFY</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_INTERNAL_STRINGIFY</secondary></indexterm>
<para><computeroutput>#define CATCH_INTERNAL_STRINGIFY( ...)&#160;&#160;&#160;#__VA_ARGS__</computeroutput></para></section>
<anchor xml:id="_catch_8h_1aa0200c23b35ba2bd8ebed69a8f3c1c66"/><section>
    <title>CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS</title>
<indexterm><primary>CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS</secondary></indexterm>
<para><computeroutput>#define CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a89c1608a68775aca1bb7c265f7ba923a"/><section>
    <title>CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS</title>
<indexterm><primary>CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS</secondary></indexterm>
<para><computeroutput>#define CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a10a275cf93b99d6f1246d9d9df09d1d8"/><section>
    <title>CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS</title>
<indexterm><primary>CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS</secondary></indexterm>
<para><computeroutput>#define CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a828d81ce73c46941460c92ecbd7b8fc2"/><section>
    <title>CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS</title>
<indexterm><primary>CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS</secondary></indexterm>
<para><computeroutput>#define CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS</computeroutput></para></section>
<anchor xml:id="_catch_8h_1af9c2d6807f17109481b536551c0c10bf"/><section>
    <title>CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS</title>
<indexterm><primary>CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS</secondary></indexterm>
<para><computeroutput>#define CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a8e47cad0b28262f193e489df151fed27"/><section>
    <title>CATCH_MAKE_MSG</title>
<indexterm><primary>CATCH_MAKE_MSG</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_MAKE_MSG</secondary></indexterm>
<para><computeroutput>#define CATCH_MAKE_MSG( ...)&#160;&#160;&#160;    (<link linkend="_class_catch_1_1_reusable_string_stream">Catch::ReusableStringStream</link>() &lt;&lt; __VA_ARGS__).str()</computeroutput></para></section>
<anchor xml:id="_catch_8h_1aebb9e7be881ac3dcd10db9fb45830649"/><section>
    <title>CATCH_REC_END</title>
<indexterm><primary>CATCH_REC_END</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_REC_END</secondary></indexterm>
<para><computeroutput>#define CATCH_REC_END( ...)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a536dd24bc8e72ec8eb14c3676f20c778"/><section>
    <title>CATCH_REC_GET_END</title>
<indexterm><primary>CATCH_REC_GET_END</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_REC_GET_END</secondary></indexterm>
<para><computeroutput>#define CATCH_REC_GET_END( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a476d332d716d4691f874195acea4931b">CATCH_REC_GET_END1</link></computeroutput></para></section>
<anchor xml:id="_catch_8h_1a476d332d716d4691f874195acea4931b"/><section>
    <title>CATCH_REC_GET_END1</title>
<indexterm><primary>CATCH_REC_GET_END1</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_REC_GET_END1</secondary></indexterm>
<para><computeroutput>#define CATCH_REC_GET_END1( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1aa335d39d6fdb7e20c94edaa4de21d1a3">CATCH_REC_GET_END2</link></computeroutput></para></section>
<anchor xml:id="_catch_8h_1aa335d39d6fdb7e20c94edaa4de21d1a3"/><section>
    <title>CATCH_REC_GET_END2</title>
<indexterm><primary>CATCH_REC_GET_END2</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_REC_GET_END2</secondary></indexterm>
<para><computeroutput>#define CATCH_REC_GET_END2( )&#160;&#160;&#160;0, <link linkend="_catch_8h_1aebb9e7be881ac3dcd10db9fb45830649">CATCH_REC_END</link></computeroutput></para></section>
<anchor xml:id="_catch_8h_1a060f5fa141c247b4d07dfe9bf3c54079"/><section>
    <title>CATCH_REC_LIST</title>
<indexterm><primary>CATCH_REC_LIST</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_REC_LIST</secondary></indexterm>
<para><computeroutput>#define CATCH_REC_LIST( f,  ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ae3ce5d9c8e50eba755111a19a62432e5">CATCH_RECURSE</link>(<link linkend="_catch_8h_1abe3c205d4ba8406d45439abb91366ce9">CATCH_REC_LIST2</link>(f, __VA_ARGS__, ()()(), ()()(), ()()(), 0))</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a3e07fd613c41bd44cb4bd14fccc3c388"/><section>
    <title>CATCH_REC_LIST0</title>
<indexterm><primary>CATCH_REC_LIST0</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_REC_LIST0</secondary></indexterm>
<para><computeroutput>#define CATCH_REC_LIST0( f,  x,  peek,  ...)&#160;&#160;&#160;, f(x) <link linkend="_catch_8h_1a83c1ab15f3d715f25fe504c114cf6144">CATCH_DEFER</link> ( <link linkend="_catch_8h_1abaddf93f755cea9e20aee254aa566adf">CATCH_REC_NEXT</link>(peek, <link linkend="_catch_8h_1abedd1ae08e12478704233e9bf29e0fe9">CATCH_REC_LIST1</link>) ) ( f, peek, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1aea894953d28c5ed83e59ce6c74d0a665"/><section>
    <title>CATCH_REC_LIST0_UD</title>
<indexterm><primary>CATCH_REC_LIST0_UD</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_REC_LIST0_UD</secondary></indexterm>
<para><computeroutput>#define CATCH_REC_LIST0_UD( f,  userdata,  x,  peek,  ...)&#160;&#160;&#160;, f(userdata, x) <link linkend="_catch_8h_1a83c1ab15f3d715f25fe504c114cf6144">CATCH_DEFER</link> ( <link linkend="_catch_8h_1abaddf93f755cea9e20aee254aa566adf">CATCH_REC_NEXT</link>(peek, <link linkend="_catch_8h_1abbcff29ced4d413bc121f7b761558c16">CATCH_REC_LIST1_UD</link>) ) ( f, userdata, peek, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1abedd1ae08e12478704233e9bf29e0fe9"/><section>
    <title>CATCH_REC_LIST1</title>
<indexterm><primary>CATCH_REC_LIST1</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_REC_LIST1</secondary></indexterm>
<para><computeroutput>#define CATCH_REC_LIST1( f,  x,  peek,  ...)&#160;&#160;&#160;, f(x) <link linkend="_catch_8h_1a83c1ab15f3d715f25fe504c114cf6144">CATCH_DEFER</link> ( <link linkend="_catch_8h_1abaddf93f755cea9e20aee254aa566adf">CATCH_REC_NEXT</link>(peek, <link linkend="_catch_8h_1a3e07fd613c41bd44cb4bd14fccc3c388">CATCH_REC_LIST0</link>) ) ( f, peek, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1abbcff29ced4d413bc121f7b761558c16"/><section>
    <title>CATCH_REC_LIST1_UD</title>
<indexterm><primary>CATCH_REC_LIST1_UD</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_REC_LIST1_UD</secondary></indexterm>
<para><computeroutput>#define CATCH_REC_LIST1_UD( f,  userdata,  x,  peek,  ...)&#160;&#160;&#160;, f(userdata, x) <link linkend="_catch_8h_1a83c1ab15f3d715f25fe504c114cf6144">CATCH_DEFER</link> ( <link linkend="_catch_8h_1abaddf93f755cea9e20aee254aa566adf">CATCH_REC_NEXT</link>(peek, <link linkend="_catch_8h_1aea894953d28c5ed83e59ce6c74d0a665">CATCH_REC_LIST0_UD</link>) ) ( f, userdata, peek, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1abe3c205d4ba8406d45439abb91366ce9"/><section>
    <title>CATCH_REC_LIST2</title>
<indexterm><primary>CATCH_REC_LIST2</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_REC_LIST2</secondary></indexterm>
<para><computeroutput>#define CATCH_REC_LIST2( f,  x,  peek,  ...)&#160;&#160;&#160;f(x) <link linkend="_catch_8h_1a83c1ab15f3d715f25fe504c114cf6144">CATCH_DEFER</link> ( <link linkend="_catch_8h_1abaddf93f755cea9e20aee254aa566adf">CATCH_REC_NEXT</link>(peek, <link linkend="_catch_8h_1abedd1ae08e12478704233e9bf29e0fe9">CATCH_REC_LIST1</link>) ) ( f, peek, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a0c2dd548d178fbc2202ecd74ce4be91b"/><section>
    <title>CATCH_REC_LIST2_UD</title>
<indexterm><primary>CATCH_REC_LIST2_UD</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_REC_LIST2_UD</secondary></indexterm>
<para><computeroutput>#define CATCH_REC_LIST2_UD( f,  userdata,  x,  peek,  ...)&#160;&#160;&#160;f(userdata, x) <link linkend="_catch_8h_1a83c1ab15f3d715f25fe504c114cf6144">CATCH_DEFER</link> ( <link linkend="_catch_8h_1abaddf93f755cea9e20aee254aa566adf">CATCH_REC_NEXT</link>(peek, <link linkend="_catch_8h_1abbcff29ced4d413bc121f7b761558c16">CATCH_REC_LIST1_UD</link>) ) ( f, userdata, peek, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a8e404d42a6d0402698c1d4d16e831d28"/><section>
    <title>CATCH_REC_LIST_UD</title>
<indexterm><primary>CATCH_REC_LIST_UD</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_REC_LIST_UD</secondary></indexterm>
<para><computeroutput>#define CATCH_REC_LIST_UD( f,  userdata,  ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ae3ce5d9c8e50eba755111a19a62432e5">CATCH_RECURSE</link>(<link linkend="_catch_8h_1a0c2dd548d178fbc2202ecd74ce4be91b">CATCH_REC_LIST2_UD</link>(f, userdata, __VA_ARGS__, ()()(), ()()(), ()()(), 0))</computeroutput></para></section>
<anchor xml:id="_catch_8h_1abaddf93f755cea9e20aee254aa566adf"/><section>
    <title>CATCH_REC_NEXT</title>
<indexterm><primary>CATCH_REC_NEXT</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_REC_NEXT</secondary></indexterm>
<para><computeroutput>#define CATCH_REC_NEXT( test,  next)&#160;&#160;&#160;<link linkend="_catch_8h_1a0ddf3b75cc3780765a2cb551d6536721">CATCH_REC_NEXT1</link>(<link linkend="_catch_8h_1a536dd24bc8e72ec8eb14c3676f20c778">CATCH_REC_GET_END</link> test, next)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ae25889c34b72704724f5797b6103c463"/><section>
    <title>CATCH_REC_NEXT0</title>
<indexterm><primary>CATCH_REC_NEXT0</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_REC_NEXT0</secondary></indexterm>
<para><computeroutput>#define CATCH_REC_NEXT0( test,  next,  ...)&#160;&#160;&#160;next <link linkend="_catch_8h_1ab469d9696504fd14e36fd1d8b6e47b7f">CATCH_REC_OUT</link></computeroutput></para></section>
<anchor xml:id="_catch_8h_1a0ddf3b75cc3780765a2cb551d6536721"/><section>
    <title>CATCH_REC_NEXT1</title>
<indexterm><primary>CATCH_REC_NEXT1</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_REC_NEXT1</secondary></indexterm>
<para><computeroutput>#define CATCH_REC_NEXT1( test,  next)&#160;&#160;&#160;<link linkend="_catch_8h_1a83c1ab15f3d715f25fe504c114cf6144">CATCH_DEFER</link> ( <link linkend="_catch_8h_1ae25889c34b72704724f5797b6103c463">CATCH_REC_NEXT0</link> ) ( test, next, 0)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ab469d9696504fd14e36fd1d8b6e47b7f"/><section>
    <title>CATCH_REC_OUT</title>
<indexterm><primary>CATCH_REC_OUT</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_REC_OUT</secondary></indexterm>
<para><computeroutput>#define CATCH_REC_OUT</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ae3ce5d9c8e50eba755111a19a62432e5"/><section>
    <title>CATCH_RECURSE</title>
<indexterm><primary>CATCH_RECURSE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_RECURSE</secondary></indexterm>
<para><computeroutput>#define CATCH_RECURSE( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a761d2ca7a5b0393ae7a6edf086a9c3da">CATCH_RECURSION_LEVEL5</link>(__VA_ARGS__)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1aedfa83a9b9671b2f3ce5d64207eab45f"/><section>
    <title>CATCH_RECURSION_LEVEL0</title>
<indexterm><primary>CATCH_RECURSION_LEVEL0</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_RECURSION_LEVEL0</secondary></indexterm>
<para><computeroutput>#define CATCH_RECURSION_LEVEL0( ...)&#160;&#160;&#160;__VA_ARGS__</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ad1cc1127b3a8ed84d336fd86c25571a9"/><section>
    <title>CATCH_RECURSION_LEVEL1</title>
<indexterm><primary>CATCH_RECURSION_LEVEL1</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_RECURSION_LEVEL1</secondary></indexterm>
<para><computeroutput>#define CATCH_RECURSION_LEVEL1( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1aedfa83a9b9671b2f3ce5d64207eab45f">CATCH_RECURSION_LEVEL0</link>(<link linkend="_catch_8h_1aedfa83a9b9671b2f3ce5d64207eab45f">CATCH_RECURSION_LEVEL0</link>(<link linkend="_catch_8h_1aedfa83a9b9671b2f3ce5d64207eab45f">CATCH_RECURSION_LEVEL0</link>(__VA_ARGS__)))</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a2a7ccfd6ceda0c723d1c81ed0a8ea7aa"/><section>
    <title>CATCH_RECURSION_LEVEL2</title>
<indexterm><primary>CATCH_RECURSION_LEVEL2</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_RECURSION_LEVEL2</secondary></indexterm>
<para><computeroutput>#define CATCH_RECURSION_LEVEL2( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ad1cc1127b3a8ed84d336fd86c25571a9">CATCH_RECURSION_LEVEL1</link>(<link linkend="_catch_8h_1ad1cc1127b3a8ed84d336fd86c25571a9">CATCH_RECURSION_LEVEL1</link>(<link linkend="_catch_8h_1ad1cc1127b3a8ed84d336fd86c25571a9">CATCH_RECURSION_LEVEL1</link>(__VA_ARGS__)))</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ac5ead3b79069ca9b5de9cad80029bc71"/><section>
    <title>CATCH_RECURSION_LEVEL3</title>
<indexterm><primary>CATCH_RECURSION_LEVEL3</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_RECURSION_LEVEL3</secondary></indexterm>
<para><computeroutput>#define CATCH_RECURSION_LEVEL3( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a2a7ccfd6ceda0c723d1c81ed0a8ea7aa">CATCH_RECURSION_LEVEL2</link>(<link linkend="_catch_8h_1a2a7ccfd6ceda0c723d1c81ed0a8ea7aa">CATCH_RECURSION_LEVEL2</link>(<link linkend="_catch_8h_1a2a7ccfd6ceda0c723d1c81ed0a8ea7aa">CATCH_RECURSION_LEVEL2</link>(__VA_ARGS__)))</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a7738534acacfd54ef5b9f89cf07fa16d"/><section>
    <title>CATCH_RECURSION_LEVEL4</title>
<indexterm><primary>CATCH_RECURSION_LEVEL4</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_RECURSION_LEVEL4</secondary></indexterm>
<para><computeroutput>#define CATCH_RECURSION_LEVEL4( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ac5ead3b79069ca9b5de9cad80029bc71">CATCH_RECURSION_LEVEL3</link>(<link linkend="_catch_8h_1ac5ead3b79069ca9b5de9cad80029bc71">CATCH_RECURSION_LEVEL3</link>(<link linkend="_catch_8h_1ac5ead3b79069ca9b5de9cad80029bc71">CATCH_RECURSION_LEVEL3</link>(__VA_ARGS__)))</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a761d2ca7a5b0393ae7a6edf086a9c3da"/><section>
    <title>CATCH_RECURSION_LEVEL5</title>
<indexterm><primary>CATCH_RECURSION_LEVEL5</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_RECURSION_LEVEL5</secondary></indexterm>
<para><computeroutput>#define CATCH_RECURSION_LEVEL5( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a7738534acacfd54ef5b9f89cf07fa16d">CATCH_RECURSION_LEVEL4</link>(<link linkend="_catch_8h_1a7738534acacfd54ef5b9f89cf07fa16d">CATCH_RECURSION_LEVEL4</link>(<link linkend="_catch_8h_1a7738534acacfd54ef5b9f89cf07fa16d">CATCH_RECURSION_LEVEL4</link>(__VA_ARGS__)))</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a3063d7b316c984044916079ab8b7dad6"/><section>
    <title>CATCH_REGISTER_ENUM</title>
<indexterm><primary>CATCH_REGISTER_ENUM</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_REGISTER_ENUM</secondary></indexterm>
<para><computeroutput>#define CATCH_REGISTER_ENUM( enumName,  ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a1c3c601bf24488800bdf3f634a2a6b11">INTERNAL_CATCH_REGISTER_ENUM</link>( enumName, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1af7f9d4a12274e1ccf4b1021e5d35e0c5"/><section>
    <title>CATCH_REGISTER_TAG_ALIAS</title>
<indexterm><primary>CATCH_REGISTER_TAG_ALIAS</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_REGISTER_TAG_ALIAS</secondary></indexterm>
<para><computeroutput>#define CATCH_REGISTER_TAG_ALIAS( alias,  spec)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\
&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;\
&#32;&#32;&#32;&#32;namespace{&#32;<link linkend="_struct_catch_1_1_registrar_for_tag_aliases">Catch::RegistrarForTagAliases</link>&#32;<link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>(&#32;AutoRegisterTagAlias&#32;)(&#32;alias,&#32;spec,&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>&#32;);&#32;}&#32;\
&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1ad9594e9891b032f0dd0279960dc861a5">CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</link>
</programlisting></section>
<anchor xml:id="_catch_8h_1a834a24a39cf448d5a0f812e716be1c76"/><section>
    <title>CATCH_RUNTIME_ERROR</title>
<indexterm><primary>CATCH_RUNTIME_ERROR</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_RUNTIME_ERROR</secondary></indexterm>
<para><computeroutput>#define CATCH_RUNTIME_ERROR( ...)&#160;&#160;&#160;    <link linkend="_namespace_catch_1a48d2c35022dd9d56a1b7ee78ad581eea">Catch::throw_runtime_error</link>(<link linkend="_catch_8h_1a8e47cad0b28262f193e489df151fed27">CATCH_MAKE_MSG</link>( __VA_ARGS__ ))</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a094602ff56422c96e501eaaef1ef8c12"/><section>
    <title>CATCH_TRANSLATE_EXCEPTION</title>
<indexterm><primary>CATCH_TRANSLATE_EXCEPTION</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_TRANSLATE_EXCEPTION</secondary></indexterm>
<para><computeroutput>#define CATCH_TRANSLATE_EXCEPTION( signature)&#160;&#160;&#160;<link linkend="_catch_8h_1a109d814750b0a695e2b66e9c53e748c0">INTERNAL_CATCH_TRANSLATE_EXCEPTION</link>( signature )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ab76c2d22e571ab1a828f5c60d2f485a6"/><section>
    <title>CATCH_TRY</title>
<indexterm><primary>CATCH_TRY</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_TRY</secondary></indexterm>
<para><computeroutput>#define CATCH_TRY&#160;&#160;&#160;if ((true))</computeroutput></para></section>
<anchor xml:id="_catch_8h_1aed4b3022e5b389a59ee3e1633c0a70a8"/><section>
    <title>CATCH_VERSION_MAJOR</title>
<indexterm><primary>CATCH_VERSION_MAJOR</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_VERSION_MAJOR</secondary></indexterm>
<para><computeroutput>#define CATCH_VERSION_MAJOR&#160;&#160;&#160;2</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a7c36daa8f2e725fe5e1ff2a9c2559d4f"/><section>
    <title>CATCH_VERSION_MINOR</title>
<indexterm><primary>CATCH_VERSION_MINOR</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_VERSION_MINOR</secondary></indexterm>
<para><computeroutput>#define CATCH_VERSION_MINOR&#160;&#160;&#160;13</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ab6adfb1d16a244d790dc1fe385831a52"/><section>
    <title>CATCH_VERSION_PATCH</title>
<indexterm><primary>CATCH_VERSION_PATCH</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CATCH_VERSION_PATCH</secondary></indexterm>
<para><computeroutput>#define CATCH_VERSION_PATCH&#160;&#160;&#160;10</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a836cca6b6ed3a1706353f6d1bca0935f"/><section>
    <title>CHECK</title>
<indexterm><primary>CHECK</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CHECK</secondary></indexterm>
<para><computeroutput>#define CHECK( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ac3284f56c2f755d2b79fdb663cf9fb72">INTERNAL_CATCH_TEST</link>( &quot;CHECK&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a7bf095d8512cb180f8ff3a2258a6eaac"/><section>
    <title>CHECK_FALSE</title>
<indexterm><primary>CHECK_FALSE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CHECK_FALSE</secondary></indexterm>
<para><computeroutput>#define CHECK_FALSE( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ac3284f56c2f755d2b79fdb663cf9fb72">INTERNAL_CATCH_TEST</link>( &quot;CHECK_FALSE&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link> | <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8a9980604245f19884691f941dec03eeb8">Catch::ResultDisposition::FalseTest</link>, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a13c6feaf82c3c419104c50dbb8caa3ef"/><section>
    <title>CHECK_NOFAIL</title>
<indexterm><primary>CHECK_NOFAIL</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CHECK_NOFAIL</secondary></indexterm>
<para><computeroutput>#define CHECK_NOFAIL( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ac3284f56c2f755d2b79fdb663cf9fb72">INTERNAL_CATCH_TEST</link>( &quot;CHECK_NOFAIL&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link> | <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8a1a88eb6004bddee4ccae4b421991bf54">Catch::ResultDisposition::SuppressFail</link>, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a78e70f011f20c4ade1d1ac2b8fd33626"/><section>
    <title>CHECK_NOTHROW</title>
<indexterm><primary>CHECK_NOTHROW</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CHECK_NOTHROW</secondary></indexterm>
<para><computeroutput>#define CHECK_NOTHROW( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ac340cc35716115abaec4dfbcb061da52">INTERNAL_CATCH_NO_THROW</link>( &quot;CHECK_NOTHROW&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a5b8c33c63e0804d4458e2c761370b75d"/><section>
    <title>CHECK_THAT</title>
<indexterm><primary>CHECK_THAT</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CHECK_THAT</secondary></indexterm>
<para><computeroutput>#define CHECK_THAT( arg,  matcher)&#160;&#160;&#160;<link linkend="_catch_8h_1a877690adc04f1fbfe944df6bebe6f8b5">INTERNAL_CHECK_THAT</link>( &quot;CHECK_THAT&quot;, matcher, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, arg )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a5c646dfe831e596b59073014c1c8b9e5"/><section>
    <title>CHECK_THROWS</title>
<indexterm><primary>CHECK_THROWS</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CHECK_THROWS</secondary></indexterm>
<para><computeroutput>#define CHECK_THROWS( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a2f3028d4fd4510f2f47ddd20626cccae">INTERNAL_CATCH_THROWS</link>( &quot;CHECK_THROWS&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a1fb6439098d2a12bb69188034e03baf2"/><section>
    <title>CHECK_THROWS_AS</title>
<indexterm><primary>CHECK_THROWS_AS</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CHECK_THROWS_AS</secondary></indexterm>
<para><computeroutput>#define CHECK_THROWS_AS( expr,  exceptionType)&#160;&#160;&#160;<link linkend="_catch_8h_1a5e87b48ab40b7b128ae8428c14c25a91">INTERNAL_CATCH_THROWS_AS</link>( &quot;CHECK_THROWS_AS&quot;, exceptionType, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, expr )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a74fcc14d39e8cc35ff39f69c5b60e375"/><section>
    <title>CHECK_THROWS_MATCHES</title>
<indexterm><primary>CHECK_THROWS_MATCHES</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CHECK_THROWS_MATCHES</secondary></indexterm>
<para><computeroutput>#define CHECK_THROWS_MATCHES( expr,  exceptionType,  matcher)&#160;&#160;&#160;<link linkend="_catch_8h_1ace8fc7b74db8a1b2916554ad64e5b036">INTERNAL_CATCH_THROWS_MATCHES</link>( &quot;CHECK_THROWS_MATCHES&quot;, exceptionType, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, matcher, expr )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a4903733490f526b58053836575e99066"/><section>
    <title>CHECK_THROWS_WITH</title>
<indexterm><primary>CHECK_THROWS_WITH</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CHECK_THROWS_WITH</secondary></indexterm>
<para><computeroutput>#define CHECK_THROWS_WITH( expr,  matcher)&#160;&#160;&#160;<link linkend="_catch_8h_1a4296ab989dbc1f6c52c24d60012144d6">INTERNAL_CATCH_THROWS_STR_MATCHES</link>( &quot;CHECK_THROWS_WITH&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, matcher, expr )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a5fa42bb950a65e22eac778c86b27d832"/><section>
    <title>CHECKED_ELSE</title>
<indexterm><primary>CHECKED_ELSE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CHECKED_ELSE</secondary></indexterm>
<para><computeroutput>#define CHECKED_ELSE( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1aaf2139c8903264bfe442e4b23b6673a9">INTERNAL_CATCH_ELSE</link>( &quot;CHECKED_ELSE&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a354466c7b989ec55784c02d74013263c"/><section>
    <title>CHECKED_IF</title>
<indexterm><primary>CHECKED_IF</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>CHECKED_IF</secondary></indexterm>
<para><computeroutput>#define CHECKED_IF( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1abfd240b1bdcc699638464fb3c7131c1d">INTERNAL_CATCH_IF</link>( &quot;CHECKED_IF&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1aa1caa37b980555de35faefa9191b5128"/><section>
    <title>DYNAMIC_SECTION</title>
<indexterm><primary>DYNAMIC_SECTION</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>DYNAMIC_SECTION</secondary></indexterm>
<para><computeroutput>#define DYNAMIC_SECTION( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1abe92a5063c83dec8143bf685e4b4a198">INTERNAL_CATCH_DYNAMIC_SECTION</link>( __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ac8d1eaf65528f86b445cf6e45b2d72c9"/><section>
    <title>FAIL</title>
<indexterm><primary>FAIL</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>FAIL</secondary></indexterm>
<para><computeroutput>#define FAIL( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ad1f7d83040ad9b09020dc72c57019638">INTERNAL_CATCH_MSG</link>( &quot;FAIL&quot;, <link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efacecfc052e2499499b13304249303cc36">Catch::ResultWas::ExplicitFailure</link>, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8af3bd52347ed6f8796e8ce2f77bb39ea5">Catch::ResultDisposition::Normal</link>, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a3c2341a3238242fdc02d33a1968bd1d2"/><section>
    <title>FAIL_CHECK</title>
<indexterm><primary>FAIL_CHECK</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>FAIL_CHECK</secondary></indexterm>
<para><computeroutput>#define FAIL_CHECK( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ad1f7d83040ad9b09020dc72c57019638">INTERNAL_CATCH_MSG</link>( &quot;FAIL_CHECK&quot;, <link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efacecfc052e2499499b13304249303cc36">Catch::ResultWas::ExplicitFailure</link>, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a4941c6427cfa36ee7c52d734e460f9df"/><section>
    <title>GENERATE</title>
<indexterm><primary>GENERATE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>GENERATE</secondary></indexterm>
<para><computeroutput>#define GENERATE( ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1_1_generators_1a3b0ab1f589b1d1e0e92afcd12cf4ab12">Catch::Generators::generate</link>(&#32;<link linkend="_catch_8h_1a13733e49e752d29b735e94d9e72c7d6b">INTERNAL_CATCH_STRINGIZE</link>(<link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>(generator)),&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&#32;]{&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespace_catch_1_1_generators">Catch::Generators</link>;&#32;<emphasis role="keywordflow">return</emphasis>&#32;makeGenerators(&#32;<link linkend="_struct_catch_1_1true__given">__VA_ARGS__</link>&#32;);&#32;}&#32;)
</programlisting></section>
<anchor xml:id="_catch_8h_1a44e2fff00253a218f0a392ad6abac624"/><section>
    <title>GENERATE_COPY</title>
<indexterm><primary>GENERATE_COPY</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>GENERATE_COPY</secondary></indexterm>
<para><computeroutput>#define GENERATE_COPY( ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1_1_generators_1a3b0ab1f589b1d1e0e92afcd12cf4ab12">Catch::Generators::generate</link>(&#32;<link linkend="_catch_8h_1a13733e49e752d29b735e94d9e72c7d6b">INTERNAL_CATCH_STRINGIZE</link>(<link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>(generator)),&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=]{&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespace_catch_1_1_generators">Catch::Generators</link>;&#32;<emphasis role="keywordflow">return</emphasis>&#32;makeGenerators(&#32;<link linkend="_struct_catch_1_1true__given">__VA_ARGS__</link>&#32;);&#32;}&#32;)
</programlisting></section>
<anchor xml:id="_catch_8h_1aebcb76dcf5cbbbd3dca153a21d6f78fe"/><section>
    <title>GENERATE_REF</title>
<indexterm><primary>GENERATE_REF</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>GENERATE_REF</secondary></indexterm>
<para><computeroutput>#define GENERATE_REF( ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1_1_generators_1a3b0ab1f589b1d1e0e92afcd12cf4ab12">Catch::Generators::generate</link>(&#32;<link linkend="_catch_8h_1a13733e49e752d29b735e94d9e72c7d6b">INTERNAL_CATCH_STRINGIZE</link>(<link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>(generator)),&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]{&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespace_catch_1_1_generators">Catch::Generators</link>;&#32;<emphasis role="keywordflow">return</emphasis>&#32;makeGenerators(&#32;<link linkend="_struct_catch_1_1true__given">__VA_ARGS__</link>&#32;);&#32;}&#32;)
</programlisting></section>
<anchor xml:id="_catch_8h_1a2b70c603786d759242856d883dbe93bd"/><section>
    <title>GIVEN</title>
<indexterm><primary>GIVEN</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>GIVEN</secondary></indexterm>
<para><computeroutput>#define GIVEN( desc)&#160;&#160;&#160;<link linkend="_catch_8h_1abe92a5063c83dec8143bf685e4b4a198">INTERNAL_CATCH_DYNAMIC_SECTION</link>( &quot;    Given: &quot; &lt;&lt; desc )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a3ae64706314066fdc8b6c8029a915aa7"/><section>
    <title>INFO</title>
<indexterm><primary>INFO</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INFO</secondary></indexterm>
<para><computeroutput>#define INFO( msg)&#160;&#160;&#160;<link linkend="_catch_8h_1ab0eb5cfab90a80f3113f0ecb65c62a1c">INTERNAL_CATCH_INFO</link>( &quot;INFO&quot;, msg )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ad8c51fdad7ab7e39414cd1bf90a3ce06"/><section>
    <title>INTERNAL_CATCH_CAPTURE</title>
<indexterm><primary>INTERNAL_CATCH_CAPTURE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_CAPTURE</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_CAPTURE( varName,  macroName,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;varName&#32;=&#32;<link linkend="_class_catch_1_1_capturer">Catch::Capturer</link>(&#32;macroName,&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa30222063929ca1b6318faa78e8242f1c">Catch::ResultWas::Info</link>,&#32;#__VA_ARGS__&#32;);&#32;\
&#32;&#32;&#32;&#32;varName.captureValues(&#32;0,&#32;__VA_ARGS__&#32;)
</programlisting></section>
<anchor xml:id="_catch_8h_1a3ef8d1213eac4fd0e2fdb4e13bdb8070"/><section>
    <title>INTERNAL_CATCH_CATCH</title>
<indexterm><primary>INTERNAL_CATCH_CATCH</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_CATCH</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_CATCH( capturer)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a00d8d21b6aeab72bf51f5b7d14afd201"/><section>
    <title>INTERNAL_CATCH_DECLARE_SIG_TEST</title>
<indexterm><primary>INTERNAL_CATCH_DECLARE_SIG_TEST</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_DECLARE_SIG_TEST</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_DECLARE_SIG_TEST( TestName,  ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a053a90e2d222ba1c12095556aa8db44a">INTERNAL_CATCH_VA_NARGS_IMPL</link>( &quot;dummy&quot;, __VA_ARGS__, <link linkend="_catch_8h_1aa74256b09ddc9f24b9d5e99e6b8cd7f5">INTERNAL_CATCH_DECLARE_SIG_TEST_X</link>,<link linkend="_catch_8h_1aa74256b09ddc9f24b9d5e99e6b8cd7f5">INTERNAL_CATCH_DECLARE_SIG_TEST_X</link>, <link linkend="_catch_8h_1aa74256b09ddc9f24b9d5e99e6b8cd7f5">INTERNAL_CATCH_DECLARE_SIG_TEST_X</link>, <link linkend="_catch_8h_1aa74256b09ddc9f24b9d5e99e6b8cd7f5">INTERNAL_CATCH_DECLARE_SIG_TEST_X</link>, <link linkend="_catch_8h_1aa74256b09ddc9f24b9d5e99e6b8cd7f5">INTERNAL_CATCH_DECLARE_SIG_TEST_X</link>, <link linkend="_catch_8h_1aa74256b09ddc9f24b9d5e99e6b8cd7f5">INTERNAL_CATCH_DECLARE_SIG_TEST_X</link>, <link linkend="_catch_8h_1a700005dc1f5d4d1c9b4977dfbcc39553">INTERNAL_CATCH_DEFINE_SIG_TEST_X</link>,<link linkend="_catch_8h_1aa74256b09ddc9f24b9d5e99e6b8cd7f5">INTERNAL_CATCH_DECLARE_SIG_TEST_X</link>,<link linkend="_catch_8h_1aa74256b09ddc9f24b9d5e99e6b8cd7f5">INTERNAL_CATCH_DECLARE_SIG_TEST_X</link>, <link linkend="_catch_8h_1ae9b9c3b580df7d3aa3df12e31d07b228">INTERNAL_CATCH_DECLARE_SIG_TEST1</link>, <link linkend="_catch_8h_1a4f7507c7b536901dbb97dea59df86078">INTERNAL_CATCH_DECLARE_SIG_TEST0</link>)(TestName, __VA_ARGS__)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a4f7507c7b536901dbb97dea59df86078"/><section>
    <title>INTERNAL_CATCH_DECLARE_SIG_TEST0</title>
<indexterm><primary>INTERNAL_CATCH_DECLARE_SIG_TEST0</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_DECLARE_SIG_TEST0</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_DECLARE_SIG_TEST0( TestName)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ae9b9c3b580df7d3aa3df12e31d07b228"/><section>
    <title>INTERNAL_CATCH_DECLARE_SIG_TEST1</title>
<indexterm><primary>INTERNAL_CATCH_DECLARE_SIG_TEST1</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_DECLARE_SIG_TEST1</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_DECLARE_SIG_TEST1( TestName,  signature)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\
&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;TestName()
</programlisting></section>
<anchor xml:id="_catch_8h_1a3df212478ac0ede0c8a0fe9b8e186c8f"/><section>
    <title>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD</title>
<indexterm><primary>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD( TestName,  ClassName,  ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a053a90e2d222ba1c12095556aa8db44a">INTERNAL_CATCH_VA_NARGS_IMPL</link>( &quot;dummy&quot;, __VA_ARGS__, <link linkend="_catch_8h_1a3a61470086671485bf5f3d8139a8b379">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X</link>,<link linkend="_catch_8h_1a3a61470086671485bf5f3d8139a8b379">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1a3a61470086671485bf5f3d8139a8b379">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1a3a61470086671485bf5f3d8139a8b379">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1a3a61470086671485bf5f3d8139a8b379">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1a3a61470086671485bf5f3d8139a8b379">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1a3a61470086671485bf5f3d8139a8b379">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X</link>,<link linkend="_catch_8h_1a3a61470086671485bf5f3d8139a8b379">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X</link>,<link linkend="_catch_8h_1a3a61470086671485bf5f3d8139a8b379">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1a4378072081595eeb217cfa656cbcbfad">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1</link>, <link linkend="_catch_8h_1a2101df7508291ca3898e52c34c40599b">INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0</link>)(TestName, ClassName, __VA_ARGS__)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a2101df7508291ca3898e52c34c40599b"/><section>
    <title>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0</title>
<indexterm><primary>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0( TestName,  ClassName)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a4378072081595eeb217cfa656cbcbfad"/><section>
    <title>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1</title>
<indexterm><primary>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1( TestName,  ClassName,  signature)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;TestType&gt;&#32;\
&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>TestName&#32;:&#32;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(ClassName)&lt;TestType&gt;&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test();\
&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_catch_8h_1a3a61470086671485bf5f3d8139a8b379"/><section>
    <title>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X</title>
<indexterm><primary>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X( TestName,  ClassName,  signature,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;&#32;\
&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>TestName&#32;:&#32;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(ClassName)&lt;__VA_ARGS__&gt;&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test();\
&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_catch_8h_1aa74256b09ddc9f24b9d5e99e6b8cd7f5"/><section>
    <title>INTERNAL_CATCH_DECLARE_SIG_TEST_X</title>
<indexterm><primary>INTERNAL_CATCH_DECLARE_SIG_TEST_X</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_DECLARE_SIG_TEST_X</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_DECLARE_SIG_TEST_X( TestName,  signature,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\
&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;TestName()
</programlisting></section>
<anchor xml:id="_catch_8h_1a053610cf96d1be50463e9cb08e818ed1"/><section>
    <title>INTERNAL_CATCH_DEF</title>
<indexterm><primary>INTERNAL_CATCH_DEF</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_DEF</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_DEF( ...)&#160;&#160;&#160;INTERNAL_CATCH_DEF __VA_ARGS__</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a812cb39b5411a0f1a3ab2e91cb537f4c"/><section>
    <title>INTERNAL_CATCH_DEFINE_SIG_TEST</title>
<indexterm><primary>INTERNAL_CATCH_DEFINE_SIG_TEST</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_DEFINE_SIG_TEST</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_DEFINE_SIG_TEST( TestName,  ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a053a90e2d222ba1c12095556aa8db44a">INTERNAL_CATCH_VA_NARGS_IMPL</link>( &quot;dummy&quot;, __VA_ARGS__, <link linkend="_catch_8h_1a700005dc1f5d4d1c9b4977dfbcc39553">INTERNAL_CATCH_DEFINE_SIG_TEST_X</link>, <link linkend="_catch_8h_1a700005dc1f5d4d1c9b4977dfbcc39553">INTERNAL_CATCH_DEFINE_SIG_TEST_X</link>, <link linkend="_catch_8h_1a700005dc1f5d4d1c9b4977dfbcc39553">INTERNAL_CATCH_DEFINE_SIG_TEST_X</link>, <link linkend="_catch_8h_1a700005dc1f5d4d1c9b4977dfbcc39553">INTERNAL_CATCH_DEFINE_SIG_TEST_X</link>, <link linkend="_catch_8h_1a700005dc1f5d4d1c9b4977dfbcc39553">INTERNAL_CATCH_DEFINE_SIG_TEST_X</link>, <link linkend="_catch_8h_1a700005dc1f5d4d1c9b4977dfbcc39553">INTERNAL_CATCH_DEFINE_SIG_TEST_X</link>, <link linkend="_catch_8h_1a700005dc1f5d4d1c9b4977dfbcc39553">INTERNAL_CATCH_DEFINE_SIG_TEST_X</link>, <link linkend="_catch_8h_1a700005dc1f5d4d1c9b4977dfbcc39553">INTERNAL_CATCH_DEFINE_SIG_TEST_X</link>,<link linkend="_catch_8h_1a700005dc1f5d4d1c9b4977dfbcc39553">INTERNAL_CATCH_DEFINE_SIG_TEST_X</link>,<link linkend="_catch_8h_1a9d259f87ac04160887d8dc58f223298b">INTERNAL_CATCH_DEFINE_SIG_TEST1</link>, <link linkend="_catch_8h_1a0687445db41b1402c3b63677f5fb855f">INTERNAL_CATCH_DEFINE_SIG_TEST0</link>)(TestName, __VA_ARGS__)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a0687445db41b1402c3b63677f5fb855f"/><section>
    <title>INTERNAL_CATCH_DEFINE_SIG_TEST0</title>
<indexterm><primary>INTERNAL_CATCH_DEFINE_SIG_TEST0</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_DEFINE_SIG_TEST0</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_DEFINE_SIG_TEST0( TestName)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a9d259f87ac04160887d8dc58f223298b"/><section>
    <title>INTERNAL_CATCH_DEFINE_SIG_TEST1</title>
<indexterm><primary>INTERNAL_CATCH_DEFINE_SIG_TEST1</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_DEFINE_SIG_TEST1</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_DEFINE_SIG_TEST1( TestName,  signature)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\
&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;TestName()
</programlisting></section>
<anchor xml:id="_catch_8h_1a871da5e60f2ec529a6df64220e9c0790"/><section>
    <title>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD</title>
<indexterm><primary>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD( TestName,  ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a053a90e2d222ba1c12095556aa8db44a">INTERNAL_CATCH_VA_NARGS_IMPL</link>( &quot;dummy&quot;, __VA_ARGS__, <link linkend="_catch_8h_1a9c7bb282d50599e94b665ad7f9ffed31">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X</link>,<link linkend="_catch_8h_1a9c7bb282d50599e94b665ad7f9ffed31">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1a9c7bb282d50599e94b665ad7f9ffed31">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1a9c7bb282d50599e94b665ad7f9ffed31">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1a9c7bb282d50599e94b665ad7f9ffed31">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1a9c7bb282d50599e94b665ad7f9ffed31">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1a9c7bb282d50599e94b665ad7f9ffed31">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X</link>,<link linkend="_catch_8h_1a9c7bb282d50599e94b665ad7f9ffed31">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X</link>,<link linkend="_catch_8h_1a9c7bb282d50599e94b665ad7f9ffed31">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X</link>, <link linkend="_catch_8h_1ae0cccd56ac66f873543f3dede228dbe9">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1</link>, <link linkend="_catch_8h_1aabc65a509a1d132b7a5fe6c4320c82fc">INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0</link>)(TestName, __VA_ARGS__)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1aabc65a509a1d132b7a5fe6c4320c82fc"/><section>
    <title>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0</title>
<indexterm><primary>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0( TestName)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ae0cccd56ac66f873543f3dede228dbe9"/><section>
    <title>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1</title>
<indexterm><primary>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1( TestName,  signature)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;TestType&gt;&#32;\
&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_catch_8h_1a6b5bf9be0310bb60ec9738cbf4ea53f4">INTERNAL_CATCH_MAKE_NAMESPACE</link>(TestName)::TestName&lt;TestType&gt;::test()
</programlisting></section>
<anchor xml:id="_catch_8h_1a9c7bb282d50599e94b665ad7f9ffed31"/><section>
    <title>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X</title>
<indexterm><primary>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X( TestName,  signature,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;&#32;\
&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_catch_8h_1a6b5bf9be0310bb60ec9738cbf4ea53f4">INTERNAL_CATCH_MAKE_NAMESPACE</link>(TestName)::TestName&lt;__VA_ARGS__&gt;::test()
</programlisting></section>
<anchor xml:id="_catch_8h_1a700005dc1f5d4d1c9b4977dfbcc39553"/><section>
    <title>INTERNAL_CATCH_DEFINE_SIG_TEST_X</title>
<indexterm><primary>INTERNAL_CATCH_DEFINE_SIG_TEST_X</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_DEFINE_SIG_TEST_X</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_DEFINE_SIG_TEST_X( TestName,  signature,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\
&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;TestName()
</programlisting></section>
<anchor xml:id="_catch_8h_1abe92a5063c83dec8143bf685e4b4a198"/><section>
    <title>INTERNAL_CATCH_DYNAMIC_SECTION</title>
<indexterm><primary>INTERNAL_CATCH_DYNAMIC_SECTION</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_DYNAMIC_SECTION</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_DYNAMIC_SECTION( ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\
&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS&#32;\
&#32;&#32;&#32;&#32;if(&#32;<link linkend="_class_catch_1_1_section">Catch::Section</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>(&#32;catch_internal_Section&#32;)&#32;=&#32;<link linkend="_struct_catch_1_1_section_info">Catch::SectionInfo</link>(&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;(<link linkend="_class_catch_1_1_reusable_string_stream">Catch::ReusableStringStream</link>()&#32;&lt;&lt;&#32;__VA_ARGS__).str()&#32;)&#32;)&#32;\
&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1ad9594e9891b032f0dd0279960dc861a5">CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</link>
</programlisting></section>
<anchor xml:id="_catch_8h_1aaf2139c8903264bfe442e4b23b6673a9"/><section>
    <title>INTERNAL_CATCH_ELSE</title>
<indexterm><primary>INTERNAL_CATCH_ELSE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_ELSE</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_ELSE( macroName,  resultDisposition,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1ac3284f56c2f755d2b79fdb663cf9fb72">INTERNAL_CATCH_TEST</link>(&#32;macroName,&#32;resultDisposition,&#32;__VA_ARGS__&#32;);&#32;\
&#32;&#32;&#32;&#32;if(&#32;!<link linkend="_namespace_catch_1af718eeab870712f292ed8dc6ee3f6488">Catch::getResultCapture</link>().lastAssertionPassed()&#32;)
</programlisting></section>
<anchor xml:id="_catch_8h_1afec78f8054a97a6ecb38ff098f275efb"/><section>
    <title>INTERNAL_CATCH_EXPAND1</title>
<indexterm><primary>INTERNAL_CATCH_EXPAND1</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_EXPAND1</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_EXPAND1( param)&#160;&#160;&#160;<link linkend="_catch_8h_1a163ac3d9bea0921d546f125ef5d58a2d">INTERNAL_CATCH_EXPAND2</link>(param)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a163ac3d9bea0921d546f125ef5d58a2d"/><section>
    <title>INTERNAL_CATCH_EXPAND2</title>
<indexterm><primary>INTERNAL_CATCH_EXPAND2</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_EXPAND2</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_EXPAND2( ...)&#160;&#160;&#160;INTERNAL_CATCH_NO## __VA_ARGS__</computeroutput></para></section>
<anchor xml:id="_catch_8h_1abfd240b1bdcc699638464fb3c7131c1d"/><section>
    <title>INTERNAL_CATCH_IF</title>
<indexterm><primary>INTERNAL_CATCH_IF</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_IF</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_IF( macroName,  resultDisposition,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1ac3284f56c2f755d2b79fdb663cf9fb72">INTERNAL_CATCH_TEST</link>(&#32;macroName,&#32;resultDisposition,&#32;__VA_ARGS__&#32;);&#32;\
&#32;&#32;&#32;&#32;if(&#32;<link linkend="_namespace_catch_1af718eeab870712f292ed8dc6ee3f6488">Catch::getResultCapture</link>().lastAssertionPassed()&#32;)
</programlisting></section>
<anchor xml:id="_catch_8h_1ab0eb5cfab90a80f3113f0ecb65c62a1c"/><section>
    <title>INTERNAL_CATCH_INFO</title>
<indexterm><primary>INTERNAL_CATCH_INFO</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_INFO</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_INFO( macroName,  log)&#160;&#160;&#160;    <link linkend="_class_catch_1_1_scoped_message">Catch::ScopedMessage</link> <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( scopedMessage )( <link linkend="_struct_catch_1_1_message_builder">Catch::MessageBuilder</link>( macroName##_catch_sr, <link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>, <link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa30222063929ca1b6318faa78e8242f1c">Catch::ResultWas::Info</link> ) &lt;&lt; log );</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a6b5bf9be0310bb60ec9738cbf4ea53f4"/><section>
    <title>INTERNAL_CATCH_MAKE_NAMESPACE</title>
<indexterm><primary>INTERNAL_CATCH_MAKE_NAMESPACE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_MAKE_NAMESPACE</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_MAKE_NAMESPACE( name)&#160;&#160;&#160;<link linkend="_catch_8h_1a5d544d56630e5c6e293d49a825127646">INTERNAL_CATCH_MAKE_NAMESPACE2</link>(name)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a5d544d56630e5c6e293d49a825127646"/><section>
    <title>INTERNAL_CATCH_MAKE_NAMESPACE2</title>
<indexterm><primary>INTERNAL_CATCH_MAKE_NAMESPACE2</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_MAKE_NAMESPACE2</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_MAKE_NAMESPACE2( ...)&#160;&#160;&#160;ns_##__VA_ARGS__</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a74ceed46879d878afcd12648df097264"/><section>
    <title>INTERNAL_CATCH_MAKE_TYPE_LIST</title>
<indexterm><primary>INTERNAL_CATCH_MAKE_TYPE_LIST</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_MAKE_TYPE_LIST</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_MAKE_TYPE_LIST( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ab0c28a0a25d0d138ca5f4049a1094227">INTERNAL_CATCH_MAKE_TYPE_LIST2</link>(<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(__VA_ARGS__))</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ab0c28a0a25d0d138ca5f4049a1094227"/><section>
    <title>INTERNAL_CATCH_MAKE_TYPE_LIST2</title>
<indexterm><primary>INTERNAL_CATCH_MAKE_TYPE_LIST2</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_MAKE_TYPE_LIST2</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_MAKE_TYPE_LIST2( ...)&#160;&#160;&#160;decltype(get_wrapper&lt;<link linkend="_catch_8h_1ab71d7147401833586d6ef7c7db0cb463">INTERNAL_CATCH_REMOVE_PARENS_GEN</link>(__VA_ARGS__)&gt;())</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a3125bdc64f326e6c65f60e3d0b917e0e"/><section>
    <title>INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES</title>
<indexterm><primary>INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES( ...)&#160;&#160;&#160;    <link linkend="_catch_8h_1a060f5fa141c247b4d07dfe9bf3c54079">CATCH_REC_LIST</link>(<link linkend="_catch_8h_1a74ceed46879d878afcd12648df097264">INTERNAL_CATCH_MAKE_TYPE_LIST</link>,__VA_ARGS__)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1af5bedfdbfc32cddf5287a77cf860f242"/><section>
    <title>INTERNAL_CATCH_METHOD_AS_TEST_CASE</title>
<indexterm><primary>INTERNAL_CATCH_METHOD_AS_TEST_CASE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_METHOD_AS_TEST_CASE</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_METHOD_AS_TEST_CASE( QualifiedMethod,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace{&#32;<link linkend="_struct_catch_1_1_auto_reg">Catch::AutoReg</link>&#32;<link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>(&#32;autoRegistrar&#32;)(&#32;<link linkend="_namespace_catch_1ab3d8ccbc900fe50322c39ecbba52f536">Catch::makeTestInvoker</link>(&#32;&amp;QualifiedMethod&#32;),&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;<emphasis role="stringliteral">&quot;&amp;&quot;</emphasis>&#32;#QualifiedMethod,&#32;<link linkend="_struct_catch_1_1_name_and_tags">Catch::NameAndTags</link>{&#32;__VA_ARGS__&#32;}&#32;);&#32;}&#32;<emphasis role="comment">/*&#32;NOLINT&#32;*/</emphasis>&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1ad9594e9891b032f0dd0279960dc861a5">CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</link>
</programlisting></section>
<anchor xml:id="_catch_8h_1ad1f7d83040ad9b09020dc72c57019638"/><section>
    <title>INTERNAL_CATCH_MSG</title>
<indexterm><primary>INTERNAL_CATCH_MSG</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_MSG</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_MSG( macroName,  messageType,  resultDisposition,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_assertion_handler">Catch::AssertionHandler</link>&#32;catchAssertionHandler(&#32;macroName##_catch_sr,&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;<link linkend="_class_catch_1_1_string_ref">Catch::StringRef</link>(),&#32;resultDisposition&#32;);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleMessage(&#32;messageType,&#32;(&#32;<link linkend="_struct_catch_1_1_message_stream">Catch::MessageStream</link>()&#32;&lt;&lt;&#32;__VA_ARGS__&#32;+&#32;<link linkend="_struct_catch_1_1_stream_end_stop">::Catch::StreamEndStop</link>()&#32;).m_stream.str()&#32;);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_REACT(&#32;catchAssertionHandler&#32;)&#32;\
&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>(&#32;<emphasis role="keyword">false</emphasis>&#32;)
</programlisting></section>
<anchor xml:id="_catch_8h_1ac340cc35716115abaec4dfbcb061da52"/><section>
    <title>INTERNAL_CATCH_NO_THROW</title>
<indexterm><primary>INTERNAL_CATCH_NO_THROW</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_NO_THROW</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_NO_THROW( macroName,  resultDisposition,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_assertion_handler">Catch::AssertionHandler</link>&#32;catchAssertionHandler(&#32;macroName##_catch_sr,&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;<link linkend="_catch_8h_1ab6dc42a98c8854e2e1d91874b1fe406c">CATCH_INTERNAL_STRINGIFY</link>(__VA_ARGS__),&#32;resultDisposition&#32;);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_cast&lt;void&gt;(__VA_ARGS__);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleExceptionNotThrownAsExpected();&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catch(&#32;...&#32;)&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleUnexpectedInflightException();&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_REACT(&#32;catchAssertionHandler&#32;)&#32;\
&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>(&#32;<emphasis role="keyword">false</emphasis>&#32;)
</programlisting></section>
<anchor xml:id="_catch_8h_1a6868a4eb7481605e628a3aaf0c1fbb01"/><section>
    <title>INTERNAL_CATCH_NOINTERNAL_CATCH_DEF</title>
<indexterm><primary>INTERNAL_CATCH_NOINTERNAL_CATCH_DEF</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_NOINTERNAL_CATCH_DEF</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_NOINTERNAL_CATCH_DEF</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a6e4eddcee92aabb74a7fa182650307c3"/><section>
    <title>INTERNAL_CATCH_NTTP_0</title>
<indexterm><primary>INTERNAL_CATCH_NTTP_0</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_NTTP_0</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_NTTP_0</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ac74ba3aed32e3cfe16e9aaa7e5229fef"/><section>
    <title>INTERNAL_CATCH_NTTP_1</title>
<indexterm><primary>INTERNAL_CATCH_NTTP_1</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_NTTP_1</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_NTTP_1( signature,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>Nttp{};\
&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\
&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;get_wrapper()&#32;noexcept&#32;-&gt;&#32;Nttp&lt;__VA_ARGS__&gt;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};&#32;}&#32;\
&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">template</emphasis>&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;&#32;<emphasis role="keyword">class</emphasis>...&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>NttpTemplateTypeList{};\
&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">template</emphasis>&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;&#32;<emphasis role="keyword">class</emphasis>...Cs&gt;\
&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;get_wrapper()&#32;noexcept&#32;-&gt;&#32;NttpTemplateTypeList&lt;Cs...&gt;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};&#32;}&#32;\
&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">template</emphasis>&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>Container,&#32;<emphasis role="keyword">template</emphasis>&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>List,&#32;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(signature)&gt;\
&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>rewrap&lt;NttpTemplateTypeList&lt;Container&gt;,&#32;List&lt;__VA_ARGS__&gt;&gt;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis>type&#32;=&#32;TypeList&lt;Container&lt;__VA_ARGS__&gt;&gt;;&#32;};\
&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">template</emphasis>&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>Container,&#32;<emphasis role="keyword">template</emphasis>&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>List,&#32;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(signature),&#32;<emphasis role="keyword">typename</emphasis>...Elements&gt;\
&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>rewrap&lt;NttpTemplateTypeList&lt;Container&gt;,&#32;List&lt;__VA_ARGS__&gt;,&#32;Elements...&gt;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis>type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;append&lt;TypeList&lt;Container&lt;__VA_ARGS__&gt;&gt;,&#32;<emphasis role="keyword">typename</emphasis>&#32;rewrap&lt;NttpTemplateTypeList&lt;Container&gt;,&#32;Elements...&gt;::type&gt;::type;&#32;};\
&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>Final,&#32;<emphasis role="keyword">template</emphasis>&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;&#32;<emphasis role="keyword">class</emphasis>...Containers,&#32;<emphasis role="keyword">typename</emphasis>...Types&gt;\
&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>create&lt;Final,&#32;NttpTemplateTypeList&lt;Containers...&gt;,&#32;TypeList&lt;Types...&gt;&gt;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis>type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;append&lt;Final&lt;&gt;,&#32;<emphasis role="keyword">typename</emphasis>&#32;rewrap&lt;NttpTemplateTypeList&lt;Containers&gt;,&#32;Types...&gt;::type...&gt;::type;&#32;};
</programlisting></section>
<anchor xml:id="_catch_8h_1a22d82768693e811fd08acca9c0e44726"/><section>
    <title>INTERNAL_CATCH_NTTP_GEN</title>
<indexterm><primary>INTERNAL_CATCH_NTTP_GEN</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_NTTP_GEN</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_NTTP_GEN( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a053a90e2d222ba1c12095556aa8db44a">INTERNAL_CATCH_VA_NARGS_IMPL</link>(__VA_ARGS__, <link linkend="_catch_8h_1ac74ba3aed32e3cfe16e9aaa7e5229fef">INTERNAL_CATCH_NTTP_1</link>(__VA_ARGS__), <link linkend="_catch_8h_1ac74ba3aed32e3cfe16e9aaa7e5229fef">INTERNAL_CATCH_NTTP_1</link>(__VA_ARGS__), <link linkend="_catch_8h_1ac74ba3aed32e3cfe16e9aaa7e5229fef">INTERNAL_CATCH_NTTP_1</link>(__VA_ARGS__), <link linkend="_catch_8h_1ac74ba3aed32e3cfe16e9aaa7e5229fef">INTERNAL_CATCH_NTTP_1</link>(__VA_ARGS__), <link linkend="_catch_8h_1ac74ba3aed32e3cfe16e9aaa7e5229fef">INTERNAL_CATCH_NTTP_1</link>(__VA_ARGS__), <link linkend="_catch_8h_1ac74ba3aed32e3cfe16e9aaa7e5229fef">INTERNAL_CATCH_NTTP_1</link>( __VA_ARGS__), <link linkend="_catch_8h_1ac74ba3aed32e3cfe16e9aaa7e5229fef">INTERNAL_CATCH_NTTP_1</link>( __VA_ARGS__), <link linkend="_catch_8h_1ac74ba3aed32e3cfe16e9aaa7e5229fef">INTERNAL_CATCH_NTTP_1</link>( __VA_ARGS__), <link linkend="_catch_8h_1ac74ba3aed32e3cfe16e9aaa7e5229fef">INTERNAL_CATCH_NTTP_1</link>( __VA_ARGS__),<link linkend="_catch_8h_1ac74ba3aed32e3cfe16e9aaa7e5229fef">INTERNAL_CATCH_NTTP_1</link>( __VA_ARGS__), <link linkend="_catch_8h_1a6e4eddcee92aabb74a7fa182650307c3">INTERNAL_CATCH_NTTP_0</link>)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a534515713c8464b85add867ec4166ecf"/><section>
    <title>INTERNAL_CATCH_NTTP_REG_GEN</title>
<indexterm><primary>INTERNAL_CATCH_NTTP_REG_GEN</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_NTTP_REG_GEN</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_NTTP_REG_GEN( TestFunc,  ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a053a90e2d222ba1c12095556aa8db44a">INTERNAL_CATCH_VA_NARGS_IMPL</link>( &quot;dummy&quot;, __VA_ARGS__, <link linkend="_catch_8h_1a3f4b5b59a0890d8f4b5ccde153f52b91">INTERNAL_CATCH_NTTP_REGISTER</link>, <link linkend="_catch_8h_1a3f4b5b59a0890d8f4b5ccde153f52b91">INTERNAL_CATCH_NTTP_REGISTER</link>, <link linkend="_catch_8h_1a3f4b5b59a0890d8f4b5ccde153f52b91">INTERNAL_CATCH_NTTP_REGISTER</link>, <link linkend="_catch_8h_1a3f4b5b59a0890d8f4b5ccde153f52b91">INTERNAL_CATCH_NTTP_REGISTER</link>, <link linkend="_catch_8h_1a3f4b5b59a0890d8f4b5ccde153f52b91">INTERNAL_CATCH_NTTP_REGISTER</link>, <link linkend="_catch_8h_1a3f4b5b59a0890d8f4b5ccde153f52b91">INTERNAL_CATCH_NTTP_REGISTER</link>, <link linkend="_catch_8h_1a3f4b5b59a0890d8f4b5ccde153f52b91">INTERNAL_CATCH_NTTP_REGISTER</link>, <link linkend="_catch_8h_1a3f4b5b59a0890d8f4b5ccde153f52b91">INTERNAL_CATCH_NTTP_REGISTER</link>, <link linkend="_catch_8h_1a3f4b5b59a0890d8f4b5ccde153f52b91">INTERNAL_CATCH_NTTP_REGISTER</link>, <link linkend="_catch_8h_1a46d03d475b2d70c812ae2fbb7c62e2e1">INTERNAL_CATCH_NTTP_REGISTER0</link>, <link linkend="_catch_8h_1a46d03d475b2d70c812ae2fbb7c62e2e1">INTERNAL_CATCH_NTTP_REGISTER0</link>)(TestFunc, __VA_ARGS__)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a960369279996cfc00d2e1a913afd98e8"/><section>
    <title>INTERNAL_CATCH_NTTP_REG_METHOD_GEN</title>
<indexterm><primary>INTERNAL_CATCH_NTTP_REG_METHOD_GEN</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_NTTP_REG_METHOD_GEN</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_NTTP_REG_METHOD_GEN( TestName,  ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a053a90e2d222ba1c12095556aa8db44a">INTERNAL_CATCH_VA_NARGS_IMPL</link>( &quot;dummy&quot;, __VA_ARGS__, <link linkend="_catch_8h_1a50f42674ac12901035ad2357a85e160f">INTERNAL_CATCH_NTTP_REGISTER_METHOD</link>, <link linkend="_catch_8h_1a50f42674ac12901035ad2357a85e160f">INTERNAL_CATCH_NTTP_REGISTER_METHOD</link>, <link linkend="_catch_8h_1a50f42674ac12901035ad2357a85e160f">INTERNAL_CATCH_NTTP_REGISTER_METHOD</link>, <link linkend="_catch_8h_1a50f42674ac12901035ad2357a85e160f">INTERNAL_CATCH_NTTP_REGISTER_METHOD</link>, <link linkend="_catch_8h_1a50f42674ac12901035ad2357a85e160f">INTERNAL_CATCH_NTTP_REGISTER_METHOD</link>, <link linkend="_catch_8h_1a50f42674ac12901035ad2357a85e160f">INTERNAL_CATCH_NTTP_REGISTER_METHOD</link>, <link linkend="_catch_8h_1a50f42674ac12901035ad2357a85e160f">INTERNAL_CATCH_NTTP_REGISTER_METHOD</link>, <link linkend="_catch_8h_1a50f42674ac12901035ad2357a85e160f">INTERNAL_CATCH_NTTP_REGISTER_METHOD</link>, <link linkend="_catch_8h_1a50f42674ac12901035ad2357a85e160f">INTERNAL_CATCH_NTTP_REGISTER_METHOD</link>, <link linkend="_catch_8h_1a3ec09fcab86a0d09313b48d4e8275594">INTERNAL_CATCH_NTTP_REGISTER_METHOD0</link>, <link linkend="_catch_8h_1a3ec09fcab86a0d09313b48d4e8275594">INTERNAL_CATCH_NTTP_REGISTER_METHOD0</link>)(TestName, __VA_ARGS__)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a3f4b5b59a0890d8f4b5ccde153f52b91"/><section>
    <title>INTERNAL_CATCH_NTTP_REGISTER</title>
<indexterm><primary>INTERNAL_CATCH_NTTP_REGISTER</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_NTTP_REGISTER</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_NTTP_REGISTER( TestFunc,  signature,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\
&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;reg_test(Nttp&lt;__VA_ARGS__&gt;,&#32;<link linkend="_struct_catch_1_1_name_and_tags">Catch::NameAndTags</link>&#32;nameAndTags)\
&#32;&#32;&#32;&#32;{\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Catch::AutoReg(&#32;<link linkend="_namespace_catch_1ab3d8ccbc900fe50322c39ecbba52f536">Catch::makeTestInvoker</link>(&amp;TestFunc&lt;__VA_ARGS__&gt;),&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;<link linkend="_class_catch_1_1_string_ref">Catch::StringRef</link>(),&#32;nameAndTags);\
&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_catch_8h_1a46d03d475b2d70c812ae2fbb7c62e2e1"/><section>
    <title>INTERNAL_CATCH_NTTP_REGISTER0</title>
<indexterm><primary>INTERNAL_CATCH_NTTP_REGISTER0</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_NTTP_REGISTER0</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_NTTP_REGISTER0( TestFunc,  signature)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Type&gt;\
&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;reg_test(TypeList&lt;Type&gt;,&#32;<link linkend="_struct_catch_1_1_name_and_tags">Catch::NameAndTags</link>&#32;nameAndTags)\
&#32;&#32;&#32;&#32;{\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Catch::AutoReg(&#32;<link linkend="_namespace_catch_1ab3d8ccbc900fe50322c39ecbba52f536">Catch::makeTestInvoker</link>(&amp;TestFunc&lt;Type&gt;),&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;<link linkend="_class_catch_1_1_string_ref">Catch::StringRef</link>(),&#32;nameAndTags);\
&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_catch_8h_1a50f42674ac12901035ad2357a85e160f"/><section>
    <title>INTERNAL_CATCH_NTTP_REGISTER_METHOD</title>
<indexterm><primary>INTERNAL_CATCH_NTTP_REGISTER_METHOD</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_NTTP_REGISTER_METHOD</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_NTTP_REGISTER_METHOD( TestName,  signature,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\
&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;reg_test(Nttp&lt;__VA_ARGS__&gt;,&#32;<link linkend="_class_catch_1_1_string_ref">Catch::StringRef</link>&#32;className,&#32;<link linkend="_struct_catch_1_1_name_and_tags">Catch::NameAndTags</link>&#32;nameAndTags)\
&#32;&#32;&#32;&#32;{\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Catch::AutoReg(&#32;<link linkend="_namespace_catch_1ab3d8ccbc900fe50322c39ecbba52f536">Catch::makeTestInvoker</link>(&amp;TestName&lt;__VA_ARGS__&gt;::test),&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;className,&#32;nameAndTags);\
&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_catch_8h_1a3ec09fcab86a0d09313b48d4e8275594"/><section>
    <title>INTERNAL_CATCH_NTTP_REGISTER_METHOD0</title>
<indexterm><primary>INTERNAL_CATCH_NTTP_REGISTER_METHOD0</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_NTTP_REGISTER_METHOD0</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_NTTP_REGISTER_METHOD0( TestName,  signature,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Type&gt;\
&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;reg_test(TypeList&lt;Type&gt;,&#32;<link linkend="_class_catch_1_1_string_ref">Catch::StringRef</link>&#32;className,&#32;<link linkend="_struct_catch_1_1_name_and_tags">Catch::NameAndTags</link>&#32;nameAndTags)\
&#32;&#32;&#32;&#32;{\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Catch::AutoReg(&#32;<link linkend="_namespace_catch_1ab3d8ccbc900fe50322c39ecbba52f536">Catch::makeTestInvoker</link>(&amp;TestName&lt;Type&gt;::test),&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;className,&#32;nameAndTags);\
&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_catch_8h_1a87986fec7b6b65bdae29cd2fa62bec20"/><section>
    <title>INTERNAL_CATCH_REACT</title>
<indexterm><primary>INTERNAL_CATCH_REACT</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_REACT</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_REACT( handler)&#160;&#160;&#160;handler.complete();</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a1c3c601bf24488800bdf3f634a2a6b11"/><section>
    <title>INTERNAL_CATCH_REGISTER_ENUM</title>
<indexterm><primary>INTERNAL_CATCH_REGISTER_ENUM</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_REGISTER_ENUM</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_REGISTER_ENUM( enumName,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered"><emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{&#32;\
&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>StringMaker&lt;enumName&gt;&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">convert</link>(&#32;enumName&#32;value&#32;)&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;enumInfo&#32;=&#32;<link linkend="_namespace_catch_1a585459763f2c7610e57de2dd22dd1ad8">::Catch::getMutableRegistryHub</link>().<link linkend="_struct_catch_1_1_i_mutable_registry_hub_1ab1f0013630047f8295e5969b624ad632">getMutableEnumValuesRegistry</link>().registerEnum(&#32;#enumName,&#32;#__VA_ARGS__,&#32;{&#32;__VA_ARGS__&#32;}&#32;);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::string<emphasis role="keyword">&gt;</emphasis>(enumInfo.lookup(&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(&#32;value&#32;)&#32;));&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\
&#32;&#32;&#32;&#32;};&#32;\
}
</programlisting></section>
<anchor xml:id="_catch_8h_1ad7fc9293cc800a6f2fde7a0a211533c8"/><section>
    <title>INTERNAL_CATCH_REGISTER_TESTCASE</title>
<indexterm><primary>INTERNAL_CATCH_REGISTER_TESTCASE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_REGISTER_TESTCASE</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_REGISTER_TESTCASE( Function,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Catch::AutoReg&#32;<link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>(&#32;autoRegistrar&#32;)(&#32;<link linkend="_namespace_catch_1ab3d8ccbc900fe50322c39ecbba52f536">Catch::makeTestInvoker</link>(&#32;Function&#32;),&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;<link linkend="_class_catch_1_1_string_ref">Catch::StringRef</link>(),&#32;<link linkend="_struct_catch_1_1_name_and_tags">Catch::NameAndTags</link>{&#32;__VA_ARGS__&#32;}&#32;);&#32;<emphasis role="comment">/*&#32;NOLINT&#32;*/</emphasis>&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1ad9594e9891b032f0dd0279960dc861a5">CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</link>
</programlisting></section>
<anchor xml:id="_catch_8h_1adf5ede19321b27ce635d01688551e782"/><section>
    <title>INTERNAL_CATCH_REMOVE_PARENS</title>
<indexterm><primary>INTERNAL_CATCH_REMOVE_PARENS</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_REMOVE_PARENS</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_REMOVE_PARENS( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1afec78f8054a97a6ecb38ff098f275efb">INTERNAL_CATCH_EXPAND1</link>(<link linkend="_catch_8h_1a053610cf96d1be50463e9cb08e818ed1">INTERNAL_CATCH_DEF</link> __VA_ARGS__)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ad456e4d0700058feab367df4dfdb034a"/><section>
    <title>INTERNAL_CATCH_REMOVE_PARENS_10_ARG</title>
<indexterm><primary>INTERNAL_CATCH_REMOVE_PARENS_10_ARG</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_REMOVE_PARENS_10_ARG</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_REMOVE_PARENS_10_ARG( _0,  _1,  _2,  _3,  _4,  _5,  _6,  _7,  _8,  _9)&#160;&#160;&#160;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(_0), <link linkend="_catch_8h_1aac325e60ff7ae083ea5378a57ad0853e">INTERNAL_CATCH_REMOVE_PARENS_9_ARG</link>(_1, _2, _3, _4, _5, _6, _7, _8, _9)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1adda79d552d6615a64b064426fe5d8347"/><section>
    <title>INTERNAL_CATCH_REMOVE_PARENS_11_ARG</title>
<indexterm><primary>INTERNAL_CATCH_REMOVE_PARENS_11_ARG</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_REMOVE_PARENS_11_ARG</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_REMOVE_PARENS_11_ARG( _0,  _1,  _2,  _3,  _4,  _5,  _6,  _7,  _8,  _9,  _10)&#160;&#160;&#160;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(_0), <link linkend="_catch_8h_1ad456e4d0700058feab367df4dfdb034a">INTERNAL_CATCH_REMOVE_PARENS_10_ARG</link>(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1aaff4fdf9d9447a3e896ff3c940aa63bf"/><section>
    <title>INTERNAL_CATCH_REMOVE_PARENS_1_ARG</title>
<indexterm><primary>INTERNAL_CATCH_REMOVE_PARENS_1_ARG</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_REMOVE_PARENS_1_ARG</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_REMOVE_PARENS_1_ARG( _0)&#160;&#160;&#160;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(_0)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ad922f8cb04e51fa4d1fc7136c2170ec7"/><section>
    <title>INTERNAL_CATCH_REMOVE_PARENS_2_ARG</title>
<indexterm><primary>INTERNAL_CATCH_REMOVE_PARENS_2_ARG</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_REMOVE_PARENS_2_ARG</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_REMOVE_PARENS_2_ARG( _0,  _1)&#160;&#160;&#160;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(_0), <link linkend="_catch_8h_1aaff4fdf9d9447a3e896ff3c940aa63bf">INTERNAL_CATCH_REMOVE_PARENS_1_ARG</link>(_1)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a3e122b37a4a905554e927a298e96ba4e"/><section>
    <title>INTERNAL_CATCH_REMOVE_PARENS_3_ARG</title>
<indexterm><primary>INTERNAL_CATCH_REMOVE_PARENS_3_ARG</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_REMOVE_PARENS_3_ARG</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_REMOVE_PARENS_3_ARG( _0,  _1,  _2)&#160;&#160;&#160;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(_0), <link linkend="_catch_8h_1ad922f8cb04e51fa4d1fc7136c2170ec7">INTERNAL_CATCH_REMOVE_PARENS_2_ARG</link>(_1, _2)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ad13badf823db63f70503f46977ff7664"/><section>
    <title>INTERNAL_CATCH_REMOVE_PARENS_4_ARG</title>
<indexterm><primary>INTERNAL_CATCH_REMOVE_PARENS_4_ARG</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_REMOVE_PARENS_4_ARG</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_REMOVE_PARENS_4_ARG( _0,  _1,  _2,  _3)&#160;&#160;&#160;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(_0), <link linkend="_catch_8h_1a3e122b37a4a905554e927a298e96ba4e">INTERNAL_CATCH_REMOVE_PARENS_3_ARG</link>(_1, _2, _3)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a886c6ae574320d8aae6415985b19426c"/><section>
    <title>INTERNAL_CATCH_REMOVE_PARENS_5_ARG</title>
<indexterm><primary>INTERNAL_CATCH_REMOVE_PARENS_5_ARG</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_REMOVE_PARENS_5_ARG</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_REMOVE_PARENS_5_ARG( _0,  _1,  _2,  _3,  _4)&#160;&#160;&#160;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(_0), <link linkend="_catch_8h_1ad13badf823db63f70503f46977ff7664">INTERNAL_CATCH_REMOVE_PARENS_4_ARG</link>(_1, _2, _3, _4)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a261dd3f6db0cd3199456d5be891bec22"/><section>
    <title>INTERNAL_CATCH_REMOVE_PARENS_6_ARG</title>
<indexterm><primary>INTERNAL_CATCH_REMOVE_PARENS_6_ARG</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_REMOVE_PARENS_6_ARG</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_REMOVE_PARENS_6_ARG( _0,  _1,  _2,  _3,  _4,  _5)&#160;&#160;&#160;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(_0), <link linkend="_catch_8h_1a886c6ae574320d8aae6415985b19426c">INTERNAL_CATCH_REMOVE_PARENS_5_ARG</link>(_1, _2, _3, _4, _5)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a4ff89b8d8438fa571ccebd4611679cb0"/><section>
    <title>INTERNAL_CATCH_REMOVE_PARENS_7_ARG</title>
<indexterm><primary>INTERNAL_CATCH_REMOVE_PARENS_7_ARG</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_REMOVE_PARENS_7_ARG</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_REMOVE_PARENS_7_ARG( _0,  _1,  _2,  _3,  _4,  _5,  _6)&#160;&#160;&#160;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(_0), <link linkend="_catch_8h_1a261dd3f6db0cd3199456d5be891bec22">INTERNAL_CATCH_REMOVE_PARENS_6_ARG</link>(_1, _2, _3, _4, _5, _6)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a2bc5383346d063d8aa13169a86101f8a"/><section>
    <title>INTERNAL_CATCH_REMOVE_PARENS_8_ARG</title>
<indexterm><primary>INTERNAL_CATCH_REMOVE_PARENS_8_ARG</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_REMOVE_PARENS_8_ARG</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_REMOVE_PARENS_8_ARG( _0,  _1,  _2,  _3,  _4,  _5,  _6,  _7)&#160;&#160;&#160;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(_0), <link linkend="_catch_8h_1a4ff89b8d8438fa571ccebd4611679cb0">INTERNAL_CATCH_REMOVE_PARENS_7_ARG</link>(_1, _2, _3, _4, _5, _6, _7)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1aac325e60ff7ae083ea5378a57ad0853e"/><section>
    <title>INTERNAL_CATCH_REMOVE_PARENS_9_ARG</title>
<indexterm><primary>INTERNAL_CATCH_REMOVE_PARENS_9_ARG</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_REMOVE_PARENS_9_ARG</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_REMOVE_PARENS_9_ARG( _0,  _1,  _2,  _3,  _4,  _5,  _6,  _7,  _8)&#160;&#160;&#160;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(_0), <link linkend="_catch_8h_1a2bc5383346d063d8aa13169a86101f8a">INTERNAL_CATCH_REMOVE_PARENS_8_ARG</link>(_1, _2, _3, _4, _5, _6, _7, _8)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ab71d7147401833586d6ef7c7db0cb463"/><section>
    <title>INTERNAL_CATCH_REMOVE_PARENS_GEN</title>
<indexterm><primary>INTERNAL_CATCH_REMOVE_PARENS_GEN</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_REMOVE_PARENS_GEN</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_REMOVE_PARENS_GEN( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a053a90e2d222ba1c12095556aa8db44a">INTERNAL_CATCH_VA_NARGS_IMPL</link>(__VA_ARGS__, <link linkend="_catch_8h_1adda79d552d6615a64b064426fe5d8347">INTERNAL_CATCH_REMOVE_PARENS_11_ARG</link>,<link linkend="_catch_8h_1ad456e4d0700058feab367df4dfdb034a">INTERNAL_CATCH_REMOVE_PARENS_10_ARG</link>,<link linkend="_catch_8h_1aac325e60ff7ae083ea5378a57ad0853e">INTERNAL_CATCH_REMOVE_PARENS_9_ARG</link>,<link linkend="_catch_8h_1a2bc5383346d063d8aa13169a86101f8a">INTERNAL_CATCH_REMOVE_PARENS_8_ARG</link>,<link linkend="_catch_8h_1a4ff89b8d8438fa571ccebd4611679cb0">INTERNAL_CATCH_REMOVE_PARENS_7_ARG</link>,<link linkend="_catch_8h_1a261dd3f6db0cd3199456d5be891bec22">INTERNAL_CATCH_REMOVE_PARENS_6_ARG</link>,<link linkend="_catch_8h_1a886c6ae574320d8aae6415985b19426c">INTERNAL_CATCH_REMOVE_PARENS_5_ARG</link>,<link linkend="_catch_8h_1ad13badf823db63f70503f46977ff7664">INTERNAL_CATCH_REMOVE_PARENS_4_ARG</link>,<link linkend="_catch_8h_1a3e122b37a4a905554e927a298e96ba4e">INTERNAL_CATCH_REMOVE_PARENS_3_ARG</link>,<link linkend="_catch_8h_1ad922f8cb04e51fa4d1fc7136c2170ec7">INTERNAL_CATCH_REMOVE_PARENS_2_ARG</link>,<link linkend="_catch_8h_1aaff4fdf9d9447a3e896ff3c940aa63bf">INTERNAL_CATCH_REMOVE_PARENS_1_ARG</link>)(__VA_ARGS__)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a2969ec50cc661169e94b1b80ac799c07"/><section>
    <title>INTERNAL_CATCH_SECTION</title>
<indexterm><primary>INTERNAL_CATCH_SECTION</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_SECTION</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_SECTION( ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\
&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS&#32;\
&#32;&#32;&#32;&#32;if(&#32;<link linkend="_class_catch_1_1_section">Catch::Section</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>(&#32;catch_internal_Section&#32;)&#32;=&#32;<link linkend="_struct_catch_1_1_section_info">Catch::SectionInfo</link>(&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;__VA_ARGS__&#32;)&#32;)&#32;\
&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1ad9594e9891b032f0dd0279960dc861a5">CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</link>
</programlisting></section>
<anchor xml:id="_catch_8h_1a13733e49e752d29b735e94d9e72c7d6b"/><section>
    <title>INTERNAL_CATCH_STRINGIZE</title>
<indexterm><primary>INTERNAL_CATCH_STRINGIZE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_STRINGIZE</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_STRINGIZE( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a6fedc6934bac0e22dbbd13aabf81ad3f">INTERNAL_CATCH_STRINGIZE2</link>(__VA_ARGS__)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a6fedc6934bac0e22dbbd13aabf81ad3f"/><section>
    <title>INTERNAL_CATCH_STRINGIZE2</title>
<indexterm><primary>INTERNAL_CATCH_STRINGIZE2</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_STRINGIZE2</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_STRINGIZE2( ...)&#160;&#160;&#160;#__VA_ARGS__</computeroutput></para></section>
<anchor xml:id="_catch_8h_1aa66562537dd49bc33e53f9aa01acedaf"/><section>
    <title>INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS</title>
<indexterm><primary>INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS( param)&#160;&#160;&#160;<link linkend="_catch_8h_1a13733e49e752d29b735e94d9e72c7d6b">INTERNAL_CATCH_STRINGIZE</link>(<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(param))</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ac9ef0e27a1dcfda5fe253f1767e2fab8"/><section>
    <title>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE</title>
<indexterm><primary>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE( Name,  Tags,  TmplList)&#160;&#160;&#160;        <link linkend="_catch_8h_1a1ddeb0664108fbef4c50e5dab4dbc567">INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_ ), <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_ ), Name, Tags, TmplList )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a1ddeb0664108fbef4c50e5dab4dbc567"/><section>
    <title>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2</title>
<indexterm><primary>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2( TestName,  TestFunc,  Name,  Tags,  TmplList)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename&#32;TestType&gt;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;TestFunc();&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>{\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>INTERNAL_CATCH_MAKE_NAMESPACE(TestName){\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TYPE_GEN\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&lt;<emphasis role="keyword">typename</emphasis>...&#32;Types&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>TestName&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;reg_tests()&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>expander&#32;=&#32;<emphasis role="keywordtype">int</emphasis>[];&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)expander{(<link linkend="_struct_catch_1_1_auto_reg">Catch::AutoReg</link>(&#32;<link linkend="_namespace_catch_1ab3d8ccbc900fe50322c39ecbba52f536">Catch::makeTestInvoker</link>(&#32;&amp;TestFunc&lt;Types&gt;&#32;),&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;<link linkend="_class_catch_1_1_string_ref">Catch::StringRef</link>(),&#32;<link linkend="_struct_catch_1_1_name_and_tags">Catch::NameAndTags</link>{&#32;Name&#32;<emphasis role="stringliteral">&quot;&#32;-&#32;&quot;</emphasis>&#32;+&#32;std::string(<link linkend="_catch_8h_1a13733e49e752d29b735e94d9e72c7d6b">INTERNAL_CATCH_STRINGIZE</link>(TmplList))&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;-&#32;&quot;</emphasis>&#32;+&#32;std::to_string(index),&#32;Tags&#32;}&#32;),&#32;index++)...&#32;};<emphasis role="comment">/*&#32;NOLINT&#32;*/</emphasis>\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>(&#32;globalRegistrar&#32;)&#32;=&#32;[](){&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>TestInit&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;convert&lt;TestName,&#32;TmplList&gt;::type;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestInit&#32;t;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t.reg_tests();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}}\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename&#32;TestType&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;TestFunc()
</programlisting></section>
<anchor xml:id="_catch_8h_1a6e9c5f2b3bc07068ad3bd78d224989f3"/><section>
    <title>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD</title>
<indexterm><primary>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD( ClassName,  Name,  Tags,  TmplList)&#160;&#160;&#160;        <link linkend="_catch_8h_1a9f5b6affb41be524dcd4b28723ffcfc8">INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_ ), <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_ ), ClassName, Name, Tags, TmplList )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a9f5b6affb41be524dcd4b28723ffcfc8"/><section>
    <title>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2</title>
<indexterm><primary>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2( TestNameClass,  TestName,  ClassName,  Name,  Tags,  TmplList)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename&#32;TestType&gt;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>TestName&#32;:&#32;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(ClassName&#32;&lt;TestType&gt;)&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test();\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>{\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>INTERNAL_CATCH_MAKE_NAMESPACE(TestName){&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TYPE_GEN\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&lt;<emphasis role="keyword">typename</emphasis>...Types&gt;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>TestNameClass{\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;reg_tests(){\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;0;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>expander&#32;=&#32;<emphasis role="keywordtype">int</emphasis>[];\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)expander{(<link linkend="_struct_catch_1_1_auto_reg">Catch::AutoReg</link>(&#32;<link linkend="_namespace_catch_1ab3d8ccbc900fe50322c39ecbba52f536">Catch::makeTestInvoker</link>(&#32;&amp;TestName&lt;Types&gt;::test&#32;),&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;#ClassName,&#32;<link linkend="_struct_catch_1_1_name_and_tags">Catch::NameAndTags</link>{&#32;Name&#32;<emphasis role="stringliteral">&quot;&#32;-&#32;&quot;</emphasis>&#32;+&#32;std::string(<link linkend="_catch_8h_1a13733e49e752d29b735e94d9e72c7d6b">INTERNAL_CATCH_STRINGIZE</link>(TmplList))&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;-&#32;&quot;</emphasis>&#32;+&#32;std::to_string(index),&#32;Tags&#32;}&#32;),&#32;index++)...&#32;};<emphasis role="comment">/*&#32;NOLINT&#32;*/</emphasis>&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>(&#32;globalRegistrar&#32;)&#32;=&#32;[](){\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>TestInit&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;convert&lt;TestNameClass,&#32;TmplList&gt;::type;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestInit&#32;t;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t.reg_tests();\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}();&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}}\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename&#32;TestType&gt;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TestName&lt;TestType&gt;::test()
</programlisting></section>
<anchor xml:id="_catch_8h_1acd8f967bc841a9ab05774e8863cf9506"/><section>
    <title>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE</title>
<indexterm><primary>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE( Name,  Tags,  ...)&#160;&#160;&#160;        <link linkend="_catch_8h_1a52cf4aaf39fe85c5af878c432296a46d">INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2</link>(<link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_ ), <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_ ), Name, Tags, typename T,__VA_ARGS__)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a52cf4aaf39fe85c5af878c432296a46d"/><section>
    <title>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2</title>
<indexterm><primary>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2( TestName,  TestFuncName,  Name,  Tags,  Signature,  TmplTypes,  TypesList)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a1a4839fc44923f817dec5694f0bd1f33"/><section>
    <title>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD</title>
<indexterm><primary>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( ClassName,  Name,  Tags,  ...)&#160;&#160;&#160;        <link linkend="_catch_8h_1aa50cacf2bbca5f9ddd2625403e649799">INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_ ), <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_ ), ClassName, Name, Tags, typename T, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1aa50cacf2bbca5f9ddd2625403e649799"/><section>
    <title>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2</title>
<indexterm><primary>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2( TestNameClass,  TestName,  ClassName,  Name,  Tags,  Signature,  TmplTypes,  TypesList)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a09fd24fffbc23194f538de357e9714f7"/><section>
    <title>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG</title>
<indexterm><primary>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( ClassName,  Name,  Tags,  Signature,  ...)&#160;&#160;&#160;        <link linkend="_catch_8h_1aa50cacf2bbca5f9ddd2625403e649799">INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_ ), <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_ ), ClassName, Name, Tags, Signature, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ab1e624e6e831f5f15df243f97bf7e962"/><section>
    <title>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG</title>
<indexterm><primary>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG( Name,  Tags,  Signature,  ...)&#160;&#160;&#160;        <link linkend="_catch_8h_1a52cf4aaf39fe85c5af878c432296a46d">INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2</link>(<link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_ ), <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_ ), Name, Tags, Signature, __VA_ARGS__)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a8190f00b563c3efb52f8057be41db45f"/><section>
    <title>INTERNAL_CATCH_TEMPLATE_TEST_CASE</title>
<indexterm><primary>INTERNAL_CATCH_TEMPLATE_TEST_CASE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TEMPLATE_TEST_CASE</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TEMPLATE_TEST_CASE( Name,  Tags,  ...)&#160;&#160;&#160;        <link linkend="_catch_8h_1a7a9fab8f42ff86d3985c11b474efdaec">INTERNAL_CATCH_TEMPLATE_TEST_CASE_2</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_ ), <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_ ), Name, Tags, typename TestType, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a7a9fab8f42ff86d3985c11b474efdaec"/><section>
    <title>INTERNAL_CATCH_TEMPLATE_TEST_CASE_2</title>
<indexterm><primary>INTERNAL_CATCH_TEMPLATE_TEST_CASE_2</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TEMPLATE_TEST_CASE_2</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_2( TestName,  TestFunc,  Name,  Tags,  Signature,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_DECLARE_SIG_TEST(TestFunc,&#32;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(Signature));\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>{\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>INTERNAL_CATCH_MAKE_NAMESPACE(TestName){\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TYPE_GEN\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_NTTP_GEN(<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(Signature))\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_NTTP_REG_GEN(TestFunc,<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(Signature))\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...Types&gt;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>TestName{\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestName(){\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*&#32;tmpl_types[]&#32;=&#32;{<link linkend="_catch_8h_1a060f5fa141c247b4d07dfe9bf3c54079">CATCH_REC_LIST</link>(<link linkend="_catch_8h_1aa66562537dd49bc33e53f9aa01acedaf">INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS</link>,&#32;__VA_ARGS__)};\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>expander&#32;=&#32;<emphasis role="keywordtype">int</emphasis>[];\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)expander{(reg_test(Types{},&#32;<link linkend="_struct_catch_1_1_name_and_tags">Catch::NameAndTags</link>{&#32;Name&#32;<emphasis role="stringliteral">&quot;&#32;-&#32;&quot;</emphasis>&#32;+&#32;std::string(tmpl_types[index]),&#32;Tags&#32;}&#32;),&#32;index++)...&#32;};<emphasis role="comment">/*&#32;NOLINT&#32;*/</emphasis>&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>(&#32;globalRegistrar&#32;)&#32;=&#32;[](){\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestName&lt;INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(__VA_ARGS__)&gt;();\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}();\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_DEFINE_SIG_TEST(TestFunc,<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(Signature))
</programlisting></section>
<anchor xml:id="_catch_8h_1a582f90e5f7c36e9e69fff5f4c891ac29"/><section>
    <title>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD</title>
<indexterm><primary>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD( ClassName,  Name,  Tags,  ...)&#160;&#160;&#160;        <link linkend="_catch_8h_1a8d7a6f4bac6e19a2d5ed5b35fd0a7efb">INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_C_L_A_S_S_ ), <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_ ) , ClassName, Name, Tags, typename T, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a8d7a6f4bac6e19a2d5ed5b35fd0a7efb"/><section>
    <title>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2</title>
<indexterm><primary>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2( TestNameClass,  TestName,  ClassName,  Name,  Tags,  Signature,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace&#32;{\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>INTERNAL_CATCH_MAKE_NAMESPACE(TestName){&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TYPE_GEN\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_NTTP_GEN(<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(Signature))\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD(TestName,&#32;ClassName,&#32;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(Signature));\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_NTTP_REG_METHOD_GEN(TestName,&#32;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(Signature))\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...Types&gt;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>TestNameClass{\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestNameClass(){\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*&#32;tmpl_types[]&#32;=&#32;{<link linkend="_catch_8h_1a060f5fa141c247b4d07dfe9bf3c54079">CATCH_REC_LIST</link>(<link linkend="_catch_8h_1aa66562537dd49bc33e53f9aa01acedaf">INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS</link>,&#32;__VA_ARGS__)};\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>expander&#32;=&#32;<emphasis role="keywordtype">int</emphasis>[];\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)expander{(reg_test(Types{},&#32;#ClassName,&#32;<link linkend="_struct_catch_1_1_name_and_tags">Catch::NameAndTags</link>{&#32;Name&#32;<emphasis role="stringliteral">&quot;&#32;-&#32;&quot;</emphasis>&#32;+&#32;std::string(tmpl_types[index]),&#32;Tags&#32;}&#32;),&#32;index++)...&#32;};<emphasis role="comment">/*&#32;NOLINT&#32;*/</emphasis>&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>(&#32;globalRegistrar&#32;)&#32;=&#32;[](){\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestNameClass&lt;INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(__VA_ARGS__)&gt;();\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}();\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD(TestName,&#32;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(Signature))
</programlisting></section>
<anchor xml:id="_catch_8h_1ab536a2ad12ea4a01b8037d0c953e1ddf"/><section>
    <title>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG</title>
<indexterm><primary>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( ClassName,  Name,  Tags,  Signature,  ...)&#160;&#160;&#160;        <link linkend="_catch_8h_1a8d7a6f4bac6e19a2d5ed5b35fd0a7efb">INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_C_L_A_S_S_ ), <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_ ) , ClassName, Name, Tags, Signature, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1acdd7766753f3768c537a9a0747dc15fc"/><section>
    <title>INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG</title>
<indexterm><primary>INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG( Name,  Tags,  Signature,  ...)&#160;&#160;&#160;        <link linkend="_catch_8h_1a7a9fab8f42ff86d3985c11b474efdaec">INTERNAL_CATCH_TEMPLATE_TEST_CASE_2</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_ ), <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_ ), Name, Tags, Signature, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ac3284f56c2f755d2b79fdb663cf9fb72"/><section>
    <title>INTERNAL_CATCH_TEST</title>
<indexterm><primary>INTERNAL_CATCH_TEST</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TEST</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TEST( macroName,  resultDisposition,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_IGNORE_BUT_WARN(__VA_ARGS__);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_assertion_handler">Catch::AssertionHandler</link>&#32;catchAssertionHandler(&#32;macroName##_catch_sr,&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;<link linkend="_catch_8h_1ab6dc42a98c8854e2e1d91874b1fe406c">CATCH_INTERNAL_STRINGIFY</link>(__VA_ARGS__),&#32;resultDisposition&#32;);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1af21395add3cdee3109e0a2e7c15a54bc">INTERNAL_CATCH_TRY</link>&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleExpr(&#32;<link linkend="_struct_catch_1_1_decomposer">Catch::Decomposer</link>()&#32;&lt;=&#32;__VA_ARGS__&#32;);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1ad9594e9891b032f0dd0279960dc861a5">CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</link>&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<link linkend="_catch_8h_1a3ef8d1213eac4fd0e2fdb4e13bdb8070">INTERNAL_CATCH_CATCH</link>(&#32;catchAssertionHandler&#32;)&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_REACT(&#32;catchAssertionHandler&#32;)&#32;\
&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>(&#32;(<emphasis role="keywordtype">void</emphasis>)0,&#32;(<emphasis role="keyword">false</emphasis>)&#32;&amp;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(&#32;!!(__VA_ARGS__)&#32;)&#32;)
</programlisting></section>
<anchor xml:id="_catch_8h_1a4755a44f041605a731180e1e19e72bee"/><section>
    <title>INTERNAL_CATCH_TEST_CASE_METHOD</title>
<indexterm><primary>INTERNAL_CATCH_TEST_CASE_METHOD</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TEST_CASE_METHOD</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TEST_CASE_METHOD( ClassName,  ...)&#160;&#160;&#160;        <link linkend="_catch_8h_1a60e66c178de977271dd864ade805a250">INTERNAL_CATCH_TEST_CASE_METHOD2</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_S_T_ ), ClassName, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a60e66c178de977271dd864ade805a250"/><section>
    <title>INTERNAL_CATCH_TEST_CASE_METHOD2</title>
<indexterm><primary>INTERNAL_CATCH_TEST_CASE_METHOD2</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TEST_CASE_METHOD2</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TEST_CASE_METHOD2( TestName,  ClassName,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>TestName&#32;:&#32;<link linkend="_catch_8h_1adf5ede19321b27ce635d01688551e782">INTERNAL_CATCH_REMOVE_PARENS</link>(ClassName)&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test();&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_auto_reg">Catch::AutoReg</link>&#32;<link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>(&#32;autoRegistrar&#32;)&#32;(&#32;<link linkend="_namespace_catch_1ab3d8ccbc900fe50322c39ecbba52f536">Catch::makeTestInvoker</link>(&#32;&amp;TestName::test&#32;),&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;#ClassName,&#32;<link linkend="_struct_catch_1_1_name_and_tags">Catch::NameAndTags</link>{&#32;__VA_ARGS__&#32;}&#32;);&#32;<emphasis role="comment">/*&#32;NOLINT&#32;*/</emphasis>&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void&#32;TestName::test()
</programlisting></section>
<anchor xml:id="_catch_8h_1a83f221452b6494c1eb0ae9bab79faa3c"/><section>
    <title>INTERNAL_CATCH_TESTCASE</title>
<indexterm><primary>INTERNAL_CATCH_TESTCASE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TESTCASE</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TESTCASE( ...)&#160;&#160;&#160;        <link linkend="_catch_8h_1a33905c95a4d545efcf34abfbf790ad9c">INTERNAL_CATCH_TESTCASE2</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( C_A_T_C_H_T_E_S_T_ ), __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a33905c95a4d545efcf34abfbf790ad9c"/><section>
    <title>INTERNAL_CATCH_TESTCASE2</title>
<indexterm><primary>INTERNAL_CATCH_TESTCASE2</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TESTCASE2</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TESTCASE2( TestName,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;TestName();&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace{&#32;<link linkend="_struct_catch_1_1_auto_reg">Catch::AutoReg</link>&#32;<link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>(&#32;autoRegistrar&#32;)(&#32;<link linkend="_namespace_catch_1ab3d8ccbc900fe50322c39ecbba52f536">Catch::makeTestInvoker</link>(&#32;&amp;TestName&#32;),&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;<link linkend="_class_catch_1_1_string_ref">Catch::StringRef</link>(),&#32;<link linkend="_struct_catch_1_1_name_and_tags">Catch::NameAndTags</link>{&#32;__VA_ARGS__&#32;}&#32;);&#32;}&#32;<emphasis role="comment">/*&#32;NOLINT&#32;*/</emphasis>&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;<emphasis role="keywordtype">void</emphasis>&#32;TestName()
</programlisting></section>
<anchor xml:id="_catch_8h_1a2f3028d4fd4510f2f47ddd20626cccae"/><section>
    <title>INTERNAL_CATCH_THROWS</title>
<indexterm><primary>INTERNAL_CATCH_THROWS</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_THROWS</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_THROWS( macroName,  resultDisposition,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_assertion_handler">Catch::AssertionHandler</link>&#32;catchAssertionHandler(&#32;macroName##_catch_sr,&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;<link linkend="_catch_8h_1ab6dc42a98c8854e2e1d91874b1fe406c">CATCH_INTERNAL_STRINGIFY</link>(__VA_ARGS__),&#32;resultDisposition);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(&#32;catchAssertionHandler.allowThrows()&#32;)&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_cast&lt;void&gt;(__VA_ARGS__);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleUnexpectedExceptionNotThrown();&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catch(&#32;...&#32;)&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleExceptionThrownAsExpected();&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleThrowingCallSkipped();&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_REACT(&#32;catchAssertionHandler&#32;)&#32;\
&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>(&#32;<emphasis role="keyword">false</emphasis>&#32;)
</programlisting></section>
<anchor xml:id="_catch_8h_1a5e87b48ab40b7b128ae8428c14c25a91"/><section>
    <title>INTERNAL_CATCH_THROWS_AS</title>
<indexterm><primary>INTERNAL_CATCH_THROWS_AS</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_THROWS_AS</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_THROWS_AS( macroName,  exceptionType,  resultDisposition,  expr)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_assertion_handler">Catch::AssertionHandler</link>&#32;catchAssertionHandler(&#32;macroName##_catch_sr,&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;<link linkend="_catch_8h_1ab6dc42a98c8854e2e1d91874b1fe406c">CATCH_INTERNAL_STRINGIFY</link>(expr)&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;<link linkend="_catch_8h_1ab6dc42a98c8854e2e1d91874b1fe406c">CATCH_INTERNAL_STRINGIFY</link>(exceptionType),&#32;resultDisposition&#32;);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(&#32;catchAssertionHandler.allowThrows()&#32;)&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_cast&lt;void&gt;(expr);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleUnexpectedExceptionNotThrown();&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catch(&#32;exceptionType&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleExceptionThrownAsExpected();&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catch(&#32;...&#32;)&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleUnexpectedInflightException();&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleThrowingCallSkipped();&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_REACT(&#32;catchAssertionHandler&#32;)&#32;\
&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>(&#32;<emphasis role="keyword">false</emphasis>&#32;)
</programlisting></section>
<anchor xml:id="_catch_8h_1ace8fc7b74db8a1b2916554ad64e5b036"/><section>
    <title>INTERNAL_CATCH_THROWS_MATCHES</title>
<indexterm><primary>INTERNAL_CATCH_THROWS_MATCHES</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_THROWS_MATCHES</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_THROWS_MATCHES( macroName,  exceptionType,  resultDisposition,  matcher,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_assertion_handler">Catch::AssertionHandler</link>&#32;catchAssertionHandler(&#32;macroName##_catch_sr,&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;<link linkend="_catch_8h_1ab6dc42a98c8854e2e1d91874b1fe406c">CATCH_INTERNAL_STRINGIFY</link>(__VA_ARGS__)&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;<link linkend="_catch_8h_1ab6dc42a98c8854e2e1d91874b1fe406c">CATCH_INTERNAL_STRINGIFY</link>(exceptionType)&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;<link linkend="_catch_8h_1ab6dc42a98c8854e2e1d91874b1fe406c">CATCH_INTERNAL_STRINGIFY</link>(matcher),&#32;resultDisposition&#32;);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(&#32;catchAssertionHandler.allowThrows()&#32;)&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_cast&lt;void&gt;(__VA_ARGS__&#32;);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleUnexpectedExceptionNotThrown();&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catch(&#32;exceptionType&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;ex&#32;)&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleExpr(&#32;<link linkend="_namespace_catch_1a23a9a9a6dfef7ecd5e0eaf553fc52de6">Catch::makeMatchExpr</link>(&#32;ex,&#32;matcher,&#32;#matcher##_catch_sr&#32;)&#32;);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catch(&#32;...&#32;)&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleUnexpectedInflightException();&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleThrowingCallSkipped();&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_REACT(&#32;catchAssertionHandler&#32;)&#32;\
&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>(&#32;<emphasis role="keyword">false</emphasis>&#32;)
</programlisting></section>
<anchor xml:id="_catch_8h_1a4296ab989dbc1f6c52c24d60012144d6"/><section>
    <title>INTERNAL_CATCH_THROWS_STR_MATCHES</title>
<indexterm><primary>INTERNAL_CATCH_THROWS_STR_MATCHES</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_THROWS_STR_MATCHES</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_THROWS_STR_MATCHES( macroName,  resultDisposition,  matcher,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_assertion_handler">Catch::AssertionHandler</link>&#32;catchAssertionHandler(&#32;macroName##_catch_sr,&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;<link linkend="_catch_8h_1ab6dc42a98c8854e2e1d91874b1fe406c">CATCH_INTERNAL_STRINGIFY</link>(__VA_ARGS__)&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;<link linkend="_catch_8h_1ab6dc42a98c8854e2e1d91874b1fe406c">CATCH_INTERNAL_STRINGIFY</link>(matcher),&#32;resultDisposition&#32;);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(&#32;catchAssertionHandler.allowThrows()&#32;)&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_cast&lt;void&gt;(__VA_ARGS__);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleUnexpectedExceptionNotThrown();&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catch(&#32;...&#32;)&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Catch::handleExceptionMatchExpr(&#32;catchAssertionHandler,&#32;matcher,&#32;#matcher##_catch_sr&#32;);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleThrowingCallSkipped();&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_REACT(&#32;catchAssertionHandler&#32;)&#32;\
&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>(&#32;<emphasis role="keyword">false</emphasis>&#32;)
</programlisting></section>
<anchor xml:id="_catch_8h_1a109d814750b0a695e2b66e9c53e748c0"/><section>
    <title>INTERNAL_CATCH_TRANSLATE_EXCEPTION</title>
<indexterm><primary>INTERNAL_CATCH_TRANSLATE_EXCEPTION</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TRANSLATE_EXCEPTION</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TRANSLATE_EXCEPTION( signature)&#160;&#160;&#160;<link linkend="_catch_8h_1ab5314f401394dc4f7d1ac8b59370af09">INTERNAL_CATCH_TRANSLATE_EXCEPTION2</link>( <link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>( catch_internal_ExceptionTranslator ), signature )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ab5314f401394dc4f7d1ac8b59370af09"/><section>
    <title>INTERNAL_CATCH_TRANSLATE_EXCEPTION2</title>
<indexterm><primary>INTERNAL_CATCH_TRANSLATE_EXCEPTION2</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TRANSLATE_EXCEPTION2</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TRANSLATE_EXCEPTION2( translatorName,  signature)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;translatorName(&#32;signature&#32;);&#32;\
&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\
&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;\
&#32;&#32;&#32;&#32;namespace{&#32;<link linkend="_class_catch_1_1_exception_translator_registrar">Catch::ExceptionTranslatorRegistrar</link>&#32;<link linkend="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8">INTERNAL_CATCH_UNIQUE_NAME</link>(&#32;catch_internal_ExceptionRegistrar&#32;)(&#32;&amp;translatorName&#32;);&#32;}&#32;\
&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION&#32;\
&#32;&#32;&#32;&#32;static&#32;std::string&#32;translatorName(&#32;signature&#32;)
</programlisting></section>
<anchor xml:id="_catch_8h_1af21395add3cdee3109e0a2e7c15a54bc"/><section>
    <title>INTERNAL_CATCH_TRY</title>
<indexterm><primary>INTERNAL_CATCH_TRY</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TRY</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TRY</computeroutput></para></section>
<anchor xml:id="_catch_8h_1aea71652955762dc6db3912ec66740b7a"/><section>
    <title>INTERNAL_CATCH_TYPE_GEN</title>
<indexterm><primary>INTERNAL_CATCH_TYPE_GEN</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_TYPE_GEN</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_TYPE_GEN</computeroutput></para></section>
<anchor xml:id="_catch_8h_1afe320ceec108fc8c160f9ac3938f1bc8"/><section>
    <title>INTERNAL_CATCH_UNIQUE_NAME</title>
<indexterm><primary>INTERNAL_CATCH_UNIQUE_NAME</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_UNIQUE_NAME</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_UNIQUE_NAME( name)&#160;&#160;&#160;<link linkend="_catch_8h_1a1b51a086ea21a750bd306ac0ed4d2a95">INTERNAL_CATCH_UNIQUE_NAME_LINE</link>( name, __COUNTER__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a1b51a086ea21a750bd306ac0ed4d2a95"/><section>
    <title>INTERNAL_CATCH_UNIQUE_NAME_LINE</title>
<indexterm><primary>INTERNAL_CATCH_UNIQUE_NAME_LINE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_UNIQUE_NAME_LINE</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_UNIQUE_NAME_LINE( name,  line)&#160;&#160;&#160;<link linkend="_catch_8h_1a7c21e89d8b7727757ce9ca2b848f1cda">INTERNAL_CATCH_UNIQUE_NAME_LINE2</link>( name, line )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a7c21e89d8b7727757ce9ca2b848f1cda"/><section>
    <title>INTERNAL_CATCH_UNIQUE_NAME_LINE2</title>
<indexterm><primary>INTERNAL_CATCH_UNIQUE_NAME_LINE2</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_UNIQUE_NAME_LINE2</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_UNIQUE_NAME_LINE2( name,  line)&#160;&#160;&#160;name##line</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ab268c09b68167db4b163234f9934463f"/><section>
    <title>INTERNAL_CATCH_UNSCOPED_INFO</title>
<indexterm><primary>INTERNAL_CATCH_UNSCOPED_INFO</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_UNSCOPED_INFO</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_UNSCOPED_INFO( macroName,  log)&#160;&#160;&#160;    <link linkend="_namespace_catch_1af718eeab870712f292ed8dc6ee3f6488">Catch::getResultCapture</link>().emplaceUnscopedMessage( <link linkend="_struct_catch_1_1_message_builder">Catch::MessageBuilder</link>( macroName##_catch_sr, <link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>, <link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa30222063929ca1b6318faa78e8242f1c">Catch::ResultWas::Info</link> ) &lt;&lt; log )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a053a90e2d222ba1c12095556aa8db44a"/><section>
    <title>INTERNAL_CATCH_VA_NARGS_IMPL</title>
<indexterm><primary>INTERNAL_CATCH_VA_NARGS_IMPL</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CATCH_VA_NARGS_IMPL</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CATCH_VA_NARGS_IMPL( _0,  _1,  _2,  _3,  _4,  _5,  _6,  _7,  _8,  _9,  _10,  N,  ...)&#160;&#160;&#160;N</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a877690adc04f1fbfe944df6bebe6f8b5"/><section>
    <title>INTERNAL_CHECK_THAT</title>
<indexterm><primary>INTERNAL_CHECK_THAT</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>INTERNAL_CHECK_THAT</secondary></indexterm>
<para><computeroutput>#define INTERNAL_CHECK_THAT( macroName,  matcher,  resultDisposition,  arg)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_assertion_handler">Catch::AssertionHandler</link>&#32;catchAssertionHandler(&#32;macroName##_catch_sr,&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>,&#32;<link linkend="_catch_8h_1ab6dc42a98c8854e2e1d91874b1fe406c">CATCH_INTERNAL_STRINGIFY</link>(arg)&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;<link linkend="_catch_8h_1ab6dc42a98c8854e2e1d91874b1fe406c">CATCH_INTERNAL_STRINGIFY</link>(matcher),&#32;resultDisposition&#32;);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1af21395add3cdee3109e0a2e7c15a54bc">INTERNAL_CATCH_TRY</link>&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleExpr(&#32;<link linkend="_namespace_catch_1a23a9a9a6dfef7ecd5e0eaf553fc52de6">Catch::makeMatchExpr</link>(&#32;arg,&#32;matcher,&#32;#matcher##_catch_sr&#32;)&#32;);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<link linkend="_catch_8h_1a3ef8d1213eac4fd0e2fdb4e13bdb8070">INTERNAL_CATCH_CATCH</link>(&#32;catchAssertionHandler&#32;)&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_REACT(&#32;catchAssertionHandler&#32;)&#32;\
&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>(&#32;<emphasis role="keyword">false</emphasis>&#32;)
</programlisting></section>
<anchor xml:id="_catch_8h_1add790b4107e8b013f21b0272be7bcc76"/><section>
    <title>METHOD_AS_TEST_CASE</title>
<indexterm><primary>METHOD_AS_TEST_CASE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>METHOD_AS_TEST_CASE</secondary></indexterm>
<para><computeroutput>#define METHOD_AS_TEST_CASE( method,  ...)&#160;&#160;&#160;<link linkend="_catch_8h_1af5bedfdbfc32cddf5287a77cf860f242">INTERNAL_CATCH_METHOD_AS_TEST_CASE</link>( method, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a784b9192db328b4f21186f9b26e4146e"/><section>
    <title>REGISTER_TEST_CASE</title>
<indexterm><primary>REGISTER_TEST_CASE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>REGISTER_TEST_CASE</secondary></indexterm>
<para><computeroutput>#define REGISTER_TEST_CASE( Function,  ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ad7fc9293cc800a6f2fde7a0a211533c8">INTERNAL_CATCH_REGISTER_TESTCASE</link>( Function, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ad57835ba8f1bb419a865ada6bd011a85"/><section>
    <title>REQUIRE</title>
<indexterm><primary>REQUIRE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>REQUIRE</secondary></indexterm>
<para><computeroutput>#define REQUIRE( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ac3284f56c2f755d2b79fdb663cf9fb72">INTERNAL_CATCH_TEST</link>( &quot;REQUIRE&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8af3bd52347ed6f8796e8ce2f77bb39ea5">Catch::ResultDisposition::Normal</link>, __VA_ARGS__  )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ada5065594bafc152162761ace47c1dcb"/><section>
    <title>REQUIRE_FALSE</title>
<indexterm><primary>REQUIRE_FALSE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>REQUIRE_FALSE</secondary></indexterm>
<para><computeroutput>#define REQUIRE_FALSE( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ac3284f56c2f755d2b79fdb663cf9fb72">INTERNAL_CATCH_TEST</link>( &quot;REQUIRE_FALSE&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8af3bd52347ed6f8796e8ce2f77bb39ea5">Catch::ResultDisposition::Normal</link> | <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8a9980604245f19884691f941dec03eeb8">Catch::ResultDisposition::FalseTest</link>, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ab0148f0dfca438f7aa01974e9c33216a"/><section>
    <title>REQUIRE_NOTHROW</title>
<indexterm><primary>REQUIRE_NOTHROW</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>REQUIRE_NOTHROW</secondary></indexterm>
<para><computeroutput>#define REQUIRE_NOTHROW( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ac340cc35716115abaec4dfbcb061da52">INTERNAL_CATCH_NO_THROW</link>( &quot;REQUIRE_NOTHROW&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8af3bd52347ed6f8796e8ce2f77bb39ea5">Catch::ResultDisposition::Normal</link>, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ac1354db6f3e9c1e0a8eda0eea7ff1f0a"/><section>
    <title>REQUIRE_THAT</title>
<indexterm><primary>REQUIRE_THAT</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>REQUIRE_THAT</secondary></indexterm>
<para><computeroutput>#define REQUIRE_THAT( arg,  matcher)&#160;&#160;&#160;<link linkend="_catch_8h_1a877690adc04f1fbfe944df6bebe6f8b5">INTERNAL_CHECK_THAT</link>( &quot;REQUIRE_THAT&quot;, matcher, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8af3bd52347ed6f8796e8ce2f77bb39ea5">Catch::ResultDisposition::Normal</link>, arg )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ae3c33faa1d31a2bb0811dac74b994e3e"/><section>
    <title>REQUIRE_THROWS</title>
<indexterm><primary>REQUIRE_THROWS</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>REQUIRE_THROWS</secondary></indexterm>
<para><computeroutput>#define REQUIRE_THROWS( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a2f3028d4fd4510f2f47ddd20626cccae">INTERNAL_CATCH_THROWS</link>( &quot;REQUIRE_THROWS&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8af3bd52347ed6f8796e8ce2f77bb39ea5">Catch::ResultDisposition::Normal</link>, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ae24a059e3c28ff3eea69be48282f5f81"/><section>
    <title>REQUIRE_THROWS_AS</title>
<indexterm><primary>REQUIRE_THROWS_AS</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>REQUIRE_THROWS_AS</secondary></indexterm>
<para><computeroutput>#define REQUIRE_THROWS_AS( expr,  exceptionType)&#160;&#160;&#160;<link linkend="_catch_8h_1a5e87b48ab40b7b128ae8428c14c25a91">INTERNAL_CATCH_THROWS_AS</link>( &quot;REQUIRE_THROWS_AS&quot;, exceptionType, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8af3bd52347ed6f8796e8ce2f77bb39ea5">Catch::ResultDisposition::Normal</link>, expr )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a54473a48ac2ac55bfe1165b69e1b8010"/><section>
    <title>REQUIRE_THROWS_MATCHES</title>
<indexterm><primary>REQUIRE_THROWS_MATCHES</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>REQUIRE_THROWS_MATCHES</secondary></indexterm>
<para><computeroutput>#define REQUIRE_THROWS_MATCHES( expr,  exceptionType,  matcher)&#160;&#160;&#160;<link linkend="_catch_8h_1ace8fc7b74db8a1b2916554ad64e5b036">INTERNAL_CATCH_THROWS_MATCHES</link>( &quot;REQUIRE_THROWS_MATCHES&quot;, exceptionType, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8af3bd52347ed6f8796e8ce2f77bb39ea5">Catch::ResultDisposition::Normal</link>, matcher, expr )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1aa39a017db507132071d2819f087b2f28"/><section>
    <title>REQUIRE_THROWS_WITH</title>
<indexterm><primary>REQUIRE_THROWS_WITH</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>REQUIRE_THROWS_WITH</secondary></indexterm>
<para><computeroutput>#define REQUIRE_THROWS_WITH( expr,  matcher)&#160;&#160;&#160;<link linkend="_catch_8h_1a4296ab989dbc1f6c52c24d60012144d6">INTERNAL_CATCH_THROWS_STR_MATCHES</link>( &quot;REQUIRE_THROWS_WITH&quot;, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8af3bd52347ed6f8796e8ce2f77bb39ea5">Catch::ResultDisposition::Normal</link>, matcher, expr )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1acf8f441c7b9d70251ccbb7ccd8b83183"/><section>
    <title>SCENARIO</title>
<indexterm><primary>SCENARIO</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>SCENARIO</secondary></indexterm>
<para><computeroutput>#define SCENARIO( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1abd6e2aec703006b3da62cf7860c9808f">TEST_CASE</link>( &quot;Scenario: &quot; __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1add17eb8f8d85412a08a8a048cd38f33b"/><section>
    <title>SCENARIO_METHOD</title>
<indexterm><primary>SCENARIO_METHOD</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>SCENARIO_METHOD</secondary></indexterm>
<para><computeroutput>#define SCENARIO_METHOD( className,  ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a4755a44f041605a731180e1e19e72bee">INTERNAL_CATCH_TEST_CASE_METHOD</link>( className, &quot;Scenario: &quot; __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ad512fd95a78b95770b9759823f8fbc21"/><section>
    <title>SECTION</title>
<indexterm><primary>SECTION</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>SECTION</secondary></indexterm>
<para><computeroutput>#define SECTION( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a2969ec50cc661169e94b1b80ac799c07">INTERNAL_CATCH_SECTION</link>( __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1abad9ff23b730469f209b010e0ac4687c"/><section>
    <title>STATIC_REQUIRE</title>
<indexterm><primary>STATIC_REQUIRE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>STATIC_REQUIRE</secondary></indexterm>
<para><computeroutput>#define STATIC_REQUIRE( ...)&#160;&#160;&#160;static_assert(   __VA_ARGS__,  #__VA_ARGS__ ); <link linkend="_catch_8h_1a8e852a9421caf4fda4e1903d9f02bcf5">SUCCEED</link>( #__VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ae7506af68f12e7efdb22e951b911b5a0"/><section>
    <title>STATIC_REQUIRE_FALSE</title>
<indexterm><primary>STATIC_REQUIRE_FALSE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>STATIC_REQUIRE_FALSE</secondary></indexterm>
<para><computeroutput>#define STATIC_REQUIRE_FALSE( ...)&#160;&#160;&#160;static_assert( !(__VA_ARGS__), &quot;!(&quot; #__VA_ARGS__ &quot;)&quot; ); <link linkend="_catch_8h_1a8e852a9421caf4fda4e1903d9f02bcf5">SUCCEED</link>( &quot;!(&quot; #__VA_ARGS__ &quot;)&quot; )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a8e852a9421caf4fda4e1903d9f02bcf5"/><section>
    <title>SUCCEED</title>
<indexterm><primary>SUCCEED</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>SUCCEED</secondary></indexterm>
<para><computeroutput>#define SUCCEED( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ad1f7d83040ad9b09020dc72c57019638">INTERNAL_CATCH_MSG</link>( &quot;SUCCEED&quot;, <link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efae7cbe89bb9ec7ece9b44d48b63d01b63">Catch::ResultWas::Ok</link>, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a6c5f7165be1abd8331be1a47a446f20a"/><section>
    <title>TEMPLATE_LIST_TEST_CASE</title>
<indexterm><primary>TEMPLATE_LIST_TEST_CASE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>TEMPLATE_LIST_TEST_CASE</secondary></indexterm>
<para><computeroutput>#define TEMPLATE_LIST_TEST_CASE( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ac9ef0e27a1dcfda5fe253f1767e2fab8">INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE</link>(__VA_ARGS__)</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a00cdc7c1452d76b386c3b85f9cce80c0"/><section>
    <title>TEMPLATE_LIST_TEST_CASE_METHOD</title>
<indexterm><primary>TEMPLATE_LIST_TEST_CASE_METHOD</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>TEMPLATE_LIST_TEST_CASE_METHOD</secondary></indexterm>
<para><computeroutput>#define TEMPLATE_LIST_TEST_CASE_METHOD( className,  ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a6e9c5f2b3bc07068ad3bd78d224989f3">INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD</link>( className, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a76578a19e481e4ccdb928e68a17478d5"/><section>
    <title>TEMPLATE_PRODUCT_TEST_CASE</title>
<indexterm><primary>TEMPLATE_PRODUCT_TEST_CASE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>TEMPLATE_PRODUCT_TEST_CASE</secondary></indexterm>
<para><computeroutput>#define TEMPLATE_PRODUCT_TEST_CASE( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1acd8f967bc841a9ab05774e8863cf9506">INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE</link>( __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a15aefc2b8f75059606bebf400a348870"/><section>
    <title>TEMPLATE_PRODUCT_TEST_CASE_METHOD</title>
<indexterm><primary>TEMPLATE_PRODUCT_TEST_CASE_METHOD</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>TEMPLATE_PRODUCT_TEST_CASE_METHOD</secondary></indexterm>
<para><computeroutput>#define TEMPLATE_PRODUCT_TEST_CASE_METHOD( className,  ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a1a4839fc44923f817dec5694f0bd1f33">INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD</link>( className, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1af9e44fff2a2bdba1d66ee625e8ed126d"/><section>
    <title>TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG</title>
<indexterm><primary>TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG</secondary></indexterm>
<para><computeroutput>#define TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className,  ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a09fd24fffbc23194f538de357e9714f7">INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG</link>( className, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a52bd728f9409ff8fc6a24d49282a1994"/><section>
    <title>TEMPLATE_PRODUCT_TEST_CASE_SIG</title>
<indexterm><primary>TEMPLATE_PRODUCT_TEST_CASE_SIG</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>TEMPLATE_PRODUCT_TEST_CASE_SIG</secondary></indexterm>
<para><computeroutput>#define TEMPLATE_PRODUCT_TEST_CASE_SIG( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ab1e624e6e831f5f15df243f97bf7e962">INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG</link>( __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a9a88d21bfca0d58782cc5f0811801303"/><section>
    <title>TEMPLATE_TEST_CASE</title>
<indexterm><primary>TEMPLATE_TEST_CASE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>TEMPLATE_TEST_CASE</secondary></indexterm>
<para><computeroutput>#define TEMPLATE_TEST_CASE( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a8190f00b563c3efb52f8057be41db45f">INTERNAL_CATCH_TEMPLATE_TEST_CASE</link>( __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a5922ee8a997f9f6c5016b186f148b73b"/><section>
    <title>TEMPLATE_TEST_CASE_METHOD</title>
<indexterm><primary>TEMPLATE_TEST_CASE_METHOD</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>TEMPLATE_TEST_CASE_METHOD</secondary></indexterm>
<para><computeroutput>#define TEMPLATE_TEST_CASE_METHOD( className,  ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a582f90e5f7c36e9e69fff5f4c891ac29">INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD</link>( className, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a7b7cfca8f5e204e872ec31dc186957ac"/><section>
    <title>TEMPLATE_TEST_CASE_METHOD_SIG</title>
<indexterm><primary>TEMPLATE_TEST_CASE_METHOD_SIG</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>TEMPLATE_TEST_CASE_METHOD_SIG</secondary></indexterm>
<para><computeroutput>#define TEMPLATE_TEST_CASE_METHOD_SIG( className,  ...)&#160;&#160;&#160;<link linkend="_catch_8h_1ab536a2ad12ea4a01b8037d0c953e1ddf">INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG</link>( className, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a4286bffddeb38a4e793ef35b7555f474"/><section>
    <title>TEMPLATE_TEST_CASE_SIG</title>
<indexterm><primary>TEMPLATE_TEST_CASE_SIG</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>TEMPLATE_TEST_CASE_SIG</secondary></indexterm>
<para><computeroutput>#define TEMPLATE_TEST_CASE_SIG( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1acdd7766753f3768c537a9a0747dc15fc">INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG</link>( __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1abd6e2aec703006b3da62cf7860c9808f"/><section>
    <title>TEST_CASE</title>
<indexterm><primary>TEST_CASE</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>TEST_CASE</secondary></indexterm>
<para><computeroutput>#define TEST_CASE( ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a83f221452b6494c1eb0ae9bab79faa3c">INTERNAL_CATCH_TESTCASE</link>( __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1adf06142f54a9e271590fa0e270bc41d2"/><section>
    <title>TEST_CASE_METHOD</title>
<indexterm><primary>TEST_CASE_METHOD</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>TEST_CASE_METHOD</secondary></indexterm>
<para><computeroutput>#define TEST_CASE_METHOD( className,  ...)&#160;&#160;&#160;<link linkend="_catch_8h_1a4755a44f041605a731180e1e19e72bee">INTERNAL_CATCH_TEST_CASE_METHOD</link>( className, __VA_ARGS__ )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a27987092139727fd7a471b5f74dc62de"/><section>
    <title>THEN</title>
<indexterm><primary>THEN</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>THEN</secondary></indexterm>
<para><computeroutput>#define THEN( desc)&#160;&#160;&#160;<link linkend="_catch_8h_1abe92a5063c83dec8143bf685e4b4a198">INTERNAL_CATCH_DYNAMIC_SECTION</link>( &quot;     Then: &quot; &lt;&lt; desc )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a8dd723bbdb751f1c2f3af8c4f264b7a3"/><section>
    <title>UNSCOPED_INFO</title>
<indexterm><primary>UNSCOPED_INFO</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>UNSCOPED_INFO</secondary></indexterm>
<para><computeroutput>#define UNSCOPED_INFO( msg)&#160;&#160;&#160;<link linkend="_catch_8h_1ab268c09b68167db4b163234f9934463f">INTERNAL_CATCH_UNSCOPED_INFO</link>( &quot;UNSCOPED_INFO&quot;, msg )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1a108d6c5c51dd46e82a62b262394f0242"/><section>
    <title>WARN</title>
<indexterm><primary>WARN</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>WARN</secondary></indexterm>
<para><computeroutput>#define WARN( msg)&#160;&#160;&#160;<link linkend="_catch_8h_1ad1f7d83040ad9b09020dc72c57019638">INTERNAL_CATCH_MSG</link>( &quot;WARN&quot;, <link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa67e9d36ba0f04a60a19896834d840c21">Catch::ResultWas::Warning</link>, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">Catch::ResultDisposition::ContinueOnFailure</link>, msg )</computeroutput></para></section>
<anchor xml:id="_catch_8h_1ab09e9b8186233f676ce6a23aebe89d6e"/><section>
    <title>WHEN</title>
<indexterm><primary>WHEN</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>WHEN</secondary></indexterm>
<para><computeroutput>#define WHEN( desc)&#160;&#160;&#160;<link linkend="_catch_8h_1abe92a5063c83dec8143bf685e4b4a198">INTERNAL_CATCH_DYNAMIC_SECTION</link>( &quot;     When: &quot; &lt;&lt; desc )</computeroutput></para></section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_catch_8h_1ad678c2afffe520362e3bb7d51f0e8f8d"/><section>
    <title>operator&quot;&quot;_catch_sr()</title>
<indexterm><primary>operator&quot;&quot;_catch_sr</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>operator&quot;&quot;_catch_sr</secondary></indexterm>
<para><computeroutput>constexpr auto operator&quot;&quot;_catch_sr (char const * rawChars, std::size_t size) -&gt; <link linkend="_class_catch_1_1_string_ref">Catch::StringRef</link> <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_catch_8h_1aae0cdd5d2f0ac242b9ab18b0f66ba26e"/><section>
    <title>operator&lt;&lt;()</title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>catch.h</secondary></indexterm>
<indexterm><primary>catch.h</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; operator&lt;&lt; (std::ostream &amp; , <link linkend="_struct_catch__global__namespace__dummy">Catch_global_namespace_dummy</link> )</computeroutput></para></section>
</section>
</section>
