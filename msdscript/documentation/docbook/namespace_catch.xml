<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespace_catch" xml:lang="en-US">
<title>Catch Namespace Reference</title>
<indexterm><primary>Catch</primary></indexterm>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespace_catch_1_1_detail">Detail</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_catch_1_1detail">detail</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_catch_1_1_generators">Generators</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_catch_1_1literals">literals</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_catch_1_1_matchers">Matchers</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_catch_1_1always__false">always_false</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_assertion_handler">AssertionHandler</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_assertion_info">AssertionInfo</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_assertion_reaction">AssertionReaction</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_auto_reg">AutoReg</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_capturer">Capturer</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_case_sensitive">CaseSensitive</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_counts">Counts</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_decomposer">Decomposer</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_exception_translator_registrar">ExceptionTranslatorRegistrar</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_expr_lhs">ExprLhs</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_generator_exception">GeneratorException</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_config">IConfig</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_context">IContext</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_exception_translator">IExceptionTranslator</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_exception_translator_registry">IExceptionTranslatorRegistry</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_generator_tracker">IGeneratorTracker</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_mutable_context">IMutableContext</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_mutable_enum_values_registry">IMutableEnumValuesRegistry</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_mutable_registry_hub">IMutableRegistryHub</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_registry_hub">IRegistryHub</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_result_capture">IResultCapture</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_runner">IRunner</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1is__callable">is_callable</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1is__callable_3_01_fun_07_args_8_8_8_08_4">is_callable&lt; Fun(Args...)&gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1is__callable__tester">is_callable_tester</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1is__range">is_range</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_stream">IStream</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_test_case_registry">ITestCaseRegistry</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_test_invoker">ITestInvoker</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_i_transient_expression">ITransientExpression</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_lazy_expression">LazyExpression</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_match_expr">MatchExpr</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_message_builder">MessageBuilder</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_message_info">MessageInfo</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_message_stream">MessageStream</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_name_and_tags">NameAndTags</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_non_copyable">NonCopyable</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_option">Option</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1pluralise">pluralise</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_registrar_for_tag_aliases">RegistrarForTagAliases</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_result_disposition">ResultDisposition</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_result_was">ResultWas</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_reusable_string_stream">ReusableStringStream</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_run_tests">RunTests</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_scoped_message">ScopedMessage</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_section">Section</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_section_end_info">SectionEndInfo</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_section_info">SectionInfo</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_show_durations">ShowDurations</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_simple_pcg32">SimplePcg32</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_stream_end_stop">StreamEndStop</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker">StringMaker</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01bool_01_4">StringMaker&lt; bool &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01_catch_1_1_detail_1_1_approx_01_4">StringMaker&lt; Catch::Detail::Approx &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01char_01_5_01_4">StringMaker&lt; char * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01char_01_4">StringMaker&lt; char &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01char_01const_01_5_01_4">StringMaker&lt; char const * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01char_0f_s_z_0e_4">StringMaker&lt; char[SZ]&gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01double_01_4">StringMaker&lt; double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01float_01_4">StringMaker&lt; float &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01int_01_4">StringMaker&lt; int &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01long_01_4">StringMaker&lt; long &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01long_01long_01_4">StringMaker&lt; long long &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01_r_01_c_1_1_5_01_4">StringMaker&lt; R C::* &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01_r_00_01typename_01std_1_1enable__if_3_01is__range_3_01_r_01_4536d8fedfff6d62432b3dc59b56e1380">StringMaker&lt; R, typename std::enable_if&lt; is_range&lt; R &gt;::value &amp;&amp;!::Catch::Detail::IsStreamInsertable&lt; R &gt;::value &gt;::type &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01signed_01char_01_4">StringMaker&lt; signed char &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01signed_01char_0f_s_z_0e_4">StringMaker&lt; signed char[SZ]&gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01std_1_1nullptr__t_01_4">StringMaker&lt; std::nullptr_t &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01std_1_1string_01_4">StringMaker&lt; std::string &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01std_1_1wstring_01_4">StringMaker&lt; std::wstring &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01_t_01_5_01_4">StringMaker&lt; T * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01_t_0f_s_z_0e_4">StringMaker&lt; T[SZ]&gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01unsigned_01char_01_4">StringMaker&lt; unsigned char &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01unsigned_01char_0f_s_z_0e_4">StringMaker&lt; unsigned char[SZ]&gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01unsigned_01int_01_4">StringMaker&lt; unsigned int &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01unsigned_01long_01_4">StringMaker&lt; unsigned long &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01unsigned_01long_01long_01_4">StringMaker&lt; unsigned long long &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01wchar__t_01_5_01_4">StringMaker&lt; wchar_t * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_string_maker_3_01wchar__t_01const_01_5_01_4">StringMaker&lt; wchar_t const * &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_string_ref">StringRef</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_test_case">TestCase</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_test_case_info">TestCaseInfo</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_test_failure_exception">TestFailureException</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_test_invoker_as_method">TestInvokerAsMethod</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_timer">Timer</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_totals">Totals</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1true__given">true_given</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_unary_expr">UnaryExpr</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_use_colour">UseColour</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_wait_for_keypress">WaitForKeypress</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_warn_about">WarnAbout</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">Func</link> , typename... U&gt; </para><para><link linkend="_struct_catch_1_1true__given">using</link> <link linkend="_namespace_catch_1a9670af24a66c8f5cbe9d69b92b1c4383">FunctionReturnType</link> = <link linkend="_struct_catch_1_1true__given">typename</link> std::remove_reference&lt;<link linkend="_struct_catch_1_1true__given">typename</link> std::remove_cv&lt;<link linkend="_struct_catch_1_1true__given">typename</link> std::result_of&lt;<link linkend="_struct_catch_1_1true__given">Func</link>(U...)&gt;::type&gt;::type&gt;::type</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">using</link> <link linkend="_namespace_catch_1a4e6617700df10519be17cc0e62ab427e">IReporterFactoryPtr</link> = std::shared_ptr&lt;<link linkend="_struct_catch_1_1true__given">IReporterFactory</link>&gt;</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">using</link> <link linkend="_namespace_catch_1a7f2ab9adc3729f9c197f43e5cfcd4b40">exceptionTranslateFunction</link> = std::string(*)()</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">using</link> <link linkend="_namespace_catch_1a49b7a6b4679e1b57f1646f0ebda713b6">ExceptionTranslators</link> = std::vector&lt;std::unique_ptr&lt;<link linkend="_struct_catch_1_1_i_exception_translator">IExceptionTranslator</link> <link linkend="_struct_catch_1_1true__given">const</link>&gt;&gt;</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">using</link> <link linkend="_namespace_catch_1a6c439c538de1e945919d96fb986b42eb">StringMatcher</link> = <link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">Matchers::Impl::MatcherBase</link>&lt;std::string&gt;</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">using</link> <link linkend="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6">IConfigPtr</link> = std::shared_ptr&lt;<link linkend="_struct_catch_1_1_i_config">IConfig</link> <link linkend="_struct_catch_1_1true__given">const</link>&gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum class <link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737">Verbosity</link> { <link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737a098753f8980036f4b936e3d4b6997111">Quiet</link> = 0
, <link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737a960b44c579bc2f6818d2daaf9e4c16f0">Normal</link>
, <link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737a655d20c1ca69519ca647684edbb2db35">High</link>
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct_catch_1_1true__given">unsigned</link> <link linkend="_struct_catch_1_1true__given">int</link> <link linkend="_namespace_catch_1acf5ea05e942d2d7fe79111e12754ed76">rngSeed</link> ()</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespace_catch_1a8c8ea1f66bc1cdc3e1254ed7fa57c06d">operator&lt;&lt;</link> (std::ostream &amp;<link linkend="_struct_catch_1_1true__given">os</link>, <link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">info</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">T</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; <link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link> (<link linkend="_struct_catch_1_1true__given">T</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;value, <link linkend="_struct_catch_1_1_stream_end_stop">StreamEndStop</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1af3e820574c7a0b38d71328c5bd54b0e0">isThrowSafe</link> (<link linkend="_class_catch_1_1_test_case">TestCase</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">testCase</link>, <link linkend="_struct_catch_1_1_i_config">IConfig</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">config</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1aadef80fbc6bc84589777a462770cef49">matchTest</link> (<link linkend="_class_catch_1_1_test_case">TestCase</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">testCase</link>, <link linkend="_struct_catch_1_1true__given">TestSpec</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;testSpec, <link linkend="_struct_catch_1_1_i_config">IConfig</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">config</link>)</para>
</listitem>
            <listitem><para>std::vector&lt; <link linkend="_class_catch_1_1_test_case">TestCase</link> &gt; <link linkend="_namespace_catch_1a105d5acdec8a6b401e12a592557c9dd1">filterTests</link> (std::vector&lt; <link linkend="_class_catch_1_1_test_case">TestCase</link> &gt; <link linkend="_struct_catch_1_1true__given">const</link> &amp;testCases, <link linkend="_struct_catch_1_1true__given">TestSpec</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;testSpec, <link linkend="_struct_catch_1_1_i_config">IConfig</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">config</link>)</para>
</listitem>
            <listitem><para>std::vector&lt; <link linkend="_class_catch_1_1_test_case">TestCase</link> &gt; <link linkend="_struct_catch_1_1true__given">const</link> &amp; <link linkend="_namespace_catch_1a97039bab95e97f059410f67425f1f2da">getAllTestCasesSorted</link> (<link linkend="_struct_catch_1_1_i_config">IConfig</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">config</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link> (std::string &amp;<link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">sr</link>) -&gt; std::string &amp;</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1a5e37b333d756a28e12d44977f063af43">operator&lt;&lt;</link> (std::ostream &amp;<link linkend="_struct_catch_1_1true__given">os</link>, <link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">sr</link>) -&gt; std::ostream &amp;</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">constexpr</link> <link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1adc1e84abf2d7a8b971948ec4ab373280">operator&quot;&quot;_sr</link> (<link linkend="_struct_catch_1_1true__given">char</link> <link linkend="_struct_catch_1_1true__given">const</link> *<link linkend="_struct_catch_1_1true__given">rawChars</link>, std::size_t size) <link linkend="_struct_catch_1_1true__given">noexcept</link> -&gt; <link linkend="_class_catch_1_1_string_ref">StringRef</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1ab3d8ccbc900fe50322c39ecbba52f536">makeTestInvoker</link> (<link linkend="_struct_catch_1_1true__given">void</link>(*<link linkend="_struct_catch_1_1true__given">testAsFunction</link>)()) <link linkend="_struct_catch_1_1true__given">noexcept</link> -&gt; <link linkend="_struct_catch_1_1_i_test_invoker">ITestInvoker</link> *</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">C</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1a82a954c4d70afa716115820dc7dc8d24">makeTestInvoker</link> (<link linkend="_struct_catch_1_1true__given">void</link>(C::*<link linkend="_struct_catch_1_1true__given">testAsMethod</link>)()) <link linkend="_struct_catch_1_1true__given">noexcept</link> -&gt; <link linkend="_struct_catch_1_1_i_test_invoker">ITestInvoker</link> *</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1a5205869c81c06d3460759cb86676ae68">isOk</link> (<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link> <link linkend="_struct_catch_1_1true__given">resultType</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1a54b01af61673a3e1f21f31713639b180">isJustInfo</link> (<link linkend="_struct_catch_1_1true__given">int</link> <link linkend="_struct_catch_1_1true__given">flags</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8">ResultDisposition::Flags</link> <link linkend="_namespace_catch_1ab32a083e442cc09f736327d2e2865999">operator|</link> (<link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8">ResultDisposition::Flags</link> <link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8">ResultDisposition::Flags</link> <link linkend="_struct_catch_1_1true__given">rhs</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1a7f7480b15d74965459c844f0d393ed87">shouldContinueOnFailure</link> (<link linkend="_struct_catch_1_1true__given">int</link> <link linkend="_struct_catch_1_1true__given">flags</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1a93ef4e3e307a2021ca0d41b32c0e54b0">isFalseTest</link> (<link linkend="_struct_catch_1_1true__given">int</link> <link linkend="_struct_catch_1_1true__given">flags</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1ab91eb13081203d634fe48d3d2ab386d7">shouldSuppressFailure</link> (<link linkend="_struct_catch_1_1true__given">int</link> <link linkend="_struct_catch_1_1true__given">flags</link>)</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">cout</link> ()</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespace_catch_1a54c1ce08041448d684ae8edc14162cd2">cerr</link> ()</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespace_catch_1a1b2213f54e4d31a659db49827e81856b">clog</link> ()</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1af6d27462573d60c30c51acf1c980e3ff">makeStream</link> (<link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">filename</link>) -&gt; <link linkend="_struct_catch_1_1_i_stream">IStream</link> <link linkend="_struct_catch_1_1true__given">const</link> *</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">Range</link> &gt; </para><para>std::string <link linkend="_namespace_catch_1af13494e925a793e3e7143c6ce6f442c2">rangeToString</link> (<link linkend="_struct_catch_1_1true__given">Range</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;range)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">Allocator</link> &gt; </para><para>std::string <link linkend="_namespace_catch_1ae162dc66b7767a52e7e4283915fd3d9f">rangeToString</link> (std::vector&lt; <link linkend="_struct_catch_1_1true__given">bool</link>, <link linkend="_struct_catch_1_1true__given">Allocator</link> &gt; <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">v</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1a520110c31f26cf9892595772ab814fc0">formatReconstructedExpression</link> (std::ostream &amp;<link linkend="_struct_catch_1_1true__given">os</link>, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">op</link>, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">rhs</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">LhsT</link> , <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1af89b8df30cfaf09abd048c6ff67359ee">compareEqual</link> (<link linkend="_struct_catch_1_1true__given">LhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1a68f451c45e65f242dde5f21c19a4cf7a">compareEqual</link> (<link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_struct_catch_1_1true__given">int</link> <link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1afca4a005e1053c542462dc7a603b41b3">compareEqual</link> (<link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_struct_catch_1_1true__given">long</link> <link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1a6af99378569fc6f68270b6af669f1c3b">compareEqual</link> (<link linkend="_struct_catch_1_1true__given">int</link> <link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1a72f10ec2cad6db16029d48c8c1d9df2f">compareEqual</link> (<link linkend="_struct_catch_1_1true__given">long</link> <link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">LhsT</link> , <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1a8bec217f5ef5f09c17074c311c958f3c">compareNotEqual</link> (<link linkend="_struct_catch_1_1true__given">LhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> &amp;&amp;<link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1aa81c95898f22dce1f61d7710e495d1ee">compareNotEqual</link> (<link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_struct_catch_1_1true__given">int</link> <link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1adad6539b3780b9a8953221efd038e2e4">compareNotEqual</link> (<link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_struct_catch_1_1true__given">long</link> <link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1adb4b3e912b89a987025ca28cf0c92ba8">compareNotEqual</link> (<link linkend="_struct_catch_1_1true__given">int</link> <link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1a3db634a0adf44a1148767ba149ccf34d">compareNotEqual</link> (<link linkend="_struct_catch_1_1true__given">long</link> <link linkend="_struct_catch_1_1true__given">lhs</link>, <link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1a65af25091f2ab61056e166765963e525">handleExpression</link> (<link linkend="_struct_catch_1_1_i_transient_expression">ITransientExpression</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">expr</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1af2c93db76668a981e75ae835699efce7">handleExpression</link> (<link linkend="_class_catch_1_1_expr_lhs">ExprLhs</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt; <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">expr</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_i_result_capture">IResultCapture</link> &amp; <link linkend="_namespace_catch_1af718eeab870712f292ed8dc6ee3f6488">getResultCapture</link> ()</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1aea6f8ff3b3838829d4a61694e4bc41ca">handleExceptionMatchExpr</link> (<link linkend="_class_catch_1_1_assertion_handler">AssertionHandler</link> &amp;<link linkend="_struct_catch_1_1true__given">handler</link>, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;str, <link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">matcherString</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1a98d058468488c486a9cb5c8463f3ba29">getCurrentNanosecondsSinceEpoch</link> () -&gt; <link linkend="_struct_catch_1_1true__given">uint64_t</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1ac8e1ed37624bd0d97b2c0d4ec099d31f">getEstimatedClockResolution</link> () -&gt; <link linkend="_struct_catch_1_1true__given">uint64_t</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_i_registry_hub">IRegistryHub</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; <link linkend="_namespace_catch_1a5d328566cb8da87b48f1fac3f319ac7a">getRegistryHub</link> ()</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_i_mutable_registry_hub">IMutableRegistryHub</link> &amp; <link linkend="_namespace_catch_1a585459763f2c7610e57de2dd22dd1ad8">getMutableRegistryHub</link> ()</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1a0f78e9afdebc6d4512d18e76fbf54b8c">cleanUp</link> ()</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespace_catch_1adafff91485eeeeb9e9333f317cc0e3b1">translateActiveException</link> ()</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1a695f62327be0676e046291eeaae15110">startsWith</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">s</link>, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">prefix</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1acad23751846ac23d0f379e34f5adebb1">startsWith</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">s</link>, <link linkend="_struct_catch_1_1true__given">char</link> <link linkend="_struct_catch_1_1true__given">prefix</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1ada025504f627feaf9ac68ca391515dff">endsWith</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">s</link>, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">suffix</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1afd801a3e33fd7a8b91ded0d02747a93f">endsWith</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">s</link>, <link linkend="_struct_catch_1_1true__given">char</link> <link linkend="_struct_catch_1_1true__given">suffix</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1aa52974b0e426e7e2fbd725a900e9c36e">contains</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">s</link>, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">infix</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1a0760dbe87d090a55a35414db57d272c4">toLowerInPlace</link> (std::string &amp;<link linkend="_struct_catch_1_1true__given">s</link>)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespace_catch_1ac036a17412d318598ffda8e1fe7a1177">toLower</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">s</link>)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespace_catch_1a084108b47f37d8bfd5db51c50c7451b3">trim</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;str)</para>

<para>Returns a new string without whitespace at the start/end. </para>
</listitem>
            <listitem><para><link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_namespace_catch_1a6f6d8ef0349688290bd242b50a702c28">trim</link> (<link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">ref</link>)</para>

<para>Returns a substring of the original ref without whitespace. Beware lifetimes! </para>
</listitem>
            <listitem><para>std::vector&lt; <link linkend="_class_catch_1_1_string_ref">StringRef</link> &gt; <link linkend="_namespace_catch_1a678e3c779388970bb3ec5802245f93d7">splitStringRef</link> (<link linkend="_class_catch_1_1_string_ref">StringRef</link> str, <link linkend="_struct_catch_1_1true__given">char</link> <link linkend="_struct_catch_1_1true__given">delimiter</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_namespace_catch_1afe4e6770da547e43e9e4eeaa05f946ea">replaceInPlace</link> (std::string &amp;str, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">replaceThis</link>, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">withThis</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1a3a96a82307107087642e22fc4be5844d">handleExceptionMatchExpr</link> (<link linkend="_class_catch_1_1_assertion_handler">AssertionHandler</link> &amp;<link linkend="_struct_catch_1_1true__given">handler</link>, <link linkend="_namespace_catch_1a6c439c538de1e945919d96fb986b42eb">StringMatcher</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">matcher</link>, <link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">matcherString</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">ArgT</link> , <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">MatcherT</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_namespace_catch_1a23a9a9a6dfef7ecd5e0eaf553fc52de6">makeMatchExpr</link> (<link linkend="_struct_catch_1_1true__given">ArgT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">arg</link>, <link linkend="_struct_catch_1_1true__given">MatcherT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">matcher</link>, <link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">matcherString</link>) -&gt; <link linkend="_class_catch_1_1_match_expr">MatchExpr</link>&lt; <link linkend="_struct_catch_1_1true__given">ArgT</link>, <link linkend="_struct_catch_1_1true__given">MatcherT</link> &gt;</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1a3cbceeab9252d1b752f66a2826e92548">throw_exception</link> (std::exception <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">e</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1a707884e681203fef6bf7dbf752532fa5">throw_logic_error</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">msg</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1ae67297c3e265b0fcd55de371bf408e4e">throw_domain_error</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">msg</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1a48d2c35022dd9d56a1b7ee78ad581eea">throw_runtime_error</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">msg</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_i_mutable_context">IMutableContext</link> &amp; <link linkend="_namespace_catch_1a710841d4732b86c06f816bd4822bd425">getCurrentMutableContext</link> ()</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_i_context">IContext</link> &amp; <link linkend="_namespace_catch_1a228a625318bb6183842e394eeba17d50">getCurrentContext</link> ()</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_namespace_catch_1ae50508f10ffc4ed873a31a4db4caea16">cleanUpContext</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_catch_1_1_simple_pcg32">SimplePcg32</link> &amp; <link linkend="_namespace_catch_1a66ea553511cbbc59d99e1720d8da514e">rng</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_catch_1_1_test_case">TestCase</link> <link linkend="_namespace_catch_1a5e63df38d06a43d4cee17454e724b5c0">makeTestCase</link> (<link linkend="_struct_catch_1_1_i_test_invoker">ITestInvoker</link> *<link linkend="_struct_catch_1_1true__given">testCase</link>, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;className, <link linkend="_struct_catch_1_1_name_and_tags">NameAndTags</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">nameAndTags</link>, <link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;lineInfo)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_namespace_catch_1a7f2ab9adc3729f9c197f43e5cfcd4b40"/><section>
    <title>exceptionTranslateFunction</title>
<indexterm><primary>exceptionTranslateFunction</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>exceptionTranslateFunction</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">using</link> <link linkend="_namespace_catch_1a7f2ab9adc3729f9c197f43e5cfcd4b40">Catch::exceptionTranslateFunction</link> = std::string(*)()</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a49b7a6b4679e1b57f1646f0ebda713b6"/><section>
    <title>ExceptionTranslators</title>
<indexterm><primary>ExceptionTranslators</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>ExceptionTranslators</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">using</link> <link linkend="_namespace_catch_1a49b7a6b4679e1b57f1646f0ebda713b6">Catch::ExceptionTranslators</link> = std::vector&lt;std::unique_ptr&lt;<link linkend="_struct_catch_1_1_i_exception_translator">IExceptionTranslator</link> <link linkend="_struct_catch_1_1true__given">const</link>&gt;&gt;</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a9670af24a66c8f5cbe9d69b92b1c4383"/><section>
    <title>FunctionReturnType</title>
<indexterm><primary>FunctionReturnType</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>FunctionReturnType</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">Func</link> , typename... U&gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">using</link> <link linkend="_namespace_catch_1a9670af24a66c8f5cbe9d69b92b1c4383">Catch::FunctionReturnType</link> = <link linkend="_struct_catch_1_1true__given">typename</link> std::remove_reference&lt;<link linkend="_struct_catch_1_1true__given">typename</link> std::remove_cv&lt;<link linkend="_struct_catch_1_1true__given">typename</link> std::result_of&lt;<link linkend="_struct_catch_1_1true__given">Func</link>(U...)&gt;::type&gt;::type&gt;::type</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6"/><section>
    <title>IConfigPtr</title>
<indexterm><primary>IConfigPtr</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>IConfigPtr</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">typedef</link> std::shared_ptr&lt; <link linkend="_struct_catch_1_1_i_config">IConfig</link> <link linkend="_struct_catch_1_1true__given">const</link>  &gt; <link linkend="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6">Catch::IConfigPtr</link> = std::shared_ptr&lt;<link linkend="_struct_catch_1_1_i_config">IConfig</link> <link linkend="_struct_catch_1_1true__given">const</link>&gt;</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a4e6617700df10519be17cc0e62ab427e"/><section>
    <title>IReporterFactoryPtr</title>
<indexterm><primary>IReporterFactoryPtr</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>IReporterFactoryPtr</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">using</link> <link linkend="_namespace_catch_1a4e6617700df10519be17cc0e62ab427e">Catch::IReporterFactoryPtr</link> = std::shared_ptr&lt;<link linkend="_struct_catch_1_1true__given">IReporterFactory</link>&gt;</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a6c439c538de1e945919d96fb986b42eb"/><section>
    <title>StringMatcher</title>
<indexterm><primary>StringMatcher</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>StringMatcher</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">using</link> <link linkend="_namespace_catch_1a6c439c538de1e945919d96fb986b42eb">Catch::StringMatcher</link> = <link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">Matchers::Impl::MatcherBase</link>&lt;std::string&gt;</computeroutput></para></section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_namespace_catch_1af85c0d46dfe687d923a157362fd07737"/><section>
    <title>Verbosity</title>
<indexterm><primary>Verbosity</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>Verbosity</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">enum</link> <link linkend="_struct_catch_1_1true__given">class</link> <link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737">Catch::Verbosity</link><computeroutput>[strong]</computeroutput></computeroutput></para><informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>Quiet</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>Quiet</secondary></indexterm>
<anchor xml:id="_namespace_catch_1af85c0d46dfe687d923a157362fd07737a098753f8980036f4b936e3d4b6997111"/>Quiet</entry><entry></entry></row><row><entry><indexterm><primary>Normal</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>Normal</secondary></indexterm>
<anchor xml:id="_namespace_catch_1af85c0d46dfe687d923a157362fd07737a960b44c579bc2f6818d2daaf9e4c16f0"/>Normal</entry><entry></entry></row><row><entry><indexterm><primary>High</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>High</secondary></indexterm>
<anchor xml:id="_namespace_catch_1af85c0d46dfe687d923a157362fd07737a655d20c1ca69519ca647684edbb2db35"/>High</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespace_catch_1a54c1ce08041448d684ae8edc14162cd2"/><section>
    <title>cerr()</title>
<indexterm><primary>cerr</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>cerr</secondary></indexterm>
<para><computeroutput>std::ostream &amp; Catch::cerr ( )</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a0f78e9afdebc6d4512d18e76fbf54b8c"/><section>
    <title>cleanUp()</title>
<indexterm><primary>cleanUp</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>cleanUp</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">void</link> Catch::cleanUp ( )</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1ae50508f10ffc4ed873a31a4db4caea16"/><section>
    <title>cleanUpContext()</title>
<indexterm><primary>cleanUpContext</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>cleanUpContext</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">void</link> Catch::cleanUpContext ( )</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a1b2213f54e4d31a659db49827e81856b"/><section>
    <title>clog()</title>
<indexterm><primary>clog</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>clog</secondary></indexterm>
<para><computeroutput>std::ostream &amp; Catch::clog ( )</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a6af99378569fc6f68270b6af669f1c3b"/><section>
    <title>compareEqual()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>compareEqual</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>compareEqual</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> Catch::compareEqual (<link linkend="_struct_catch_1_1true__given">int</link> lhs, <link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp; rhs) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link> </computeroutput></para></section>
<anchor xml:id="_namespace_catch_1af89b8df30cfaf09abd048c6ff67359ee"/><section>
    <title>compareEqual()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>compareEqual</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>compareEqual</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">LhsT</link> , <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> Catch::compareEqual (<link linkend="_struct_catch_1_1true__given">LhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; lhs, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; rhs) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link> </computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a72f10ec2cad6db16029d48c8c1d9df2f"/><section>
    <title>compareEqual()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>compareEqual</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>compareEqual</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> Catch::compareEqual (<link linkend="_struct_catch_1_1true__given">long</link> lhs, <link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp; rhs) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link> </computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a68f451c45e65f242dde5f21c19a4cf7a"/><section>
    <title>compareEqual()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>compareEqual</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>compareEqual</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> Catch::compareEqual (<link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp; lhs, <link linkend="_struct_catch_1_1true__given">int</link> rhs) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link> </computeroutput></para></section>
<anchor xml:id="_namespace_catch_1afca4a005e1053c542462dc7a603b41b3"/><section>
    <title>compareEqual()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>compareEqual</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>compareEqual</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> Catch::compareEqual (<link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp; lhs, <link linkend="_struct_catch_1_1true__given">long</link> rhs) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link> </computeroutput></para></section>
<anchor xml:id="_namespace_catch_1adb4b3e912b89a987025ca28cf0c92ba8"/><section>
    <title>compareNotEqual()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>compareNotEqual</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>compareNotEqual</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> Catch::compareNotEqual (<link linkend="_struct_catch_1_1true__given">int</link> lhs, <link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp; rhs) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link> </computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a8bec217f5ef5f09c17074c311c958f3c"/><section>
    <title>compareNotEqual()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>compareNotEqual</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>compareNotEqual</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">LhsT</link> , <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> Catch::compareNotEqual (<link linkend="_struct_catch_1_1true__given">LhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; lhs, <link linkend="_struct_catch_1_1true__given">RhsT</link> &amp;&amp; rhs) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link> </computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a3db634a0adf44a1148767ba149ccf34d"/><section>
    <title>compareNotEqual()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>compareNotEqual</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>compareNotEqual</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> Catch::compareNotEqual (<link linkend="_struct_catch_1_1true__given">long</link> lhs, <link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp; rhs) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link> </computeroutput></para></section>
<anchor xml:id="_namespace_catch_1aa81c95898f22dce1f61d7710e495d1ee"/><section>
    <title>compareNotEqual()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>compareNotEqual</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>compareNotEqual</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> Catch::compareNotEqual (<link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp; lhs, <link linkend="_struct_catch_1_1true__given">int</link> rhs) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link> </computeroutput></para></section>
<anchor xml:id="_namespace_catch_1adad6539b3780b9a8953221efd038e2e4"/><section>
    <title>compareNotEqual()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>compareNotEqual</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>compareNotEqual</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> Catch::compareNotEqual (<link linkend="_struct_catch_1_1true__given">T</link> *<link linkend="_struct_catch_1_1true__given">const</link> &amp; lhs, <link linkend="_struct_catch_1_1true__given">long</link> rhs) -&gt; <link linkend="_struct_catch_1_1true__given">bool</link> </computeroutput></para></section>
<anchor xml:id="_namespace_catch_1aa52974b0e426e7e2fbd725a900e9c36e"/><section>
    <title>contains()</title>
<indexterm><primary>contains</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>contains</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">bool</link> Catch::contains (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp; s, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp; infix)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264"/><section>
    <title>cout()</title>
<indexterm><primary>cout</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>cout</secondary></indexterm>
<para><computeroutput>std::ostream &amp; Catch::cout ( )</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1afd801a3e33fd7a8b91ded0d02747a93f"/><section>
    <title>endsWith()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>endsWith</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>endsWith</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">bool</link> Catch::endsWith (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp; s, <link linkend="_struct_catch_1_1true__given">char</link> suffix)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1ada025504f627feaf9ac68ca391515dff"/><section>
    <title>endsWith()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>endsWith</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>endsWith</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">bool</link> Catch::endsWith (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp; s, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp; suffix)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a105d5acdec8a6b401e12a592557c9dd1"/><section>
    <title>filterTests()</title>
<indexterm><primary>filterTests</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>filterTests</secondary></indexterm>
<para><computeroutput>std::vector&lt; <link linkend="_class_catch_1_1_test_case">TestCase</link> &gt; Catch::filterTests (std::vector&lt; <link linkend="_class_catch_1_1_test_case">TestCase</link> &gt; <link linkend="_struct_catch_1_1true__given">const</link> &amp; testCases, <link linkend="_struct_catch_1_1true__given">TestSpec</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; testSpec, <link linkend="_struct_catch_1_1_i_config">IConfig</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; config)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a520110c31f26cf9892595772ab814fc0"/><section>
    <title>formatReconstructedExpression()</title>
<indexterm><primary>formatReconstructedExpression</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>formatReconstructedExpression</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">void</link> Catch::formatReconstructedExpression (std::ostream &amp; os, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp; lhs, <link linkend="_class_catch_1_1_string_ref">StringRef</link> op, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp; rhs)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a97039bab95e97f059410f67425f1f2da"/><section>
    <title>getAllTestCasesSorted()</title>
<indexterm><primary>getAllTestCasesSorted</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>getAllTestCasesSorted</secondary></indexterm>
<para><computeroutput>std::vector&lt; <link linkend="_class_catch_1_1_test_case">TestCase</link> &gt; <link linkend="_struct_catch_1_1true__given">const</link>  &amp; Catch::getAllTestCasesSorted (<link linkend="_struct_catch_1_1_i_config">IConfig</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; config)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a228a625318bb6183842e394eeba17d50"/><section>
    <title>getCurrentContext()</title>
<indexterm><primary>getCurrentContext</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>getCurrentContext</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1_i_context">IContext</link> &amp; Catch::getCurrentContext ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a710841d4732b86c06f816bd4822bd425"/><section>
    <title>getCurrentMutableContext()</title>
<indexterm><primary>getCurrentMutableContext</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>getCurrentMutableContext</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1_i_mutable_context">IMutableContext</link> &amp; Catch::getCurrentMutableContext ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a98d058468488c486a9cb5c8463f3ba29"/><section>
    <title>getCurrentNanosecondsSinceEpoch()</title>
<indexterm><primary>getCurrentNanosecondsSinceEpoch</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>getCurrentNanosecondsSinceEpoch</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> Catch::getCurrentNanosecondsSinceEpoch ( ) -&gt;  <link linkend="_struct_catch_1_1true__given">uint64_t</link></computeroutput></para></section>
<anchor xml:id="_namespace_catch_1ac8e1ed37624bd0d97b2c0d4ec099d31f"/><section>
    <title>getEstimatedClockResolution()</title>
<indexterm><primary>getEstimatedClockResolution</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>getEstimatedClockResolution</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> Catch::getEstimatedClockResolution ( ) -&gt;  <link linkend="_struct_catch_1_1true__given">uint64_t</link></computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a585459763f2c7610e57de2dd22dd1ad8"/><section>
    <title>getMutableRegistryHub()</title>
<indexterm><primary>getMutableRegistryHub</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>getMutableRegistryHub</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1_i_mutable_registry_hub">IMutableRegistryHub</link> &amp; Catch::getMutableRegistryHub ( )</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a5d328566cb8da87b48f1fac3f319ac7a"/><section>
    <title>getRegistryHub()</title>
<indexterm><primary>getRegistryHub</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>getRegistryHub</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1_i_registry_hub">IRegistryHub</link> <link linkend="_struct_catch_1_1true__given">const</link>  &amp; Catch::getRegistryHub ( )</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1af718eeab870712f292ed8dc6ee3f6488"/><section>
    <title>getResultCapture()</title>
<indexterm><primary>getResultCapture</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>getResultCapture</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1_i_result_capture">IResultCapture</link> &amp; Catch::getResultCapture ( )</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1aea6f8ff3b3838829d4a61694e4bc41ca"/><section>
    <title>handleExceptionMatchExpr()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>handleExceptionMatchExpr</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>handleExceptionMatchExpr</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">void</link> Catch::handleExceptionMatchExpr (<link linkend="_class_catch_1_1_assertion_handler">AssertionHandler</link> &amp; handler, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp; str, <link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; matcherString)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a3a96a82307107087642e22fc4be5844d"/><section>
    <title>handleExceptionMatchExpr()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>handleExceptionMatchExpr</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>handleExceptionMatchExpr</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">void</link> Catch::handleExceptionMatchExpr (<link linkend="_class_catch_1_1_assertion_handler">AssertionHandler</link> &amp; handler, <link linkend="_namespace_catch_1a6c439c538de1e945919d96fb986b42eb">StringMatcher</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; matcher, <link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; matcherString)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1af2c93db76668a981e75ae835699efce7"/><section>
    <title>handleExpression()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>handleExpression</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>handleExpression</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">void</link> Catch::handleExpression (<link linkend="_class_catch_1_1_expr_lhs">ExprLhs</link>&lt; <link linkend="_struct_catch_1_1true__given">T</link> &gt; <link linkend="_struct_catch_1_1true__given">const</link> &amp; expr)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a65af25091f2ab61056e166765963e525"/><section>
    <title>handleExpression()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>handleExpression</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>handleExpression</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">void</link> Catch::handleExpression (<link linkend="_struct_catch_1_1_i_transient_expression">ITransientExpression</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; expr)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a93ef4e3e307a2021ca0d41b32c0e54b0"/><section>
    <title>isFalseTest()</title>
<indexterm><primary>isFalseTest</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>isFalseTest</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">bool</link> Catch::isFalseTest (<link linkend="_struct_catch_1_1true__given">int</link> flags)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a54b01af61673a3e1f21f31713639b180"/><section>
    <title>isJustInfo()</title>
<indexterm><primary>isJustInfo</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>isJustInfo</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">bool</link> Catch::isJustInfo (<link linkend="_struct_catch_1_1true__given">int</link> flags)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a5205869c81c06d3460759cb86676ae68"/><section>
    <title>isOk()</title>
<indexterm><primary>isOk</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>isOk</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">bool</link> Catch::isOk (<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link> resultType)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1af3e820574c7a0b38d71328c5bd54b0e0"/><section>
    <title>isThrowSafe()</title>
<indexterm><primary>isThrowSafe</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>isThrowSafe</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">bool</link> Catch::isThrowSafe (<link linkend="_class_catch_1_1_test_case">TestCase</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; testCase, <link linkend="_struct_catch_1_1_i_config">IConfig</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; config)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a23a9a9a6dfef7ecd5e0eaf553fc52de6"/><section>
    <title>makeMatchExpr()</title>
<indexterm><primary>makeMatchExpr</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>makeMatchExpr</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">ArgT</link> , <link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">MatcherT</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> Catch::makeMatchExpr (<link linkend="_struct_catch_1_1true__given">ArgT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; arg, <link linkend="_struct_catch_1_1true__given">MatcherT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; matcher, <link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; matcherString) -&gt; <link linkend="_class_catch_1_1_match_expr">MatchExpr</link>&lt;<link linkend="_struct_catch_1_1true__given">ArgT</link>, <link linkend="_struct_catch_1_1true__given">MatcherT</link>&gt; </computeroutput></para></section>
<anchor xml:id="_namespace_catch_1af6d27462573d60c30c51acf1c980e3ff"/><section>
    <title>makeStream()</title>
<indexterm><primary>makeStream</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>makeStream</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> Catch::makeStream (<link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; filename) -&gt;  <link linkend="_struct_catch_1_1_i_stream">IStream</link> <link linkend="_struct_catch_1_1true__given">const</link> *</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a5e63df38d06a43d4cee17454e724b5c0"/><section>
    <title>makeTestCase()</title>
<indexterm><primary>makeTestCase</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>makeTestCase</secondary></indexterm>
<para><computeroutput><link linkend="_class_catch_1_1_test_case">TestCase</link> Catch::makeTestCase (<link linkend="_struct_catch_1_1_i_test_invoker">ITestInvoker</link> * testCase, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp; className, <link linkend="_struct_catch_1_1_name_and_tags">NameAndTags</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; nameAndTags, <link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; lineInfo)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1ab3d8ccbc900fe50322c39ecbba52f536"/><section>
    <title>makeTestInvoker()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>makeTestInvoker</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>makeTestInvoker</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> Catch::makeTestInvoker (<link linkend="_struct_catch_1_1true__given">void</link>(*)() testAsFunction) -&gt;  <link linkend="_struct_catch_1_1_i_test_invoker">ITestInvoker</link> *<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a82a954c4d70afa716115820dc7dc8d24"/><section>
    <title>makeTestInvoker()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>makeTestInvoker</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>makeTestInvoker</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">C</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> Catch::makeTestInvoker (<link linkend="_struct_catch_1_1true__given">void</link>(C::*)() testAsMethod) -&gt; <link linkend="_struct_catch_1_1_i_test_invoker">ITestInvoker</link>* <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace_catch_1aadef80fbc6bc84589777a462770cef49"/><section>
    <title>matchTest()</title>
<indexterm><primary>matchTest</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>matchTest</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">bool</link> Catch::matchTest (<link linkend="_class_catch_1_1_test_case">TestCase</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; testCase, <link linkend="_struct_catch_1_1true__given">TestSpec</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; testSpec, <link linkend="_struct_catch_1_1_i_config">IConfig</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; config)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1adc1e84abf2d7a8b971948ec4ab373280"/><section>
    <title>operator&quot;&quot;_sr()</title>
<indexterm><primary>operator&quot;&quot;_sr</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>operator&quot;&quot;_sr</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">constexpr</link> <link linkend="_struct_catch_1_1true__given">auto</link> Catch::operator&quot;&quot;_sr (<link linkend="_struct_catch_1_1true__given">char</link> <link linkend="_struct_catch_1_1true__given">const</link> * rawChars, std::size_t size) -&gt; <link linkend="_class_catch_1_1_string_ref">StringRef</link> <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c"/><section>
    <title>operator+()</title>
<indexterm><primary>operator+</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">T</link> <link linkend="_struct_catch_1_1true__given">const</link>  &amp; <link linkend="_struct_catch_1_1true__given">Catch::operator</link>+ (<link linkend="_struct_catch_1_1true__given">T</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; value, <link linkend="_struct_catch_1_1_stream_end_stop">StreamEndStop</link> )</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46"/><section>
    <title>operator+=()</title>
<indexterm><primary>operator+=</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_struct_catch_1_1true__given">Catch::operator</link>+= (std::string &amp; lhs, <link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; sr) -&gt;  std::string &amp;</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a8c8ea1f66bc1cdc3e1254ed7fa57c06d"/><section>
    <title>operator&lt;&lt;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; <link linkend="_struct_catch_1_1true__given">Catch::operator</link>&lt;&lt; (std::ostream &amp; os, <link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; info)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a5e37b333d756a28e12d44977f063af43"/><section>
    <title>operator&lt;&lt;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_struct_catch_1_1true__given">Catch::operator</link>&lt;&lt; (std::ostream &amp; os, <link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; sr) -&gt;  std::ostream &amp;</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1ab32a083e442cc09f736327d2e2865999"/><section>
    <title>operator|()</title>
<indexterm><primary>operator|</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>operator|</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8">ResultDisposition::Flags</link> <link linkend="_struct_catch_1_1true__given">Catch::operator</link>| (<link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8">ResultDisposition::Flags</link> lhs, <link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8">ResultDisposition::Flags</link> rhs)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1af13494e925a793e3e7143c6ce6f442c2"/><section>
    <title>rangeToString()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>rangeToString</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>rangeToString</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">Range</link> &gt; </computeroutput><para><computeroutput>std::string Catch::rangeToString (<link linkend="_struct_catch_1_1true__given">Range</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; range)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1ae162dc66b7767a52e7e4283915fd3d9f"/><section>
    <title>rangeToString()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>rangeToString</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>rangeToString</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">Allocator</link> &gt; </computeroutput><para><computeroutput>std::string Catch::rangeToString (std::vector&lt; <link linkend="_struct_catch_1_1true__given">bool</link>, <link linkend="_struct_catch_1_1true__given">Allocator</link> &gt; <link linkend="_struct_catch_1_1true__given">const</link> &amp; v)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1afe4e6770da547e43e9e4eeaa05f946ea"/><section>
    <title>replaceInPlace()</title>
<indexterm><primary>replaceInPlace</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>replaceInPlace</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">bool</link> Catch::replaceInPlace (std::string &amp; str, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp; replaceThis, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp; withThis)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a66ea553511cbbc59d99e1720d8da514e"/><section>
    <title>rng()</title>
<indexterm><primary>rng</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>rng</secondary></indexterm>
<para><computeroutput><link linkend="_class_catch_1_1_simple_pcg32">SimplePcg32</link> &amp; Catch::rng ( )</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1acf5ea05e942d2d7fe79111e12754ed76"/><section>
    <title>rngSeed()</title>
<indexterm><primary>rngSeed</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>rngSeed</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">unsigned</link> <link linkend="_struct_catch_1_1true__given">int</link> Catch::rngSeed ( )</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a7f7480b15d74965459c844f0d393ed87"/><section>
    <title>shouldContinueOnFailure()</title>
<indexterm><primary>shouldContinueOnFailure</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>shouldContinueOnFailure</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">bool</link> Catch::shouldContinueOnFailure (<link linkend="_struct_catch_1_1true__given">int</link> flags)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1ab91eb13081203d634fe48d3d2ab386d7"/><section>
    <title>shouldSuppressFailure()</title>
<indexterm><primary>shouldSuppressFailure</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>shouldSuppressFailure</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">bool</link> Catch::shouldSuppressFailure (<link linkend="_struct_catch_1_1true__given">int</link> flags)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a678e3c779388970bb3ec5802245f93d7"/><section>
    <title>splitStringRef()</title>
<indexterm><primary>splitStringRef</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>splitStringRef</secondary></indexterm>
<para><computeroutput>std::vector&lt; <link linkend="_class_catch_1_1_string_ref">StringRef</link> &gt; Catch::splitStringRef (<link linkend="_class_catch_1_1_string_ref">StringRef</link> str, <link linkend="_struct_catch_1_1true__given">char</link> delimiter)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1acad23751846ac23d0f379e34f5adebb1"/><section>
    <title>startsWith()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>startsWith</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>startsWith</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">bool</link> Catch::startsWith (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp; s, <link linkend="_struct_catch_1_1true__given">char</link> prefix)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a695f62327be0676e046291eeaae15110"/><section>
    <title>startsWith()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>startsWith</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>startsWith</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">bool</link> Catch::startsWith (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp; s, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp; prefix)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1ae67297c3e265b0fcd55de371bf408e4e"/><section>
    <title>throw_domain_error()</title>
<indexterm><primary>throw_domain_error</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>throw_domain_error</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">void</link> Catch::throw_domain_error (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp; msg)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a3cbceeab9252d1b752f66a2826e92548"/><section>
    <title>throw_exception()</title>
<indexterm><primary>throw_exception</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>throw_exception</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">void</link> Catch::throw_exception (std::exception <link linkend="_struct_catch_1_1true__given">const</link> &amp; e)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a707884e681203fef6bf7dbf752532fa5"/><section>
    <title>throw_logic_error()</title>
<indexterm><primary>throw_logic_error</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>throw_logic_error</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">void</link> Catch::throw_logic_error (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp; msg)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a48d2c35022dd9d56a1b7ee78ad581eea"/><section>
    <title>throw_runtime_error()</title>
<indexterm><primary>throw_runtime_error</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>throw_runtime_error</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">void</link> Catch::throw_runtime_error (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp; msg)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1ac036a17412d318598ffda8e1fe7a1177"/><section>
    <title>toLower()</title>
<indexterm><primary>toLower</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>toLower</secondary></indexterm>
<para><computeroutput>std::string Catch::toLower (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp; s)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a0760dbe87d090a55a35414db57d272c4"/><section>
    <title>toLowerInPlace()</title>
<indexterm><primary>toLowerInPlace</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>toLowerInPlace</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">void</link> Catch::toLowerInPlace (std::string &amp; s)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1adafff91485eeeeb9e9333f317cc0e3b1"/><section>
    <title>translateActiveException()</title>
<indexterm><primary>translateActiveException</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>translateActiveException</secondary></indexterm>
<para><computeroutput>std::string Catch::translateActiveException ( )</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1a084108b47f37d8bfd5db51c50c7451b3"/><section>
    <title>trim()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>trim</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>trim</secondary></indexterm>
<para><computeroutput>std::string Catch::trim (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp; str)</computeroutput></para><para>

<para>Returns a new string without whitespace at the start/end. </para>
</para>
</section>
<anchor xml:id="_namespace_catch_1a6f6d8ef0349688290bd242b50a702c28"/><section>
    <title>trim()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>trim</primary><secondary>Catch</secondary></indexterm>
<indexterm><primary>Catch</primary><secondary>trim</secondary></indexterm>
<para><computeroutput><link linkend="_class_catch_1_1_string_ref">StringRef</link> Catch::trim (<link linkend="_class_catch_1_1_string_ref">StringRef</link> ref)</computeroutput></para><para>

<para>Returns a substring of the original ref without whitespace. Beware lifetimes! </para>
</para>
</section>
</section>
</section>
