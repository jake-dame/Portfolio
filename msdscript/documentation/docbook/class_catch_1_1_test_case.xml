<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_catch_1_1_test_case" xml:lang="en-US">
<title>Catch::TestCase Class Reference</title>
<indexterm><primary>Catch::TestCase</primary></indexterm>
<para>
<computeroutput>#include &lt;catch.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for Catch::TestCase:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_catch_1_1_test_case.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_catch_1_1_test_case_1aae5709fc1cb68e19ab0ac27e1ffd6a76">TestCase</link> (<link linkend="_struct_catch_1_1_i_test_invoker">ITestInvoker</link> *<link linkend="_struct_catch_1_1true__given">testCase</link>, <link linkend="_struct_catch_1_1_test_case_info">TestCaseInfo</link> &amp;&amp;<link linkend="_struct_catch_1_1true__given">info</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_catch_1_1_test_case">TestCase</link> <link linkend="_class_catch_1_1_test_case_1a0812e8a216d09b087d5874687009f0d6">withName</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">_newName</link>) <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_class_catch_1_1_test_case_1a26f346c8446dded0562fe3818ae71651">invoke</link> () <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_test_case_info">TestCaseInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; <link linkend="_class_catch_1_1_test_case_1a804d0a6a5dc92b219e724f1390c25c7f">getTestCaseInfo</link> () <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_class_catch_1_1_test_case_1a5456d03a90f75292835c158f3a3374a1">operator==</link> (<link linkend="_class_catch_1_1_test_case">TestCase</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">other</link>) <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_class_catch_1_1_test_case_1a030e4b9282e9b32e08c8bd5e5cd6fa98">operator&lt;</link> (<link linkend="_class_catch_1_1_test_case">TestCase</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">other</link>) <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_struct_catch_1_1_test_case_info">Catch::TestCaseInfo</link>        <itemizedlist>
            <listitem><para><link linkend="_struct_catch_1_1_test_case_info_1ad1a6b08b5a83d1c5eb4596b727b5305f">TestCaseInfo</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">_name</link>, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">_className</link>, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">_description</link>, std::vector&lt; std::string &gt; <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">_tags</link>, <link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">_lineInfo</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_struct_catch_1_1_test_case_info_1a934b1a0952700743e99d62ec1731a2e2">isHidden</link> () <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_struct_catch_1_1_test_case_info_1afc70d4379a2070cc22b693ffe3932c1a">throws</link> () <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_struct_catch_1_1_test_case_info_1a5f37291295e3a6de2dd85324c941edaf">okToFail</link> () <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_struct_catch_1_1_test_case_info_1abe33d81233230cdae8afa714688e905b">expectedToFail</link> () <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
            <listitem><para>std::string <link linkend="_struct_catch_1_1_test_case_info_1a17506de67fb18e27511c17f8a81119d8">tagsAsString</link> () <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>std::shared_ptr&lt; <link linkend="_struct_catch_1_1_i_test_invoker">ITestInvoker</link> &gt; <link linkend="_class_catch_1_1_test_case_1a7aaa375d6f2bda735095eaa43395b54b">test</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
Public Types inherited from <link linkend="_struct_catch_1_1_test_case_info">Catch::TestCaseInfo</link>        <itemizedlist>
            <listitem><para>enum <link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eac">SpecialProperties</link> { <?linebreak?><link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eacaf94e9de5f8ec1e53b1aa761ec564b31a">None</link> = 0
, <link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eacaeda53906c14c3973e0980900c132b8f7">IsHidden</link> = 1 &lt;&lt; 1
, <link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eacaf9002285bccfc343935958f3953f4c01">ShouldFail</link> = 1 &lt;&lt; 2
, <link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eacadf1873d3271121cb9f52d7df45b416ca">MayFail</link> = 1 &lt;&lt; 3
, <?linebreak?><link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eaca4704adf89ed7f7ad653d08f99813a974">Throws</link> = 1 &lt;&lt; 4
, <link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eaca06472887b53fda9eb8015d74e7fd2cf1">NonPortable</link> = 1 &lt;&lt; 5
, <link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eacad0e25e337246ae34d555fe53baf81c16">Benchmark</link> = 1 &lt;&lt; 6
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
Public Attributes inherited from <link linkend="_struct_catch_1_1_test_case_info">Catch::TestCaseInfo</link>        <itemizedlist>
            <listitem><para>std::string <link linkend="_struct_catch_1_1_test_case_info_1a463794e2f5cfead307c93efd134ade36">name</link></para>
</listitem>
            <listitem><para>std::string <link linkend="_struct_catch_1_1_test_case_info_1a1a5e0825132a38d091defdebbf2f8ce9">className</link></para>
</listitem>
            <listitem><para>std::string <link linkend="_struct_catch_1_1_test_case_info_1a37fe2db9425bc45f6a33893eac31198e">description</link></para>
</listitem>
            <listitem><para>std::vector&lt; std::string &gt; <link linkend="_struct_catch_1_1_test_case_info_1a150a7cbca1dd0c91799ccb14ff822eb0">tags</link></para>
</listitem>
            <listitem><para>std::vector&lt; std::string &gt; <link linkend="_struct_catch_1_1_test_case_info_1a844e3de9baf6e53cadfba9733c236bfe">lcaseTags</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link> <link linkend="_struct_catch_1_1_test_case_info_1aa9407b7f442655b51a2aad24b3fa2fd3">lineInfo</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eac">SpecialProperties</link> <link linkend="_struct_catch_1_1_test_case_info_1afc1e84bd7a2e180895a06d9131302af0">properties</link></para>
</listitem>
        </itemizedlist>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_catch_1_1_test_case_1aae5709fc1cb68e19ab0ac27e1ffd6a76"/><section>
    <title>TestCase()</title>
<indexterm><primary>TestCase</primary><secondary>Catch::TestCase</secondary></indexterm>
<indexterm><primary>Catch::TestCase</primary><secondary>TestCase</secondary></indexterm>
<para><computeroutput>Catch::TestCase::TestCase (<link linkend="_struct_catch_1_1_i_test_invoker">ITestInvoker</link> * testCase, <link linkend="_struct_catch_1_1_test_case_info">TestCaseInfo</link> &amp;&amp; info)</computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_catch_1_1_test_case_1a804d0a6a5dc92b219e724f1390c25c7f"/><section>
    <title>getTestCaseInfo()</title>
<indexterm><primary>getTestCaseInfo</primary><secondary>Catch::TestCase</secondary></indexterm>
<indexterm><primary>Catch::TestCase</primary><secondary>getTestCaseInfo</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1_test_case_info">TestCaseInfo</link> <link linkend="_struct_catch_1_1true__given">const</link>  &amp; Catch::TestCase::getTestCaseInfo ( ) const</computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_test_case_1a26f346c8446dded0562fe3818ae71651"/><section>
    <title>invoke()</title>
<indexterm><primary>invoke</primary><secondary>Catch::TestCase</secondary></indexterm>
<indexterm><primary>Catch::TestCase</primary><secondary>invoke</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">void</link> Catch::TestCase::invoke ( ) const</computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_test_case_1a030e4b9282e9b32e08c8bd5e5cd6fa98"/><section>
    <title>operator&lt;()</title>
<indexterm><primary>operator&lt;</primary><secondary>Catch::TestCase</secondary></indexterm>
<indexterm><primary>Catch::TestCase</primary><secondary>operator&lt;</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">bool</link> Catch::TestCase::operator&lt; (<link linkend="_class_catch_1_1_test_case">TestCase</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; other) const</computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_test_case_1a5456d03a90f75292835c158f3a3374a1"/><section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>Catch::TestCase</secondary></indexterm>
<indexterm><primary>Catch::TestCase</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">bool</link> Catch::TestCase::operator== (<link linkend="_class_catch_1_1_test_case">TestCase</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; other) const</computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_test_case_1a0812e8a216d09b087d5874687009f0d6"/><section>
    <title>withName()</title>
<indexterm><primary>withName</primary><secondary>Catch::TestCase</secondary></indexterm>
<indexterm><primary>Catch::TestCase</primary><secondary>withName</secondary></indexterm>
<para><computeroutput><link linkend="_class_catch_1_1_test_case">TestCase</link> Catch::TestCase::withName (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp; _newName) const</computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_catch_1_1_test_case_1a7aaa375d6f2bda735095eaa43395b54b"/><section>
    <title>test</title>
<indexterm><primary>test</primary><secondary>Catch::TestCase</secondary></indexterm>
<indexterm><primary>Catch::TestCase</primary><secondary>test</secondary></indexterm>
<para><computeroutput>std::shared_ptr&lt;<link linkend="_struct_catch_1_1_i_test_invoker">ITestInvoker</link>&gt; Catch::TestCase::test<computeroutput>[private]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
/Users/u0858882/Desktop/msdscript/msdscript/src/<link linkend="_catch_8h">catch.h</link></section>
</section>
