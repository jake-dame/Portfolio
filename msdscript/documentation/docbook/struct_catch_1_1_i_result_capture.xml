<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_catch_1_1_i_result_capture" xml:lang="en-US">
<title>Catch::IResultCapture Struct Reference</title>
<indexterm><primary>Catch::IResultCapture</primary></indexterm>
<para>
<computeroutput>#include &lt;catch.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1_i_result_capture_1a3bd16719d6772b7470887fc36c6d0808">~IResultCapture</link> ()</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_struct_catch_1_1_i_result_capture_1a5b76ed52badcb64cf374202e12b81a03">sectionStarted</link> (<link linkend="_struct_catch_1_1_section_info">SectionInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;sectionInfo, <link linkend="_struct_catch_1_1_counts">Counts</link> &amp;assertions)=0</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_struct_catch_1_1_i_result_capture_1a4e152bc43dc0933684e31fa67a58195d">sectionEnded</link> (<link linkend="_struct_catch_1_1_section_end_info">SectionEndInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">endInfo</link>)=0</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_struct_catch_1_1_i_result_capture_1afcc71eef8ca821ae132cced4a2be6988">sectionEndedEarly</link> (<link linkend="_struct_catch_1_1_section_end_info">SectionEndInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">endInfo</link>)=0</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_struct_catch_1_1_i_result_capture_1a8f93a848e0a48b630ca9ecbf225e4817">acquireGeneratorTracker</link> (<link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">generatorName</link>, <link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;lineInfo) -&gt; <link linkend="_struct_catch_1_1_i_generator_tracker">IGeneratorTracker</link> &amp;=0</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_struct_catch_1_1_i_result_capture_1a91d154c1e087e383dcde5aad95cb6a05">pushScopedMessage</link> (<link linkend="_struct_catch_1_1_message_info">MessageInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;message)=0</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_struct_catch_1_1_i_result_capture_1a42bcb13276706bf8c3ce081ce16d37fd">popScopedMessage</link> (<link linkend="_struct_catch_1_1_message_info">MessageInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;message)=0</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_struct_catch_1_1_i_result_capture_1a49f74f1323ef8be71b8f9b8e8b2c0fc2">emplaceUnscopedMessage</link> (<link linkend="_struct_catch_1_1_message_builder">MessageBuilder</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">builder</link>)=0</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_struct_catch_1_1_i_result_capture_1a48559e6598ba9474b903697b69c769b2">handleFatalErrorCondition</link> (<link linkend="_class_catch_1_1_string_ref">StringRef</link> message)=0</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_struct_catch_1_1_i_result_capture_1a59a2b05391e464954575d2afb6d5d607">handleExpr</link> (<link linkend="_struct_catch_1_1_assertion_info">AssertionInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">info</link>, <link linkend="_struct_catch_1_1_i_transient_expression">ITransientExpression</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">expr</link>, <link linkend="_struct_catch_1_1_assertion_reaction">AssertionReaction</link> &amp;<link linkend="_struct_catch_1_1true__given">reaction</link>)=0</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_struct_catch_1_1_i_result_capture_1a21788ebc64571abf322b80c8cc51794d">handleMessage</link> (<link linkend="_struct_catch_1_1_assertion_info">AssertionInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">info</link>, <link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link> <link linkend="_struct_catch_1_1true__given">resultType</link>, <link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;message, <link linkend="_struct_catch_1_1_assertion_reaction">AssertionReaction</link> &amp;<link linkend="_struct_catch_1_1true__given">reaction</link>)=0</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_struct_catch_1_1_i_result_capture_1a6382ed20486e2d9a020da971c6d5c53d">handleUnexpectedExceptionNotThrown</link> (<link linkend="_struct_catch_1_1_assertion_info">AssertionInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">info</link>, <link linkend="_struct_catch_1_1_assertion_reaction">AssertionReaction</link> &amp;<link linkend="_struct_catch_1_1true__given">reaction</link>)=0</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_struct_catch_1_1_i_result_capture_1afc97bc69829185222f955ebeef97adfe">handleUnexpectedInflightException</link> (<link linkend="_struct_catch_1_1_assertion_info">AssertionInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">info</link>, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;message, <link linkend="_struct_catch_1_1_assertion_reaction">AssertionReaction</link> &amp;<link linkend="_struct_catch_1_1true__given">reaction</link>)=0</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_struct_catch_1_1_i_result_capture_1a89b89372eb09cc44f8dcad363de6157d">handleIncomplete</link> (<link linkend="_struct_catch_1_1_assertion_info">AssertionInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">info</link>)=0</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_struct_catch_1_1_i_result_capture_1ab7dbdf8aa28427119583e24dbb302c63">handleNonExpr</link> (<link linkend="_struct_catch_1_1_assertion_info">AssertionInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">info</link>, <link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link> <link linkend="_struct_catch_1_1true__given">resultType</link>, <link linkend="_struct_catch_1_1_assertion_reaction">AssertionReaction</link> &amp;<link linkend="_struct_catch_1_1true__given">reaction</link>)=0</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_struct_catch_1_1_i_result_capture_1a973435fbdcb2f6f07a0ec5719a01e956">lastAssertionPassed</link> ()=0</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_struct_catch_1_1_i_result_capture_1a9b0ef2cb071e9a9dc6ec1b533026aea7">assertionPassed</link> ()=0</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">virtual</link> std::string <link linkend="_struct_catch_1_1_i_result_capture_1aea1617f4a84cc648246aa3ed6918b5bf">getCurrentTestName</link> () <link linkend="_struct_catch_1_1true__given">const</link> =0</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">const</link> <link linkend="_struct_catch_1_1true__given">AssertionResult</link> * <link linkend="_struct_catch_1_1_i_result_capture_1a2f44f3fa0bb898ce1aef650c1e063cc9">getLastResult</link> () <link linkend="_struct_catch_1_1true__given">const</link> =0</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> <link linkend="_struct_catch_1_1_i_result_capture_1ae63ecec95db4c236c63ecf616f483810">exceptionEarlyReported</link> ()=0</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_struct_catch_1_1_i_result_capture_1a3bd16719d6772b7470887fc36c6d0808"/><section>
    <title>~IResultCapture()</title>
<indexterm><primary>~IResultCapture</primary><secondary>Catch::IResultCapture</secondary></indexterm>
<indexterm><primary>Catch::IResultCapture</primary><secondary>~IResultCapture</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">virtual</link> Catch::IResultCapture::~IResultCapture ( )<computeroutput>[virtual]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_struct_catch_1_1_i_result_capture_1a8f93a848e0a48b630ca9ecbf225e4817"/><section>
    <title>acquireGeneratorTracker()</title>
<indexterm><primary>acquireGeneratorTracker</primary><secondary>Catch::IResultCapture</secondary></indexterm>
<indexterm><primary>Catch::IResultCapture</primary><secondary>acquireGeneratorTracker</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">auto</link> Catch::IResultCapture::acquireGeneratorTracker (<link linkend="_class_catch_1_1_string_ref">StringRef</link> generatorName, <link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; lineInfo) -&gt;  <link linkend="_struct_catch_1_1_i_generator_tracker">IGeneratorTracker</link> &amp;<computeroutput>[pure virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_catch_1_1_i_result_capture_1a9b0ef2cb071e9a9dc6ec1b533026aea7"/><section>
    <title>assertionPassed()</title>
<indexterm><primary>assertionPassed</primary><secondary>Catch::IResultCapture</secondary></indexterm>
<indexterm><primary>Catch::IResultCapture</primary><secondary>assertionPassed</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> Catch::IResultCapture::assertionPassed ( )<computeroutput>[pure virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_catch_1_1_i_result_capture_1a49f74f1323ef8be71b8f9b8e8b2c0fc2"/><section>
    <title>emplaceUnscopedMessage()</title>
<indexterm><primary>emplaceUnscopedMessage</primary><secondary>Catch::IResultCapture</secondary></indexterm>
<indexterm><primary>Catch::IResultCapture</primary><secondary>emplaceUnscopedMessage</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> Catch::IResultCapture::emplaceUnscopedMessage (<link linkend="_struct_catch_1_1_message_builder">MessageBuilder</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; builder)<computeroutput>[pure virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_catch_1_1_i_result_capture_1ae63ecec95db4c236c63ecf616f483810"/><section>
    <title>exceptionEarlyReported()</title>
<indexterm><primary>exceptionEarlyReported</primary><secondary>Catch::IResultCapture</secondary></indexterm>
<indexterm><primary>Catch::IResultCapture</primary><secondary>exceptionEarlyReported</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> Catch::IResultCapture::exceptionEarlyReported ( )<computeroutput>[pure virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_catch_1_1_i_result_capture_1aea1617f4a84cc648246aa3ed6918b5bf"/><section>
    <title>getCurrentTestName()</title>
<indexterm><primary>getCurrentTestName</primary><secondary>Catch::IResultCapture</secondary></indexterm>
<indexterm><primary>Catch::IResultCapture</primary><secondary>getCurrentTestName</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">virtual</link> std::string Catch::IResultCapture::getCurrentTestName ( ) const<computeroutput>[pure virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_catch_1_1_i_result_capture_1a2f44f3fa0bb898ce1aef650c1e063cc9"/><section>
    <title>getLastResult()</title>
<indexterm><primary>getLastResult</primary><secondary>Catch::IResultCapture</secondary></indexterm>
<indexterm><primary>Catch::IResultCapture</primary><secondary>getLastResult</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">const</link> <link linkend="_struct_catch_1_1true__given">AssertionResult</link> * Catch::IResultCapture::getLastResult ( ) const<computeroutput>[pure virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_catch_1_1_i_result_capture_1a59a2b05391e464954575d2afb6d5d607"/><section>
    <title>handleExpr()</title>
<indexterm><primary>handleExpr</primary><secondary>Catch::IResultCapture</secondary></indexterm>
<indexterm><primary>Catch::IResultCapture</primary><secondary>handleExpr</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> Catch::IResultCapture::handleExpr (<link linkend="_struct_catch_1_1_assertion_info">AssertionInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; info, <link linkend="_struct_catch_1_1_i_transient_expression">ITransientExpression</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; expr, <link linkend="_struct_catch_1_1_assertion_reaction">AssertionReaction</link> &amp; reaction)<computeroutput>[pure virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_catch_1_1_i_result_capture_1a48559e6598ba9474b903697b69c769b2"/><section>
    <title>handleFatalErrorCondition()</title>
<indexterm><primary>handleFatalErrorCondition</primary><secondary>Catch::IResultCapture</secondary></indexterm>
<indexterm><primary>Catch::IResultCapture</primary><secondary>handleFatalErrorCondition</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> Catch::IResultCapture::handleFatalErrorCondition (<link linkend="_class_catch_1_1_string_ref">StringRef</link> message)<computeroutput>[pure virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_catch_1_1_i_result_capture_1a89b89372eb09cc44f8dcad363de6157d"/><section>
    <title>handleIncomplete()</title>
<indexterm><primary>handleIncomplete</primary><secondary>Catch::IResultCapture</secondary></indexterm>
<indexterm><primary>Catch::IResultCapture</primary><secondary>handleIncomplete</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> Catch::IResultCapture::handleIncomplete (<link linkend="_struct_catch_1_1_assertion_info">AssertionInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; info)<computeroutput>[pure virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_catch_1_1_i_result_capture_1a21788ebc64571abf322b80c8cc51794d"/><section>
    <title>handleMessage()</title>
<indexterm><primary>handleMessage</primary><secondary>Catch::IResultCapture</secondary></indexterm>
<indexterm><primary>Catch::IResultCapture</primary><secondary>handleMessage</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> Catch::IResultCapture::handleMessage (<link linkend="_struct_catch_1_1_assertion_info">AssertionInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; info, <link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link> resultType, <link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; message, <link linkend="_struct_catch_1_1_assertion_reaction">AssertionReaction</link> &amp; reaction)<computeroutput>[pure virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_catch_1_1_i_result_capture_1ab7dbdf8aa28427119583e24dbb302c63"/><section>
    <title>handleNonExpr()</title>
<indexterm><primary>handleNonExpr</primary><secondary>Catch::IResultCapture</secondary></indexterm>
<indexterm><primary>Catch::IResultCapture</primary><secondary>handleNonExpr</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> Catch::IResultCapture::handleNonExpr (<link linkend="_struct_catch_1_1_assertion_info">AssertionInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; info, <link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link> resultType, <link linkend="_struct_catch_1_1_assertion_reaction">AssertionReaction</link> &amp; reaction)<computeroutput>[pure virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_catch_1_1_i_result_capture_1a6382ed20486e2d9a020da971c6d5c53d"/><section>
    <title>handleUnexpectedExceptionNotThrown()</title>
<indexterm><primary>handleUnexpectedExceptionNotThrown</primary><secondary>Catch::IResultCapture</secondary></indexterm>
<indexterm><primary>Catch::IResultCapture</primary><secondary>handleUnexpectedExceptionNotThrown</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> Catch::IResultCapture::handleUnexpectedExceptionNotThrown (<link linkend="_struct_catch_1_1_assertion_info">AssertionInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; info, <link linkend="_struct_catch_1_1_assertion_reaction">AssertionReaction</link> &amp; reaction)<computeroutput>[pure virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_catch_1_1_i_result_capture_1afc97bc69829185222f955ebeef97adfe"/><section>
    <title>handleUnexpectedInflightException()</title>
<indexterm><primary>handleUnexpectedInflightException</primary><secondary>Catch::IResultCapture</secondary></indexterm>
<indexterm><primary>Catch::IResultCapture</primary><secondary>handleUnexpectedInflightException</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> Catch::IResultCapture::handleUnexpectedInflightException (<link linkend="_struct_catch_1_1_assertion_info">AssertionInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; info, std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp; message, <link linkend="_struct_catch_1_1_assertion_reaction">AssertionReaction</link> &amp; reaction)<computeroutput>[pure virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_catch_1_1_i_result_capture_1a973435fbdcb2f6f07a0ec5719a01e956"/><section>
    <title>lastAssertionPassed()</title>
<indexterm><primary>lastAssertionPassed</primary><secondary>Catch::IResultCapture</secondary></indexterm>
<indexterm><primary>Catch::IResultCapture</primary><secondary>lastAssertionPassed</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">bool</link> Catch::IResultCapture::lastAssertionPassed ( )<computeroutput>[pure virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_catch_1_1_i_result_capture_1a42bcb13276706bf8c3ce081ce16d37fd"/><section>
    <title>popScopedMessage()</title>
<indexterm><primary>popScopedMessage</primary><secondary>Catch::IResultCapture</secondary></indexterm>
<indexterm><primary>Catch::IResultCapture</primary><secondary>popScopedMessage</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> Catch::IResultCapture::popScopedMessage (<link linkend="_struct_catch_1_1_message_info">MessageInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; message)<computeroutput>[pure virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_catch_1_1_i_result_capture_1a91d154c1e087e383dcde5aad95cb6a05"/><section>
    <title>pushScopedMessage()</title>
<indexterm><primary>pushScopedMessage</primary><secondary>Catch::IResultCapture</secondary></indexterm>
<indexterm><primary>Catch::IResultCapture</primary><secondary>pushScopedMessage</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> Catch::IResultCapture::pushScopedMessage (<link linkend="_struct_catch_1_1_message_info">MessageInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; message)<computeroutput>[pure virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_catch_1_1_i_result_capture_1a4e152bc43dc0933684e31fa67a58195d"/><section>
    <title>sectionEnded()</title>
<indexterm><primary>sectionEnded</primary><secondary>Catch::IResultCapture</secondary></indexterm>
<indexterm><primary>Catch::IResultCapture</primary><secondary>sectionEnded</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> Catch::IResultCapture::sectionEnded (<link linkend="_struct_catch_1_1_section_end_info">SectionEndInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; endInfo)<computeroutput>[pure virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_catch_1_1_i_result_capture_1afcc71eef8ca821ae132cced4a2be6988"/><section>
    <title>sectionEndedEarly()</title>
<indexterm><primary>sectionEndedEarly</primary><secondary>Catch::IResultCapture</secondary></indexterm>
<indexterm><primary>Catch::IResultCapture</primary><secondary>sectionEndedEarly</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">void</link> Catch::IResultCapture::sectionEndedEarly (<link linkend="_struct_catch_1_1_section_end_info">SectionEndInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; endInfo)<computeroutput>[pure virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_catch_1_1_i_result_capture_1a5b76ed52badcb64cf374202e12b81a03"/><section>
    <title>sectionStarted()</title>
<indexterm><primary>sectionStarted</primary><secondary>Catch::IResultCapture</secondary></indexterm>
<indexterm><primary>Catch::IResultCapture</primary><secondary>sectionStarted</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">virtual</link> <link linkend="_struct_catch_1_1true__given">bool</link> Catch::IResultCapture::sectionStarted (<link linkend="_struct_catch_1_1_section_info">SectionInfo</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; sectionInfo, <link linkend="_struct_catch_1_1_counts">Counts</link> &amp; assertions)<computeroutput>[pure virtual]</computeroutput></computeroutput></para></section>
<para>
The documentation for this struct was generated from the following file:</para>
/Users/u0858882/Desktop/msdscript/msdscript/src/<link linkend="_catch_8h">catch.h</link></section>
</section>
