<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_catch_8h_source" xml:lang="en-US">
<title>catch.h</title>
<indexterm><primary>/Users/u0858882/Desktop/msdscript/msdscript/src/catch.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*</emphasis>
2 <emphasis role="comment">&#32;*&#32;&#32;Catch&#32;v2.13.10</emphasis>
3 <emphasis role="comment">&#32;*&#32;&#32;Generated:&#32;2022-10-16&#32;11:01:23.452308</emphasis>
4 <emphasis role="comment">&#32;*&#32;&#32;----------------------------------------------------------</emphasis>
5 <emphasis role="comment">&#32;*&#32;&#32;This&#32;file&#32;has&#32;been&#32;merged&#32;from&#32;multiple&#32;headers.&#32;Please&#32;don&apos;t&#32;edit&#32;it&#32;directly</emphasis>
6 <emphasis role="comment">&#32;*&#32;&#32;Copyright&#32;(c)&#32;2022&#32;Two&#32;Blue&#32;Cubes&#32;Ltd.&#32;All&#32;rights&#32;reserved.</emphasis>
7 <emphasis role="comment">&#32;*</emphasis>
8 <emphasis role="comment">&#32;*&#32;&#32;Distributed&#32;under&#32;the&#32;Boost&#32;Software&#32;License,&#32;Version&#32;1.0.&#32;(See&#32;accompanying</emphasis>
9 <emphasis role="comment">&#32;*&#32;&#32;file&#32;LICENSE_1_0.txt&#32;or&#32;copy&#32;at&#32;http://www.boost.org/LICENSE_1_0.txt)</emphasis>
10 <emphasis role="comment">&#32;*/</emphasis>
11 <emphasis role="preprocessor">#ifndef&#32;TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED</emphasis>
12 <emphasis role="preprocessor">#define&#32;TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED</emphasis>
13 <emphasis role="comment">//&#32;start&#32;catch.hpp</emphasis>
14 
15 
16 <emphasis role="preprocessor">#define&#32;CATCH_VERSION_MAJOR&#32;2</emphasis>
17 <emphasis role="preprocessor">#define&#32;CATCH_VERSION_MINOR&#32;13</emphasis>
18 <emphasis role="preprocessor">#define&#32;CATCH_VERSION_PATCH&#32;10</emphasis>
19 
20 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
21 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;pragma&#32;clang&#32;system_header</emphasis>
22 <emphasis role="preprocessor">#elif&#32;defined&#32;__GNUC__</emphasis>
23 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;pragma&#32;GCC&#32;system_header</emphasis>
24 <emphasis role="preprocessor">#endif</emphasis>
25 
26 <emphasis role="comment">//&#32;start&#32;catch_suppress_warnings.h</emphasis>
27 
28 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
29 <emphasis role="preprocessor">#&#32;&#32;&#32;ifdef&#32;__ICC&#32;</emphasis><emphasis role="comment">//&#32;icpc&#32;defines&#32;the&#32;__clang__&#32;macro</emphasis>
30 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;warning(push)</emphasis>
31 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;warning(disable:&#32;161&#32;1682)</emphasis>
32 <emphasis role="preprocessor">#&#32;&#32;&#32;else&#32;</emphasis><emphasis role="comment">//&#32;__ICC</emphasis>
33 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;clang&#32;diagnostic&#32;push</emphasis>
34 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wpadded&quot;</emphasis>
35 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wswitch-enum&quot;</emphasis>
36 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wcovered-switch-default&quot;</emphasis>
37 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;endif</emphasis>
38 <emphasis role="preprocessor">#elif&#32;defined&#32;__GNUC__</emphasis>
39 &#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Because&#32;REQUIREs&#32;trigger&#32;GCC&apos;s&#32;-Wparentheses,&#32;and&#32;because&#32;still</emphasis>
40 &#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;supported&#32;version&#32;of&#32;g++&#32;have&#32;only&#32;buggy&#32;support&#32;for&#32;_Pragmas,</emphasis>
41 &#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Wparentheses&#32;have&#32;to&#32;be&#32;suppressed&#32;globally.</emphasis>
42 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wparentheses&quot;&#32;</emphasis><emphasis role="comment">//&#32;See&#32;#674&#32;for&#32;details</emphasis>
43 
44 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
45 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wunused-variable&quot;</emphasis>
46 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wpadded&quot;</emphasis>
47 <emphasis role="preprocessor">#endif</emphasis>
48 <emphasis role="comment">//&#32;end&#32;catch_suppress_warnings.h</emphasis>
49 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_MAIN)&#32;||&#32;defined(CATCH_CONFIG_RUNNER)</emphasis>
50 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_IMPL</emphasis>
51 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_CONFIG_ALL_PARTS</emphasis>
52 <emphasis role="preprocessor">#endif</emphasis>
53 
54 <emphasis role="comment">//&#32;In&#32;the&#32;impl&#32;file,&#32;we&#32;want&#32;to&#32;have&#32;access&#32;to&#32;all&#32;parts&#32;of&#32;the&#32;headers</emphasis>
55 <emphasis role="comment">//&#32;Can&#32;also&#32;be&#32;used&#32;to&#32;sanely&#32;support&#32;PCHs</emphasis>
56 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ALL_PARTS)</emphasis>
57 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_CONFIG_EXTERNAL_INTERFACES</emphasis>
58 <emphasis role="preprocessor">#&#32;&#32;if&#32;defined(CATCH_CONFIG_DISABLE_MATCHERS)</emphasis>
59 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;undef&#32;CATCH_CONFIG_DISABLE_MATCHERS</emphasis>
60 <emphasis role="preprocessor">#&#32;&#32;endif</emphasis>
61 <emphasis role="preprocessor">#&#32;&#32;if&#32;!defined(CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER)</emphasis>
62 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER</emphasis>
63 <emphasis role="preprocessor">#&#32;&#32;endif</emphasis>
64 <emphasis role="preprocessor">#endif</emphasis>
65 
66 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_IMPL_ONLY)</emphasis>
67 <emphasis role="comment">//&#32;start&#32;catch_platform.h</emphasis>
68 
69 <emphasis role="comment">//&#32;See&#32;e.g.:</emphasis>
70 <emphasis role="comment">//&#32;https://opensource.apple.com/source/CarbonHeaders/CarbonHeaders-18.1/TargetConditionals.h.auto.html</emphasis>
71 <emphasis role="preprocessor">#ifdef&#32;__APPLE__</emphasis>
72 <emphasis role="preprocessor">#&#32;&#32;include&#32;&lt;TargetConditionals.h&gt;</emphasis>
73 <emphasis role="preprocessor">#&#32;&#32;if&#32;(defined(TARGET_OS_OSX)&#32;&amp;&amp;&#32;TARGET_OS_OSX&#32;==&#32;1)&#32;||&#32;\</emphasis>
74 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;(defined(TARGET_OS_MAC)&#32;&amp;&amp;&#32;TARGET_OS_MAC&#32;==&#32;1)</emphasis>
75 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_PLATFORM_MAC</emphasis>
76 <emphasis role="preprocessor">#&#32;&#32;elif&#32;(defined(TARGET_OS_IPHONE)&#32;&amp;&amp;&#32;TARGET_OS_IPHONE&#32;==&#32;1)</emphasis>
77 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_PLATFORM_IPHONE</emphasis>
78 <emphasis role="preprocessor">#&#32;&#32;endif</emphasis>
79 
80 <emphasis role="preprocessor">#elif&#32;defined(linux)&#32;||&#32;defined(__linux)&#32;||&#32;defined(__linux__)</emphasis>
81 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_PLATFORM_LINUX</emphasis>
82 
83 <emphasis role="preprocessor">#elif&#32;defined(WIN32)&#32;||&#32;defined(__WIN32__)&#32;||&#32;defined(_WIN32)&#32;||&#32;defined(_MSC_VER)&#32;||&#32;defined(__MINGW32__)</emphasis>
84 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_PLATFORM_WINDOWS</emphasis>
85 <emphasis role="preprocessor">#endif</emphasis>
86 
87 <emphasis role="comment">//&#32;end&#32;catch_platform.h</emphasis>
88 
89 <emphasis role="preprocessor">#ifdef&#32;CATCH_IMPL</emphasis>
90 <emphasis role="preprocessor">#&#32;&#32;ifndef&#32;CLARA_CONFIG_MAIN</emphasis>
91 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CLARA_CONFIG_MAIN_NOT_DEFINED</emphasis>
92 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CLARA_CONFIG_MAIN</emphasis>
93 <emphasis role="preprocessor">#&#32;&#32;endif</emphasis>
94 <emphasis role="preprocessor">#endif</emphasis>
95 
96 <emphasis role="comment">//&#32;start&#32;catch_user_interfaces.h</emphasis>
97 
98 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
99 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespace_catch_1acf5ea05e942d2d7fe79111e12754ed76">rngSeed</link>();
100 }
101 
102 <emphasis role="comment">//&#32;end&#32;catch_user_interfaces.h</emphasis>
103 <emphasis role="comment">//&#32;start&#32;catch_tag_alias_autoregistrar.h</emphasis>
104 
105 <emphasis role="comment">//&#32;start&#32;catch_common.h</emphasis>
106 
107 <emphasis role="comment">//&#32;start&#32;catch_compiler_capabilities.h</emphasis>
108 
109 <emphasis role="comment">//&#32;Detect&#32;a&#32;number&#32;of&#32;compiler&#32;features&#32;-&#32;by&#32;compiler</emphasis>
110 <emphasis role="comment">//&#32;The&#32;following&#32;features&#32;are&#32;defined:</emphasis>
111 <emphasis role="comment">//</emphasis>
112 <emphasis role="comment">//&#32;CATCH_CONFIG_COUNTER&#32;:&#32;is&#32;the&#32;__COUNTER__&#32;macro&#32;supported?</emphasis>
113 <emphasis role="comment">//&#32;CATCH_CONFIG_WINDOWS_SEH&#32;:&#32;is&#32;Windows&#32;SEH&#32;supported?</emphasis>
114 <emphasis role="comment">//&#32;CATCH_CONFIG_POSIX_SIGNALS&#32;:&#32;are&#32;POSIX&#32;signals&#32;supported?</emphasis>
115 <emphasis role="comment">//&#32;CATCH_CONFIG_DISABLE_EXCEPTIONS&#32;:&#32;Are&#32;exceptions&#32;enabled?</emphasis>
116 <emphasis role="comment">//&#32;****************</emphasis>
117 <emphasis role="comment">//&#32;Note&#32;to&#32;maintainers:&#32;if&#32;new&#32;toggles&#32;are&#32;added&#32;please&#32;document&#32;them</emphasis>
118 <emphasis role="comment">//&#32;in&#32;configuration.md,&#32;too</emphasis>
119 <emphasis role="comment">//&#32;****************</emphasis>
120 
121 <emphasis role="comment">//&#32;In&#32;general&#32;each&#32;macro&#32;has&#32;a&#32;_NO_&lt;feature&#32;name&gt;&#32;form</emphasis>
122 <emphasis role="comment">//&#32;(e.g.&#32;CATCH_CONFIG_NO_POSIX_SIGNALS)&#32;which&#32;disables&#32;the&#32;feature.</emphasis>
123 <emphasis role="comment">//&#32;Many&#32;features,&#32;at&#32;point&#32;of&#32;detection,&#32;define&#32;an&#32;_INTERNAL_&#32;macro,&#32;so&#32;they</emphasis>
124 <emphasis role="comment">//&#32;can&#32;be&#32;combined,&#32;en-mass,&#32;with&#32;the&#32;_NO_&#32;forms&#32;later.</emphasis>
125 
126 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
127 
128 <emphasis role="preprocessor">#&#32;&#32;if&#32;(__cplusplus&#32;&gt;=&#32;201402L)&#32;||&#32;(defined(_MSVC_LANG)&#32;&amp;&amp;&#32;_MSVC_LANG&#32;&gt;=&#32;201402L)</emphasis>
129 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_CPP14_OR_GREATER</emphasis>
130 <emphasis role="preprocessor">#&#32;&#32;endif</emphasis>
131 
132 <emphasis role="preprocessor">#&#32;&#32;if&#32;(__cplusplus&#32;&gt;=&#32;201703L)&#32;||&#32;(defined(_MSVC_LANG)&#32;&amp;&amp;&#32;_MSVC_LANG&#32;&gt;=&#32;201703L)</emphasis>
133 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_CPP17_OR_GREATER</emphasis>
134 <emphasis role="preprocessor">#&#32;&#32;endif</emphasis>
135 
136 <emphasis role="preprocessor">#endif</emphasis>
137 
138 <emphasis role="comment">//&#32;Only&#32;GCC&#32;compiler&#32;should&#32;be&#32;used&#32;in&#32;this&#32;block,&#32;so&#32;other&#32;compilers&#32;trying&#32;to</emphasis>
139 <emphasis role="comment">//&#32;mask&#32;themselves&#32;as&#32;GCC&#32;should&#32;be&#32;ignored.</emphasis>
140 <emphasis role="preprocessor">#if&#32;defined(__GNUC__)&#32;&amp;&amp;&#32;!defined(__clang__)&#32;&amp;&amp;&#32;!defined(__ICC)&#32;&amp;&amp;&#32;!defined(__CUDACC__)&#32;&amp;&amp;&#32;!defined(__LCC__)</emphasis>
141 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;_Pragma(&#32;&quot;GCC&#32;diagnostic&#32;push&quot;&#32;)</emphasis>
142 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION&#32;&#32;_Pragma(&#32;&quot;GCC&#32;diagnostic&#32;pop&quot;&#32;)</emphasis>
143 
144 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_IGNORE_BUT_WARN(...)&#32;(void)__builtin_constant_p(__VA_ARGS__)</emphasis>
145 
146 <emphasis role="preprocessor">#endif</emphasis>
147 
148 <emphasis role="preprocessor">#if&#32;defined(__clang__)</emphasis>
149 
150 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;_Pragma(&#32;&quot;clang&#32;diagnostic&#32;push&quot;&#32;)</emphasis>
151 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION&#32;&#32;_Pragma(&#32;&quot;clang&#32;diagnostic&#32;pop&quot;&#32;)</emphasis>
152 
153 <emphasis role="comment">//&#32;As&#32;of&#32;this&#32;writing,&#32;IBM&#32;XL&apos;s&#32;implementation&#32;of&#32;__builtin_constant_p&#32;has&#32;a&#32;bug</emphasis>
154 <emphasis role="comment">//&#32;which&#32;results&#32;in&#32;calls&#32;to&#32;destructors&#32;being&#32;emitted&#32;for&#32;each&#32;temporary,</emphasis>
155 <emphasis role="comment">//&#32;without&#32;a&#32;matching&#32;initialization.&#32;In&#32;practice,&#32;this&#32;can&#32;result&#32;in&#32;something</emphasis>
156 <emphasis role="comment">//&#32;like&#32;`std::string::~string`&#32;being&#32;called&#32;on&#32;an&#32;uninitialized&#32;value.</emphasis>
157 <emphasis role="comment">//</emphasis>
158 <emphasis role="comment">//&#32;For&#32;example,&#32;this&#32;code&#32;will&#32;likely&#32;segfault&#32;under&#32;IBM&#32;XL:</emphasis>
159 <emphasis role="comment">//&#32;```</emphasis>
160 <emphasis role="comment">//&#32;REQUIRE(std::string(&quot;12&quot;)&#32;+&#32;&quot;34&quot;&#32;==&#32;&quot;1234&quot;)</emphasis>
161 <emphasis role="comment">//&#32;```</emphasis>
162 <emphasis role="comment">//</emphasis>
163 <emphasis role="comment">//&#32;Therefore,&#32;`CATCH_INTERNAL_IGNORE_BUT_WARN`&#32;is&#32;not&#32;implemented.</emphasis>
164 <emphasis role="preprocessor">#&#32;&#32;if&#32;!defined(__ibmxl__)&#32;&amp;&amp;&#32;!defined(__CUDACC__)</emphasis>
165 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_IGNORE_BUT_WARN(...)&#32;(void)__builtin_constant_p(__VA_ARGS__)&#32;</emphasis><emphasis role="comment">/*&#32;NOLINT(cppcoreguidelines-pro-type-vararg,&#32;hicpp-vararg)&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
166 <emphasis role="preprocessor">#&#32;&#32;endif</emphasis>
167 
168 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;\</emphasis>
169 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pragma(&#32;&quot;clang&#32;diagnostic&#32;ignored&#32;\&quot;-Wexit-time-destructors\&quot;&quot;&#32;)&#32;\</emphasis>
170 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pragma(&#32;&quot;clang&#32;diagnostic&#32;ignored&#32;\&quot;-Wglobal-constructors\&quot;&quot;)</emphasis>
171 
172 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS&#32;\</emphasis>
173 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pragma(&#32;&quot;clang&#32;diagnostic&#32;ignored&#32;\&quot;-Wparentheses\&quot;&quot;&#32;)</emphasis>
174 
175 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS&#32;\</emphasis>
176 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pragma(&#32;&quot;clang&#32;diagnostic&#32;ignored&#32;\&quot;-Wunused-variable\&quot;&quot;&#32;)</emphasis>
177 
178 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS&#32;\</emphasis>
179 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pragma(&#32;&quot;clang&#32;diagnostic&#32;ignored&#32;\&quot;-Wgnu-zero-variadic-macro-arguments\&quot;&quot;&#32;)</emphasis>
180 
181 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS&#32;\</emphasis>
182 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pragma(&#32;&quot;clang&#32;diagnostic&#32;ignored&#32;\&quot;-Wunused-template\&quot;&quot;&#32;)</emphasis>
183 
184 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__clang__</emphasis>
185 
187 <emphasis role="comment">//&#32;Assume&#32;that&#32;non-Windows&#32;platforms&#32;support&#32;posix&#32;signals&#32;by&#32;default</emphasis>
188 <emphasis role="preprocessor">#if&#32;!defined(CATCH_PLATFORM_WINDOWS)</emphasis>
189 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;CATCH_INTERNAL_CONFIG_POSIX_SIGNALS</emphasis>
190 <emphasis role="preprocessor">#endif</emphasis>
191 
193 <emphasis role="comment">//&#32;We&#32;know&#32;some&#32;environments&#32;not&#32;to&#32;support&#32;full&#32;POSIX&#32;signals</emphasis>
194 <emphasis role="preprocessor">#if&#32;defined(__CYGWIN__)&#32;||&#32;defined(__QNX__)&#32;||&#32;defined(__EMSCRIPTEN__)&#32;||&#32;defined(__DJGPP__)</emphasis>
195 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS</emphasis>
196 <emphasis role="preprocessor">#endif</emphasis>
197 
198 <emphasis role="preprocessor">#ifdef&#32;__OS400__</emphasis>
199 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS</emphasis>
200 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;CATCH_CONFIG_COLOUR_NONE</emphasis>
201 <emphasis role="preprocessor">#endif</emphasis>
202 
204 <emphasis role="comment">//&#32;Android&#32;somehow&#32;still&#32;does&#32;not&#32;support&#32;std::to_string</emphasis>
205 <emphasis role="preprocessor">#if&#32;defined(__ANDROID__)</emphasis>
206 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING</emphasis>
207 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_CONFIG_ANDROID_LOGWRITE</emphasis>
208 <emphasis role="preprocessor">#endif</emphasis>
209 
211 <emphasis role="comment">//&#32;Not&#32;all&#32;Windows&#32;environments&#32;support&#32;SEH&#32;properly</emphasis>
212 <emphasis role="preprocessor">#if&#32;defined(__MINGW32__)</emphasis>
213 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH</emphasis>
214 <emphasis role="preprocessor">#endif</emphasis>
215 
217 <emphasis role="comment">//&#32;PS4</emphasis>
218 <emphasis role="preprocessor">#if&#32;defined(__ORBIS__)</emphasis>
219 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_CONFIG_NO_NEW_CAPTURE</emphasis>
220 <emphasis role="preprocessor">#endif</emphasis>
221 
223 <emphasis role="comment">//&#32;Cygwin</emphasis>
224 <emphasis role="preprocessor">#ifdef&#32;__CYGWIN__</emphasis>
225 
226 <emphasis role="comment">//&#32;Required&#32;for&#32;some&#32;versions&#32;of&#32;Cygwin&#32;to&#32;declare&#32;gettimeofday</emphasis>
227 <emphasis role="comment">//&#32;see:&#32;http://stackoverflow.com/questions/36901803/gettimeofday-not-declared-in-this-scope-cygwin</emphasis>
228 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;_BSD_SOURCE</emphasis>
229 <emphasis role="comment">//&#32;some&#32;versions&#32;of&#32;cygwin&#32;(most)&#32;do&#32;not&#32;support&#32;std::to_string.&#32;Use&#32;the&#32;libstd&#32;check.</emphasis>
230 <emphasis role="comment">//&#32;https://gcc.gnu.org/onlinedocs/gcc-4.8.2/libstdc++/api/a01053_source.html&#32;line&#32;2812-2813</emphasis>
231 <emphasis role="preprocessor">#&#32;if&#32;!((__cplusplus&#32;&gt;=&#32;201103L)&#32;&amp;&amp;&#32;defined(_GLIBCXX_USE_C99)&#32;\</emphasis>
232 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!defined(_GLIBCXX_HAVE_BROKEN_VSWPRINTF))</emphasis>
233 
234 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING</emphasis>
235 
236 <emphasis role="preprocessor">#&#32;endif</emphasis>
237 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__CYGWIN__</emphasis>
238 
240 <emphasis role="comment">//&#32;Visual&#32;C++</emphasis>
241 <emphasis role="preprocessor">#if&#32;defined(_MSC_VER)</emphasis>
242 
243 <emphasis role="comment">//&#32;Universal&#32;Windows&#32;platform&#32;does&#32;not&#32;support&#32;SEH</emphasis>
244 <emphasis role="comment">//&#32;Or&#32;console&#32;colours&#32;(or&#32;console&#32;at&#32;all...)</emphasis>
245 <emphasis role="preprocessor">#&#32;&#32;if&#32;defined(WINAPI_FAMILY)&#32;&amp;&amp;&#32;(WINAPI_FAMILY&#32;==&#32;WINAPI_FAMILY_APP)</emphasis>
246 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_CONFIG_COLOUR_NONE</emphasis>
247 <emphasis role="preprocessor">#&#32;&#32;else</emphasis>
248 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_CONFIG_WINDOWS_SEH</emphasis>
249 <emphasis role="preprocessor">#&#32;&#32;endif</emphasis>
250 
251 <emphasis role="preprocessor">#&#32;&#32;if&#32;!defined(__clang__)&#32;</emphasis><emphasis role="comment">//&#32;Handle&#32;Clang&#32;masquerading&#32;for&#32;msvc</emphasis>
252 
253 <emphasis role="comment">//&#32;MSVC&#32;traditional&#32;preprocessor&#32;needs&#32;some&#32;workaround&#32;for&#32;__VA_ARGS__</emphasis>
254 <emphasis role="comment">//&#32;_MSVC_TRADITIONAL&#32;==&#32;0&#32;means&#32;new&#32;conformant&#32;preprocessor</emphasis>
255 <emphasis role="comment">//&#32;_MSVC_TRADITIONAL&#32;==&#32;1&#32;means&#32;old&#32;traditional&#32;non-conformant&#32;preprocessor</emphasis>
256 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;if&#32;!defined(_MSVC_TRADITIONAL)&#32;||&#32;(defined(_MSVC_TRADITIONAL)&#32;&amp;&amp;&#32;_MSVC_TRADITIONAL)</emphasis>
257 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</emphasis>
258 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;endif&#32;</emphasis><emphasis role="comment">//&#32;MSVC_TRADITIONAL</emphasis>
259 
260 <emphasis role="comment">//&#32;Only&#32;do&#32;this&#32;if&#32;we&apos;re&#32;not&#32;using&#32;clang&#32;on&#32;Windows,&#32;which&#32;uses&#32;`diagnostic&#32;push`&#32;&amp;&#32;`diagnostic&#32;pop`</emphasis>
261 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;__pragma(&#32;warning(push)&#32;)</emphasis>
262 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION&#32;&#32;__pragma(&#32;warning(pop)&#32;)</emphasis>
263 <emphasis role="preprocessor">#&#32;&#32;endif&#32;</emphasis><emphasis role="comment">//&#32;__clang__</emphasis>
264 
265 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_MSC_VER</emphasis>
266 
267 <emphasis role="preprocessor">#if&#32;defined(_REENTRANT)&#32;||&#32;defined(_MSC_VER)</emphasis>
268 <emphasis role="comment">//&#32;Enable&#32;async&#32;processing,&#32;as&#32;-pthread&#32;is&#32;specified&#32;or&#32;no&#32;additional&#32;linking&#32;is&#32;required</emphasis>
269 <emphasis role="preprocessor">#&#32;define&#32;CATCH_INTERNAL_CONFIG_USE_ASYNC</emphasis>
270 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_MSC_VER</emphasis>
271 
273 <emphasis role="comment">//&#32;Check&#32;if&#32;we&#32;are&#32;compiled&#32;with&#32;-fno-exceptions&#32;or&#32;equivalent</emphasis>
274 <emphasis role="preprocessor">#if&#32;defined(__EXCEPTIONS)&#32;||&#32;defined(__cpp_exceptions)&#32;||&#32;defined(_CPPUNWIND)</emphasis>
275 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_INTERNAL_CONFIG_EXCEPTIONS_ENABLED</emphasis>
276 <emphasis role="preprocessor">#endif</emphasis>
277 
279 <emphasis role="comment">//&#32;DJGPP</emphasis>
280 <emphasis role="preprocessor">#ifdef&#32;__DJGPP__</emphasis>
281 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_INTERNAL_CONFIG_NO_WCHAR</emphasis>
282 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__DJGPP__</emphasis>
283 
285 <emphasis role="comment">//&#32;Embarcadero&#32;C++Build</emphasis>
286 <emphasis role="preprocessor">#if&#32;defined(__BORLANDC__)</emphasis>
287 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;CATCH_INTERNAL_CONFIG_POLYFILL_ISNAN</emphasis>
288 <emphasis role="preprocessor">#endif</emphasis>
289 
291 
292 <emphasis role="comment">//&#32;Use&#32;of&#32;__COUNTER__&#32;is&#32;suppressed&#32;during&#32;code&#32;analysis&#32;in</emphasis>
293 <emphasis role="comment">//&#32;CLion/AppCode&#32;2017.2.x&#32;and&#32;former,&#32;because&#32;__COUNTER__&#32;is&#32;not&#32;properly</emphasis>
294 <emphasis role="comment">//&#32;handled&#32;by&#32;it.</emphasis>
295 <emphasis role="comment">//&#32;Otherwise&#32;all&#32;supported&#32;compilers&#32;support&#32;COUNTER&#32;macro,</emphasis>
296 <emphasis role="comment">//&#32;but&#32;user&#32;still&#32;might&#32;want&#32;to&#32;turn&#32;it&#32;off</emphasis>
297 <emphasis role="preprocessor">#if&#32;(&#32;!defined(__JETBRAINS_IDE__)&#32;||&#32;__JETBRAINS_IDE__&#32;&gt;=&#32;20170300L&#32;)</emphasis>
298 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;CATCH_INTERNAL_CONFIG_COUNTER</emphasis>
299 <emphasis role="preprocessor">#endif</emphasis>
300 
302 
303 <emphasis role="comment">//&#32;RTX&#32;is&#32;a&#32;special&#32;version&#32;of&#32;Windows&#32;that&#32;is&#32;real&#32;time.</emphasis>
304 <emphasis role="comment">//&#32;This&#32;means&#32;that&#32;it&#32;is&#32;detected&#32;as&#32;Windows,&#32;but&#32;does&#32;not&#32;provide</emphasis>
305 <emphasis role="comment">//&#32;the&#32;same&#32;set&#32;of&#32;capabilities&#32;as&#32;real&#32;Windows&#32;does.</emphasis>
306 <emphasis role="preprocessor">#if&#32;defined(UNDER_RTSS)&#32;||&#32;defined(RTX64_BUILD)</emphasis>
307 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH</emphasis>
308 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;CATCH_INTERNAL_CONFIG_NO_ASYNC</emphasis>
309 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;CATCH_CONFIG_COLOUR_NONE</emphasis>
310 <emphasis role="preprocessor">#endif</emphasis>
311 
312 <emphasis role="preprocessor">#if&#32;!defined(_GLIBCXX_USE_C99_MATH_TR1)</emphasis>
313 <emphasis role="preprocessor">#define&#32;CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER</emphasis>
314 <emphasis role="preprocessor">#endif</emphasis>
315 
316 <emphasis role="comment">//&#32;Various&#32;stdlib&#32;support&#32;checks&#32;that&#32;require&#32;__has_include</emphasis>
317 <emphasis role="preprocessor">#if&#32;defined(__has_include)</emphasis>
318 &#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;string_view&#32;is&#32;available&#32;and&#32;usable</emphasis>
319 <emphasis role="preprocessor">&#32;&#32;#if&#32;__has_include(&lt;string_view&gt;)&#32;&amp;&amp;&#32;defined(CATCH_CPP17_OR_GREATER)</emphasis>
320 <emphasis role="preprocessor">&#32;&#32;#&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_CONFIG_CPP17_STRING_VIEW</emphasis>
321 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
322 
323 &#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;optional&#32;is&#32;available&#32;and&#32;usable</emphasis>
324 <emphasis role="preprocessor">&#32;&#32;#&#32;&#32;if&#32;__has_include(&lt;optional&gt;)&#32;&amp;&amp;&#32;defined(CATCH_CPP17_OR_GREATER)</emphasis>
325 <emphasis role="preprocessor">&#32;&#32;#&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_CONFIG_CPP17_OPTIONAL</emphasis>
326 <emphasis role="preprocessor">&#32;&#32;#&#32;&#32;endif&#32;</emphasis><emphasis role="comment">//&#32;__has_include(&lt;optional&gt;)&#32;&amp;&amp;&#32;defined(CATCH_CPP17_OR_GREATER)</emphasis>
327 
328 &#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;byte&#32;is&#32;available&#32;and&#32;usable</emphasis>
329 <emphasis role="preprocessor">&#32;&#32;#&#32;&#32;if&#32;__has_include(&lt;cstddef&gt;)&#32;&amp;&amp;&#32;defined(CATCH_CPP17_OR_GREATER)</emphasis>
330 <emphasis role="preprocessor">&#32;&#32;#&#32;&#32;&#32;&#32;include&#32;&lt;cstddef&gt;</emphasis>
331 <emphasis role="preprocessor">&#32;&#32;#&#32;&#32;&#32;&#32;if&#32;defined(__cpp_lib_byte)&#32;&amp;&amp;&#32;(__cpp_lib_byte&#32;&gt;&#32;0)</emphasis>
332 <emphasis role="preprocessor">&#32;&#32;#&#32;&#32;&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_CONFIG_CPP17_BYTE</emphasis>
333 <emphasis role="preprocessor">&#32;&#32;#&#32;&#32;&#32;&#32;endif</emphasis>
334 <emphasis role="preprocessor">&#32;&#32;#&#32;&#32;endif&#32;</emphasis><emphasis role="comment">//&#32;__has_include(&lt;cstddef&gt;)&#32;&amp;&amp;&#32;defined(CATCH_CPP17_OR_GREATER)</emphasis>
335 
336 &#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;variant&#32;is&#32;available&#32;and&#32;usable</emphasis>
337 <emphasis role="preprocessor">&#32;&#32;#&#32;&#32;if&#32;__has_include(&lt;variant&gt;)&#32;&amp;&amp;&#32;defined(CATCH_CPP17_OR_GREATER)</emphasis>
338 <emphasis role="preprocessor">&#32;&#32;#&#32;&#32;&#32;&#32;if&#32;defined(__clang__)&#32;&amp;&amp;&#32;(__clang_major__&#32;&lt;&#32;8)</emphasis>
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;work&#32;around&#32;clang&#32;bug&#32;with&#32;libstdc++&#32;https://bugs.llvm.org/show_bug.cgi?id=31852</emphasis>
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fix&#32;should&#32;be&#32;in&#32;clang&#32;8,&#32;workaround&#32;in&#32;libstdc++&#32;8.2</emphasis>
341 <emphasis role="preprocessor">&#32;&#32;#&#32;&#32;&#32;&#32;&#32;&#32;include&#32;&lt;ciso646&gt;</emphasis>
342 <emphasis role="preprocessor">&#32;&#32;#&#32;&#32;&#32;&#32;&#32;&#32;if&#32;defined(__GLIBCXX__)&#32;&amp;&amp;&#32;defined(_GLIBCXX_RELEASE)&#32;&amp;&amp;&#32;(_GLIBCXX_RELEASE&#32;&lt;&#32;9)</emphasis>
343 <emphasis role="preprocessor">&#32;&#32;#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;CATCH_CONFIG_NO_CPP17_VARIANT</emphasis>
344 <emphasis role="preprocessor">&#32;&#32;#&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
345 <emphasis role="preprocessor">&#32;&#32;#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_CONFIG_CPP17_VARIANT</emphasis>
346 <emphasis role="preprocessor">&#32;&#32;#&#32;&#32;&#32;&#32;&#32;&#32;endif&#32;</emphasis><emphasis role="comment">//&#32;defined(__GLIBCXX__)&#32;&amp;&amp;&#32;defined(_GLIBCXX_RELEASE)&#32;&amp;&amp;&#32;(_GLIBCXX_RELEASE&#32;&lt;&#32;9)</emphasis>
347 <emphasis role="preprocessor">&#32;&#32;#&#32;&#32;&#32;&#32;else</emphasis>
348 <emphasis role="preprocessor">&#32;&#32;#&#32;&#32;&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_CONFIG_CPP17_VARIANT</emphasis>
349 <emphasis role="preprocessor">&#32;&#32;#&#32;&#32;&#32;&#32;endif&#32;</emphasis><emphasis role="comment">//&#32;defined(__clang__)&#32;&amp;&amp;&#32;(__clang_major__&#32;&lt;&#32;8)</emphasis>
350 <emphasis role="preprocessor">&#32;&#32;#&#32;&#32;endif&#32;</emphasis><emphasis role="comment">//&#32;__has_include(&lt;variant&gt;)&#32;&amp;&amp;&#32;defined(CATCH_CPP17_OR_GREATER)</emphasis>
351 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;defined(__has_include)</emphasis>
352 
353 <emphasis role="preprocessor">#if&#32;defined(CATCH_INTERNAL_CONFIG_COUNTER)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_NO_COUNTER)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_COUNTER)</emphasis>
354 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;CATCH_CONFIG_COUNTER</emphasis>
355 <emphasis role="preprocessor">#endif</emphasis>
356 <emphasis role="preprocessor">#if&#32;defined(CATCH_INTERNAL_CONFIG_WINDOWS_SEH)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_NO_WINDOWS_SEH)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_WINDOWS_SEH)&#32;&amp;&amp;&#32;!defined(CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH)</emphasis>
357 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;CATCH_CONFIG_WINDOWS_SEH</emphasis>
358 <emphasis role="preprocessor">#endif</emphasis>
359 <emphasis role="comment">//&#32;This&#32;is&#32;set&#32;by&#32;default,&#32;because&#32;we&#32;assume&#32;that&#32;unix&#32;compilers&#32;are&#32;posix-signal-compatible&#32;by&#32;default.</emphasis>
360 <emphasis role="preprocessor">#if&#32;defined(CATCH_INTERNAL_CONFIG_POSIX_SIGNALS)&#32;&amp;&amp;&#32;!defined(CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_NO_POSIX_SIGNALS)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_POSIX_SIGNALS)</emphasis>
361 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;CATCH_CONFIG_POSIX_SIGNALS</emphasis>
362 <emphasis role="preprocessor">#endif</emphasis>
363 <emphasis role="comment">//&#32;This&#32;is&#32;set&#32;by&#32;default,&#32;because&#32;we&#32;assume&#32;that&#32;compilers&#32;with&#32;no&#32;wchar_t&#32;support&#32;are&#32;just&#32;rare&#32;exceptions.</emphasis>
364 <emphasis role="preprocessor">#if&#32;!defined(CATCH_INTERNAL_CONFIG_NO_WCHAR)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_NO_WCHAR)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_WCHAR)</emphasis>
365 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;CATCH_CONFIG_WCHAR</emphasis>
366 <emphasis role="preprocessor">#endif</emphasis>
367 
368 <emphasis role="preprocessor">#if&#32;!defined(CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_NO_CPP11_TO_STRING)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_CPP11_TO_STRING)</emphasis>
369 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_CONFIG_CPP11_TO_STRING</emphasis>
370 <emphasis role="preprocessor">#endif</emphasis>
371 
372 <emphasis role="preprocessor">#if&#32;defined(CATCH_INTERNAL_CONFIG_CPP17_OPTIONAL)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_NO_CPP17_OPTIONAL)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_CPP17_OPTIONAL)</emphasis>
373 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_CONFIG_CPP17_OPTIONAL</emphasis>
374 <emphasis role="preprocessor">#endif</emphasis>
375 
376 <emphasis role="preprocessor">#if&#32;defined(CATCH_INTERNAL_CONFIG_CPP17_STRING_VIEW)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_NO_CPP17_STRING_VIEW)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_CPP17_STRING_VIEW)</emphasis>
377 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_CONFIG_CPP17_STRING_VIEW</emphasis>
378 <emphasis role="preprocessor">#endif</emphasis>
379 
380 <emphasis role="preprocessor">#if&#32;defined(CATCH_INTERNAL_CONFIG_CPP17_VARIANT)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_NO_CPP17_VARIANT)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_CPP17_VARIANT)</emphasis>
381 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_CONFIG_CPP17_VARIANT</emphasis>
382 <emphasis role="preprocessor">#endif</emphasis>
383 
384 <emphasis role="preprocessor">#if&#32;defined(CATCH_INTERNAL_CONFIG_CPP17_BYTE)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_NO_CPP17_BYTE)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_CPP17_BYTE)</emphasis>
385 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_CONFIG_CPP17_BYTE</emphasis>
386 <emphasis role="preprocessor">#endif</emphasis>
387 
388 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_EXPERIMENTAL_REDIRECT)</emphasis>
389 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_INTERNAL_CONFIG_NEW_CAPTURE</emphasis>
390 <emphasis role="preprocessor">#endif</emphasis>
391 
392 <emphasis role="preprocessor">#if&#32;defined(CATCH_INTERNAL_CONFIG_NEW_CAPTURE)&#32;&amp;&amp;&#32;!defined(CATCH_INTERNAL_CONFIG_NO_NEW_CAPTURE)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_NO_NEW_CAPTURE)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_NEW_CAPTURE)</emphasis>
393 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_CONFIG_NEW_CAPTURE</emphasis>
394 <emphasis role="preprocessor">#endif</emphasis>
395 
396 <emphasis role="preprocessor">#if&#32;!defined(CATCH_INTERNAL_CONFIG_EXCEPTIONS_ENABLED)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</emphasis>
397 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_CONFIG_DISABLE_EXCEPTIONS</emphasis>
398 <emphasis role="preprocessor">#endif</emphasis>
399 
400 <emphasis role="preprocessor">#if&#32;defined(CATCH_INTERNAL_CONFIG_POLYFILL_ISNAN)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_NO_POLYFILL_ISNAN)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_POLYFILL_ISNAN)</emphasis>
401 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_CONFIG_POLYFILL_ISNAN</emphasis>
402 <emphasis role="preprocessor">#endif</emphasis>
403 
404 <emphasis role="preprocessor">#if&#32;defined(CATCH_INTERNAL_CONFIG_USE_ASYNC)&#32;&#32;&amp;&amp;&#32;!defined(CATCH_INTERNAL_CONFIG_NO_ASYNC)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_NO_USE_ASYNC)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_USE_ASYNC)</emphasis>
405 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_CONFIG_USE_ASYNC</emphasis>
406 <emphasis role="preprocessor">#endif</emphasis>
407 
408 <emphasis role="preprocessor">#if&#32;defined(CATCH_INTERNAL_CONFIG_ANDROID_LOGWRITE)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_NO_ANDROID_LOGWRITE)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_ANDROID_LOGWRITE)</emphasis>
409 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_CONFIG_ANDROID_LOGWRITE</emphasis>
410 <emphasis role="preprocessor">#endif</emphasis>
411 
412 <emphasis role="preprocessor">#if&#32;defined(CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_NO_GLOBAL_NEXTAFTER)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_GLOBAL_NEXTAFTER)</emphasis>
413 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_CONFIG_GLOBAL_NEXTAFTER</emphasis>
414 <emphasis role="preprocessor">#endif</emphasis>
415 
416 <emphasis role="comment">//&#32;Even&#32;if&#32;we&#32;do&#32;not&#32;think&#32;the&#32;compiler&#32;has&#32;that&#32;warning,&#32;we&#32;still&#32;have</emphasis>
417 <emphasis role="comment">//&#32;to&#32;provide&#32;a&#32;macro&#32;that&#32;can&#32;be&#32;used&#32;by&#32;the&#32;code.</emphasis>
418 <emphasis role="preprocessor">#if&#32;!defined(CATCH_INTERNAL_START_WARNINGS_SUPPRESSION)</emphasis>
419 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION</emphasis>
420 <emphasis role="preprocessor">#endif</emphasis>
421 <emphasis role="preprocessor">#if&#32;!defined(CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION)</emphasis>
422 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</emphasis>
423 <emphasis role="preprocessor">#endif</emphasis>
424 <emphasis role="preprocessor">#if&#32;!defined(CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS)</emphasis>
425 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS</emphasis>
426 <emphasis role="preprocessor">#endif</emphasis>
427 <emphasis role="preprocessor">#if&#32;!defined(CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS)</emphasis>
428 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS</emphasis>
429 <emphasis role="preprocessor">#endif</emphasis>
430 <emphasis role="preprocessor">#if&#32;!defined(CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS)</emphasis>
431 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS</emphasis>
432 <emphasis role="preprocessor">#endif</emphasis>
433 <emphasis role="preprocessor">#if&#32;!defined(CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS)</emphasis>
434 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS</emphasis>
435 <emphasis role="preprocessor">#endif</emphasis>
436 
437 <emphasis role="comment">//&#32;The&#32;goal&#32;of&#32;this&#32;macro&#32;is&#32;to&#32;avoid&#32;evaluation&#32;of&#32;the&#32;arguments,&#32;but</emphasis>
438 <emphasis role="comment">//&#32;still&#32;have&#32;the&#32;compiler&#32;warn&#32;on&#32;problems&#32;inside...</emphasis>
439 <emphasis role="preprocessor">#if&#32;!defined(CATCH_INTERNAL_IGNORE_BUT_WARN)</emphasis>
440 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;CATCH_INTERNAL_IGNORE_BUT_WARN(...)</emphasis>
441 <emphasis role="preprocessor">#endif</emphasis>
442 
443 <emphasis role="preprocessor">#if&#32;defined(__APPLE__)&#32;&amp;&amp;&#32;defined(__apple_build_version__)&#32;&amp;&amp;&#32;(__clang_major__&#32;&lt;&#32;10)</emphasis>
444 <emphasis role="preprocessor">#&#32;&#32;&#32;undef&#32;CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS</emphasis>
445 <emphasis role="preprocessor">#elif&#32;defined(__clang__)&#32;&amp;&amp;&#32;(__clang_major__&#32;&lt;&#32;5)</emphasis>
446 <emphasis role="preprocessor">#&#32;&#32;&#32;undef&#32;CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS</emphasis>
447 <emphasis role="preprocessor">#endif</emphasis>
448 
449 <emphasis role="preprocessor">#if&#32;!defined(CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS)</emphasis>
450 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS</emphasis>
451 <emphasis role="preprocessor">#endif</emphasis>
452 
453 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</emphasis>
454 <emphasis role="preprocessor">#define&#32;CATCH_TRY&#32;if&#32;((true))</emphasis>
455 <emphasis role="preprocessor">#define&#32;CATCH_CATCH_ALL&#32;if&#32;((false))</emphasis>
456 <emphasis role="preprocessor">#define&#32;CATCH_CATCH_ANON(type)&#32;if&#32;((false))</emphasis>
457 <emphasis role="preprocessor">#else</emphasis>
458 <emphasis role="preprocessor">#define&#32;CATCH_TRY&#32;try</emphasis>
459 <emphasis role="preprocessor">#define&#32;CATCH_CATCH_ALL&#32;catch&#32;(...)</emphasis>
460 <emphasis role="preprocessor">#define&#32;CATCH_CATCH_ANON(type)&#32;catch&#32;(type)</emphasis>
461 <emphasis role="preprocessor">#endif</emphasis>
462 
463 <emphasis role="preprocessor">#if&#32;defined(CATCH_INTERNAL_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_NO_TRADITIONAL_MSVC_PREPROCESSOR)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR)</emphasis>
464 <emphasis role="preprocessor">#define&#32;CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</emphasis>
465 <emphasis role="preprocessor">#endif</emphasis>
466 
467 <emphasis role="comment">//&#32;end&#32;catch_compiler_capabilities.h</emphasis>
468 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_UNIQUE_NAME_LINE2(&#32;name,&#32;line&#32;)&#32;name##line</emphasis>
469 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_UNIQUE_NAME_LINE(&#32;name,&#32;line&#32;)&#32;INTERNAL_CATCH_UNIQUE_NAME_LINE2(&#32;name,&#32;line&#32;)</emphasis>
470 <emphasis role="preprocessor">#ifdef&#32;CATCH_CONFIG_COUNTER</emphasis>
471 <emphasis role="preprocessor">#&#32;&#32;define&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;name&#32;)&#32;INTERNAL_CATCH_UNIQUE_NAME_LINE(&#32;name,&#32;__COUNTER__&#32;)</emphasis>
472 <emphasis role="preprocessor">#else</emphasis>
473 <emphasis role="preprocessor">#&#32;&#32;define&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;name&#32;)&#32;INTERNAL_CATCH_UNIQUE_NAME_LINE(&#32;name,&#32;__LINE__&#32;)</emphasis>
474 <emphasis role="preprocessor">#endif</emphasis>
475 
476 <emphasis role="preprocessor">#include&#32;&lt;iosfwd&gt;</emphasis>
477 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
478 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>
479 
480 <emphasis role="comment">//&#32;We&#32;need&#32;a&#32;dummy&#32;global&#32;operator&lt;&lt;&#32;so&#32;we&#32;can&#32;bring&#32;it&#32;into&#32;Catch&#32;namespace&#32;later</emphasis>
481 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch__global__namespace__dummy">Catch_global_namespace_dummy</link>&#32;{};
482 std::ostream&amp;&#32;<link linkend="_catch_8h_1aae0cdd5d2f0ac242b9ab18b0f66ba26e">operator&lt;&lt;</link>(std::ostream&amp;,&#32;<link linkend="_struct_catch__global__namespace__dummy">Catch_global_namespace_dummy</link>);
483 
484 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
485 
486 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_case_sensitive">CaseSensitive</link>&#32;{&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6a">Choice</link>&#32;{
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6aa7c5550b69ec3c502e6f609b67f9613c6">Yes</link>,
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6aa4ffff8d29b481f0116abc37228cd53f6">No</link>
489 &#32;&#32;&#32;&#32;};&#32;};
490 
491 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_non_copyable">NonCopyable</link>&#32;{
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_non_copyable_1a74cf3e4aa051c284941e39b436b2f693">NonCopyable</link>(&#32;<link linkend="_class_catch_1_1_non_copyable">NonCopyable</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_non_copyable_1a09d1d8775db8c495fa40c285b034faa3">NonCopyable</link>(&#32;<link linkend="_class_catch_1_1_non_copyable">NonCopyable</link>&#32;&amp;&amp;&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_non_copyable">NonCopyable</link>&amp;&#32;<link linkend="_class_catch_1_1_non_copyable_1ac8be822f5ed1abc8e31e17d09200c493">operator = </link>(&#32;<link linkend="_class_catch_1_1_non_copyable">NonCopyable</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_non_copyable">NonCopyable</link>&amp;&#32;<link linkend="_class_catch_1_1_non_copyable_1ac8be822f5ed1abc8e31e17d09200c493">operator = </link>(&#32;<link linkend="_class_catch_1_1_non_copyable">NonCopyable</link>&#32;&amp;&amp;&#32;)&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
496 
497 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_non_copyable_1a4b492dd5753f9952350fb64dc6cb9fe2">NonCopyable</link>();
499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_class_catch_1_1_non_copyable_1a81254677280fef337eb4a676e91e3293">~NonCopyable</link>();
500 &#32;&#32;&#32;&#32;};
501 
502 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;{
503 
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_source_line_info_1a2d80932bb4129b1606d1924a5c44be2f">SourceLineInfo</link>()&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_source_line_info_1a48510b82a39a042ab370ed143dd30c10">SourceLineInfo</link>(&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*&#32;_file,&#32;std::size_t&#32;_line&#32;)&#32;noexcept
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;<link linkend="_struct_catch_1_1_source_line_info_1ad65537703e9f08c1fa7777fbc3f0c617">file</link>(&#32;_file&#32;),
507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_source_line_info_1a841e5d696c7b9cde24e45e61dd979c77">line</link>(&#32;_line&#32;)
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
509 
510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_source_line_info_1a7c44c9986c33a9cf842b791374332d41">SourceLineInfo</link>(&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&amp;&#32;<link linkend="_struct_catch_1_1_source_line_info_1ab9891ccc4e7fa7c1ab747cd013341482">operator = </link>(&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_source_line_info_1a5ea6179645457b8ec961aec9ca4c5588">SourceLineInfo</link>(&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&amp;&amp;&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;noexcept&#32;=&#32;default;
513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&amp;&#32;operator&#32;=&#32;(&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&amp;&amp;&#32;)&#32;noexcept&#32;=&#32;default;
514 
515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_source_line_info_1a10a5b5b7dff82971879c2eb8d83f9b3b">empty</link>()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_source_line_info_1ad65537703e9f08c1fa7777fbc3f0c617">file</link>[0]&#32;==&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;&#32;}
516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_source_line_info_1af07e4fdeddf8409b91e4f842f6264cf8">operator == </link>(&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>;
517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_source_line_info_1af77415416919d2d6030b4be085b92f7a">operator &lt; </link>(&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>;
518 
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*&#32;<link linkend="_struct_catch_1_1_source_line_info_1ad65537703e9f08c1fa7777fbc3f0c617">file</link>;
520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;<link linkend="_struct_catch_1_1_source_line_info_1a841e5d696c7b9cde24e45e61dd979c77">line</link>;
521 &#32;&#32;&#32;&#32;};
522 
523 &#32;&#32;&#32;&#32;std::ostream&amp;&#32;<link linkend="_namespace_catch_1a8c8ea1f66bc1cdc3e1254ed7fa57c06d">operator &lt;&lt; </link>(&#32;std::ostream&amp;&#32;os,&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;info&#32;);
524 
525 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Bring&#32;in&#32;operator&lt;&lt;&#32;from&#32;global&#32;namespace&#32;into&#32;Catch&#32;namespace</emphasis>
526 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;necessary&#32;because&#32;the&#32;overload&#32;of&#32;operator&lt;&lt;&#32;above&#32;makes</emphasis>
527 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;lookup&#32;stop&#32;at&#32;namespace&#32;Catch</emphasis>
528 &#32;&#32;&#32;&#32;using&#32;::operator&lt;&lt;;
529 
530 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;this&#32;in&#32;variadic&#32;streaming&#32;macros&#32;to&#32;allow</emphasis>
531 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&gt;&gt;&#32;+StreamEndStop</emphasis>
532 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;as&#32;well&#32;as</emphasis>
533 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&gt;&gt;&#32;stuff&#32;+StreamEndStop</emphasis>
534 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_stream_end_stop">StreamEndStop</link>&#32;{
535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_stream_end_stop_1a4a518f0342a381074821d5bda2651401">operator+</link>()&#32;<emphasis role="keyword">const</emphasis>;
536 &#32;&#32;&#32;&#32;};
537 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
538 &#32;&#32;&#32;&#32;T&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator + </link>(&#32;T&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;value,&#32;<link linkend="_struct_catch_1_1_stream_end_stop">StreamEndStop</link>&#32;)&#32;{
539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;value;
540 &#32;&#32;&#32;&#32;}
541 }
542 
543 <emphasis role="preprocessor">#define&#32;CATCH_INTERNAL_LINEINFO&#32;\</emphasis>
544 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;::Catch::SourceLineInfo(&#32;__FILE__,&#32;static_cast&lt;std::size_t&gt;(&#32;__LINE__&#32;)&#32;)</emphasis>
545 
546 <emphasis role="comment">//&#32;end&#32;catch_common.h</emphasis>
547 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
548 
549 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_registrar_for_tag_aliases">RegistrarForTagAliases</link>&#32;{
550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_registrar_for_tag_aliases_1ae4e45830e4763bcd65d55d8db9167b69">RegistrarForTagAliases</link>(&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*&#32;alias,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*&#32;tag,&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lineInfo&#32;);
551 &#32;&#32;&#32;&#32;};
552 
553 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
554 
555 <emphasis role="preprocessor">#define&#32;CATCH_REGISTER_TAG_ALIAS(&#32;alias,&#32;spec&#32;)&#32;\</emphasis>
556 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\</emphasis>
557 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;\</emphasis>
558 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;namespace{&#32;Catch::RegistrarForTagAliases&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;AutoRegisterTagAlias&#32;)(&#32;alias,&#32;spec,&#32;CATCH_INTERNAL_LINEINFO&#32;);&#32;}&#32;\</emphasis>
559 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</emphasis>
560 
561 <emphasis role="comment">//&#32;end&#32;catch_tag_alias_autoregistrar.h</emphasis>
562 <emphasis role="comment">//&#32;start&#32;catch_test_registry.h</emphasis>
563 
564 <emphasis role="comment">//&#32;start&#32;catch_interfaces_testcase.h</emphasis>
565 
566 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
567 
568 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
569 
570 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>TestSpec;
571 
572 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_i_test_invoker">ITestInvoker</link>&#32;{
573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_test_invoker_1a6fcd5c5b67d6d5ade6491ff33411ca7f">invoke</link>&#32;()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_i_test_invoker_1a2c89f3eece5b1b677243766e409bd831">~ITestInvoker</link>();
575 &#32;&#32;&#32;&#32;};
576 
577 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_test_case">TestCase</link>;
578 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_i_config">IConfig</link>;
579 
580 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_i_test_case_registry">ITestCaseRegistry</link>&#32;{
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_i_test_case_registry_1ae14798f05ac8e2b18cff532849a4da81">~ITestCaseRegistry</link>();
582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;std::vector&lt;TestCase&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1_i_test_case_registry_1a5dad8c412aacc94a112b0fa07c7776fc">getAllTests</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;std::vector&lt;TestCase&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1_i_test_case_registry_1a0aae66ca6ec1b6265a799134d6935127">getAllTestsSorted</link>(&#32;<link linkend="_struct_catch_1_1_i_config">IConfig</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
584 &#32;&#32;&#32;&#32;};
585 
586 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1af3e820574c7a0b38d71328c5bd54b0e0">isThrowSafe</link>(&#32;<link linkend="_class_catch_1_1_test_case">TestCase</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase,&#32;<link linkend="_struct_catch_1_1_i_config">IConfig</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;);
587 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1aadef80fbc6bc84589777a462770cef49">matchTest</link>(&#32;<link linkend="_class_catch_1_1_test_case">TestCase</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase,&#32;TestSpec&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testSpec,&#32;<link linkend="_struct_catch_1_1_i_config">IConfig</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;);
588 &#32;&#32;&#32;&#32;std::vector&lt;TestCase&gt;&#32;<link linkend="_namespace_catch_1a105d5acdec8a6b401e12a592557c9dd1">filterTests</link>(&#32;std::vector&lt;TestCase&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCases,&#32;TestSpec&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testSpec,&#32;<link linkend="_struct_catch_1_1_i_config">IConfig</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;);
589 &#32;&#32;&#32;&#32;std::vector&lt;TestCase&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_namespace_catch_1a97039bab95e97f059410f67425f1f2da">getAllTestCasesSorted</link>(&#32;<link linkend="_struct_catch_1_1_i_config">IConfig</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;);
590 
591 }
592 
593 <emphasis role="comment">//&#32;end&#32;catch_interfaces_testcase.h</emphasis>
594 <emphasis role="comment">//&#32;start&#32;catch_stringref.h</emphasis>
595 
596 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>
597 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
598 <emphasis role="preprocessor">#include&#32;&lt;iosfwd&gt;</emphasis>
599 <emphasis role="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>
600 
601 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
602 
606 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;{
607 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_class_catch_1_1_string_ref_1a06b4db8fc82b197004291cf370b2ba7c">size_type</link>&#32;=&#32;std::size_t;
609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_class_catch_1_1_string_ref_1ac3aa3d16f48b5429a480f823c504f93c">const_iterator</link>&#32;=&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*;
610 
611 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref_1a38d077e89f7f2ce666507ab28dd28653">s_empty</link>&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
613 
614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*&#32;<link linkend="_class_catch_1_1_string_ref_1a0583d4e5ea88c99c121504052a4fcb6c">m_start</link>&#32;=&#32;<link linkend="_class_catch_1_1_string_ref_1a38d077e89f7f2ce666507ab28dd28653">s_empty</link>;
615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_string_ref_1a06b4db8fc82b197004291cf370b2ba7c">size_type</link>&#32;<link linkend="_class_catch_1_1_string_ref_1a91ee253f5b7e43303352186139845753">m_size</link>&#32;=&#32;0;
616 
617 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:&#32;<emphasis role="comment">//&#32;construction</emphasis>
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref_1a611907867225695d38198c058758c92d">StringRef</link>()&#32;noexcept&#32;=&#32;default;
619 
620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>(&#32;<emphasis role="keywordtype">char</emphasis>&#32;const*&#32;rawChars&#32;)&#32;noexcept;
621 
622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constexpr&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>(&#32;<emphasis role="keywordtype">char</emphasis>&#32;const*&#32;rawChars,&#32;<link linkend="_class_catch_1_1_string_ref_1a06b4db8fc82b197004291cf370b2ba7c">size_type</link>&#32;<link linkend="_class_catch_1_1_string_ref_1acb22719801de2b64361b4c283080d4e5">size</link>&#32;)&#32;noexcept
623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;<link linkend="_class_catch_1_1_string_ref_1a0583d4e5ea88c99c121504052a4fcb6c">m_start</link>(&#32;rawChars&#32;),
624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_string_ref_1a91ee253f5b7e43303352186139845753">m_size</link>(&#32;<link linkend="_class_catch_1_1_string_ref_1acb22719801de2b64361b4c283080d4e5">size</link>&#32;)
625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
626 
627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_string_ref_1a7fe41469048f906e9a847798cd335f23">StringRef</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;stdString&#32;)&#32;noexcept
628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;<link linkend="_class_catch_1_1_string_ref_1a0583d4e5ea88c99c121504052a4fcb6c">m_start</link>(&#32;stdString.c_str()&#32;),
629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_string_ref_1a91ee253f5b7e43303352186139845753">m_size</link>(&#32;stdString.size()&#32;)
630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
631 
632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;std::string()<emphasis role="keyword">&#32;const&#32;</emphasis>{
633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string(<link linkend="_class_catch_1_1_string_ref_1a0583d4e5ea88c99c121504052a4fcb6c">m_start</link>,&#32;<link linkend="_class_catch_1_1_string_ref_1a91ee253f5b7e43303352186139845753">m_size</link>);
634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
635 
636 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:&#32;<emphasis role="comment">//&#32;operators</emphasis>
637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref_1aabb30149ab961187e4b3ff3394bf6e73">operator == </link>(&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;-&gt;&#32;bool;
638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref_1aaa6c8bf61c4628034c19763d1c8ad215">operator != </link>(<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{
639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(*<emphasis role="keyword">this</emphasis>&#32;==&#32;other);
640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
641 
642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref_1a4ba2e01eec1f0f56c257d213c796ab3b">operator[] </link>(&#32;<link linkend="_class_catch_1_1_string_ref_1a06b4db8fc82b197004291cf370b2ba7c">size_type</link>&#32;index&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;-&gt;&#32;<emphasis role="keywordtype">char</emphasis>&#32;{
643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(index&#32;&lt;&#32;<link linkend="_class_catch_1_1_string_ref_1a91ee253f5b7e43303352186139845753">m_size</link>);
644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref_1a0583d4e5ea88c99c121504052a4fcb6c">m_start</link>[index];
645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
646 
647 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:&#32;<emphasis role="comment">//&#32;named&#32;queries</emphasis>
648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref_1a0b4841c28cbb14ba07296964a0187023">empty</link>()&#32;const&#32;noexcept&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{
649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref_1a91ee253f5b7e43303352186139845753">m_size</link>&#32;==&#32;0;
650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref_1acb22719801de2b64361b4c283080d4e5">size</link>()&#32;const&#32;noexcept&#32;-&gt;&#32;<link linkend="_class_catch_1_1_string_ref_1a06b4db8fc82b197004291cf370b2ba7c">size_type</link>&#32;{
652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref_1a91ee253f5b7e43303352186139845753">m_size</link>;
653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
654 
655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;the&#32;current&#32;start&#32;pointer.&#32;If&#32;the&#32;StringRef&#32;is&#32;not</emphasis>
656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;null-terminated,&#32;throws&#32;std::domain_exception</emphasis>
657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref_1a1669cb2765e820ca258159676cbd82a5">c_str</link>()&#32;const&#32;-&gt;&#32;<emphasis role="keywordtype">char</emphasis>&#32;const*;
658 
659 &#32;&#32;&#32;&#32;public:&#32;<emphasis role="comment">//&#32;substrings&#32;and&#32;searches</emphasis>
660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;a&#32;substring&#32;of&#32;[start,&#32;start&#32;+&#32;length).</emphasis>
661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;start&#32;+&#32;length&#32;&gt;&#32;size(),&#32;then&#32;the&#32;substring&#32;is&#32;[start,&#32;size()).</emphasis>
662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;start&#32;&gt;&#32;size(),&#32;then&#32;the&#32;substring&#32;is&#32;empty.</emphasis>
663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;auto&#32;<link linkend="_class_catch_1_1_string_ref_1a594bc3e10ffad77df92f7d1a4c99d7ff">substr</link>(&#32;<link linkend="_class_catch_1_1_string_ref_1a06b4db8fc82b197004291cf370b2ba7c">size_type</link>&#32;start,&#32;<link linkend="_class_catch_1_1_string_ref_1a06b4db8fc82b197004291cf370b2ba7c">size_type</link>&#32;length&#32;)&#32;const&#32;noexcept&#32;-&gt;&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>;
664 
665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;the&#32;current&#32;start&#32;pointer.&#32;May&#32;not&#32;be&#32;null-terminated.</emphasis>
666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;auto&#32;<link linkend="_class_catch_1_1_string_ref_1ab0f85edde9f97153fc758fac3bb14507">data</link>()&#32;const&#32;noexcept&#32;-&gt;&#32;<emphasis role="keywordtype">char</emphasis>&#32;const*;
667 
668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constexpr&#32;auto&#32;<link linkend="_class_catch_1_1_string_ref_1a646e58f5f4e1f5e82cfba06d9fd5d016">isNullTerminated</link>()&#32;const&#32;noexcept&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{
669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref_1a0583d4e5ea88c99c121504052a4fcb6c">m_start</link>[<link linkend="_class_catch_1_1_string_ref_1a91ee253f5b7e43303352186139845753">m_size</link>]&#32;==&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
671 
672 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:&#32;<emphasis role="comment">//&#32;iterators</emphasis>
673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref_1ac3aa3d16f48b5429a480f823c504f93c">const_iterator</link>&#32;<link linkend="_class_catch_1_1_string_ref_1ab0adc7198d60867c2842b998ae456795">begin</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref_1a0583d4e5ea88c99c121504052a4fcb6c">m_start</link>;&#32;}
674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref_1ac3aa3d16f48b5429a480f823c504f93c">const_iterator</link>&#32;<link linkend="_class_catch_1_1_string_ref_1a3ce9afc711b559d6cc59666898fc0828">end</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref_1a0583d4e5ea88c99c121504052a4fcb6c">m_start</link>&#32;+&#32;<link linkend="_class_catch_1_1_string_ref_1a91ee253f5b7e43303352186139845753">m_size</link>;&#32;}
675 &#32;&#32;&#32;&#32;};
676 
677 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator += </link>(&#32;std::string&amp;&#32;lhs,&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;sr&#32;)&#32;-&gt;&#32;std::string&amp;;
678 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1a8c8ea1f66bc1cdc3e1254ed7fa57c06d">operator &lt;&lt; </link>(&#32;std::ostream&amp;&#32;os,&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;sr&#32;)&#32;-&gt;&#32;std::ostream&amp;;
679 
680 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;_sr(&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*&#32;rawChars,&#32;std::size_t&#32;size&#32;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;-&gt;&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;{
681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>(&#32;rawChars,&#32;size&#32;);
682 &#32;&#32;&#32;&#32;}
683 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
684 
685 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;_catch_sr(&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*&#32;rawChars,&#32;std::size_t&#32;size&#32;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;-&gt;&#32;<link linkend="_class_catch_1_1_string_ref">Catch::StringRef</link>&#32;{
686 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref">Catch::StringRef</link>(&#32;rawChars,&#32;size&#32;);
687 }
688 
689 <emphasis role="comment">//&#32;end&#32;catch_stringref.h</emphasis>
690 <emphasis role="comment">//&#32;start&#32;catch_preprocessor.hpp</emphasis>
691 
692 
693 <emphasis role="preprocessor">#define&#32;CATCH_RECURSION_LEVEL0(...)&#32;__VA_ARGS__</emphasis>
694 <emphasis role="preprocessor">#define&#32;CATCH_RECURSION_LEVEL1(...)&#32;CATCH_RECURSION_LEVEL0(CATCH_RECURSION_LEVEL0(CATCH_RECURSION_LEVEL0(__VA_ARGS__)))</emphasis>
695 <emphasis role="preprocessor">#define&#32;CATCH_RECURSION_LEVEL2(...)&#32;CATCH_RECURSION_LEVEL1(CATCH_RECURSION_LEVEL1(CATCH_RECURSION_LEVEL1(__VA_ARGS__)))</emphasis>
696 <emphasis role="preprocessor">#define&#32;CATCH_RECURSION_LEVEL3(...)&#32;CATCH_RECURSION_LEVEL2(CATCH_RECURSION_LEVEL2(CATCH_RECURSION_LEVEL2(__VA_ARGS__)))</emphasis>
697 <emphasis role="preprocessor">#define&#32;CATCH_RECURSION_LEVEL4(...)&#32;CATCH_RECURSION_LEVEL3(CATCH_RECURSION_LEVEL3(CATCH_RECURSION_LEVEL3(__VA_ARGS__)))</emphasis>
698 <emphasis role="preprocessor">#define&#32;CATCH_RECURSION_LEVEL5(...)&#32;CATCH_RECURSION_LEVEL4(CATCH_RECURSION_LEVEL4(CATCH_RECURSION_LEVEL4(__VA_ARGS__)))</emphasis>
699 
700 <emphasis role="preprocessor">#ifdef&#32;CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</emphasis>
701 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_EXPAND_VARGS(...)&#32;__VA_ARGS__</emphasis>
702 <emphasis role="comment">//&#32;MSVC&#32;needs&#32;more&#32;evaluations</emphasis>
703 <emphasis role="preprocessor">#define&#32;CATCH_RECURSION_LEVEL6(...)&#32;CATCH_RECURSION_LEVEL5(CATCH_RECURSION_LEVEL5(CATCH_RECURSION_LEVEL5(__VA_ARGS__)))</emphasis>
704 <emphasis role="preprocessor">#define&#32;CATCH_RECURSE(...)&#32;&#32;CATCH_RECURSION_LEVEL6(CATCH_RECURSION_LEVEL6(__VA_ARGS__))</emphasis>
705 <emphasis role="preprocessor">#else</emphasis>
706 <emphasis role="preprocessor">#define&#32;CATCH_RECURSE(...)&#32;&#32;CATCH_RECURSION_LEVEL5(__VA_ARGS__)</emphasis>
707 <emphasis role="preprocessor">#endif</emphasis>
708 
709 <emphasis role="preprocessor">#define&#32;CATCH_REC_END(...)</emphasis>
710 <emphasis role="preprocessor">#define&#32;CATCH_REC_OUT</emphasis>
711 
712 <emphasis role="preprocessor">#define&#32;CATCH_EMPTY()</emphasis>
713 <emphasis role="preprocessor">#define&#32;CATCH_DEFER(id)&#32;id&#32;CATCH_EMPTY()</emphasis>
714 
715 <emphasis role="preprocessor">#define&#32;CATCH_REC_GET_END2()&#32;0,&#32;CATCH_REC_END</emphasis>
716 <emphasis role="preprocessor">#define&#32;CATCH_REC_GET_END1(...)&#32;CATCH_REC_GET_END2</emphasis>
717 <emphasis role="preprocessor">#define&#32;CATCH_REC_GET_END(...)&#32;CATCH_REC_GET_END1</emphasis>
718 <emphasis role="preprocessor">#define&#32;CATCH_REC_NEXT0(test,&#32;next,&#32;...)&#32;next&#32;CATCH_REC_OUT</emphasis>
719 <emphasis role="preprocessor">#define&#32;CATCH_REC_NEXT1(test,&#32;next)&#32;CATCH_DEFER&#32;(&#32;CATCH_REC_NEXT0&#32;)&#32;(&#32;test,&#32;next,&#32;0)</emphasis>
720 <emphasis role="preprocessor">#define&#32;CATCH_REC_NEXT(test,&#32;next)&#32;&#32;CATCH_REC_NEXT1(CATCH_REC_GET_END&#32;test,&#32;next)</emphasis>
721 
722 <emphasis role="preprocessor">#define&#32;CATCH_REC_LIST0(f,&#32;x,&#32;peek,&#32;...)&#32;,&#32;f(x)&#32;CATCH_DEFER&#32;(&#32;CATCH_REC_NEXT(peek,&#32;CATCH_REC_LIST1)&#32;)&#32;(&#32;f,&#32;peek,&#32;__VA_ARGS__&#32;)</emphasis>
723 <emphasis role="preprocessor">#define&#32;CATCH_REC_LIST1(f,&#32;x,&#32;peek,&#32;...)&#32;,&#32;f(x)&#32;CATCH_DEFER&#32;(&#32;CATCH_REC_NEXT(peek,&#32;CATCH_REC_LIST0)&#32;)&#32;(&#32;f,&#32;peek,&#32;__VA_ARGS__&#32;)</emphasis>
724 <emphasis role="preprocessor">#define&#32;CATCH_REC_LIST2(f,&#32;x,&#32;peek,&#32;...)&#32;&#32;&#32;f(x)&#32;CATCH_DEFER&#32;(&#32;CATCH_REC_NEXT(peek,&#32;CATCH_REC_LIST1)&#32;)&#32;(&#32;f,&#32;peek,&#32;__VA_ARGS__&#32;)</emphasis>
725 
726 <emphasis role="preprocessor">#define&#32;CATCH_REC_LIST0_UD(f,&#32;userdata,&#32;x,&#32;peek,&#32;...)&#32;,&#32;f(userdata,&#32;x)&#32;CATCH_DEFER&#32;(&#32;CATCH_REC_NEXT(peek,&#32;CATCH_REC_LIST1_UD)&#32;)&#32;(&#32;f,&#32;userdata,&#32;peek,&#32;__VA_ARGS__&#32;)</emphasis>
727 <emphasis role="preprocessor">#define&#32;CATCH_REC_LIST1_UD(f,&#32;userdata,&#32;x,&#32;peek,&#32;...)&#32;,&#32;f(userdata,&#32;x)&#32;CATCH_DEFER&#32;(&#32;CATCH_REC_NEXT(peek,&#32;CATCH_REC_LIST0_UD)&#32;)&#32;(&#32;f,&#32;userdata,&#32;peek,&#32;__VA_ARGS__&#32;)</emphasis>
728 <emphasis role="preprocessor">#define&#32;CATCH_REC_LIST2_UD(f,&#32;userdata,&#32;x,&#32;peek,&#32;...)&#32;&#32;&#32;f(userdata,&#32;x)&#32;CATCH_DEFER&#32;(&#32;CATCH_REC_NEXT(peek,&#32;CATCH_REC_LIST1_UD)&#32;)&#32;(&#32;f,&#32;userdata,&#32;peek,&#32;__VA_ARGS__&#32;)</emphasis>
729 
730 <emphasis role="comment">//&#32;Applies&#32;the&#32;function&#32;macro&#32;`f`&#32;to&#32;each&#32;of&#32;the&#32;remaining&#32;parameters,&#32;inserts&#32;commas&#32;between&#32;the&#32;results,</emphasis>
731 <emphasis role="comment">//&#32;and&#32;passes&#32;userdata&#32;as&#32;the&#32;first&#32;parameter&#32;to&#32;each&#32;invocation,</emphasis>
732 <emphasis role="comment">//&#32;e.g.&#32;CATCH_REC_LIST_UD(f,&#32;x,&#32;a,&#32;b,&#32;c)&#32;evaluates&#32;to&#32;f(x,&#32;a),&#32;f(x,&#32;b),&#32;f(x,&#32;c)</emphasis>
733 <emphasis role="preprocessor">#define&#32;CATCH_REC_LIST_UD(f,&#32;userdata,&#32;...)&#32;CATCH_RECURSE(CATCH_REC_LIST2_UD(f,&#32;userdata,&#32;__VA_ARGS__,&#32;()()(),&#32;()()(),&#32;()()(),&#32;0))</emphasis>
734 
735 <emphasis role="preprocessor">#define&#32;CATCH_REC_LIST(f,&#32;...)&#32;CATCH_RECURSE(CATCH_REC_LIST2(f,&#32;__VA_ARGS__,&#32;()()(),&#32;()()(),&#32;()()(),&#32;0))</emphasis>
736 
737 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_EXPAND1(param)&#32;INTERNAL_CATCH_EXPAND2(param)</emphasis>
738 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_EXPAND2(...)&#32;INTERNAL_CATCH_NO##&#32;__VA_ARGS__</emphasis>
739 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_DEF(...)&#32;INTERNAL_CATCH_DEF&#32;__VA_ARGS__</emphasis>
740 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_NOINTERNAL_CATCH_DEF</emphasis>
741 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_STRINGIZE(...)&#32;INTERNAL_CATCH_STRINGIZE2(__VA_ARGS__)</emphasis>
742 <emphasis role="preprocessor">#ifndef&#32;CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</emphasis>
743 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_STRINGIZE2(...)&#32;#__VA_ARGS__</emphasis>
744 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS(param)&#32;INTERNAL_CATCH_STRINGIZE(INTERNAL_CATCH_REMOVE_PARENS(param))</emphasis>
745 <emphasis role="preprocessor">#else</emphasis>
746 <emphasis role="comment">//&#32;MSVC&#32;is&#32;adding&#32;extra&#32;space&#32;and&#32;needs&#32;another&#32;indirection&#32;to&#32;expand&#32;INTERNAL_CATCH_NOINTERNAL_CATCH_DEF</emphasis>
747 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_STRINGIZE2(...)&#32;INTERNAL_CATCH_STRINGIZE3(__VA_ARGS__)</emphasis>
748 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_STRINGIZE3(...)&#32;#__VA_ARGS__</emphasis>
749 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS(param)&#32;(INTERNAL_CATCH_STRINGIZE(INTERNAL_CATCH_REMOVE_PARENS(param))&#32;+&#32;1)</emphasis>
750 <emphasis role="preprocessor">#endif</emphasis>
751 
752 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_MAKE_NAMESPACE2(...)&#32;ns_##__VA_ARGS__</emphasis>
753 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_MAKE_NAMESPACE(name)&#32;INTERNAL_CATCH_MAKE_NAMESPACE2(name)</emphasis>
754 
755 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_REMOVE_PARENS(...)&#32;INTERNAL_CATCH_EXPAND1(INTERNAL_CATCH_DEF&#32;__VA_ARGS__)</emphasis>
756 
757 <emphasis role="preprocessor">#ifndef&#32;CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</emphasis>
758 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_MAKE_TYPE_LIST2(...)&#32;decltype(get_wrapper&lt;INTERNAL_CATCH_REMOVE_PARENS_GEN(__VA_ARGS__)&gt;())</emphasis>
759 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_MAKE_TYPE_LIST(...)&#32;INTERNAL_CATCH_MAKE_TYPE_LIST2(INTERNAL_CATCH_REMOVE_PARENS(__VA_ARGS__))</emphasis>
760 <emphasis role="preprocessor">#else</emphasis>
761 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_MAKE_TYPE_LIST2(...)&#32;INTERNAL_CATCH_EXPAND_VARGS(decltype(get_wrapper&lt;INTERNAL_CATCH_REMOVE_PARENS_GEN(__VA_ARGS__)&gt;()))</emphasis>
762 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_MAKE_TYPE_LIST(...)&#32;INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_MAKE_TYPE_LIST2(INTERNAL_CATCH_REMOVE_PARENS(__VA_ARGS__)))</emphasis>
763 <emphasis role="preprocessor">#endif</emphasis>
764 
765 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(...)\</emphasis>
766 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CATCH_REC_LIST(INTERNAL_CATCH_MAKE_TYPE_LIST,__VA_ARGS__)</emphasis>
767 
768 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_REMOVE_PARENS_1_ARG(_0)&#32;INTERNAL_CATCH_REMOVE_PARENS(_0)</emphasis>
769 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_REMOVE_PARENS_2_ARG(_0,&#32;_1)&#32;INTERNAL_CATCH_REMOVE_PARENS(_0),&#32;INTERNAL_CATCH_REMOVE_PARENS_1_ARG(_1)</emphasis>
770 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_REMOVE_PARENS_3_ARG(_0,&#32;_1,&#32;_2)&#32;INTERNAL_CATCH_REMOVE_PARENS(_0),&#32;INTERNAL_CATCH_REMOVE_PARENS_2_ARG(_1,&#32;_2)</emphasis>
771 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_REMOVE_PARENS_4_ARG(_0,&#32;_1,&#32;_2,&#32;_3)&#32;INTERNAL_CATCH_REMOVE_PARENS(_0),&#32;INTERNAL_CATCH_REMOVE_PARENS_3_ARG(_1,&#32;_2,&#32;_3)</emphasis>
772 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_REMOVE_PARENS_5_ARG(_0,&#32;_1,&#32;_2,&#32;_3,&#32;_4)&#32;INTERNAL_CATCH_REMOVE_PARENS(_0),&#32;INTERNAL_CATCH_REMOVE_PARENS_4_ARG(_1,&#32;_2,&#32;_3,&#32;_4)</emphasis>
773 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_REMOVE_PARENS_6_ARG(_0,&#32;_1,&#32;_2,&#32;_3,&#32;_4,&#32;_5)&#32;INTERNAL_CATCH_REMOVE_PARENS(_0),&#32;INTERNAL_CATCH_REMOVE_PARENS_5_ARG(_1,&#32;_2,&#32;_3,&#32;_4,&#32;_5)</emphasis>
774 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_REMOVE_PARENS_7_ARG(_0,&#32;_1,&#32;_2,&#32;_3,&#32;_4,&#32;_5,&#32;_6)&#32;INTERNAL_CATCH_REMOVE_PARENS(_0),&#32;INTERNAL_CATCH_REMOVE_PARENS_6_ARG(_1,&#32;_2,&#32;_3,&#32;_4,&#32;_5,&#32;_6)</emphasis>
775 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_REMOVE_PARENS_8_ARG(_0,&#32;_1,&#32;_2,&#32;_3,&#32;_4,&#32;_5,&#32;_6,&#32;_7)&#32;INTERNAL_CATCH_REMOVE_PARENS(_0),&#32;INTERNAL_CATCH_REMOVE_PARENS_7_ARG(_1,&#32;_2,&#32;_3,&#32;_4,&#32;_5,&#32;_6,&#32;_7)</emphasis>
776 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_REMOVE_PARENS_9_ARG(_0,&#32;_1,&#32;_2,&#32;_3,&#32;_4,&#32;_5,&#32;_6,&#32;_7,&#32;_8)&#32;INTERNAL_CATCH_REMOVE_PARENS(_0),&#32;INTERNAL_CATCH_REMOVE_PARENS_8_ARG(_1,&#32;_2,&#32;_3,&#32;_4,&#32;_5,&#32;_6,&#32;_7,&#32;_8)</emphasis>
777 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_REMOVE_PARENS_10_ARG(_0,&#32;_1,&#32;_2,&#32;_3,&#32;_4,&#32;_5,&#32;_6,&#32;_7,&#32;_8,&#32;_9)&#32;INTERNAL_CATCH_REMOVE_PARENS(_0),&#32;INTERNAL_CATCH_REMOVE_PARENS_9_ARG(_1,&#32;_2,&#32;_3,&#32;_4,&#32;_5,&#32;_6,&#32;_7,&#32;_8,&#32;_9)</emphasis>
778 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_REMOVE_PARENS_11_ARG(_0,&#32;_1,&#32;_2,&#32;_3,&#32;_4,&#32;_5,&#32;_6,&#32;_7,&#32;_8,&#32;_9,&#32;_10)&#32;INTERNAL_CATCH_REMOVE_PARENS(_0),&#32;INTERNAL_CATCH_REMOVE_PARENS_10_ARG(_1,&#32;_2,&#32;_3,&#32;_4,&#32;_5,&#32;_6,&#32;_7,&#32;_8,&#32;_9,&#32;_10)</emphasis>
779 
780 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_VA_NARGS_IMPL(_0,&#32;_1,&#32;_2,&#32;_3,&#32;_4,&#32;_5,&#32;_6,&#32;_7,&#32;_8,&#32;_9,&#32;_10,&#32;N,&#32;...)&#32;N</emphasis>
781 
782 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_TYPE_GEN\</emphasis>
783 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;typename...&gt;&#32;struct&#32;TypeList&#32;{};\</emphasis>
784 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;typename...Ts&gt;\</emphasis>
785 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;constexpr&#32;auto&#32;get_wrapper()&#32;noexcept&#32;-&gt;&#32;TypeList&lt;Ts...&gt;&#32;{&#32;return&#32;{};&#32;}\</emphasis>
786 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;template&lt;typename...&gt;&#32;class...&gt;&#32;struct&#32;TemplateTypeList{};\</emphasis>
787 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;template&lt;typename...&gt;&#32;class...Cs&gt;\</emphasis>
788 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;constexpr&#32;auto&#32;get_wrapper()&#32;noexcept&#32;-&gt;&#32;TemplateTypeList&lt;Cs...&gt;&#32;{&#32;return&#32;{};&#32;}\</emphasis>
789 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;typename...&gt;\</emphasis>
790 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;append;\</emphasis>
791 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;typename...&gt;\</emphasis>
792 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;rewrap;\</emphasis>
793 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;template&lt;typename...&gt;&#32;class,&#32;typename...&gt;\</emphasis>
794 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;create;\</emphasis>
795 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;template&lt;typename...&gt;&#32;class,&#32;typename&gt;\</emphasis>
796 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;convert;\</emphasis>
797 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;\</emphasis>
798 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;typename&#32;T&gt;&#32;\</emphasis>
799 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;append&lt;T&gt;&#32;{&#32;using&#32;type&#32;=&#32;T;&#32;};\</emphasis>
800 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;&#32;template&lt;typename...&gt;&#32;class&#32;L1,&#32;typename...E1,&#32;template&lt;typename...&gt;&#32;class&#32;L2,&#32;typename...E2,&#32;typename...Rest&gt;\</emphasis>
801 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;append&lt;L1&lt;E1...&gt;,&#32;L2&lt;E2...&gt;,&#32;Rest...&gt;&#32;{&#32;using&#32;type&#32;=&#32;typename&#32;append&lt;L1&lt;E1...,E2...&gt;,&#32;Rest...&gt;::type;&#32;};\</emphasis>
802 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;&#32;template&lt;typename...&gt;&#32;class&#32;L1,&#32;typename...E1,&#32;typename...Rest&gt;\</emphasis>
803 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;append&lt;L1&lt;E1...&gt;,&#32;TypeList&lt;mpl_::na&gt;,&#32;Rest...&gt;&#32;{&#32;using&#32;type&#32;=&#32;L1&lt;E1...&gt;;&#32;};\</emphasis>
804 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;\</emphasis>
805 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;&#32;template&lt;typename...&gt;&#32;class&#32;Container,&#32;template&lt;typename...&gt;&#32;class&#32;List,&#32;typename...elems&gt;\</emphasis>
806 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;rewrap&lt;TemplateTypeList&lt;Container&gt;,&#32;List&lt;elems...&gt;&gt;&#32;{&#32;using&#32;type&#32;=&#32;TypeList&lt;Container&lt;elems...&gt;&gt;;&#32;};\</emphasis>
807 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;&#32;template&lt;typename...&gt;&#32;class&#32;Container,&#32;template&lt;typename...&gt;&#32;class&#32;List,&#32;class...Elems,&#32;typename...Elements&gt;\</emphasis>
808 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;rewrap&lt;TemplateTypeList&lt;Container&gt;,&#32;List&lt;Elems...&gt;,&#32;Elements...&gt;&#32;{&#32;using&#32;type&#32;=&#32;typename&#32;append&lt;TypeList&lt;Container&lt;Elems...&gt;&gt;,&#32;typename&#32;rewrap&lt;TemplateTypeList&lt;Container&gt;,&#32;Elements...&gt;::type&gt;::type;&#32;};\</emphasis>
809 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;\</emphasis>
810 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;template&#32;&lt;typename...&gt;&#32;class&#32;Final,&#32;template&lt;&#32;typename...&gt;&#32;class...Containers,&#32;typename...Types&gt;\</emphasis>
811 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;create&lt;Final,&#32;TemplateTypeList&lt;Containers...&gt;,&#32;TypeList&lt;Types...&gt;&gt;&#32;{&#32;using&#32;type&#32;=&#32;typename&#32;append&lt;Final&lt;&gt;,&#32;typename&#32;rewrap&lt;TemplateTypeList&lt;Containers&gt;,&#32;Types...&gt;::type...&gt;::type;&#32;};\</emphasis>
812 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;template&#32;&lt;typename...&gt;&#32;class&#32;Final,&#32;template&#32;&lt;typename...&gt;&#32;class&#32;List,&#32;typename...Ts&gt;\</emphasis>
813 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;convert&lt;Final,&#32;List&lt;Ts...&gt;&gt;&#32;{&#32;using&#32;type&#32;=&#32;typename&#32;append&lt;Final&lt;&gt;,TypeList&lt;Ts&gt;...&gt;::type;&#32;};</emphasis>
814 
815 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_NTTP_1(signature,&#32;...)\</emphasis>
816 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;&#32;struct&#32;Nttp{};\</emphasis>
817 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\</emphasis>
818 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;constexpr&#32;auto&#32;get_wrapper()&#32;noexcept&#32;-&gt;&#32;Nttp&lt;__VA_ARGS__&gt;&#32;{&#32;return&#32;{};&#32;}&#32;\</emphasis>
819 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;&#32;class...&gt;&#32;struct&#32;NttpTemplateTypeList{};\</emphasis>
820 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;&#32;class...Cs&gt;\</emphasis>
821 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;constexpr&#32;auto&#32;get_wrapper()&#32;noexcept&#32;-&gt;&#32;NttpTemplateTypeList&lt;Cs...&gt;&#32;{&#32;return&#32;{};&#32;}&#32;\</emphasis>
822 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;\</emphasis>
823 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;&#32;template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;&#32;class&#32;Container,&#32;template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;&#32;class&#32;List,&#32;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\</emphasis>
824 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;rewrap&lt;NttpTemplateTypeList&lt;Container&gt;,&#32;List&lt;__VA_ARGS__&gt;&gt;&#32;{&#32;using&#32;type&#32;=&#32;TypeList&lt;Container&lt;__VA_ARGS__&gt;&gt;;&#32;};\</emphasis>
825 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;&#32;template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;&#32;class&#32;Container,&#32;template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;&#32;class&#32;List,&#32;INTERNAL_CATCH_REMOVE_PARENS(signature),&#32;typename...Elements&gt;\</emphasis>
826 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;rewrap&lt;NttpTemplateTypeList&lt;Container&gt;,&#32;List&lt;__VA_ARGS__&gt;,&#32;Elements...&gt;&#32;{&#32;using&#32;type&#32;=&#32;typename&#32;append&lt;TypeList&lt;Container&lt;__VA_ARGS__&gt;&gt;,&#32;typename&#32;rewrap&lt;NttpTemplateTypeList&lt;Container&gt;,&#32;Elements...&gt;::type&gt;::type;&#32;};\</emphasis>
827 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;template&#32;&lt;typename...&gt;&#32;class&#32;Final,&#32;template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;&#32;class...Containers,&#32;typename...Types&gt;\</emphasis>
828 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;create&lt;Final,&#32;NttpTemplateTypeList&lt;Containers...&gt;,&#32;TypeList&lt;Types...&gt;&gt;&#32;{&#32;using&#32;type&#32;=&#32;typename&#32;append&lt;Final&lt;&gt;,&#32;typename&#32;rewrap&lt;NttpTemplateTypeList&lt;Containers&gt;,&#32;Types...&gt;::type...&gt;::type;&#32;};</emphasis>
829 
830 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_DECLARE_SIG_TEST0(TestName)</emphasis>
831 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_DECLARE_SIG_TEST1(TestName,&#32;signature)\</emphasis>
832 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\</emphasis>
833 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static&#32;void&#32;TestName()</emphasis>
834 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_X(TestName,&#32;signature,&#32;...)\</emphasis>
835 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\</emphasis>
836 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static&#32;void&#32;TestName()</emphasis>
837 
838 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_DEFINE_SIG_TEST0(TestName)</emphasis>
839 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_DEFINE_SIG_TEST1(TestName,&#32;signature)\</emphasis>
840 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\</emphasis>
841 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static&#32;void&#32;TestName()</emphasis>
842 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_X(TestName,&#32;signature,...)\</emphasis>
843 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\</emphasis>
844 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static&#32;void&#32;TestName()</emphasis>
845 
846 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_NTTP_REGISTER0(TestFunc,&#32;signature)\</emphasis>
847 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;typename&#32;Type&gt;\</emphasis>
848 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;void&#32;reg_test(TypeList&lt;Type&gt;,&#32;Catch::NameAndTags&#32;nameAndTags)\</emphasis>
849 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{\</emphasis>
850 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Catch::AutoReg(&#32;Catch::makeTestInvoker(&amp;TestFunc&lt;Type&gt;),&#32;CATCH_INTERNAL_LINEINFO,&#32;Catch::StringRef(),&#32;nameAndTags);\</emphasis>
851 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}</emphasis>
852 
853 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_NTTP_REGISTER(TestFunc,&#32;signature,&#32;...)\</emphasis>
854 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\</emphasis>
855 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;void&#32;reg_test(Nttp&lt;__VA_ARGS__&gt;,&#32;Catch::NameAndTags&#32;nameAndTags)\</emphasis>
856 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{\</emphasis>
857 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Catch::AutoReg(&#32;Catch::makeTestInvoker(&amp;TestFunc&lt;__VA_ARGS__&gt;),&#32;CATCH_INTERNAL_LINEINFO,&#32;Catch::StringRef(),&#32;nameAndTags);\</emphasis>
858 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}</emphasis>
859 
860 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD0(TestName,&#32;signature,&#32;...)\</emphasis>
861 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;typename&#32;Type&gt;\</emphasis>
862 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;void&#32;reg_test(TypeList&lt;Type&gt;,&#32;Catch::StringRef&#32;className,&#32;Catch::NameAndTags&#32;nameAndTags)\</emphasis>
863 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{\</emphasis>
864 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Catch::AutoReg(&#32;Catch::makeTestInvoker(&amp;TestName&lt;Type&gt;::test),&#32;CATCH_INTERNAL_LINEINFO,&#32;className,&#32;nameAndTags);\</emphasis>
865 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}</emphasis>
866 
867 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD(TestName,&#32;signature,&#32;...)\</emphasis>
868 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\</emphasis>
869 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;void&#32;reg_test(Nttp&lt;__VA_ARGS__&gt;,&#32;Catch::StringRef&#32;className,&#32;Catch::NameAndTags&#32;nameAndTags)\</emphasis>
870 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{\</emphasis>
871 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Catch::AutoReg(&#32;Catch::makeTestInvoker(&amp;TestName&lt;__VA_ARGS__&gt;::test),&#32;CATCH_INTERNAL_LINEINFO,&#32;className,&#32;nameAndTags);\</emphasis>
872 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}</emphasis>
873 
874 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0(TestName,&#32;ClassName)</emphasis>
875 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1(TestName,&#32;ClassName,&#32;signature)\</emphasis>
876 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;typename&#32;TestType&gt;&#32;\</emphasis>
877 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;TestName&#32;:&#32;INTERNAL_CATCH_REMOVE_PARENS(ClassName)&lt;TestType&gt;&#32;{&#32;\</emphasis>
878 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void&#32;test();\</emphasis>
879 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}</emphasis>
880 
881 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X(TestName,&#32;ClassName,&#32;signature,&#32;...)\</emphasis>
882 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;&#32;\</emphasis>
883 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;TestName&#32;:&#32;INTERNAL_CATCH_REMOVE_PARENS(ClassName)&lt;__VA_ARGS__&gt;&#32;{&#32;\</emphasis>
884 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void&#32;test();\</emphasis>
885 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}</emphasis>
886 
887 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0(TestName)</emphasis>
888 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1(TestName,&#32;signature)\</emphasis>
889 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;typename&#32;TestType&gt;&#32;\</emphasis>
890 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;void&#32;INTERNAL_CATCH_MAKE_NAMESPACE(TestName)::TestName&lt;TestType&gt;::test()</emphasis>
891 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X(TestName,&#32;signature,&#32;...)\</emphasis>
892 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;&#32;\</emphasis>
893 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;void&#32;INTERNAL_CATCH_MAKE_NAMESPACE(TestName)::TestName&lt;__VA_ARGS__&gt;::test()</emphasis>
894 
895 <emphasis role="preprocessor">#ifndef&#32;CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</emphasis>
896 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_NTTP_0</emphasis>
897 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_NTTP_GEN(...)&#32;INTERNAL_CATCH_VA_NARGS_IMPL(__VA_ARGS__,&#32;INTERNAL_CATCH_NTTP_1(__VA_ARGS__),&#32;INTERNAL_CATCH_NTTP_1(__VA_ARGS__),&#32;INTERNAL_CATCH_NTTP_1(__VA_ARGS__),&#32;INTERNAL_CATCH_NTTP_1(__VA_ARGS__),&#32;INTERNAL_CATCH_NTTP_1(__VA_ARGS__),&#32;INTERNAL_CATCH_NTTP_1(&#32;__VA_ARGS__),&#32;INTERNAL_CATCH_NTTP_1(&#32;__VA_ARGS__),&#32;INTERNAL_CATCH_NTTP_1(&#32;__VA_ARGS__),&#32;INTERNAL_CATCH_NTTP_1(&#32;__VA_ARGS__),INTERNAL_CATCH_NTTP_1(&#32;__VA_ARGS__),&#32;INTERNAL_CATCH_NTTP_0)</emphasis>
898 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD(TestName,&#32;...)&#32;INTERNAL_CATCH_VA_NARGS_IMPL(&#32;&quot;dummy&quot;,&#32;__VA_ARGS__,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0)(TestName,&#32;__VA_ARGS__)</emphasis>
899 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD(TestName,&#32;ClassName,&#32;...)&#32;INTERNAL_CATCH_VA_NARGS_IMPL(&#32;&quot;dummy&quot;,&#32;__VA_ARGS__,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0)(TestName,&#32;ClassName,&#32;__VA_ARGS__)</emphasis>
900 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_NTTP_REG_METHOD_GEN(TestName,&#32;...)&#32;INTERNAL_CATCH_VA_NARGS_IMPL(&#32;&quot;dummy&quot;,&#32;__VA_ARGS__,&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD,&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD,&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD,&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD,&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD,&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD,&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD,&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD,&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD,&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD0,&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD0)(TestName,&#32;__VA_ARGS__)</emphasis>
901 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_NTTP_REG_GEN(TestFunc,&#32;...)&#32;INTERNAL_CATCH_VA_NARGS_IMPL(&#32;&quot;dummy&quot;,&#32;__VA_ARGS__,&#32;INTERNAL_CATCH_NTTP_REGISTER,&#32;INTERNAL_CATCH_NTTP_REGISTER,&#32;INTERNAL_CATCH_NTTP_REGISTER,&#32;INTERNAL_CATCH_NTTP_REGISTER,&#32;INTERNAL_CATCH_NTTP_REGISTER,&#32;INTERNAL_CATCH_NTTP_REGISTER,&#32;INTERNAL_CATCH_NTTP_REGISTER,&#32;INTERNAL_CATCH_NTTP_REGISTER,&#32;INTERNAL_CATCH_NTTP_REGISTER,&#32;INTERNAL_CATCH_NTTP_REGISTER0,&#32;INTERNAL_CATCH_NTTP_REGISTER0)(TestFunc,&#32;__VA_ARGS__)</emphasis>
902 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_DEFINE_SIG_TEST(TestName,&#32;...)&#32;INTERNAL_CATCH_VA_NARGS_IMPL(&#32;&quot;dummy&quot;,&#32;__VA_ARGS__,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DEFINE_SIG_TEST1,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST0)(TestName,&#32;__VA_ARGS__)</emphasis>
903 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_DECLARE_SIG_TEST(TestName,&#32;...)&#32;INTERNAL_CATCH_VA_NARGS_IMPL(&#32;&quot;dummy&quot;,&#32;__VA_ARGS__,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_X,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_X,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_X,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST1,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST0)(TestName,&#32;__VA_ARGS__)</emphasis>
904 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_REMOVE_PARENS_GEN(...)&#32;INTERNAL_CATCH_VA_NARGS_IMPL(__VA_ARGS__,&#32;INTERNAL_CATCH_REMOVE_PARENS_11_ARG,INTERNAL_CATCH_REMOVE_PARENS_10_ARG,INTERNAL_CATCH_REMOVE_PARENS_9_ARG,INTERNAL_CATCH_REMOVE_PARENS_8_ARG,INTERNAL_CATCH_REMOVE_PARENS_7_ARG,INTERNAL_CATCH_REMOVE_PARENS_6_ARG,INTERNAL_CATCH_REMOVE_PARENS_5_ARG,INTERNAL_CATCH_REMOVE_PARENS_4_ARG,INTERNAL_CATCH_REMOVE_PARENS_3_ARG,INTERNAL_CATCH_REMOVE_PARENS_2_ARG,INTERNAL_CATCH_REMOVE_PARENS_1_ARG)(__VA_ARGS__)</emphasis>
905 <emphasis role="preprocessor">#else</emphasis>
906 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_NTTP_0(signature)</emphasis>
907 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_NTTP_GEN(...)&#32;INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL(__VA_ARGS__,&#32;INTERNAL_CATCH_NTTP_1,&#32;INTERNAL_CATCH_NTTP_1,&#32;INTERNAL_CATCH_NTTP_1,&#32;INTERNAL_CATCH_NTTP_1,&#32;INTERNAL_CATCH_NTTP_1,&#32;INTERNAL_CATCH_NTTP_1,&#32;INTERNAL_CATCH_NTTP_1,&#32;INTERNAL_CATCH_NTTP_1,&#32;INTERNAL_CATCH_NTTP_1,INTERNAL_CATCH_NTTP_1,&#32;INTERNAL_CATCH_NTTP_0)(&#32;__VA_ARGS__))</emphasis>
908 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD(TestName,&#32;...)&#32;INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL(&#32;&quot;dummy&quot;,&#32;__VA_ARGS__,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0)(TestName,&#32;__VA_ARGS__))</emphasis>
909 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD(TestName,&#32;ClassName,&#32;...)&#32;INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL(&#32;&quot;dummy&quot;,&#32;__VA_ARGS__,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0)(TestName,&#32;ClassName,&#32;__VA_ARGS__))</emphasis>
910 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_NTTP_REG_METHOD_GEN(TestName,&#32;...)&#32;INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL(&#32;&quot;dummy&quot;,&#32;__VA_ARGS__,&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD,&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD,&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD,&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD,&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD,&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD,&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD,&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD,&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD,&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD0,&#32;INTERNAL_CATCH_NTTP_REGISTER_METHOD0)(TestName,&#32;__VA_ARGS__))</emphasis>
911 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_NTTP_REG_GEN(TestFunc,&#32;...)&#32;INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL(&#32;&quot;dummy&quot;,&#32;__VA_ARGS__,&#32;INTERNAL_CATCH_NTTP_REGISTER,&#32;INTERNAL_CATCH_NTTP_REGISTER,&#32;INTERNAL_CATCH_NTTP_REGISTER,&#32;INTERNAL_CATCH_NTTP_REGISTER,&#32;INTERNAL_CATCH_NTTP_REGISTER,&#32;INTERNAL_CATCH_NTTP_REGISTER,&#32;INTERNAL_CATCH_NTTP_REGISTER,&#32;INTERNAL_CATCH_NTTP_REGISTER,&#32;INTERNAL_CATCH_NTTP_REGISTER,&#32;INTERNAL_CATCH_NTTP_REGISTER0,&#32;INTERNAL_CATCH_NTTP_REGISTER0)(TestFunc,&#32;__VA_ARGS__))</emphasis>
912 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_DEFINE_SIG_TEST(TestName,&#32;...)&#32;INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL(&#32;&quot;dummy&quot;,&#32;__VA_ARGS__,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DEFINE_SIG_TEST1,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST0)(TestName,&#32;__VA_ARGS__))</emphasis>
913 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_DECLARE_SIG_TEST(TestName,&#32;...)&#32;INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL(&#32;&quot;dummy&quot;,&#32;__VA_ARGS__,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_X,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_X,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_X,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_X,&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST1,&#32;INTERNAL_CATCH_DECLARE_SIG_TEST0)(TestName,&#32;__VA_ARGS__))</emphasis>
914 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_REMOVE_PARENS_GEN(...)&#32;INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL(__VA_ARGS__,&#32;INTERNAL_CATCH_REMOVE_PARENS_11_ARG,INTERNAL_CATCH_REMOVE_PARENS_10_ARG,INTERNAL_CATCH_REMOVE_PARENS_9_ARG,INTERNAL_CATCH_REMOVE_PARENS_8_ARG,INTERNAL_CATCH_REMOVE_PARENS_7_ARG,INTERNAL_CATCH_REMOVE_PARENS_6_ARG,INTERNAL_CATCH_REMOVE_PARENS_5_ARG,INTERNAL_CATCH_REMOVE_PARENS_4_ARG,INTERNAL_CATCH_REMOVE_PARENS_3_ARG,INTERNAL_CATCH_REMOVE_PARENS_2_ARG,INTERNAL_CATCH_REMOVE_PARENS_1_ARG)(__VA_ARGS__))</emphasis>
915 <emphasis role="preprocessor">#endif</emphasis>
916 
917 <emphasis role="comment">//&#32;end&#32;catch_preprocessor.hpp</emphasis>
918 <emphasis role="comment">//&#32;start&#32;catch_meta.hpp</emphasis>
919 
920 
921 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
922 
923 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
924 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
925 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1always__false">always_false</link>&#32;:&#32;std::false_type&#32;{};
926 
927 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1true__given">true_given</link>&#32;:&#32;std::true_type&#32;{};
928 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1is__callable__tester">is_callable_tester</link>&#32;{
929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Fun,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">true_given&lt;decltype(std::declval&lt;Fun&gt;</link>()(std::declval&lt;Args&gt;()...))&gt;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_catch_1_1is__callable__tester_1a9f770cae4c16dfa96d4c0299a6b4f980">test</link>(<emphasis role="keywordtype">int</emphasis>);
931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&gt;
932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::false_type&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_catch_1_1is__callable__tester_1adce16c4accb860bf46f6491dd70cfd63">test</link>(...);
933 &#32;&#32;&#32;&#32;};
934 
935 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
936 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1is__callable">is_callable</link>;
937 
938 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">Fun</link>,&#32;<emphasis role="keyword">typename</emphasis>...&#32;<link linkend="_struct_catch_1_1true__given">Args</link>&gt;
939 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1is__callable">is_callable</link>&lt;<link linkend="_struct_catch_1_1true__given">Fun</link>(<link linkend="_struct_catch_1_1true__given">Args</link>...)&gt;&#32;:&#32;<link linkend="_struct_catch_1_1true__given">decltype</link>(is_callable_tester::test&lt;Fun,&#32;Args...&gt;(0))&#32;{};
940 
941 <emphasis role="preprocessor">#if&#32;defined(__cpp_lib_is_invocable)&#32;&amp;&amp;&#32;__cpp_lib_is_invocable&#32;&gt;=&#32;201703</emphasis>
942 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::result_of&#32;is&#32;deprecated&#32;in&#32;C++17&#32;and&#32;removed&#32;in&#32;C++20.&#32;Hence,&#32;it&#32;is</emphasis>
943 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;replaced&#32;with&#32;std::invoke_result&#32;here.</emphasis>
944 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">Func</link>,&#32;<emphasis role="keyword">typename</emphasis>...&#32;<link linkend="_struct_catch_1_1true__given">U</link>&gt;
945 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_catch_1a9670af24a66c8f5cbe9d69b92b1c4383">FunctionReturnType</link>&#32;=&#32;std::remove_reference_t&lt;std::remove_cv_t&lt;std::invoke_result_t&lt;<link linkend="_struct_catch_1_1true__given">Func</link>,&#32;<link linkend="_struct_catch_1_1true__given">U</link>...&gt;&gt;&gt;;
946 <emphasis role="preprocessor">#else</emphasis>
947 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Keep&#32;::type&#32;here&#32;because&#32;we&#32;still&#32;support&#32;C++11</emphasis>
948 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">Func</link>,&#32;<emphasis role="keyword">typename</emphasis>...&#32;<link linkend="_struct_catch_1_1true__given">U</link>&gt;
949 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_catch_1a9670af24a66c8f5cbe9d69b92b1c4383">FunctionReturnType</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::remove_reference&lt;<emphasis role="keyword">typename</emphasis>&#32;std::remove_cv&lt;<emphasis role="keyword">typename</emphasis>&#32;std::result_of&lt;<link linkend="_struct_catch_1_1true__given">Func</link>(<link linkend="_struct_catch_1_1true__given">U</link>...)&gt;::type&gt;::type&gt;::type;
950 <emphasis role="preprocessor">#endif</emphasis>
951 
952 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
953 
954 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacempl__">mpl_</link>{
955 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>na;
956 }
957 
958 <emphasis role="comment">//&#32;end&#32;catch_meta.hpp</emphasis>
959 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
960 
961 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;C&gt;
962 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_test_invoker_as_method">TestInvokerAsMethod</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_catch_1_1_i_test_invoker">ITestInvoker</link>&#32;{
963 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">void</link>&#32;(<link linkend="_struct_catch_1_1true__given">C</link>::*<link linkend="_class_catch_1_1_test_invoker_as_method_1a4851e50d6b43c022c41d5de776a27ed7">m_testAsMethod</link>)();
964 <emphasis role="keyword">public</emphasis>:
965 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_test_invoker_as_method_1a119c4bdbbdd95c42859c18541987a1a4">TestInvokerAsMethod</link>(&#32;<emphasis role="keywordtype">void</emphasis>&#32;(<link linkend="_struct_catch_1_1true__given">C</link>::*<link linkend="_struct_catch_1_1true__given">testAsMethod</link>)()&#32;)&#32;<link linkend="_struct_catch_1_1true__given">noexcept</link>&#32;:&#32;<link linkend="_class_catch_1_1_test_invoker_as_method_1a4851e50d6b43c022c41d5de776a27ed7">m_testAsMethod</link>(&#32;<link linkend="_struct_catch_1_1true__given">testAsMethod</link>&#32;)&#32;{}
966 
967 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_test_invoker_as_method_1a8115a06efe273f4112ec0b5452c1b5f2">invoke</link>()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">C</link>&#32;<link linkend="_struct_catch_1_1true__given">obj</link>;
969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="_struct_catch_1_1true__given">obj</link>.*<link linkend="_class_catch_1_1_test_invoker_as_method_1a4851e50d6b43c022c41d5de776a27ed7">m_testAsMethod</link>)();
970 &#32;&#32;&#32;&#32;}
971 };
972 
973 <emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1ab3d8ccbc900fe50322c39ecbba52f536">makeTestInvoker</link>(&#32;<emphasis role="keywordtype">void</emphasis>(*<link linkend="_struct_catch_1_1true__given">testAsFunction</link>)()&#32;)&#32;<link linkend="_struct_catch_1_1true__given">noexcept</link>&#32;-&gt;&#32;<link linkend="_struct_catch_1_1_i_test_invoker">ITestInvoker</link>*;
974 
975 <link linkend="_struct_catch_1_1true__given">template</link>&lt;<link linkend="_struct_catch_1_1true__given">typename</link>&#32;<link linkend="_struct_catch_1_1true__given">C</link>&gt;
976 <link linkend="_struct_catch_1_1true__given">auto</link>&#32;<link linkend="_namespace_catch_1ab3d8ccbc900fe50322c39ecbba52f536">makeTestInvoker</link>(&#32;<emphasis role="keywordtype">void</emphasis>&#32;(<link linkend="_struct_catch_1_1true__given">C</link>::*<link linkend="_struct_catch_1_1true__given">testAsMethod</link>)()&#32;)&#32;<link linkend="_struct_catch_1_1true__given">noexcept</link>&#32;-&gt;&#32;<link linkend="_struct_catch_1_1_i_test_invoker">ITestInvoker</link>*&#32;{
977 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>(std::nothrow)&#32;<link linkend="_struct_catch_1_1true__given">TestInvokerAsMethod&lt;C&gt;</link>(&#32;<link linkend="_struct_catch_1_1true__given">testAsMethod</link>&#32;);
978 }
979 
980 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_name_and_tags">NameAndTags</link>&#32;{
981 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_name_and_tags_1ab585111e615ce8c504a2b9630de8ee94">NameAndTags</link>(&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">name_</link>&#32;=&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>(),&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">tags_</link>&#32;=&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>()&#32;)&#32;<link linkend="_struct_catch_1_1true__given">noexcept</link>;
982 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<link linkend="_struct_catch_1_1_name_and_tags_1a7cbea60e0cebfa622c667008eb011420">name</link>;
983 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<link linkend="_struct_catch_1_1_name_and_tags_1a74062ed1138834a348424eb7ed900c57">tags</link>;
984 };
985 
986 <link linkend="_struct_catch_1_1true__given">struct</link>&#32;<link linkend="_struct_catch_1_1_auto_reg">AutoReg</link>&#32;:&#32;<link linkend="_class_catch_1_1_non_copyable">NonCopyable</link>&#32;{
987 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_auto_reg_1a7eba02fb9d80b9896bf5a6517369af28">AutoReg</link>(&#32;<link linkend="_struct_catch_1_1_i_test_invoker">ITestInvoker</link>*&#32;<link linkend="_struct_catch_1_1true__given">invoker</link>,&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lineInfo,&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">classOrMethod</link>,&#32;<link linkend="_struct_catch_1_1_name_and_tags">NameAndTags</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">nameAndTags</link>&#32;)&#32;<emphasis role="keyword">noexcept</emphasis>;
988 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_auto_reg_1a3cdb53f1e5ff115310f3372bebe198f1">~AutoReg</link>();
989 };
990 
991 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
992 
993 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_DISABLE)</emphasis>
994 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(&#32;TestName,&#32;...&#32;)&#32;\</emphasis>
995 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;void&#32;TestName()</emphasis>
996 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION(&#32;TestName,&#32;ClassName,&#32;...&#32;)&#32;\</emphasis>
997 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
998 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;struct&#32;TestName&#32;:&#32;INTERNAL_CATCH_REMOVE_PARENS(ClassName)&#32;{&#32;\</emphasis>
999 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void&#32;test();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1000 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1001 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1002 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void&#32;TestName::test()</emphasis>
1003 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2(&#32;TestName,&#32;TestFunc,&#32;Name,&#32;Tags,&#32;Signature,&#32;...&#32;)&#32;&#32;\</emphasis>
1004 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_DEFINE_SIG_TEST(TestFunc,&#32;INTERNAL_CATCH_REMOVE_PARENS(Signature))</emphasis>
1005 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2(&#32;TestNameClass,&#32;TestName,&#32;ClassName,&#32;Name,&#32;Tags,&#32;Signature,&#32;...&#32;)&#32;&#32;&#32;&#32;\</emphasis>
1006 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1007 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace&#32;INTERNAL_CATCH_MAKE_NAMESPACE(TestName)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1008 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD(TestName,&#32;ClassName,&#32;INTERNAL_CATCH_REMOVE_PARENS(Signature));\</emphasis>
1009 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1010 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1011 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD(TestName,&#32;INTERNAL_CATCH_REMOVE_PARENS(Signature))</emphasis>
1012 
1013 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#ifndef&#32;CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</emphasis>
1014 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(Name,&#32;Tags,&#32;...)&#32;\</emphasis>
1015 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_&#32;),&#32;Name,&#32;Tags,&#32;typename&#32;TestType,&#32;__VA_ARGS__&#32;)</emphasis>
1016 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#else</emphasis>
1017 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(Name,&#32;Tags,&#32;...)&#32;\</emphasis>
1018 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_&#32;),&#32;Name,&#32;Tags,&#32;typename&#32;TestType,&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
1019 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
1020 
1021 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#ifndef&#32;CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</emphasis>
1022 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(Name,&#32;Tags,&#32;Signature,&#32;...)&#32;\</emphasis>
1023 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_&#32;),&#32;Name,&#32;Tags,&#32;Signature,&#32;__VA_ARGS__&#32;)</emphasis>
1024 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#else</emphasis>
1025 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(Name,&#32;Tags,&#32;Signature,&#32;...)&#32;\</emphasis>
1026 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_&#32;),&#32;Name,&#32;Tags,&#32;Signature,&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
1027 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
1028 
1029 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#ifndef&#32;CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</emphasis>
1030 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION(&#32;ClassName,&#32;Name,&#32;Tags,...&#32;)&#32;\</emphasis>
1031 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_C_L_A_S_S_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;)&#32;,&#32;ClassName,&#32;Name,&#32;Tags,&#32;typename&#32;T,&#32;__VA_ARGS__&#32;)</emphasis>
1032 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#else</emphasis>
1033 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION(&#32;ClassName,&#32;Name,&#32;Tags,...&#32;)&#32;\</emphasis>
1034 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_C_L_A_S_S_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;)&#32;,&#32;ClassName,&#32;Name,&#32;Tags,&#32;typename&#32;T,&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
1035 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
1036 
1037 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#ifndef&#32;CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</emphasis>
1038 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION(&#32;ClassName,&#32;Name,&#32;Tags,&#32;Signature,&#32;...&#32;)&#32;\</emphasis>
1039 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_C_L_A_S_S_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;)&#32;,&#32;ClassName,&#32;Name,&#32;Tags,&#32;Signature,&#32;__VA_ARGS__&#32;)</emphasis>
1040 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#else</emphasis>
1041 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION(&#32;ClassName,&#32;Name,&#32;Tags,&#32;Signature,&#32;...&#32;)&#32;\</emphasis>
1042 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_C_L_A_S_S_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;)&#32;,&#32;ClassName,&#32;Name,&#32;Tags,&#32;Signature,&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
1043 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
1044 <emphasis role="preprocessor">#endif</emphasis>
1045 
1047 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TESTCASE2(&#32;TestName,&#32;...&#32;)&#32;\</emphasis>
1048 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;void&#32;TestName();&#32;\</emphasis>
1049 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\</emphasis>
1050 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;\</emphasis>
1051 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace{&#32;Catch::AutoReg&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;autoRegistrar&#32;)(&#32;Catch::makeTestInvoker(&#32;&amp;TestName&#32;),&#32;CATCH_INTERNAL_LINEINFO,&#32;Catch::StringRef(),&#32;Catch::NameAndTags{&#32;__VA_ARGS__&#32;}&#32;);&#32;}&#32;</emphasis><emphasis role="comment">/*&#32;NOLINT&#32;*/</emphasis><emphasis role="preprocessor">&#32;\</emphasis>
1052 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION&#32;\</emphasis>
1053 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;void&#32;TestName()</emphasis>
1054 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TESTCASE(&#32;...&#32;)&#32;\</emphasis>
1055 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TESTCASE2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_S_T_&#32;),&#32;__VA_ARGS__&#32;)</emphasis>
1056 
1058 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_METHOD_AS_TEST_CASE(&#32;QualifiedMethod,&#32;...&#32;)&#32;\</emphasis>
1059 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\</emphasis>
1060 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;\</emphasis>
1061 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace{&#32;Catch::AutoReg&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;autoRegistrar&#32;)(&#32;Catch::makeTestInvoker(&#32;&amp;QualifiedMethod&#32;),&#32;CATCH_INTERNAL_LINEINFO,&#32;&quot;&amp;&quot;&#32;#QualifiedMethod,&#32;Catch::NameAndTags{&#32;__VA_ARGS__&#32;}&#32;);&#32;}&#32;</emphasis><emphasis role="comment">/*&#32;NOLINT&#32;*/</emphasis><emphasis role="preprocessor">&#32;\</emphasis>
1062 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</emphasis>
1063 
1065 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEST_CASE_METHOD2(&#32;TestName,&#32;ClassName,&#32;...&#32;)\</emphasis>
1066 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\</emphasis>
1067 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;\</emphasis>
1068 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace{&#32;\</emphasis>
1069 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;struct&#32;TestName&#32;:&#32;INTERNAL_CATCH_REMOVE_PARENS(ClassName)&#32;{&#32;\</emphasis>
1070 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void&#32;test();&#32;\</emphasis>
1071 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};&#32;\</emphasis>
1072 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Catch::AutoReg&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;autoRegistrar&#32;)&#32;(&#32;Catch::makeTestInvoker(&#32;&amp;TestName::test&#32;),&#32;CATCH_INTERNAL_LINEINFO,&#32;#ClassName,&#32;Catch::NameAndTags{&#32;__VA_ARGS__&#32;}&#32;);&#32;</emphasis><emphasis role="comment">/*&#32;NOLINT&#32;*/</emphasis><emphasis role="preprocessor">&#32;\</emphasis>
1073 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
1074 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION&#32;\</emphasis>
1075 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void&#32;TestName::test()</emphasis>
1076 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEST_CASE_METHOD(&#32;ClassName,&#32;...&#32;)&#32;\</emphasis>
1077 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TEST_CASE_METHOD2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_S_T_&#32;),&#32;ClassName,&#32;__VA_ARGS__&#32;)</emphasis>
1078 
1080 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_REGISTER_TESTCASE(&#32;Function,&#32;...&#32;)&#32;\</emphasis>
1081 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\</emphasis>
1082 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;\</emphasis>
1083 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Catch::AutoReg&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;autoRegistrar&#32;)(&#32;Catch::makeTestInvoker(&#32;Function&#32;),&#32;CATCH_INTERNAL_LINEINFO,&#32;Catch::StringRef(),&#32;Catch::NameAndTags{&#32;__VA_ARGS__&#32;}&#32;);&#32;</emphasis><emphasis role="comment">/*&#32;NOLINT&#32;*/</emphasis><emphasis role="preprocessor">&#32;\</emphasis>
1084 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</emphasis>
1085 
1087 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_2(TestName,&#32;TestFunc,&#32;Name,&#32;Tags,&#32;Signature,&#32;...&#32;)\</emphasis>
1088 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\</emphasis>
1089 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;\</emphasis>
1090 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS&#32;\</emphasis>
1091 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS&#32;\</emphasis>
1092 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_DECLARE_SIG_TEST(TestFunc,&#32;INTERNAL_CATCH_REMOVE_PARENS(Signature));\</emphasis>
1093 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace&#32;{\</emphasis>
1094 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace&#32;INTERNAL_CATCH_MAKE_NAMESPACE(TestName){\</emphasis>
1095 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TYPE_GEN\</emphasis>
1096 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))\</emphasis>
1097 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_NTTP_REG_GEN(TestFunc,INTERNAL_CATCH_REMOVE_PARENS(Signature))\</emphasis>
1098 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename...Types&gt;&#32;\</emphasis>
1099 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;struct&#32;TestName{\</emphasis>
1100 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestName(){\</emphasis>
1101 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int&#32;index&#32;=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1102 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constexpr&#32;char&#32;const*&#32;tmpl_types[]&#32;=&#32;{CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS,&#32;__VA_ARGS__)};\</emphasis>
1103 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;expander&#32;=&#32;int[];\</emphasis>
1104 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)expander{(reg_test(Types{},&#32;Catch::NameAndTags{&#32;Name&#32;&quot;&#32;-&#32;&quot;&#32;+&#32;std::string(tmpl_types[index]),&#32;Tags&#32;}&#32;),&#32;index++)...&#32;};</emphasis><emphasis role="comment">/*&#32;NOLINT&#32;*/</emphasis><emphasis role="preprocessor">&#32;\</emphasis>
1105 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}\</emphasis>
1106 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};\</emphasis>
1107 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;int&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;globalRegistrar&#32;)&#32;=&#32;[](){\</emphasis>
1108 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestName&lt;INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(__VA_ARGS__)&gt;();\</emphasis>
1109 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;0;\</emphasis>
1110 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}();\</emphasis>
1111 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}\</emphasis>
1112 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}\</emphasis>
1113 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION&#32;\</emphasis>
1114 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_DEFINE_SIG_TEST(TestFunc,INTERNAL_CATCH_REMOVE_PARENS(Signature))</emphasis>
1115 
1116 <emphasis role="preprocessor">#ifndef&#32;CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</emphasis>
1117 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE(Name,&#32;Tags,&#32;...)&#32;\</emphasis>
1118 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_&#32;),&#32;Name,&#32;Tags,&#32;typename&#32;TestType,&#32;__VA_ARGS__&#32;)</emphasis>
1119 <emphasis role="preprocessor">#else</emphasis>
1120 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE(Name,&#32;Tags,&#32;...)&#32;\</emphasis>
1121 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_&#32;),&#32;Name,&#32;Tags,&#32;typename&#32;TestType,&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
1122 <emphasis role="preprocessor">#endif</emphasis>
1123 
1124 <emphasis role="preprocessor">#ifndef&#32;CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</emphasis>
1125 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG(Name,&#32;Tags,&#32;Signature,&#32;...)&#32;\</emphasis>
1126 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_&#32;),&#32;Name,&#32;Tags,&#32;Signature,&#32;__VA_ARGS__&#32;)</emphasis>
1127 <emphasis role="preprocessor">#else</emphasis>
1128 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG(Name,&#32;Tags,&#32;Signature,&#32;...)&#32;\</emphasis>
1129 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_&#32;),&#32;Name,&#32;Tags,&#32;Signature,&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
1130 <emphasis role="preprocessor">#endif</emphasis>
1131 
1132 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(TestName,&#32;TestFuncName,&#32;Name,&#32;Tags,&#32;Signature,&#32;TmplTypes,&#32;TypesList)&#32;\</emphasis>
1133 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1134 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1135 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1136 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1137 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename&#32;TestType&gt;&#32;static&#32;void&#32;TestFuncName();&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1138 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace&#32;{\</emphasis>
1139 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace&#32;INTERNAL_CATCH_MAKE_NAMESPACE(TestName)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1140 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TYPE_GEN&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1141 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1142 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename...&#32;Types&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1143 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;struct&#32;TestName&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1144 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void&#32;reg_tests()&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1145 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int&#32;index&#32;=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1146 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;expander&#32;=&#32;int[];&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1147 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constexpr&#32;char&#32;const*&#32;tmpl_types[]&#32;=&#32;{CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS,&#32;INTERNAL_CATCH_REMOVE_PARENS(TmplTypes))};\</emphasis>
1148 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constexpr&#32;char&#32;const*&#32;types_list[]&#32;=&#32;{CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS,&#32;INTERNAL_CATCH_REMOVE_PARENS(TypesList))};\</emphasis>
1149 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constexpr&#32;auto&#32;num_types&#32;=&#32;sizeof(types_list)&#32;/&#32;sizeof(types_list[0]);\</emphasis>
1150 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)expander{(Catch::AutoReg(&#32;Catch::makeTestInvoker(&#32;&amp;TestFuncName&lt;Types&gt;&#32;),&#32;CATCH_INTERNAL_LINEINFO,&#32;Catch::StringRef(),&#32;Catch::NameAndTags{&#32;Name&#32;&quot;&#32;-&#32;&quot;&#32;+&#32;std::string(tmpl_types[index&#32;/&#32;num_types])&#32;+&#32;&quot;&lt;&quot;&#32;+&#32;std::string(types_list[index&#32;%&#32;num_types])&#32;+&#32;&quot;&gt;&quot;,&#32;Tags&#32;}&#32;),&#32;index++)...&#32;};</emphasis><emphasis role="comment">/*&#32;NOLINT&#32;*/</emphasis><emphasis role="preprocessor">\</emphasis>
1151 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1152 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1153 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;int&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;globalRegistrar&#32;)&#32;=&#32;[](){&#32;\</emphasis>
1154 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;TestInit&#32;=&#32;typename&#32;create&lt;TestName,&#32;decltype(get_wrapper&lt;INTERNAL_CATCH_REMOVE_PARENS(TmplTypes)&gt;()),&#32;TypeList&lt;INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(INTERNAL_CATCH_REMOVE_PARENS(TypesList))&gt;&gt;::type;&#32;\</emphasis>
1155 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestInit&#32;t;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1156 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t.reg_tests();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1157 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1158 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1159 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1160 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1161 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1162 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename&#32;TestType&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1163 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;void&#32;TestFuncName()</emphasis>
1164 
1165 <emphasis role="preprocessor">#ifndef&#32;CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</emphasis>
1166 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE(Name,&#32;Tags,&#32;...)\</emphasis>
1167 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_&#32;),&#32;Name,&#32;Tags,&#32;typename&#32;T,__VA_ARGS__)</emphasis>
1168 <emphasis role="preprocessor">#else</emphasis>
1169 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE(Name,&#32;Tags,&#32;...)\</emphasis>
1170 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_&#32;),&#32;Name,&#32;Tags,&#32;typename&#32;T,&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
1171 <emphasis role="preprocessor">#endif</emphasis>
1172 
1173 <emphasis role="preprocessor">#ifndef&#32;CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</emphasis>
1174 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(Name,&#32;Tags,&#32;Signature,&#32;...)\</emphasis>
1175 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_&#32;),&#32;Name,&#32;Tags,&#32;Signature,&#32;__VA_ARGS__)</emphasis>
1176 <emphasis role="preprocessor">#else</emphasis>
1177 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(Name,&#32;Tags,&#32;Signature,&#32;...)\</emphasis>
1178 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_&#32;),&#32;Name,&#32;Tags,&#32;Signature,&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
1179 <emphasis role="preprocessor">#endif</emphasis>
1180 
1181 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2(TestName,&#32;TestFunc,&#32;Name,&#32;Tags,&#32;TmplList)\</emphasis>
1182 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\</emphasis>
1183 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;\</emphasis>
1184 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS&#32;\</emphasis>
1185 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename&#32;TestType&gt;&#32;static&#32;void&#32;TestFunc();&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1186 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace&#32;{\</emphasis>
1187 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace&#32;INTERNAL_CATCH_MAKE_NAMESPACE(TestName){\</emphasis>
1188 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TYPE_GEN\</emphasis>
1189 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename...&#32;Types&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1190 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;struct&#32;TestName&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1191 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void&#32;reg_tests()&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1192 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int&#32;index&#32;=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1193 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;expander&#32;=&#32;int[];&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1194 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)expander{(Catch::AutoReg(&#32;Catch::makeTestInvoker(&#32;&amp;TestFunc&lt;Types&gt;&#32;),&#32;CATCH_INTERNAL_LINEINFO,&#32;Catch::StringRef(),&#32;Catch::NameAndTags{&#32;Name&#32;&quot;&#32;-&#32;&quot;&#32;+&#32;std::string(INTERNAL_CATCH_STRINGIZE(TmplList))&#32;+&#32;&quot;&#32;-&#32;&quot;&#32;+&#32;std::to_string(index),&#32;Tags&#32;}&#32;),&#32;index++)...&#32;};</emphasis><emphasis role="comment">/*&#32;NOLINT&#32;*/</emphasis><emphasis role="preprocessor">\</emphasis>
1195 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1196 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};\</emphasis>
1197 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;int&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;globalRegistrar&#32;)&#32;=&#32;[](){&#32;\</emphasis>
1198 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;TestInit&#32;=&#32;typename&#32;convert&lt;TestName,&#32;TmplList&gt;::type;&#32;\</emphasis>
1199 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestInit&#32;t;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1200 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t.reg_tests();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1201 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1202 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1203 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}}\</emphasis>
1204 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1205 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename&#32;TestType&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1206 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;void&#32;TestFunc()</emphasis>
1207 
1208 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE(Name,&#32;Tags,&#32;TmplList)&#32;\</emphasis>
1209 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_&#32;),&#32;Name,&#32;Tags,&#32;TmplList&#32;)</emphasis>
1210 
1211 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2(&#32;TestNameClass,&#32;TestName,&#32;ClassName,&#32;Name,&#32;Tags,&#32;Signature,&#32;...&#32;)&#32;\</emphasis>
1212 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\</emphasis>
1213 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;\</emphasis>
1214 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS&#32;\</emphasis>
1215 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS&#32;\</emphasis>
1216 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace&#32;{\</emphasis>
1217 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace&#32;INTERNAL_CATCH_MAKE_NAMESPACE(TestName){&#32;\</emphasis>
1218 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TYPE_GEN\</emphasis>
1219 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))\</emphasis>
1220 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD(TestName,&#32;ClassName,&#32;INTERNAL_CATCH_REMOVE_PARENS(Signature));\</emphasis>
1221 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_NTTP_REG_METHOD_GEN(TestName,&#32;INTERNAL_CATCH_REMOVE_PARENS(Signature))\</emphasis>
1222 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename...Types&gt;&#32;\</emphasis>
1223 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;struct&#32;TestNameClass{\</emphasis>
1224 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestNameClass(){\</emphasis>
1225 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int&#32;index&#32;=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1226 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constexpr&#32;char&#32;const*&#32;tmpl_types[]&#32;=&#32;{CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS,&#32;__VA_ARGS__)};\</emphasis>
1227 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;expander&#32;=&#32;int[];\</emphasis>
1228 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)expander{(reg_test(Types{},&#32;#ClassName,&#32;Catch::NameAndTags{&#32;Name&#32;&quot;&#32;-&#32;&quot;&#32;+&#32;std::string(tmpl_types[index]),&#32;Tags&#32;}&#32;),&#32;index++)...&#32;};</emphasis><emphasis role="comment">/*&#32;NOLINT&#32;*/</emphasis><emphasis role="preprocessor">&#32;\</emphasis>
1229 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}\</emphasis>
1230 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};\</emphasis>
1231 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;int&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;globalRegistrar&#32;)&#32;=&#32;[](){\</emphasis>
1232 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestNameClass&lt;INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(__VA_ARGS__)&gt;();\</emphasis>
1233 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;0;\</emphasis>
1234 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}();\</emphasis>
1235 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}\</emphasis>
1236 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}\</emphasis>
1237 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION&#32;\</emphasis>
1238 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD(TestName,&#32;INTERNAL_CATCH_REMOVE_PARENS(Signature))</emphasis>
1239 
1240 <emphasis role="preprocessor">#ifndef&#32;CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</emphasis>
1241 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD(&#32;ClassName,&#32;Name,&#32;Tags,...&#32;)&#32;\</emphasis>
1242 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_C_L_A_S_S_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;)&#32;,&#32;ClassName,&#32;Name,&#32;Tags,&#32;typename&#32;T,&#32;__VA_ARGS__&#32;)</emphasis>
1243 <emphasis role="preprocessor">#else</emphasis>
1244 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD(&#32;ClassName,&#32;Name,&#32;Tags,...&#32;)&#32;\</emphasis>
1245 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_C_L_A_S_S_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;)&#32;,&#32;ClassName,&#32;Name,&#32;Tags,&#32;typename&#32;T,&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
1246 <emphasis role="preprocessor">#endif</emphasis>
1247 
1248 <emphasis role="preprocessor">#ifndef&#32;CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</emphasis>
1249 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG(&#32;ClassName,&#32;Name,&#32;Tags,&#32;Signature,&#32;...&#32;)&#32;\</emphasis>
1250 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_C_L_A_S_S_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;)&#32;,&#32;ClassName,&#32;Name,&#32;Tags,&#32;Signature,&#32;__VA_ARGS__&#32;)</emphasis>
1251 <emphasis role="preprocessor">#else</emphasis>
1252 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG(&#32;ClassName,&#32;Name,&#32;Tags,&#32;Signature,&#32;...&#32;)&#32;\</emphasis>
1253 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_C_L_A_S_S_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;)&#32;,&#32;ClassName,&#32;Name,&#32;Tags,&#32;Signature,&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
1254 <emphasis role="preprocessor">#endif</emphasis>
1255 
1256 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2(TestNameClass,&#32;TestName,&#32;ClassName,&#32;Name,&#32;Tags,&#32;Signature,&#32;TmplTypes,&#32;TypesList)\</emphasis>
1257 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\</emphasis>
1258 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;\</emphasis>
1259 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS&#32;\</emphasis>
1260 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS&#32;\</emphasis>
1261 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename&#32;TestType&gt;&#32;\</emphasis>
1262 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;struct&#32;TestName&#32;:&#32;INTERNAL_CATCH_REMOVE_PARENS(ClassName&#32;&lt;TestType&gt;)&#32;{&#32;\</emphasis>
1263 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void&#32;test();\</emphasis>
1264 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};\</emphasis>
1265 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace&#32;{\</emphasis>
1266 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace&#32;INTERNAL_CATCH_MAKE_NAMESPACE(TestNameClass)&#32;{\</emphasis>
1267 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TYPE_GEN&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1268 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))\</emphasis>
1269 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename...Types&gt;\</emphasis>
1270 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;struct&#32;TestNameClass{\</emphasis>
1271 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void&#32;reg_tests(){\</emphasis>
1272 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int&#32;index&#32;=&#32;0;\</emphasis>
1273 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;expander&#32;=&#32;int[];\</emphasis>
1274 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constexpr&#32;char&#32;const*&#32;tmpl_types[]&#32;=&#32;{CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS,&#32;INTERNAL_CATCH_REMOVE_PARENS(TmplTypes))};\</emphasis>
1275 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constexpr&#32;char&#32;const*&#32;types_list[]&#32;=&#32;{CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS,&#32;INTERNAL_CATCH_REMOVE_PARENS(TypesList))};\</emphasis>
1276 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constexpr&#32;auto&#32;num_types&#32;=&#32;sizeof(types_list)&#32;/&#32;sizeof(types_list[0]);\</emphasis>
1277 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)expander{(Catch::AutoReg(&#32;Catch::makeTestInvoker(&#32;&amp;TestName&lt;Types&gt;::test&#32;),&#32;CATCH_INTERNAL_LINEINFO,&#32;#ClassName,&#32;Catch::NameAndTags{&#32;Name&#32;&quot;&#32;-&#32;&quot;&#32;+&#32;std::string(tmpl_types[index&#32;/&#32;num_types])&#32;+&#32;&quot;&lt;&quot;&#32;+&#32;std::string(types_list[index&#32;%&#32;num_types])&#32;+&#32;&quot;&gt;&quot;,&#32;Tags&#32;}&#32;),&#32;index++)...&#32;};</emphasis><emphasis role="comment">/*&#32;NOLINT&#32;*/</emphasis><emphasis role="preprocessor">&#32;\</emphasis>
1278 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}\</emphasis>
1279 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};\</emphasis>
1280 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;int&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;globalRegistrar&#32;)&#32;=&#32;[](){\</emphasis>
1281 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;TestInit&#32;=&#32;typename&#32;create&lt;TestNameClass,&#32;decltype(get_wrapper&lt;INTERNAL_CATCH_REMOVE_PARENS(TmplTypes)&gt;()),&#32;TypeList&lt;INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(INTERNAL_CATCH_REMOVE_PARENS(TypesList))&gt;&gt;::type;\</emphasis>
1282 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestInit&#32;t;\</emphasis>
1283 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t.reg_tests();\</emphasis>
1284 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;0;\</emphasis>
1285 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}();&#32;\</emphasis>
1286 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}\</emphasis>
1287 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}\</emphasis>
1288 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION&#32;\</emphasis>
1289 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename&#32;TestType&gt;&#32;\</emphasis>
1290 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void&#32;TestName&lt;TestType&gt;::test()</emphasis>
1291 
1292 <emphasis role="preprocessor">#ifndef&#32;CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</emphasis>
1293 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD(&#32;ClassName,&#32;Name,&#32;Tags,&#32;...&#32;)\</emphasis>
1294 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_&#32;),&#32;ClassName,&#32;Name,&#32;Tags,&#32;typename&#32;T,&#32;__VA_ARGS__&#32;)</emphasis>
1295 <emphasis role="preprocessor">#else</emphasis>
1296 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD(&#32;ClassName,&#32;Name,&#32;Tags,&#32;...&#32;)\</emphasis>
1297 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_&#32;),&#32;ClassName,&#32;Name,&#32;Tags,&#32;typename&#32;T,__VA_ARGS__&#32;)&#32;)</emphasis>
1298 <emphasis role="preprocessor">#endif</emphasis>
1299 
1300 <emphasis role="preprocessor">#ifndef&#32;CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</emphasis>
1301 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(&#32;ClassName,&#32;Name,&#32;Tags,&#32;Signature,&#32;...&#32;)\</emphasis>
1302 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_&#32;),&#32;ClassName,&#32;Name,&#32;Tags,&#32;Signature,&#32;__VA_ARGS__&#32;)</emphasis>
1303 <emphasis role="preprocessor">#else</emphasis>
1304 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(&#32;ClassName,&#32;Name,&#32;Tags,&#32;Signature,&#32;...&#32;)\</emphasis>
1305 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_&#32;),&#32;ClassName,&#32;Name,&#32;Tags,&#32;Signature,__VA_ARGS__&#32;)&#32;)</emphasis>
1306 <emphasis role="preprocessor">#endif</emphasis>
1307 
1308 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2(&#32;TestNameClass,&#32;TestName,&#32;ClassName,&#32;Name,&#32;Tags,&#32;TmplList)&#32;\</emphasis>
1309 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\</emphasis>
1310 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;\</emphasis>
1311 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS&#32;\</emphasis>
1312 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename&#32;TestType&gt;&#32;\</emphasis>
1313 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;struct&#32;TestName&#32;:&#32;INTERNAL_CATCH_REMOVE_PARENS(ClassName&#32;&lt;TestType&gt;)&#32;{&#32;\</emphasis>
1314 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void&#32;test();\</emphasis>
1315 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};\</emphasis>
1316 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace&#32;{\</emphasis>
1317 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace&#32;INTERNAL_CATCH_MAKE_NAMESPACE(TestName){&#32;\</emphasis>
1318 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TYPE_GEN\</emphasis>
1319 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename...Types&gt;\</emphasis>
1320 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;struct&#32;TestNameClass{\</emphasis>
1321 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void&#32;reg_tests(){\</emphasis>
1322 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int&#32;index&#32;=&#32;0;\</emphasis>
1323 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;expander&#32;=&#32;int[];\</emphasis>
1324 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)expander{(Catch::AutoReg(&#32;Catch::makeTestInvoker(&#32;&amp;TestName&lt;Types&gt;::test&#32;),&#32;CATCH_INTERNAL_LINEINFO,&#32;#ClassName,&#32;Catch::NameAndTags{&#32;Name&#32;&quot;&#32;-&#32;&quot;&#32;+&#32;std::string(INTERNAL_CATCH_STRINGIZE(TmplList))&#32;+&#32;&quot;&#32;-&#32;&quot;&#32;+&#32;std::to_string(index),&#32;Tags&#32;}&#32;),&#32;index++)...&#32;};</emphasis><emphasis role="comment">/*&#32;NOLINT&#32;*/</emphasis><emphasis role="preprocessor">&#32;\</emphasis>
1325 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}\</emphasis>
1326 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};\</emphasis>
1327 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;int&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;globalRegistrar&#32;)&#32;=&#32;[](){\</emphasis>
1328 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;TestInit&#32;=&#32;typename&#32;convert&lt;TestNameClass,&#32;TmplList&gt;::type;\</emphasis>
1329 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestInit&#32;t;\</emphasis>
1330 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t.reg_tests();\</emphasis>
1331 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;0;\</emphasis>
1332 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}();&#32;\</emphasis>
1333 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}}\</emphasis>
1334 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION&#32;\</emphasis>
1335 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename&#32;TestType&gt;&#32;\</emphasis>
1336 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void&#32;TestName&lt;TestType&gt;::test()</emphasis>
1337 
1338 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD(ClassName,&#32;Name,&#32;Tags,&#32;TmplList)&#32;\</emphasis>
1339 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_&#32;),&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_M_P_L_A_T_E_T_E_S_T_F_U_N_C_&#32;),&#32;ClassName,&#32;Name,&#32;Tags,&#32;TmplList&#32;)</emphasis>
1340 
1341 <emphasis role="comment">//&#32;end&#32;catch_test_registry.h</emphasis>
1342 <emphasis role="comment">//&#32;start&#32;catch_capture.hpp</emphasis>
1343 
1344 <emphasis role="comment">//&#32;start&#32;catch_assertionhandler.h</emphasis>
1345 
1346 <emphasis role="comment">//&#32;start&#32;catch_assertioninfo.h</emphasis>
1347 
1348 <emphasis role="comment">//&#32;start&#32;catch_result_type.h</emphasis>
1349 
1350 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
1351 
1352 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ResultWas::OfType&#32;enum</emphasis>
1353 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_result_was">ResultWas</link>&#32;{&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">OfType</link>&#32;{
1354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa65721dda02fe5efb522e7449e496608a">Unknown</link>&#32;=&#32;-1,
1355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efae7cbe89bb9ec7ece9b44d48b63d01b63">Ok</link>&#32;=&#32;0,
1356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa30222063929ca1b6318faa78e8242f1c">Info</link>&#32;=&#32;1,
1357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa67e9d36ba0f04a60a19896834d840c21">Warning</link>&#32;=&#32;2,
1358 
1359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa1818f1b198f10b5734c405142b22025c">FailureBit</link>&#32;=&#32;0x10,
1360 
1361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa5e7126b8458dc1376ac870a719f7873f">ExpressionFailed</link>&#32;=&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa1818f1b198f10b5734c405142b22025c">FailureBit</link>&#32;|&#32;1,
1362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efacecfc052e2499499b13304249303cc36">ExplicitFailure</link>&#32;=&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa1818f1b198f10b5734c405142b22025c">FailureBit</link>&#32;|&#32;2,
1363 
1364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efaa9107b7836cc7590ca668002f76d27c7">Exception</link>&#32;=&#32;0x100&#32;|&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa1818f1b198f10b5734c405142b22025c">FailureBit</link>,
1365 
1366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa3bb56296483947280cf7fa1ad074ab45">ThrewException</link>&#32;=&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efaa9107b7836cc7590ca668002f76d27c7">Exception</link>&#32;|&#32;1,
1367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa8b6d3d5bc78d4e7a95543b6ecfbdb57d">DidntThrowException</link>&#32;=&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efaa9107b7836cc7590ca668002f76d27c7">Exception</link>&#32;|&#32;2,
1368 
1369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa87fa1f2a2a63290b61948002e2935377">FatalErrorCondition</link>&#32;=&#32;0x200&#32;|&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa1818f1b198f10b5734c405142b22025c">FailureBit</link>
1370 
1371 &#32;&#32;&#32;&#32;};&#32;};
1372 
1373 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1a5205869c81c06d3460759cb86676ae68">isOk</link>(&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link>&#32;<link linkend="_struct_catch_1_1true__given">resultType</link>&#32;);
1374 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1a54b01af61673a3e1f21f31713639b180">isJustInfo</link>(&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">flags</link>&#32;);
1375 
1376 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ResultDisposition::Flags&#32;enum</emphasis>
1377 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_result_disposition">ResultDisposition</link>&#32;{&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8">Flags</link>&#32;{
1378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8af3bd52347ed6f8796e8ce2f77bb39ea5">Normal</link>&#32;=&#32;0x01,
1379 
1380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8aa18c94bd60c5614e17a84c2ced3bbfd5">ContinueOnFailure</link>&#32;=&#32;0x02,&#32;&#32;&#32;<emphasis role="comment">//&#32;Failures&#32;fail&#32;test,&#32;but&#32;execution&#32;continues</emphasis>
1381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8a9980604245f19884691f941dec03eeb8">FalseTest</link>&#32;=&#32;0x04,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Prefix&#32;expression&#32;with&#32;!</emphasis>
1382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8a1a88eb6004bddee4ccae4b421991bf54">SuppressFail</link>&#32;=&#32;0x08&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Failures&#32;are&#32;reported&#32;but&#32;do&#32;not&#32;fail&#32;the&#32;test</emphasis>
1383 &#32;&#32;&#32;&#32;};&#32;};
1384 
1385 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8">ResultDisposition::Flags</link>&#32;<link linkend="_namespace_catch_1ab32a083e442cc09f736327d2e2865999">operator | </link>(&#32;<link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8">ResultDisposition::Flags</link>&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8">ResultDisposition::Flags</link>&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;);
1386 
1387 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1a7f7480b15d74965459c844f0d393ed87">shouldContinueOnFailure</link>(&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">flags</link>&#32;);
1388 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1a93ef4e3e307a2021ca0d41b32c0e54b0">isFalseTest</link>(&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">flags</link>&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(&#32;<link linkend="_struct_catch_1_1true__given">flags</link>&#32;&amp;&#32;<link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8a9980604245f19884691f941dec03eeb8">ResultDisposition::FalseTest</link>&#32;)&#32;!=&#32;0;&#32;}
1389 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1ab91eb13081203d634fe48d3d2ab386d7">shouldSuppressFailure</link>(&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">flags</link>&#32;);
1390 
1391 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
1392 
1393 <emphasis role="comment">//&#32;end&#32;catch_result_type.h</emphasis>
1394 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
1395 
1396 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_assertion_info">AssertionInfo</link>
1397 &#32;&#32;&#32;&#32;{
1398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<link linkend="_struct_catch_1_1_assertion_info_1aaf3fbb9f1fe09c879ba3d877584e3056">macroName</link>;
1399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;<link linkend="_struct_catch_1_1_assertion_info_1a17bdbb404ba12658034f833be2f4c3e7">lineInfo</link>;
1400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<link linkend="_struct_catch_1_1_assertion_info_1accd36744b4acaa3a691a72df0b42190f">capturedExpression</link>;
1401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8">ResultDisposition::Flags</link>&#32;<link linkend="_struct_catch_1_1_assertion_info_1a60353b3632ab2f827162f2b2d6911073">resultDisposition</link>;
1402 
1403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;want&#32;to&#32;delete&#32;this&#32;constructor&#32;but&#32;a&#32;compiler&#32;bug&#32;in&#32;4.8&#32;means</emphasis>
1404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;struct&#32;is&#32;then&#32;treated&#32;as&#32;non-aggregate</emphasis>
1405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//AssertionInfo()&#32;=&#32;delete;</emphasis>
1406 &#32;&#32;&#32;&#32;};
1407 
1408 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
1409 
1410 <emphasis role="comment">//&#32;end&#32;catch_assertioninfo.h</emphasis>
1411 <emphasis role="comment">//&#32;start&#32;catch_decomposer.h</emphasis>
1412 
1413 <emphasis role="comment">//&#32;start&#32;catch_tostring.h</emphasis>
1414 
1415 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
1416 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>
1417 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
1418 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
1419 <emphasis role="comment">//&#32;start&#32;catch_stream.h</emphasis>
1420 
1421 <emphasis role="preprocessor">#include&#32;&lt;iosfwd&gt;</emphasis>
1422 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>
1423 <emphasis role="preprocessor">#include&#32;&lt;ostream&gt;</emphasis>
1424 
1425 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
1426 
1427 &#32;&#32;&#32;&#32;std::ostream&amp;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">cout</link>();
1428 &#32;&#32;&#32;&#32;std::ostream&amp;&#32;<link linkend="_namespace_catch_1a54c1ce08041448d684ae8edc14162cd2">cerr</link>();
1429 &#32;&#32;&#32;&#32;std::ostream&amp;&#32;<link linkend="_namespace_catch_1a1b2213f54e4d31a659db49827e81856b">clog</link>();
1430 
1431 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_string_ref">StringRef</link>;
1432 
1433 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_i_stream">IStream</link>&#32;{
1434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_i_stream_1a344a88d0e5fc1f727f5801c72b4a4e2a">~IStream</link>();
1435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_struct_catch_1_1_i_stream_1ad1cee80a31407d09aa0627a531f26b07">stream</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
1436 &#32;&#32;&#32;&#32;};
1437 
1438 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1af6d27462573d60c30c51acf1c980e3ff">makeStream</link>(&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;<link linkend="_struct_catch_1_1true__given">filename</link>&#32;)&#32;-&gt;&#32;<link linkend="_struct_catch_1_1_i_stream">IStream</link>&#32;<emphasis role="keyword">const</emphasis>*;
1439 
1440 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_reusable_string_stream">ReusableStringStream</link>&#32;:&#32;<link linkend="_class_catch_1_1_non_copyable">NonCopyable</link>&#32;{
1441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;<link linkend="_class_catch_1_1_reusable_string_stream_1a6e8154ffe67117de424c491e3b192504">m_index</link>;
1442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostream*&#32;<link linkend="_class_catch_1_1_reusable_string_stream_1ae8dc0aa8ab418990869cd5ea9ee51f14">m_oss</link>;
1443 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_reusable_string_stream_1a9b3f8c52b0d2d63ffd825297a9c09781">ReusableStringStream</link>();
1445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_reusable_string_stream_1aba9384e258a4db3178447b6a58414712">~ReusableStringStream</link>();
1446 
1447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_reusable_string_stream_1a0e9ecf260b2a5d35f4886ef0d51f6270">str</link>()&#32;<link linkend="_struct_catch_1_1true__given">const</link>&#32;-&gt;&#32;std::<emphasis role="keywordtype">string</emphasis>;
1448 
1449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">template</link>&lt;<link linkend="_struct_catch_1_1true__given">typename</link>&#32;<link linkend="_struct_catch_1_1true__given">T</link>&gt;
1450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">auto</link>&#32;<link linkend="_struct_catch_1_1true__given">operator</link>&#32;&lt;&lt;&#32;(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<link linkend="_struct_catch_1_1true__given">const</link>&amp;&#32;value&#32;)&#32;-&gt;&#32;<link linkend="_class_catch_1_1_reusable_string_stream">ReusableStringStream</link>&amp;&#32;{
1451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="_class_catch_1_1_reusable_string_stream_1ae8dc0aa8ab418990869cd5ea9ee51f14">m_oss</link>&#32;&lt;&lt;&#32;value;
1452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_reusable_string_stream_1a6881808c60a080d4e24a0b81c94cbf67">get</link>()&#32;-&gt;&#32;std::ostream&amp;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<link linkend="_class_catch_1_1_reusable_string_stream_1ae8dc0aa8ab418990869cd5ea9ee51f14">m_oss</link>;&#32;}
1455 &#32;&#32;&#32;&#32;};
1456 }
1457 
1458 <emphasis role="comment">//&#32;end&#32;catch_stream.h</emphasis>
1459 <emphasis role="comment">//&#32;start&#32;catch_interfaces_enum_values_registry.h</emphasis>
1460 
1461 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
1462 
1463 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
1464 
1465 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
1466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_detail_1_1_enum_info">EnumInfo</link>&#32;{
1467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<link linkend="_struct_catch_1_1_detail_1_1_enum_info_1a16ecfd3a7e11439433aabbdf6ecb676c">m_name</link>;
1468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::pair&lt;int,&#32;StringRef&gt;&gt;&#32;<link linkend="_struct_catch_1_1_detail_1_1_enum_info_1ad65c0537a50d375859295a2c18ade489">m_values</link>;
1469 
1470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_detail_1_1_enum_info_1ab6608593c00614a688045fe8d911258d">~EnumInfo</link>();
1471 
1472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<link linkend="_struct_catch_1_1_detail_1_1_enum_info_1a2fdfacc411d7afb1cb690366e5e49cb3">lookup</link>(&#32;<emphasis role="keywordtype">int</emphasis>&#32;value&#32;)&#32;<emphasis role="keyword">const</emphasis>;
1473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
1474 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Detail</emphasis>
1475 
1476 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_i_mutable_enum_values_registry">IMutableEnumValuesRegistry</link>&#32;{
1477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_i_mutable_enum_values_registry_1aebd423693128987c89ac732478d74673">~IMutableEnumValuesRegistry</link>();
1478 
1479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_detail_1_1_enum_info">Detail::EnumInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1_i_mutable_enum_values_registry_1a56e9726c383ed48731621c7183730310">registerEnum</link>(&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<link linkend="_struct_catch_1_1true__given">enumName</link>,&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<link linkend="_struct_catch_1_1true__given">allEnums</link>,&#32;std::vector&lt;int&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;values&#32;)&#32;=&#32;0;
1480 
1481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;E&gt;
1482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_detail_1_1_enum_info">Detail::EnumInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1_i_mutable_enum_values_registry_1ac1f8c7d3d97100ec30e09a3866f69904">registerEnum</link>(&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<link linkend="_struct_catch_1_1true__given">enumName</link>,&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<link linkend="_struct_catch_1_1true__given">allEnums</link>,&#32;std::initializer_list&lt;E&gt;&#32;values&#32;)&#32;{
1483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_catch_1_1true__given">int</link>)&#32;&gt;=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_catch_1_1true__given">E</link>),&#32;<emphasis role="stringliteral">&quot;Cannot&#32;serialize&#32;enum&#32;to&#32;int&quot;</emphasis>);
1484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;<link linkend="_struct_catch_1_1true__given">intValues</link>;
1485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">intValues</link>.reserve(&#32;values.size()&#32;);
1486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">enumValue</link>&#32;:&#32;values&#32;)
1487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">intValues</link>.push_back(&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(&#32;<link linkend="_struct_catch_1_1true__given">enumValue</link>&#32;)&#32;);
1488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_i_mutable_enum_values_registry_1a56e9726c383ed48731621c7183730310">registerEnum</link>(&#32;<link linkend="_struct_catch_1_1true__given">enumName</link>,&#32;<link linkend="_struct_catch_1_1true__given">allEnums</link>,&#32;<link linkend="_struct_catch_1_1true__given">intValues</link>&#32;);
1489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1490 &#32;&#32;&#32;&#32;};
1491 
1492 }&#32;<emphasis role="comment">//&#32;Catch</emphasis>
1493 
1494 <emphasis role="comment">//&#32;end&#32;catch_interfaces_enum_values_registry.h</emphasis>
1495 
1496 <emphasis role="preprocessor">#ifdef&#32;CATCH_CONFIG_CPP17_STRING_VIEW</emphasis>
1497 <emphasis role="preprocessor">#include&#32;&lt;string_view&gt;</emphasis>
1498 <emphasis role="preprocessor">#endif</emphasis>
1499 
1500 <emphasis role="preprocessor">#ifdef&#32;__OBJC__</emphasis>
1501 <emphasis role="comment">//&#32;start&#32;catch_objc_arc.hpp</emphasis>
1502 
1503 <emphasis role="preprocessor">#import&#32;&lt;Foundation/Foundation.h&gt;</emphasis>
1504 
1505 <emphasis role="preprocessor">#ifdef&#32;__has_feature</emphasis>
1506 <emphasis role="preprocessor">#define&#32;CATCH_ARC_ENABLED&#32;__has_feature(objc_arc)</emphasis>
1507 <emphasis role="preprocessor">#else</emphasis>
1508 <emphasis role="preprocessor">#define&#32;CATCH_ARC_ENABLED&#32;0</emphasis>
1509 <emphasis role="preprocessor">#endif</emphasis>
1510 
1511 <emphasis role="keywordtype">void</emphasis>&#32;arcSafeRelease(&#32;NSObject*&#32;obj&#32;);
1512 <emphasis role="keywordtype">id</emphasis>&#32;performOptionalSelector(&#32;<emphasis role="keywordtype">id</emphasis>&#32;obj,&#32;<emphasis role="keywordtype">SEL</emphasis>&#32;sel&#32;);
1513 
1514 <emphasis role="preprocessor">#if&#32;!CATCH_ARC_ENABLED</emphasis>
1515 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;arcSafeRelease(&#32;NSObject*&#32;obj&#32;)&#32;{
1516 &#32;&#32;&#32;&#32;[obj&#32;release];
1517 }
1518 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>&#32;performOptionalSelector(&#32;<emphasis role="keywordtype">id</emphasis>&#32;obj,&#32;<emphasis role="keywordtype">SEL</emphasis>&#32;sel&#32;)&#32;{
1519 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;[obj&#32;respondsToSelector:&#32;sel]&#32;)
1520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;[obj&#32;performSelector:&#32;sel];
1521 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nil;
1522 }
1523 <emphasis role="preprocessor">#define&#32;CATCH_UNSAFE_UNRETAINED</emphasis>
1524 <emphasis role="preprocessor">#define&#32;CATCH_ARC_STRONG</emphasis>
1525 <emphasis role="preprocessor">#else</emphasis>
1526 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;arcSafeRelease(&#32;NSObject*&#32;){}
1527 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>&#32;performOptionalSelector(&#32;<emphasis role="keywordtype">id</emphasis>&#32;obj,&#32;<emphasis role="keywordtype">SEL</emphasis>&#32;sel&#32;)&#32;{
1528 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
1529 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;push</emphasis>
1530 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Warc-performSelector-leaks&quot;</emphasis>
1531 <emphasis role="preprocessor">#endif</emphasis>
1532 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;[obj&#32;respondsToSelector:&#32;sel]&#32;)
1533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;[obj&#32;performSelector:&#32;sel];
1534 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
1535 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;pop</emphasis>
1536 <emphasis role="preprocessor">#endif</emphasis>
1537 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nil;
1538 }
1539 <emphasis role="preprocessor">#define&#32;CATCH_UNSAFE_UNRETAINED&#32;__unsafe_unretained</emphasis>
1540 <emphasis role="preprocessor">#define&#32;CATCH_ARC_STRONG&#32;__strong</emphasis>
1541 <emphasis role="preprocessor">#endif</emphasis>
1542 
1543 <emphasis role="comment">//&#32;end&#32;catch_objc_arc.hpp</emphasis>
1544 <emphasis role="preprocessor">#endif</emphasis>
1545 
1546 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
1547 <emphasis role="preprocessor">#pragma&#32;warning(push)</emphasis>
1548 <emphasis role="preprocessor">#pragma&#32;warning(disable:4180)&#32;</emphasis><emphasis role="comment">//&#32;We&#32;attempt&#32;to&#32;stream&#32;a&#32;function&#32;(address)&#32;by&#32;const&amp;,&#32;which&#32;MSVC&#32;complains&#32;about&#32;but&#32;is&#32;harmless</emphasis>
1549 <emphasis role="preprocessor">#endif</emphasis>
1550 
1551 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
1552 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
1553 
1554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;<link linkend="_namespace_catch_1_1_detail_1a466775f4eec29ffef29ab334cd885136">unprintableString</link>;
1555 
1556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_namespace_catch_1_1_detail_1ac5d6c510e565ee5bddcc2236194ce29e">rawMemoryToString</link>(&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<emphasis role="keywordtype">object</emphasis>,&#32;std::size_t&#32;size&#32;);
1557 
1558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_namespace_catch_1_1_detail_1ac5d6c510e565ee5bddcc2236194ce29e">rawMemoryToString</link>(&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">T</link>&amp;&#32;<emphasis role="keywordtype">object</emphasis>&#32;)&#32;{
1560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1_1_detail_1ac5d6c510e565ee5bddcc2236194ce29e">rawMemoryToString</link>(&#32;&amp;<emphasis role="keywordtype">object</emphasis>,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">object</emphasis>)&#32;);
1561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1562 
1563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_detail_1_1_is_stream_insertable">IsStreamInsertable</link>&#32;{
1565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Stream,&#32;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
1566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_detail_1_1_is_stream_insertable_1a4269761a8bcae50110c0814462fc4ef0">test</link>(<emphasis role="keywordtype">int</emphasis>)
1567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;Stream&amp;&gt;()&#32;&lt;&lt;&#32;std::declval&lt;U&gt;(),&#32;std::true_type());
1568 
1569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&gt;
1570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_detail_1_1_is_stream_insertable_1ac5761375646929916dc5e165d44cd3d9">test</link>(...)-&gt;std::false_type;
1571 
1572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_detail_1_1_is_stream_insertable_1a42818b09ae5851126a70ee263769e309">value</link>&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(<link linkend="_struct_catch_1_1true__given">test&lt;std::ostream, const T&amp;&gt;</link>(0))<link linkend="_class_catch_1_1_detail_1_1_is_stream_insertable_1a42818b09ae5851126a70ee263769e309">::value</link>;
1574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
1575 
1576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;E&gt;
1577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_namespace_catch_1_1_detail_1a242396de537c5176710d680cc9ca6b93">convertUnknownEnumToString</link>(&#32;<link linkend="_struct_catch_1_1true__given">E</link>&#32;<link linkend="_struct_catch_1_1true__given">e</link>&#32;);
1578 
1579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;
1581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!std::is_enum&lt;T&gt;::value&#32;&amp;&amp;&#32;!std::is_base_of&lt;std::exception,&#32;T&gt;::value,
1582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&gt;::type&#32;<link linkend="_namespace_catch_1_1_detail_1aa4fbd846029625d08378606ffe9ebc3b">convertUnstreamable</link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;{
1583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1_1_detail_1a466775f4eec29ffef29ab334cd885136">Detail::unprintableString</link>;
1584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;
1587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!std::is_enum&lt;T&gt;::value&#32;&amp;&amp;&#32;std::is_base_of&lt;std::exception,&#32;T&gt;::value,
1588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&gt;::type&#32;<link linkend="_namespace_catch_1_1_detail_1aa4fbd846029625d08378606ffe9ebc3b">convertUnstreamable</link>(<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">ex</link>)&#32;{
1589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">ex</link>.what();
1590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1591 
1592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;
1594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_enum&lt;T&gt;::value
1595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;std::string&gt;::type&#32;<link linkend="_namespace_catch_1_1_detail_1aa4fbd846029625d08378606ffe9ebc3b">convertUnstreamable</link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;value&#32;)&#32;{
1596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1_1_detail_1a242396de537c5176710d680cc9ca6b93">convertUnknownEnumToString</link>(&#32;value&#32;);
1597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1598 
1599 <emphasis role="preprocessor">#if&#32;defined(_MANAGED)</emphasis>
1601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1true__given">clrReferenceToString</link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>^&#32;<link linkend="_struct_catch_1_1true__given">ref</link>&#32;)&#32;{
1603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_catch_1_1true__given">ref</link>&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)
1604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string(<emphasis role="stringliteral">&quot;null&quot;</emphasis>);
1605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">bytes</link>&#32;=&#32;System::Text::Encoding::UTF8-&gt;GetBytes(<link linkend="_struct_catch_1_1true__given">ref</link>-&gt;ToString());
1606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cli::pin_ptr&lt;System::Byte&gt;&#32;<link linkend="_struct_catch_1_1true__given">p</link>&#32;=&#32;&amp;<link linkend="_struct_catch_1_1true__given">bytes</link>[0];
1607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const&#32;</emphasis>*<emphasis role="keyword">&gt;</emphasis>(<link linkend="_struct_catch_1_1true__given">p</link>),&#32;<link linkend="_struct_catch_1_1true__given">bytes</link>-&gt;Length);
1608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1609 <emphasis role="preprocessor">#endif</emphasis>
1610 
1611 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Detail</emphasis>
1612 
1613 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;decide&#32;for&#32;C++14,&#32;change&#32;these&#32;to&#32;enable_if_ts</emphasis>
1614 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
1615 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&#32;{
1616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Fake&#32;=&#32;T&gt;
1617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>
1618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;::Catch::Detail::IsStreamInsertable&lt;Fake&gt;::value,&#32;std::string&gt;::type
1619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">convert</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">Fake</link>&amp;&#32;value)&#32;{
1620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_reusable_string_stream">ReusableStringStream</link>&#32;<link linkend="_struct_catch_1_1true__given">rss</link>;
1621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;call&#32;using&#32;the&#32;function-like&#32;syntax&#32;to&#32;avoid&#32;ambiguity&#32;with</emphasis>
1622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;user-defined&#32;templated&#32;operator&lt;&lt;&#32;under&#32;clang.</emphasis>
1623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">rss</link>.operator&lt;&lt;(value);
1624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">rss</link>.str();
1625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1626 
1627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Fake&#32;=&#32;T&gt;
1628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>
1629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;!::Catch::Detail::IsStreamInsertable&lt;Fake&gt;::value,&#32;std::string&gt;::type
1630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_string_maker_1ac23f621d0bed26c4a511d4f5c37abb91">convert</link>(&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">Fake</link>&amp;&#32;value&#32;)&#32;{
1631 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_FALLBACK_STRINGIFIER)</emphasis>
1632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1_1_detail_1aa4fbd846029625d08378606ffe9ebc3b">Detail::convertUnstreamable</link>(value);
1633 <emphasis role="preprocessor">#else</emphasis>
1634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">CATCH_CONFIG_FALLBACK_STRINGIFIER</link>(value);
1635 <emphasis role="preprocessor">#endif</emphasis>
1636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1637 &#32;&#32;&#32;&#32;};
1638 
1639 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
1640 
1641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;function&#32;dispatches&#32;all&#32;stringification&#32;requests&#32;inside&#32;of&#32;Catch.</emphasis>
1642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Should&#32;be&#32;preferably&#32;called&#32;fully&#32;qualified,&#32;like&#32;::Catch::Detail::stringify</emphasis>
1643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">stringify</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">T</link>&amp;&#32;<link linkend="_struct_catch_1_1true__given">e</link>)&#32;{
1645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;::Catch::StringMaker&lt;typename&#32;std::remove_cv&lt;typename&#32;std::remove_reference&lt;T&gt;::type&gt;::type&gt;::convert(<link linkend="_struct_catch_1_1true__given">e</link>);
1646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1647 
1648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;E&gt;
1649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_namespace_catch_1_1_detail_1a242396de537c5176710d680cc9ca6b93">convertUnknownEnumToString</link>(&#32;<link linkend="_struct_catch_1_1true__given">E</link>&#32;<link linkend="_struct_catch_1_1true__given">e</link>&#32;)&#32;{
1650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;::Catch::Detail::stringify(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_catch_1_1true__given">typename</link>&#32;std::underlying_type&lt;E&gt;::type<emphasis role="keyword">&gt;</emphasis>(<link linkend="_struct_catch_1_1true__given">e</link>));
1651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1652 
1653 <emphasis role="preprocessor">#if&#32;defined(_MANAGED)</emphasis>
1654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">stringify</link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>^&#32;<link linkend="_struct_catch_1_1true__given">e</link>&#32;)&#32;{
1656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;::Catch::StringMaker&lt;T^&gt;::convert(<link linkend="_struct_catch_1_1true__given">e</link>);
1657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1658 <emphasis role="preprocessor">#endif</emphasis>
1659 
1660 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Detail</emphasis>
1661 
1662 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Some&#32;predefined&#32;specializations</emphasis>
1663 
1664 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1665 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;std::string&gt;&#32;{
1666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01std_1_1string_01_4_1ae065b2ecc5c1a6c4409cf06d604bd66d">convert</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;str);
1667 &#32;&#32;&#32;&#32;};
1668 
1669 <emphasis role="preprocessor">#ifdef&#32;CATCH_CONFIG_CPP17_STRING_VIEW</emphasis>
1670 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1671 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;std::<link linkend="_struct_catch_1_1true__given">string_view</link>&gt;&#32;{
1672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">convert</link>(std::string_view&#32;str);
1673 &#32;&#32;&#32;&#32;};
1674 <emphasis role="preprocessor">#endif</emphasis>
1675 
1676 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1677 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_struct_catch_1_1true__given">char</link>&#32;<link linkend="_struct_catch_1_1true__given">const</link>&#32;*&gt;&#32;{
1678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01char_01const_01_5_01_4_1a20813965ad59cdf6d1f874f47158432d">convert</link>(<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;str);
1679 &#32;&#32;&#32;&#32;};
1680 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1681 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_struct_catch_1_1true__given">char</link>&#32;*&gt;&#32;{
1682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01char_01_5_01_4_1a33049e24281ea6fba48bd8817bdd52bd">convert</link>(<emphasis role="keywordtype">char</emphasis>&#32;*&#32;str);
1683 &#32;&#32;&#32;&#32;};
1684 
1685 <emphasis role="preprocessor">#ifdef&#32;CATCH_CONFIG_WCHAR</emphasis>
1686 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1687 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;std::<link linkend="_struct_catch_1_1true__given">wstring</link>&gt;&#32;{
1688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01std_1_1wstring_01_4_1a375d49d6281bee4d36d853fa1bd5ebbd">convert</link>(<emphasis role="keyword">const</emphasis>&#32;std::wstring&amp;&#32;<link linkend="_struct_catch_1_1true__given">wstr</link>);
1689 &#32;&#32;&#32;&#32;};
1690 
1691 <emphasis role="preprocessor">#&#32;ifdef&#32;CATCH_CONFIG_CPP17_STRING_VIEW</emphasis>
1692 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1693 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;std::<link linkend="_struct_catch_1_1true__given">wstring_view</link>&gt;&#32;{
1694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">convert</link>(std::wstring_view&#32;str);
1695 &#32;&#32;&#32;&#32;};
1696 <emphasis role="preprocessor">#&#32;endif</emphasis>
1697 
1698 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1699 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_struct_catch_1_1true__given">wchar_t</link>&#32;<link linkend="_struct_catch_1_1true__given">const</link>&#32;*&gt;&#32;{
1700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01wchar__t_01const_01_5_01_4_1ae7535a1f417ace45ca05e4389334ffeb">convert</link>(<emphasis role="keywordtype">wchar_t</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;str);
1701 &#32;&#32;&#32;&#32;};
1702 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1703 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_struct_catch_1_1true__given">wchar_t</link>&#32;*&gt;&#32;{
1704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01wchar__t_01_5_01_4_1a6112fe324da2a0b3a690071a228ecd71">convert</link>(<emphasis role="keywordtype">wchar_t</emphasis>&#32;*&#32;str);
1705 &#32;&#32;&#32;&#32;};
1706 <emphasis role="preprocessor">#endif</emphasis>
1707 
1708 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TBD:&#32;Should&#32;we&#32;use&#32;`strnlen`&#32;to&#32;ensure&#32;that&#32;we&#32;don&apos;t&#32;go&#32;out&#32;of&#32;the&#32;buffer,</emphasis>
1709 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;while&#32;keeping&#32;string&#32;semantics?</emphasis>
1710 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">int</emphasis>&#32;SZ&gt;
1711 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_struct_catch_1_1true__given">char</link>[<link linkend="_struct_catch_1_1true__given">SZ</link>]&gt;&#32;{
1712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01char_0f_s_z_0e_4_1a095e415534f9145300271befe9853357">convert</link>(<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*&#32;str)&#32;{
1713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;::Catch::Detail::stringify(std::string{&#32;str&#32;});
1714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1715 &#32;&#32;&#32;&#32;};
1716 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">int</emphasis>&#32;SZ&gt;
1717 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_struct_catch_1_1true__given">signed</link>&#32;<link linkend="_struct_catch_1_1true__given">char</link>[<link linkend="_struct_catch_1_1true__given">SZ</link>]&gt;&#32;{
1718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01signed_01char_0f_s_z_0e_4_1a23ac689cc79dbcfe9b1765fe9e25690e">convert</link>(<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*&#32;str)&#32;{
1719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;::Catch::Detail::stringify(std::string{&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const&#32;</emphasis>*<emphasis role="keyword">&gt;</emphasis>(str)&#32;});
1720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1721 &#32;&#32;&#32;&#32;};
1722 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">int</emphasis>&#32;SZ&gt;
1723 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_struct_catch_1_1true__given">unsigned</link>&#32;<link linkend="_struct_catch_1_1true__given">char</link>[<link linkend="_struct_catch_1_1true__given">SZ</link>]&gt;&#32;{
1724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01unsigned_01char_0f_s_z_0e_4_1a590d64c72b0cc75c113f1eea95d52b66">convert</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*&#32;str)&#32;{
1725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;::Catch::Detail::stringify(std::string{&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const&#32;</emphasis>*<emphasis role="keyword">&gt;</emphasis>(str)&#32;});
1726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1727 &#32;&#32;&#32;&#32;};
1728 
1729 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_CPP17_BYTE)</emphasis>
1730 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1731 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>StringMaker&lt;std::byte&gt;&#32;{
1732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">convert</link>(std::byte&#32;value);
1733 &#32;&#32;&#32;&#32;};
1734 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;defined(CATCH_CONFIG_CPP17_BYTE)</emphasis>
1735 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1736 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_struct_catch_1_1true__given">int</link>&gt;&#32;{
1737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01int_01_4_1aab096e55fb7283f6ad47b5ca277e22e8">convert</link>(<emphasis role="keywordtype">int</emphasis>&#32;value);
1738 &#32;&#32;&#32;&#32;};
1739 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1740 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_struct_catch_1_1true__given">long</link>&gt;&#32;{
1741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01long_01_4_1a1c0c56497813e7a6425c5411d5e66447">convert</link>(<emphasis role="keywordtype">long</emphasis>&#32;value);
1742 &#32;&#32;&#32;&#32;};
1743 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1744 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_struct_catch_1_1true__given">long</link>&#32;<link linkend="_struct_catch_1_1true__given">long</link>&gt;&#32;{
1745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01long_01long_01_4_1a7a58929dca2a14c576d7d6d08bc615d2">convert</link>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;value);
1746 &#32;&#32;&#32;&#32;};
1747 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1748 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_struct_catch_1_1true__given">unsigned</link>&#32;<link linkend="_struct_catch_1_1true__given">int</link>&gt;&#32;{
1749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01unsigned_01int_01_4_1aa0ec816ef8a65664b0524d55d08e2fd9">convert</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;value);
1750 &#32;&#32;&#32;&#32;};
1751 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1752 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_struct_catch_1_1true__given">unsigned</link>&#32;<link linkend="_struct_catch_1_1true__given">long</link>&gt;&#32;{
1753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01unsigned_01long_01_4_1ae105dc97e4462a86a61b59667f8423c9">convert</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;value);
1754 &#32;&#32;&#32;&#32;};
1755 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1756 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_struct_catch_1_1true__given">unsigned</link>&#32;<link linkend="_struct_catch_1_1true__given">long</link>&#32;<link linkend="_struct_catch_1_1true__given">long</link>&gt;&#32;{
1757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01unsigned_01long_01long_01_4_1a6a8708af4fc8df3f52d7eab779b6bc6f">convert</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;value);
1758 &#32;&#32;&#32;&#32;};
1759 
1760 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1761 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_struct_catch_1_1true__given">bool</link>&gt;&#32;{
1762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01bool_01_4_1a37e9899c82c4b4515f876f16f8957a77">convert</link>(<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">b</link>);
1763 &#32;&#32;&#32;&#32;};
1764 
1765 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1766 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_struct_catch_1_1true__given">char</link>&gt;&#32;{
1767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01char_01_4_1a4e3db69a12bb83f3ef89251893e65da5">convert</link>(<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">c</link>);
1768 &#32;&#32;&#32;&#32;};
1769 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1770 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_struct_catch_1_1true__given">signed</link>&#32;<link linkend="_struct_catch_1_1true__given">char</link>&gt;&#32;{
1771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01signed_01char_01_4_1a5ec41f32916539dc90130539db8222cf">convert</link>(<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">c</link>);
1772 &#32;&#32;&#32;&#32;};
1773 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1774 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_struct_catch_1_1true__given">unsigned</link>&#32;<link linkend="_struct_catch_1_1true__given">char</link>&gt;&#32;{
1775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01unsigned_01char_01_4_1a7cddb1df26275b9a8e631466eb122f59">convert</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">c</link>);
1776 &#32;&#32;&#32;&#32;};
1777 
1778 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1779 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;std::<link linkend="_struct_catch_1_1true__given">nullptr_t</link>&gt;&#32;{
1780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01std_1_1nullptr__t_01_4_1a131fbb1f5cd68c93aaf30d34e3519e9c">convert</link>(std::nullptr_t);
1781 &#32;&#32;&#32;&#32;};
1782 
1783 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1784 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_struct_catch_1_1true__given">float</link>&gt;&#32;{
1785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01float_01_4_1a7ffacc6fa46a338200f3fbb2ee078648">convert</link>(<emphasis role="keywordtype">float</emphasis>&#32;value);
1786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_catch_1_1_string_maker_3_01float_01_4_1a54ebebe76a755dbe2dd8ad409c329378">precision</link>;
1787 &#32;&#32;&#32;&#32;};
1788 
1789 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1790 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_struct_catch_1_1true__given">double</link>&gt;&#32;{
1791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01double_01_4_1acaa61529acad2462292c747d34e5f3d2">convert</link>(<emphasis role="keywordtype">double</emphasis>&#32;value);
1792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_catch_1_1_string_maker_3_01double_01_4_1a15fa2b093c532ece7f1d0c713ebaee67">precision</link>;
1793 &#32;&#32;&#32;&#32;};
1794 
1795 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1796 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_struct_catch_1_1true__given">T</link>*&gt;&#32;{
1797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
1798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01_t_01_5_01_4_1a2adbc75c99d71b8323f4052bcb0815c9">convert</link>(<link linkend="_struct_catch_1_1true__given">U</link>*&#32;<link linkend="_struct_catch_1_1true__given">p</link>)&#32;{
1799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_catch_1_1true__given">p</link>)&#32;{
1800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;::Catch::Detail::rawMemoryToString(<link linkend="_struct_catch_1_1true__given">p</link>);
1801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;nullptr&quot;</emphasis>;
1803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1805 &#32;&#32;&#32;&#32;};
1806 
1807 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;R,&#32;<emphasis role="keyword">typename</emphasis>&#32;C&gt;
1808 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_struct_catch_1_1true__given">R</link>&#32;<link linkend="_struct_catch_1_1true__given">C</link>::*&gt;&#32;{
1809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01_r_01_c_1_1_5_01_4_1af69c15e0b406e945777137fe4a333731">convert</link>(<link linkend="_struct_catch_1_1true__given">R</link>&#32;<link linkend="_struct_catch_1_1true__given">C</link>::*&#32;<link linkend="_struct_catch_1_1true__given">p</link>)&#32;{
1810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_catch_1_1true__given">p</link>)&#32;{
1811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;::Catch::Detail::rawMemoryToString(<link linkend="_struct_catch_1_1true__given">p</link>);
1812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;nullptr&quot;</emphasis>;
1814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1816 &#32;&#32;&#32;&#32;};
1817 
1818 <emphasis role="preprocessor">#if&#32;defined(_MANAGED)</emphasis>
1819 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1820 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>StringMaker&lt;T^&gt;&#32;{
1821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;convert(&#32;T^&#32;ref&#32;)&#32;{
1822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;::Catch::Detail::clrReferenceToString(ref);
1823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1824 &#32;&#32;&#32;&#32;};
1825 <emphasis role="preprocessor">#endif</emphasis>
1826 
1827 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
1828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;Sentinel&#32;=&#32;InputIterator&gt;
1829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_namespace_catch_1_1_detail_1ac954cf158347a76a5b0c3f4fa9a9fa52">rangeToString</link>(<link linkend="_struct_catch_1_1true__given">InputIterator</link>&#32;<link linkend="_struct_catch_1_1true__given">first</link>,&#32;<link linkend="_struct_catch_1_1true__given">Sentinel</link>&#32;<link linkend="_struct_catch_1_1true__given">last</link>)&#32;{
1830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_reusable_string_stream">ReusableStringStream</link>&#32;<link linkend="_struct_catch_1_1true__given">rss</link>;
1831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">rss</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;{&#32;&quot;</emphasis>;
1832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_catch_1_1true__given">first</link>&#32;!=&#32;<link linkend="_struct_catch_1_1true__given">last</link>)&#32;{
1833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">rss</link>&#32;&lt;&lt;&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">::Catch::Detail::stringify</link>(*<link linkend="_struct_catch_1_1true__given">first</link>);
1834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(++<link linkend="_struct_catch_1_1true__given">first</link>;&#32;<link linkend="_struct_catch_1_1true__given">first</link>&#32;!=&#32;<link linkend="_struct_catch_1_1true__given">last</link>;&#32;++<link linkend="_struct_catch_1_1true__given">first</link>)
1835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">rss</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">::Catch::Detail::stringify</link>(*<link linkend="_struct_catch_1_1true__given">first</link>);
1836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">rss</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;}&quot;</emphasis>;
1838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">rss</link>.str();
1839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1840 &#32;&#32;&#32;&#32;}
1841 
1842 <emphasis role="preprocessor">#ifdef&#32;__OBJC__</emphasis>
1843 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1844 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>StringMaker&lt;NSString*&gt;&#32;{
1845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;convert(NSString&#32;*&#32;nsstring)&#32;{
1846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!nsstring)
1847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;nil&quot;</emphasis>;
1848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string(<emphasis role="stringliteral">&quot;@&quot;</emphasis>)&#32;+&#32;[nsstring&#32;UTF8String];
1849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1850 &#32;&#32;&#32;&#32;};
1851 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1852 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>StringMaker&lt;NSObject*&gt;&#32;{
1853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;convert(NSObject*&#32;nsObject)&#32;{
1854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;::Catch::Detail::stringify([nsObject&#32;description]);
1855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1856 
1857 &#32;&#32;&#32;&#32;};
1858 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
1859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">stringify</link>(&#32;NSString*&#32;nsstring&#32;)&#32;{
1860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;NSString*&gt;::convert</link>(&#32;nsstring&#32;);
1861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1862 
1863 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Detail</emphasis>
1864 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__OBJC__</emphasis>
1865 
1866 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
1867 
1869 <emphasis role="comment">//&#32;Separate&#32;std-lib&#32;types&#32;stringification,&#32;so&#32;it&#32;can&#32;be&#32;selectively&#32;enabled</emphasis>
1870 <emphasis role="comment">//&#32;This&#32;means&#32;that&#32;we&#32;do&#32;not&#32;bring&#32;in</emphasis>
1871 
1872 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ENABLE_ALL_STRINGMAKERS)</emphasis>
1873 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_CONFIG_ENABLE_PAIR_STRINGMAKER</emphasis>
1874 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_CONFIG_ENABLE_TUPLE_STRINGMAKER</emphasis>
1875 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_CONFIG_ENABLE_VARIANT_STRINGMAKER</emphasis>
1876 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER</emphasis>
1877 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_CONFIG_ENABLE_OPTIONAL_STRINGMAKER</emphasis>
1878 <emphasis role="preprocessor">#endif</emphasis>
1879 
1880 <emphasis role="comment">//&#32;Separate&#32;std::pair&#32;specialization</emphasis>
1881 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ENABLE_PAIR_STRINGMAKER)</emphasis>
1882 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
1883 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
1884 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
1885 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>StringMaker&lt;std::pair&lt;T1,&#32;T2&gt;&#32;&gt;&#32;{
1886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">convert</link>(<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;T1,&#32;T2&gt;&amp;&#32;pair)&#32;{
1887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReusableStringStream&#32;rss;
1888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;{&#32;&quot;</emphasis>
1889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">::Catch::Detail::stringify</link>(pair.first)
1890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>
1891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">::Catch::Detail::stringify</link>(pair.second)
1892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;}&quot;</emphasis>;
1893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rss.str();
1894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1895 &#32;&#32;&#32;&#32;};
1896 }
1897 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_ENABLE_PAIR_STRINGMAKER</emphasis>
1898 
1899 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ENABLE_OPTIONAL_STRINGMAKER)&#32;&amp;&amp;&#32;defined(CATCH_CONFIG_CPP17_OPTIONAL)</emphasis>
1900 <emphasis role="preprocessor">#include&#32;&lt;optional&gt;</emphasis>
1901 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
1902 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1903 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>StringMaker&lt;std::optional&lt;T&gt;&#32;&gt;&#32;{
1904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">convert</link>(<emphasis role="keyword">const</emphasis>&#32;std::optional&lt;T&gt;&amp;&#32;optional)&#32;{
1905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReusableStringStream&#32;rss;
1906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(optional.has_value())&#32;{
1907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">::Catch::Detail::stringify</link>(*optional);
1908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;{&#32;}&quot;</emphasis>;
1910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rss.str();
1912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1913 &#32;&#32;&#32;&#32;};
1914 }
1915 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_ENABLE_OPTIONAL_STRINGMAKER</emphasis>
1916 
1917 <emphasis role="comment">//&#32;Separate&#32;std::tuple&#32;specialization</emphasis>
1918 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ENABLE_TUPLE_STRINGMAKER)</emphasis>
1919 <emphasis role="preprocessor">#include&#32;&lt;tuple&gt;</emphasis>
1920 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
1921 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
1922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;
1923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;Tuple,
1924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;N&#32;=&#32;0,
1925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;(N&#32;&lt;&#32;std::tuple_size&lt;Tuple&gt;::value)
1926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;
1927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;TupleElementPrinter&#32;{
1928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;print(<emphasis role="keyword">const</emphasis>&#32;Tuple&amp;&#32;tuple,&#32;std::ostream&amp;&#32;os)&#32;{
1929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;(N&#32;?&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>)
1930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">::Catch::Detail::stringify</link>(std::get&lt;N&gt;(tuple));
1931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TupleElementPrinter&lt;Tuple,&#32;N&#32;+&#32;1&gt;::print(tuple,&#32;os);
1932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
1934 
1935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;
1936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;Tuple,
1937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;N
1938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;
1939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>TupleElementPrinter&lt;Tuple,&#32;N,&#32;false&gt;&#32;{
1940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;print(<emphasis role="keyword">const</emphasis>&#32;Tuple&amp;,&#32;std::ostream&amp;)&#32;{}
1941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
1942 
1943 &#32;&#32;&#32;&#32;}
1944 
1945 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;...Types&gt;
1946 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>StringMaker&lt;std::tuple&lt;Types...&gt;&gt;&#32;{
1947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">convert</link>(<emphasis role="keyword">const</emphasis>&#32;std::tuple&lt;Types...&gt;&amp;&#32;tuple)&#32;{
1948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReusableStringStream&#32;rss;
1949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;{&apos;</emphasis>;
1950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Detail::TupleElementPrinter&lt;std::tuple&lt;Types...&gt;&gt;::print(tuple,&#32;rss.get());
1951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;}&quot;</emphasis>;
1952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rss.str();
1953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1954 &#32;&#32;&#32;&#32;};
1955 }
1956 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_ENABLE_TUPLE_STRINGMAKER</emphasis>
1957 
1958 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ENABLE_VARIANT_STRINGMAKER)&#32;&amp;&amp;&#32;defined(CATCH_CONFIG_CPP17_VARIANT)</emphasis>
1959 <emphasis role="preprocessor">#include&#32;&lt;variant&gt;</emphasis>
1960 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
1961 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1962 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>StringMaker&lt;std::monostate&gt;&#32;{
1963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">convert</link>(<emphasis role="keyword">const</emphasis>&#32;std::monostate&amp;)&#32;{
1964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;{&#32;}&quot;</emphasis>;
1965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1966 &#32;&#32;&#32;&#32;};
1967 
1968 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;Elements&gt;
1969 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>StringMaker&lt;std::variant&lt;Elements...&gt;&gt;&#32;{
1970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">convert</link>(<emphasis role="keyword">const</emphasis>&#32;std::variant&lt;Elements...&gt;&amp;&#32;variant)&#32;{
1971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(variant.valueless_by_exception())&#32;{
1972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;{valueless&#32;variant}&quot;</emphasis>;
1973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::visit(
1975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;value)&#32;{
1976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;::Catch::Detail::stringify(value);
1977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;variant
1979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
1980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1982 &#32;&#32;&#32;&#32;};
1983 }
1984 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_ENABLE_VARIANT_STRINGMAKER</emphasis>
1985 
1986 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
1987 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Import&#32;begin/&#32;end&#32;from&#32;std&#32;here</emphasis>
1988 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::begin;
1989 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::end;
1990 
1991 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>detail&#32;{
1992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&gt;
1993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1detail_1_1void__type">void_type</link>&#32;{
1994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_struct_catch_1_1true__given">type</link>&#32;=&#32;<link linkend="_struct_catch_1_1true__given">void</link>;
1995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
1996 
1997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
1998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1detail_1_1is__range__impl">is_range_impl</link>&#32;:&#32;std::false_type&#32;{
1999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
2000 
2001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1true__given">is_range_impl&lt;T, typename void_type&lt;decltype(begin(std::declval&lt;T&gt;</link>()))&gt;::type&gt;&#32;:&#32;std::true_type&#32;{
2003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
2004 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
2005 
2006 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2007 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1is__range">is_range</link>&#32;:&#32;<link linkend="_struct_catch_1_1detail_1_1is__range__impl">detail::is_range_impl</link>&lt;T&gt;&#32;{
2008 &#32;&#32;&#32;&#32;};
2009 
2010 <emphasis role="preprocessor">#if&#32;defined(_MANAGED)&#32;</emphasis><emphasis role="comment">//&#32;Managed&#32;types&#32;are&#32;never&#32;ranges</emphasis>
2011 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2012 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1is__range">is_range</link>&lt;<link linkend="_struct_catch_1_1true__given">T</link>^&gt;&#32;{
2013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;value&#32;=&#32;<emphasis role="keyword">false</emphasis>;
2014 &#32;&#32;&#32;&#32;};
2015 <emphasis role="preprocessor">#endif</emphasis>
2016 
2017 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Range&gt;
2018 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_namespace_catch_1af13494e925a793e3e7143c6ce6f442c2">rangeToString</link>(&#32;<link linkend="_struct_catch_1_1true__given">Range</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;range&#32;)&#32;{
2019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;::Catch::Detail::rangeToString(&#32;begin(&#32;range&#32;),&#32;end(&#32;range&#32;)&#32;);
2020 &#32;&#32;&#32;&#32;}
2021 
2022 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Handle&#32;vector&lt;bool&gt;&#32;specially</emphasis>
2023 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Allocator&gt;
2024 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_namespace_catch_1af13494e925a793e3e7143c6ce6f442c2">rangeToString</link>(&#32;std::vector&lt;bool,&#32;Allocator&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">v</link>&#32;)&#32;{
2025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_reusable_string_stream">ReusableStringStream</link>&#32;<link linkend="_struct_catch_1_1true__given">rss</link>;
2026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">rss</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;{&#32;&quot;</emphasis>;
2027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">first</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
2028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">b</link>&#32;:&#32;<link linkend="_struct_catch_1_1true__given">v</link>&#32;)&#32;{
2029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_struct_catch_1_1true__given">first</link>&#32;)
2030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">first</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
2031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">rss</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>;
2033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">rss</link>&#32;&lt;&lt;&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">::Catch::Detail::stringify</link>(&#32;<link linkend="_struct_catch_1_1true__given">b</link>&#32;);
2034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">rss</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;}&quot;</emphasis>;
2036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">rss</link>.str();
2037 &#32;&#32;&#32;&#32;}
2038 
2039 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;R&gt;
2040 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_struct_catch_1_1true__given">R</link>,&#32;<link linkend="_struct_catch_1_1true__given">typename</link>&#32;std::<link linkend="_struct_catch_1_1true__given">enable_if</link>&lt;is_range&lt;R&gt;::value&#32;&amp;&amp;&#32;!::Catch::Detail::IsStreamInsertable&lt;R&gt;::value&gt;::type&gt;&#32;{
2041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01_r_00_01typename_01std_1_1enable__if_3_01is__range_3_01_r_01_4536d8fedfff6d62432b3dc59b56e1380_1ac6088db00103a7482fb9bc04b1603362">convert</link>(&#32;<link linkend="_struct_catch_1_1true__given">R</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;range&#32;)&#32;{
2042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1af13494e925a793e3e7143c6ce6f442c2">rangeToString</link>(&#32;range&#32;);
2043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2044 &#32;&#32;&#32;&#32;};
2045 
2046 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keywordtype">int</emphasis>&#32;SZ&gt;
2047 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_struct_catch_1_1true__given">T</link>[<link linkend="_struct_catch_1_1true__given">SZ</link>]&gt;&#32;{
2048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01_t_0f_s_z_0e_4_1a3698cea2c24d8649ec9ecb5fa679eeb7">convert</link>(<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>(&amp;<link linkend="_struct_catch_1_1true__given">arr</link>)[<link linkend="_struct_catch_1_1true__given">SZ</link>])&#32;{
2049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1af13494e925a793e3e7143c6ce6f442c2">rangeToString</link>(<link linkend="_struct_catch_1_1true__given">arr</link>);
2050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2051 &#32;&#32;&#32;&#32;};
2052 
2053 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
2054 
2055 <emphasis role="comment">//&#32;Separate&#32;std::chrono::duration&#32;specialization</emphasis>
2056 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER)</emphasis>
2057 <emphasis role="preprocessor">#include&#32;&lt;ctime&gt;</emphasis>
2058 <emphasis role="preprocessor">#include&#32;&lt;ratio&gt;</emphasis>
2059 <emphasis role="preprocessor">#include&#32;&lt;chrono&gt;</emphasis>
2060 
2061 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
2062 
2063 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;Ratio&gt;
2064 <emphasis role="keyword">struct&#32;</emphasis>ratio_string&#32;{
2065 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;symbol();
2066 };
2067 
2068 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;Ratio&gt;
2069 std::string&#32;ratio_string&lt;Ratio&gt;::symbol()&#32;{
2070 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_reusable_string_stream">Catch::ReusableStringStream</link>&#32;rss;
2071 &#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;[&apos;</emphasis>&#32;&lt;&lt;&#32;Ratio::num&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>
2072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Ratio::den&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;]&apos;</emphasis>;
2073 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rss.<link linkend="_class_catch_1_1_reusable_string_stream_1a0e9ecf260b2a5d35f4886ef0d51f6270">str</link>();
2074 }
2075 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
2076 <emphasis role="keyword">struct&#32;</emphasis>ratio_string&lt;std::atto&gt;&#32;{
2077 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;symbol();
2078 };
2079 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
2080 <emphasis role="keyword">struct&#32;</emphasis>ratio_string&lt;std::femto&gt;&#32;{
2081 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;symbol();
2082 };
2083 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
2084 <emphasis role="keyword">struct&#32;</emphasis>ratio_string&lt;std::pico&gt;&#32;{
2085 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;symbol();
2086 };
2087 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
2088 <emphasis role="keyword">struct&#32;</emphasis>ratio_string&lt;std::nano&gt;&#32;{
2089 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;symbol();
2090 };
2091 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
2092 <emphasis role="keyword">struct&#32;</emphasis>ratio_string&lt;std::micro&gt;&#32;{
2093 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;symbol();
2094 };
2095 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
2096 <emphasis role="keyword">struct&#32;</emphasis>ratio_string&lt;std::milli&gt;&#32;{
2097 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;symbol();
2098 };
2099 
2101 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::chrono::duration&#32;specializations</emphasis>
2102 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Value,&#32;<emphasis role="keyword">typename</emphasis>&#32;Ratio&gt;
2103 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>StringMaker&lt;std::chrono::duration&lt;Value,&#32;Ratio&gt;&gt;&#32;{
2104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">convert</link>(std::chrono::duration&lt;Value,&#32;Ratio&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;duration)&#32;{
2105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReusableStringStream&#32;rss;
2106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;duration.count()&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;&lt;&lt;&#32;ratio_string&lt;Ratio&gt;::symbol()&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;s&apos;</emphasis>;
2107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rss.<link linkend="_class_catch_1_1_reusable_string_stream_1a0e9ecf260b2a5d35f4886ef0d51f6270">str</link>();
2108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2109 &#32;&#32;&#32;&#32;};
2110 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Value&gt;
2111 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>StringMaker&lt;std::chrono::duration&lt;Value,&#32;std::ratio&lt;1&gt;&gt;&gt;&#32;{
2112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">convert</link>(std::chrono::duration&lt;Value,&#32;std::ratio&lt;1&gt;&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;duration)&#32;{
2113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReusableStringStream&#32;rss;
2114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;duration.count()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;s&quot;</emphasis>;
2115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rss.str();
2116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2117 &#32;&#32;&#32;&#32;};
2118 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Value&gt;
2119 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>StringMaker&lt;std::chrono::duration&lt;Value,&#32;std::ratio&lt;60&gt;&gt;&gt;&#32;{
2120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">convert</link>(std::chrono::duration&lt;Value,&#32;std::ratio&lt;60&gt;&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;duration)&#32;{
2121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReusableStringStream&#32;rss;
2122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;duration.count()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;m&quot;</emphasis>;
2123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rss.str();
2124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2125 &#32;&#32;&#32;&#32;};
2126 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Value&gt;
2127 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>StringMaker&lt;std::chrono::duration&lt;Value,&#32;std::ratio&lt;3600&gt;&gt;&gt;&#32;{
2128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">convert</link>(std::chrono::duration&lt;Value,&#32;std::ratio&lt;3600&gt;&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;duration)&#32;{
2129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReusableStringStream&#32;rss;
2130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;duration.count()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;h&quot;</emphasis>;
2131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rss.str();
2132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2133 &#32;&#32;&#32;&#32;};
2134 
2136 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::chrono::time_point&#32;specialization</emphasis>
2137 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Generic&#32;time_point&#32;cannot&#32;be&#32;specialized,&#32;only&#32;std::chrono::time_point&lt;system_clock&gt;</emphasis>
2138 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;Duration&gt;
2139 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>StringMaker&lt;std::chrono::time_point&lt;Clock,&#32;Duration&gt;&gt;&#32;{
2140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">convert</link>(std::chrono::time_point&lt;Clock,&#32;Duration&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;time_point)&#32;{
2141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;::Catch::Detail::stringify(time_point.time_since_epoch())&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;since&#32;epoch&quot;</emphasis>;
2142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2143 &#32;&#32;&#32;&#32;};
2144 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::chrono::time_point&lt;system_clock&gt;&#32;specialization</emphasis>
2145 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Duration&gt;
2146 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>StringMaker&lt;std::chrono::time_point&lt;std::chrono::system_clock,&#32;Duration&gt;&gt;&#32;{
2147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">convert</link>(std::chrono::time_point&lt;std::chrono::system_clock,&#32;Duration&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;time_point)&#32;{
2148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;converted&#32;=&#32;std::chrono::system_clock::to_time_t(time_point);
2149 
2150 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
2151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::tm&#32;timeInfo&#32;=&#32;{};
2152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;gmtime_s(&amp;timeInfo,&#32;&amp;converted);
2153 <emphasis role="preprocessor">#else</emphasis>
2154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::tm*&#32;timeInfo&#32;=&#32;std::gmtime(&amp;converted);
2155 <emphasis role="preprocessor">#endif</emphasis>
2156 
2157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;timeStampSize&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="stringliteral">&quot;2017-01-16T17:06:45Z&quot;</emphasis>);
2158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;timeStamp[timeStampSize];
2159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;<emphasis role="keyword">const</emphasis>&#32;fmt&#32;=&#32;<emphasis role="stringliteral">&quot;%Y-%m-%dT%H:%M:%SZ&quot;</emphasis>;
2160 
2161 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
2162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::strftime(timeStamp,&#32;timeStampSize,&#32;fmt,&#32;&amp;timeInfo);
2163 <emphasis role="preprocessor">#else</emphasis>
2164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::strftime(timeStamp,&#32;timeStampSize,&#32;fmt,&#32;timeInfo);
2165 <emphasis role="preprocessor">#endif</emphasis>
2166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string(timeStamp);
2167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2168 &#32;&#32;&#32;&#32;};
2169 }
2170 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER</emphasis>
2171 
2172 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_REGISTER_ENUM(&#32;enumName,&#32;...&#32;)&#32;\</emphasis>
2173 <emphasis role="preprocessor">namespace&#32;Catch&#32;{&#32;\</emphasis>
2174 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;&gt;&#32;struct&#32;StringMaker&lt;enumName&gt;&#32;{&#32;\</emphasis>
2175 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;std::string&#32;convert(&#32;enumName&#32;value&#32;)&#32;{&#32;\</emphasis>
2176 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;const&#32;auto&amp;&#32;enumInfo&#32;=&#32;::Catch::getMutableRegistryHub().getMutableEnumValuesRegistry().registerEnum(&#32;#enumName,&#32;#__VA_ARGS__,&#32;{&#32;__VA_ARGS__&#32;}&#32;);&#32;\</emphasis>
2177 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;static_cast&lt;std::string&gt;(enumInfo.lookup(&#32;static_cast&lt;int&gt;(&#32;value&#32;)&#32;));&#32;\</emphasis>
2178 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
2179 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;};&#32;\</emphasis>
2180 <emphasis role="preprocessor">}</emphasis>
2181 
2182 <emphasis role="preprocessor">#define&#32;CATCH_REGISTER_ENUM(&#32;enumName,&#32;...&#32;)&#32;INTERNAL_CATCH_REGISTER_ENUM(&#32;enumName,&#32;__VA_ARGS__&#32;)</emphasis>
2183 
2184 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
2185 <emphasis role="preprocessor">#pragma&#32;warning(pop)</emphasis>
2186 <emphasis role="preprocessor">#endif</emphasis>
2187 
2188 <emphasis role="comment">//&#32;end&#32;catch_tostring.h</emphasis>
2189 <emphasis role="preprocessor">#include&#32;&lt;iosfwd&gt;</emphasis>
2190 
2191 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
2192 <emphasis role="preprocessor">#pragma&#32;warning(push)</emphasis>
2193 <emphasis role="preprocessor">#pragma&#32;warning(disable:4389)&#32;</emphasis><emphasis role="comment">//&#32;&apos;==&apos;&#32;:&#32;signed/unsigned&#32;mismatch</emphasis>
2194 <emphasis role="preprocessor">#pragma&#32;warning(disable:4018)&#32;</emphasis><emphasis role="comment">//&#32;more&#32;&quot;signed/unsigned&#32;mismatch&quot;</emphasis>
2195 <emphasis role="preprocessor">#pragma&#32;warning(disable:4312)&#32;</emphasis><emphasis role="comment">//&#32;Converting&#32;int&#32;to&#32;T*&#32;using&#32;reinterpret_cast&#32;(issue&#32;on&#32;x64&#32;platform)</emphasis>
2196 <emphasis role="preprocessor">#pragma&#32;warning(disable:4180)&#32;</emphasis><emphasis role="comment">//&#32;qualifier&#32;applied&#32;to&#32;function&#32;type&#32;has&#32;no&#32;meaning</emphasis>
2197 <emphasis role="preprocessor">#pragma&#32;warning(disable:4800)&#32;</emphasis><emphasis role="comment">//&#32;Forcing&#32;result&#32;to&#32;true&#32;or&#32;false</emphasis>
2198 <emphasis role="preprocessor">#endif</emphasis>
2199 
2200 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
2201 
2202 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_i_transient_expression">ITransientExpression</link>&#32;{
2203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_struct_catch_1_1_i_transient_expression_1a3b436e13a0a6d3522bbf70d4e31deb22">isBinaryExpression</link>()&#32;<link linkend="_struct_catch_1_1true__given">const</link>&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_i_transient_expression_1a75ce48da824d514d08152d396abb28d8">m_isBinaryExpression</link>;&#32;}
2204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_struct_catch_1_1_i_transient_expression_1a101c7db86c87eff93a8ff496720e6320">getResult</link>()&#32;<link linkend="_struct_catch_1_1true__given">const</link>&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_i_transient_expression_1a4646e2b5e0156e913653ec3b9b60c942">m_result</link>;&#32;}
2205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_transient_expression_1aabe1889df9c6e639a24afb08d8a0fe9e">streamReconstructedExpression</link>(&#32;std::ostream&#32;&amp;<link linkend="_struct_catch_1_1true__given">os</link>&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
2206 
2207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_transient_expression_1aafe69572b7ed884e63ec81f58d4afd8c">ITransientExpression</link>(&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_i_transient_expression_1a3b436e13a0a6d3522bbf70d4e31deb22">isBinaryExpression</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">result</link>&#32;)
2208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_transient_expression_1a75ce48da824d514d08152d396abb28d8">m_isBinaryExpression</link>(&#32;<link linkend="_struct_catch_1_1_i_transient_expression_1a3b436e13a0a6d3522bbf70d4e31deb22">isBinaryExpression</link>&#32;),
2209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_transient_expression_1a4646e2b5e0156e913653ec3b9b60c942">m_result</link>(&#32;<link linkend="_struct_catch_1_1true__given">result</link>&#32;)
2210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
2211 
2212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;don&apos;t&#32;actually&#32;need&#32;a&#32;virtual&#32;destructor,&#32;but&#32;many&#32;static&#32;analysers</emphasis>
2213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;complain&#32;if&#32;it&apos;s&#32;not&#32;here&#32;:-(</emphasis>
2214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_i_transient_expression_1aeadf426de589938c4964fe4068eeee77">~ITransientExpression</link>();
2215 
2216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_i_transient_expression_1a75ce48da824d514d08152d396abb28d8">m_isBinaryExpression</link>;
2217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_i_transient_expression_1a4646e2b5e0156e913653ec3b9b60c942">m_result</link>;
2218 
2219 &#32;&#32;&#32;&#32;};
2220 
2221 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1a520110c31f26cf9892595772ab814fc0">formatReconstructedExpression</link>(&#32;std::ostream&#32;&amp;<link linkend="_struct_catch_1_1true__given">os</link>,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<link linkend="_struct_catch_1_1true__given">op</link>,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;);
2222 
2223 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;LhsT,&#32;<emphasis role="keyword">typename</emphasis>&#32;RhsT&gt;
2224 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_catch_1_1_i_transient_expression">ITransientExpression</link>&#32;{
2225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">LhsT</link>&#32;<link linkend="_class_catch_1_1_binary_expr_1a306b29e77b48f9c538c5031a59adc4ce">m_lhs</link>;
2226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<link linkend="_class_catch_1_1_binary_expr_1ab21dea40c53fd64d4f7a073dbe93ec95">m_op</link>;
2227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">RhsT</link>&#32;<link linkend="_class_catch_1_1_binary_expr_1a54cb1629bf304ebe0c1560f4cc2bc186">m_rhs</link>;
2228 
2229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_binary_expr_1af998022712d4bd3e4fc7ab9b8a38b445">streamReconstructedExpression</link>(&#32;std::ostream&#32;&amp;<link linkend="_struct_catch_1_1true__given">os</link>&#32;)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
2230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a520110c31f26cf9892595772ab814fc0">formatReconstructedExpression</link>
2231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<link linkend="_struct_catch_1_1true__given">os</link>,&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">Catch::Detail::stringify</link>(&#32;<link linkend="_class_catch_1_1_binary_expr_1a306b29e77b48f9c538c5031a59adc4ce">m_lhs</link>&#32;),&#32;<link linkend="_class_catch_1_1_binary_expr_1ab21dea40c53fd64d4f7a073dbe93ec95">m_op</link>,&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">Catch::Detail::stringify</link>(&#32;<link linkend="_class_catch_1_1_binary_expr_1a54cb1629bf304ebe0c1560f4cc2bc186">m_rhs</link>&#32;)&#32;);
2232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2233 
2234 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_binary_expr_1a657d66346aef97a760c22776fe6008b6">BinaryExpr</link>(&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">comparisonResult</link>,&#32;<link linkend="_struct_catch_1_1true__given">LhsT</link>&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<link linkend="_struct_catch_1_1true__given">op</link>,&#32;<link linkend="_struct_catch_1_1true__given">RhsT</link>&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)
2236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_transient_expression">ITransientExpression</link>{&#32;<link linkend="_struct_catch_1_1true__given">true</link>,&#32;<link linkend="_struct_catch_1_1true__given">comparisonResult</link>&#32;},
2237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_binary_expr_1a306b29e77b48f9c538c5031a59adc4ce">m_lhs</link>(&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>&#32;),
2238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_binary_expr_1ab21dea40c53fd64d4f7a073dbe93ec95">m_op</link>(&#32;<link linkend="_struct_catch_1_1true__given">op</link>&#32;),
2239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_binary_expr_1a54cb1629bf304ebe0c1560f4cc2bc186">m_rhs</link>(&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)
2240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
2241 
2242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_binary_expr_1ae4fba62be6063010bc33d0988ff7d8d5">operator &amp;&amp; </link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&#32;{
2244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_struct_catch_1_1always__false">always_false&lt;T&gt;::value</link>,
2245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;chained&#32;comparisons&#32;are&#32;not&#32;supported&#32;inside&#32;assertions,&#32;&quot;</emphasis>
2246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;wrap&#32;the&#32;expression&#32;inside&#32;parentheses,&#32;or&#32;decompose&#32;it&quot;</emphasis>);
2247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2248 
2249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_binary_expr_1a331e53968b1a2f92827c35721cc7eded">operator || </link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&#32;{
2251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_struct_catch_1_1always__false">always_false&lt;T&gt;::value</link>,
2252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;chained&#32;comparisons&#32;are&#32;not&#32;supported&#32;inside&#32;assertions,&#32;&quot;</emphasis>
2253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;wrap&#32;the&#32;expression&#32;inside&#32;parentheses,&#32;or&#32;decompose&#32;it&quot;</emphasis>);
2254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2255 
2256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_binary_expr_1a245bffd2aab2f560814739986710aaf1">operator == </link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&#32;{
2258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_struct_catch_1_1always__false">always_false&lt;T&gt;::value</link>,
2259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;chained&#32;comparisons&#32;are&#32;not&#32;supported&#32;inside&#32;assertions,&#32;&quot;</emphasis>
2260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;wrap&#32;the&#32;expression&#32;inside&#32;parentheses,&#32;or&#32;decompose&#32;it&quot;</emphasis>);
2261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2262 
2263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_binary_expr_1ad06dd2c9fc1dd77fe8d8e51440c14ff6">operator != </link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&#32;{
2265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_struct_catch_1_1always__false">always_false&lt;T&gt;::value</link>,
2266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;chained&#32;comparisons&#32;are&#32;not&#32;supported&#32;inside&#32;assertions,&#32;&quot;</emphasis>
2267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;wrap&#32;the&#32;expression&#32;inside&#32;parentheses,&#32;or&#32;decompose&#32;it&quot;</emphasis>);
2268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2269 
2270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_binary_expr_1acff324c7d285cbee7efa9fbe83955638">operator &gt; </link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&#32;{
2272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_struct_catch_1_1always__false">always_false&lt;T&gt;::value</link>,
2273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;chained&#32;comparisons&#32;are&#32;not&#32;supported&#32;inside&#32;assertions,&#32;&quot;</emphasis>
2274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;wrap&#32;the&#32;expression&#32;inside&#32;parentheses,&#32;or&#32;decompose&#32;it&quot;</emphasis>);
2275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2276 
2277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_binary_expr_1a7e6c3dcf59b3cd51e7c82355da3ef451">operator &lt; </link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&#32;{
2279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_struct_catch_1_1always__false">always_false&lt;T&gt;::value</link>,
2280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;chained&#32;comparisons&#32;are&#32;not&#32;supported&#32;inside&#32;assertions,&#32;&quot;</emphasis>
2281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;wrap&#32;the&#32;expression&#32;inside&#32;parentheses,&#32;or&#32;decompose&#32;it&quot;</emphasis>);
2282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2283 
2284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_binary_expr_1a67901ddb9afd83961fb4e65ea3d75050">operator &gt;= </link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&#32;{
2286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_struct_catch_1_1always__false">always_false&lt;T&gt;::value</link>,
2287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;chained&#32;comparisons&#32;are&#32;not&#32;supported&#32;inside&#32;assertions,&#32;&quot;</emphasis>
2288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;wrap&#32;the&#32;expression&#32;inside&#32;parentheses,&#32;or&#32;decompose&#32;it&quot;</emphasis>);
2289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2290 
2291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_binary_expr_1a5590a2c5f5074ca2509c09b92bfcdf57">operator &lt;= </link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&#32;{
2293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_struct_catch_1_1always__false">always_false&lt;T&gt;::value</link>,
2294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;chained&#32;comparisons&#32;are&#32;not&#32;supported&#32;inside&#32;assertions,&#32;&quot;</emphasis>
2295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;wrap&#32;the&#32;expression&#32;inside&#32;parentheses,&#32;or&#32;decompose&#32;it&quot;</emphasis>);
2296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2297 &#32;&#32;&#32;&#32;};
2298 
2299 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;LhsT&gt;
2300 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_unary_expr">UnaryExpr</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_catch_1_1_i_transient_expression">ITransientExpression</link>&#32;{
2301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">LhsT</link>&#32;<link linkend="_class_catch_1_1_unary_expr_1a7b6e97e576377dd60c77ab551a180325">m_lhs</link>;
2302 
2303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_unary_expr_1aaabf30455a996c80675c0f388a6e4110">streamReconstructedExpression</link>(&#32;std::ostream&#32;&amp;<link linkend="_struct_catch_1_1true__given">os</link>&#32;)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
2304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">os</link>&#32;&lt;&lt;&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">Catch::Detail::stringify</link>(&#32;<link linkend="_class_catch_1_1_unary_expr_1a7b6e97e576377dd60c77ab551a180325">m_lhs</link>&#32;);
2305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2306 
2307 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_class_catch_1_1_unary_expr_1ae02f666a1e64da728628aa2033e1d6e7">UnaryExpr</link>(&#32;<link linkend="_struct_catch_1_1true__given">LhsT</link>&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>&#32;)
2309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_transient_expression">ITransientExpression</link>{&#32;<link linkend="_struct_catch_1_1true__given">false</link>,&#32;<link linkend="_struct_catch_1_1true__given">static_cast</link>&lt;<link linkend="_struct_catch_1_1true__given">bool</link>&gt;(<link linkend="_struct_catch_1_1true__given">lhs</link>)&#32;},
2310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_unary_expr_1a7b6e97e576377dd60c77ab551a180325">m_lhs</link>(&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>&#32;)
2311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
2312 &#32;&#32;&#32;&#32;};
2313 
2314 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Specialised&#32;comparison&#32;functions&#32;to&#32;handle&#32;equality&#32;comparisons&#32;between&#32;ints&#32;and&#32;pointers&#32;(NULL&#32;deduces&#32;as&#32;an&#32;int)</emphasis>
2315 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;LhsT,&#32;<emphasis role="keyword">typename</emphasis>&#32;RhsT&gt;
2316 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1af89b8df30cfaf09abd048c6ff67359ee">compareEqual</link>(&#32;<link linkend="_struct_catch_1_1true__given">LhsT</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<link linkend="_struct_catch_1_1true__given">RhsT</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="_struct_catch_1_1true__given">lhs</link>&#32;==&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>);&#32;}
2317 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2318 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1af89b8df30cfaf09abd048c6ff67359ee">compareEqual</link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>*&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>&#32;==&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">const</link>*<emphasis role="keyword">&gt;</emphasis>(&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;);&#32;}
2319 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2320 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1af89b8df30cfaf09abd048c6ff67359ee">compareEqual</link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>*&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>&#32;==&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">const</link>*<emphasis role="keyword">&gt;</emphasis>(&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;);&#32;}
2321 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2322 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1af89b8df30cfaf09abd048c6ff67359ee">compareEqual</link>(&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<link linkend="_struct_catch_1_1true__given">T</link>*&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">const</link>*<emphasis role="keyword">&gt;</emphasis>(&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>&#32;)&#32;==&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>;&#32;}
2323 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2324 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1af89b8df30cfaf09abd048c6ff67359ee">compareEqual</link>(&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<link linkend="_struct_catch_1_1true__given">T</link>*&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">const</link>*<emphasis role="keyword">&gt;</emphasis>(&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>&#32;)&#32;==&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>;&#32;}
2325 
2326 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;LhsT,&#32;<emphasis role="keyword">typename</emphasis>&#32;RhsT&gt;
2327 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1a8bec217f5ef5f09c17074c311c958f3c">compareNotEqual</link>(&#32;<link linkend="_struct_catch_1_1true__given">LhsT</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<link linkend="_struct_catch_1_1true__given">RhsT</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="_struct_catch_1_1true__given">lhs</link>&#32;!=&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>);&#32;}
2328 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2329 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1a8bec217f5ef5f09c17074c311c958f3c">compareNotEqual</link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>*&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>&#32;!=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">const</link>*<emphasis role="keyword">&gt;</emphasis>(&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;);&#32;}
2330 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2331 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1a8bec217f5ef5f09c17074c311c958f3c">compareNotEqual</link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>*&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>&#32;!=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">const</link>*<emphasis role="keyword">&gt;</emphasis>(&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;);&#32;}
2332 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2333 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1a8bec217f5ef5f09c17074c311c958f3c">compareNotEqual</link>(&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<link linkend="_struct_catch_1_1true__given">T</link>*&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">const</link>*<emphasis role="keyword">&gt;</emphasis>(&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>&#32;)&#32;!=&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>;&#32;}
2334 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2335 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1a8bec217f5ef5f09c17074c311c958f3c">compareNotEqual</link>(&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<link linkend="_struct_catch_1_1true__given">T</link>*&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">const</link>*<emphasis role="keyword">&gt;</emphasis>(&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>&#32;)&#32;!=&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>;&#32;}
2336 
2337 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;LhsT&gt;
2338 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_expr_lhs">ExprLhs</link>&#32;{
2339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">LhsT</link>&#32;<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>;
2340 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_class_catch_1_1_expr_lhs_1ad22c6af1a7d6993240624d299714a479">ExprLhs</link>(&#32;<link linkend="_struct_catch_1_1true__given">LhsT</link>&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>&#32;)&#32;:&#32;<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>(&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>&#32;)&#32;{}
2342 
2343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;RhsT&gt;
2344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_expr_lhs_1af218aaf7b5b0a0ebb6b3697f2c89893d">operator == </link>(&#32;<link linkend="_struct_catch_1_1true__given">RhsT</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&#32;{
2345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="_namespace_catch_1af89b8df30cfaf09abd048c6ff67359ee">compareEqual</link>(&#32;<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>,&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;),&#32;<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>,&#32;<emphasis role="stringliteral">&quot;==&quot;</emphasis>,&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;};
2346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_expr_lhs_1af218aaf7b5b0a0ebb6b3697f2c89893d">operator == </link>(&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">BinaryExpr&lt;LhsT, bool&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&#32;{
2348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>&#32;==&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>,&#32;<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>,&#32;<emphasis role="stringliteral">&quot;==&quot;</emphasis>,&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;};
2349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2350 
2351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;RhsT&gt;
2352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_expr_lhs_1a2d660580c0a8e6bb24b65a4b5364b5b1">operator != </link>(&#32;<link linkend="_struct_catch_1_1true__given">RhsT</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&#32;{
2353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="_namespace_catch_1a8bec217f5ef5f09c17074c311c958f3c">compareNotEqual</link>(&#32;<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>,&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;),&#32;<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>,&#32;<emphasis role="stringliteral">&quot;!=&quot;</emphasis>,&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;};
2354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_expr_lhs_1a2d660580c0a8e6bb24b65a4b5364b5b1">operator != </link>(&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">BinaryExpr&lt;LhsT, bool&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&#32;{
2356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>&#32;!=&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>,&#32;<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>,&#32;<emphasis role="stringliteral">&quot;!=&quot;</emphasis>,&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;};
2357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2358 
2359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;RhsT&gt;
2360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_expr_lhs_1a7f9d22b7ef87375af7a2583c9643a0f4">operator &gt; </link>(&#32;<link linkend="_struct_catch_1_1true__given">RhsT</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&#32;{
2361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>&#32;&gt;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>),&#32;<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>,&#32;<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>,&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;};
2362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;RhsT&gt;
2364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_expr_lhs_1afd1ce21cb0be233a63cbdd7724adffea">operator &lt; </link>(&#32;<link linkend="_struct_catch_1_1true__given">RhsT</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&#32;{
2365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>&#32;&lt;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>),&#32;<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>,&#32;<emphasis role="stringliteral">&quot;&lt;&quot;</emphasis>,&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;};
2366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;RhsT&gt;
2368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_expr_lhs_1a5ab1a2e91533a8b66a5d2e70774f6793">operator &gt;= </link>(&#32;<link linkend="_struct_catch_1_1true__given">RhsT</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&#32;{
2369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>&#32;&gt;=&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>),&#32;<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>,&#32;<emphasis role="stringliteral">&quot;&gt;=&quot;</emphasis>,&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;};
2370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;RhsT&gt;
2372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_expr_lhs_1a918090c28bee54222730159b56240af1">operator &lt;= </link>(&#32;<link linkend="_struct_catch_1_1true__given">RhsT</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&#32;{
2373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>&#32;&lt;=&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>),&#32;<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>,&#32;<emphasis role="stringliteral">&quot;&lt;=&quot;</emphasis>,&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;};
2374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;RhsT&gt;
2376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_expr_lhs_1a52358a7cbaf47578ff436a378ac818c6">operator | </link>(<link linkend="_struct_catch_1_1true__given">RhsT</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>)&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&#32;{
2377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>&#32;|&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>),&#32;<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>,&#32;<emphasis role="stringliteral">&quot;|&quot;</emphasis>,&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;};
2378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;RhsT&gt;
2380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_expr_lhs_1a39bc6a4687580e5fef174cae9b573283">operator &amp; </link>(<link linkend="_struct_catch_1_1true__given">RhsT</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>)&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&#32;{
2381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>&#32;&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>),&#32;<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>,&#32;<emphasis role="stringliteral">&quot;&amp;&quot;</emphasis>,&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;};
2382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;RhsT&gt;
2384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_expr_lhs_1a904664f51bf478b41b12ac6cb3e1ec23">operator ^ </link>(<link linkend="_struct_catch_1_1true__given">RhsT</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>)&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&#32;{
2385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>&#32;^&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>),&#32;<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>,&#32;<emphasis role="stringliteral">&quot;^&quot;</emphasis>,&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;};
2386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2387 
2388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;RhsT&gt;
2389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_expr_lhs_1ad85684f7b02a98eb1b5d03d4cbd8284b">operator &amp;&amp; </link>(&#32;<link linkend="_struct_catch_1_1true__given">RhsT</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&#32;{
2390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_struct_catch_1_1always__false">always_false&lt;RhsT&gt;::value</link>,
2391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;operator&amp;&amp;&#32;is&#32;not&#32;supported&#32;inside&#32;assertions,&#32;&quot;</emphasis>
2392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;wrap&#32;the&#32;expression&#32;inside&#32;parentheses,&#32;or&#32;decompose&#32;it&quot;</emphasis>);
2393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2394 
2395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;RhsT&gt;
2396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_expr_lhs_1ae9b4ee923b90af22c9e39261c2f03cd3">operator || </link>(&#32;<link linkend="_struct_catch_1_1true__given">RhsT</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&#32;{
2397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_struct_catch_1_1always__false">always_false&lt;RhsT&gt;::value</link>,
2398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;operator||&#32;is&#32;not&#32;supported&#32;inside&#32;assertions,&#32;&quot;</emphasis>
2399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;wrap&#32;the&#32;expression&#32;inside&#32;parentheses,&#32;or&#32;decompose&#32;it&quot;</emphasis>);
2400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2401 
2402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_expr_lhs_1ab68bd6d5d3ae21b7fba9010150fba95d">makeUnaryExpr</link>()&#32;<link linkend="_struct_catch_1_1true__given">const</link>&#32;-&gt;&#32;<link linkend="_class_catch_1_1_unary_expr">UnaryExpr</link>&lt;<link linkend="_struct_catch_1_1true__given">LhsT</link>&gt;&#32;{
2403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">UnaryExpr&lt;LhsT&gt;</link>{&#32;<link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link>&#32;};
2404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2405 &#32;&#32;&#32;&#32;};
2406 
2407 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1a65af25091f2ab61056e166765963e525">handleExpression</link>(&#32;<link linkend="_struct_catch_1_1_i_transient_expression">ITransientExpression</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">expr</link>&#32;);
2408 
2409 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2410 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1a65af25091f2ab61056e166765963e525">handleExpression</link>(&#32;<link linkend="_struct_catch_1_1true__given">ExprLhs&lt;T&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">expr</link>&#32;)&#32;{
2411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a65af25091f2ab61056e166765963e525">handleExpression</link>(&#32;<link linkend="_struct_catch_1_1true__given">expr</link>.makeUnaryExpr()&#32;);
2412 &#32;&#32;&#32;&#32;}
2413 
2414 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_decomposer">Decomposer</link>&#32;{
2415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_struct_catch_1_1_decomposer_1a4b1e5e844c20e5a90e3d759d216674cd">operator &lt;= </link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>&#32;)&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">ExprLhs&lt;T const&amp;&gt;</link>&#32;{
2417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">ExprLhs&lt;T const&amp;&gt;</link>{&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>&#32;};
2418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2419 
2420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_struct_catch_1_1_decomposer_1a4b1e5e844c20e5a90e3d759d216674cd">operator &lt;=</link>(&#32;<emphasis role="keywordtype">bool</emphasis>&#32;value&#32;)&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">ExprLhs&lt;bool&gt;</link>&#32;{
2421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">ExprLhs&lt;bool&gt;</link>{&#32;value&#32;};
2422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2423 &#32;&#32;&#32;&#32;};
2424 
2425 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
2426 
2427 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
2428 <emphasis role="preprocessor">#pragma&#32;warning(pop)</emphasis>
2429 <emphasis role="preprocessor">#endif</emphasis>
2430 
2431 <emphasis role="comment">//&#32;end&#32;catch_decomposer.h</emphasis>
2432 <emphasis role="comment">//&#32;start&#32;catch_interfaces_capture.h</emphasis>
2433 
2434 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
2435 <emphasis role="preprocessor">#include&#32;&lt;chrono&gt;</emphasis>
2436 
2437 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
2438 
2439 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>AssertionResult;
2440 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>AssertionInfo;
2441 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>SectionInfo;
2442 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>SectionEndInfo;
2443 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>MessageInfo;
2444 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>MessageBuilder;
2445 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Counts;
2446 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>AssertionReaction;
2447 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>SourceLineInfo;
2448 
2449 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>ITransientExpression;
2450 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>IGeneratorTracker;
2451 
2452 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</emphasis>
2453 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>BenchmarkInfo;
2454 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Duration&#32;=&#32;std::chrono::duration&lt;<emphasis role="keywordtype">double</emphasis>,&#32;std::nano&gt;&gt;
2455 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>BenchmarkStats;
2456 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_ENABLE_BENCHMARKING</emphasis>
2457 
2458 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_i_result_capture">IResultCapture</link>&#32;{
2459 
2460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_i_result_capture_1a3bd16719d6772b7470887fc36c6d0808">~IResultCapture</link>();
2461 
2462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_i_result_capture_1a5b76ed52badcb64cf374202e12b81a03">sectionStarted</link>(&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_section_info">SectionInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;sectionInfo,
2463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_counts">Counts</link>&amp;&#32;assertions&#32;)&#32;=&#32;0;
2464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_result_capture_1a4e152bc43dc0933684e31fa67a58195d">sectionEnded</link>(&#32;<link linkend="_struct_catch_1_1_section_end_info">SectionEndInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">endInfo</link>&#32;)&#32;=&#32;0;
2465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_result_capture_1afcc71eef8ca821ae132cced4a2be6988">sectionEndedEarly</link>(&#32;<link linkend="_struct_catch_1_1_section_end_info">SectionEndInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">endInfo</link>&#32;)&#32;=&#32;0;
2466 
2467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_struct_catch_1_1_i_result_capture_1a8f93a848e0a48b630ca9ecbf225e4817">acquireGeneratorTracker</link>(&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<link linkend="_struct_catch_1_1true__given">generatorName</link>,&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lineInfo&#32;)&#32;-&gt;&#32;<link linkend="_struct_catch_1_1_i_generator_tracker">IGeneratorTracker</link>&amp;&#32;=&#32;0;
2468 
2469 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</emphasis>
2470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">benchmarkPreparing</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name&#32;)&#32;=&#32;0;
2471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">benchmarkStarting</link>(&#32;<link linkend="_struct_catch_1_1true__given">BenchmarkInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">info</link>&#32;)&#32;=&#32;0;
2472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">benchmarkEnded</link>(&#32;<link linkend="_struct_catch_1_1true__given">BenchmarkStats&lt;&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">stats</link>&#32;)&#32;=&#32;0;
2473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">benchmarkFailed</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;error&#32;)&#32;=&#32;0;
2474 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_ENABLE_BENCHMARKING</emphasis>
2475 
2476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_result_capture_1a91d154c1e087e383dcde5aad95cb6a05">pushScopedMessage</link>(&#32;<link linkend="_struct_catch_1_1_message_info">MessageInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;message&#32;)&#32;=&#32;0;
2477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_result_capture_1a42bcb13276706bf8c3ce081ce16d37fd">popScopedMessage</link>(&#32;<link linkend="_struct_catch_1_1_message_info">MessageInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;message&#32;)&#32;=&#32;0;
2478 
2479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_result_capture_1a49f74f1323ef8be71b8f9b8e8b2c0fc2">emplaceUnscopedMessage</link>(&#32;<link linkend="_struct_catch_1_1_message_builder">MessageBuilder</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">builder</link>&#32;)&#32;=&#32;0;
2480 
2481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_result_capture_1a48559e6598ba9474b903697b69c769b2">handleFatalErrorCondition</link>(&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;message&#32;)&#32;=&#32;0;
2482 
2483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_result_capture_1a59a2b05391e464954575d2afb6d5d607">handleExpr</link>
2484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;&#32;&#32;<link linkend="_struct_catch_1_1_assertion_info">AssertionInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">info</link>,
2485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_transient_expression">ITransientExpression</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">expr</link>,
2486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_assertion_reaction">AssertionReaction</link>&amp;&#32;<link linkend="_struct_catch_1_1true__given">reaction</link>&#32;)&#32;=&#32;0;
2487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_result_capture_1a21788ebc64571abf322b80c8cc51794d">handleMessage</link>
2488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;&#32;&#32;<link linkend="_struct_catch_1_1_assertion_info">AssertionInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">info</link>,
2489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link>&#32;<link linkend="_struct_catch_1_1true__given">resultType</link>,
2490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;message,
2491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_assertion_reaction">AssertionReaction</link>&amp;&#32;<link linkend="_struct_catch_1_1true__given">reaction</link>&#32;)&#32;=&#32;0;
2492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_result_capture_1a6382ed20486e2d9a020da971c6d5c53d">handleUnexpectedExceptionNotThrown</link>
2493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;&#32;&#32;<link linkend="_struct_catch_1_1_assertion_info">AssertionInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">info</link>,
2494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_assertion_reaction">AssertionReaction</link>&amp;&#32;<link linkend="_struct_catch_1_1true__given">reaction</link>&#32;)&#32;=&#32;0;
2495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_result_capture_1afc97bc69829185222f955ebeef97adfe">handleUnexpectedInflightException</link>
2496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;&#32;&#32;<link linkend="_struct_catch_1_1_assertion_info">AssertionInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">info</link>,
2497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;message,
2498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_assertion_reaction">AssertionReaction</link>&amp;&#32;<link linkend="_struct_catch_1_1true__given">reaction</link>&#32;)&#32;=&#32;0;
2499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_result_capture_1a89b89372eb09cc44f8dcad363de6157d">handleIncomplete</link>
2500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;&#32;&#32;<link linkend="_struct_catch_1_1_assertion_info">AssertionInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">info</link>&#32;)&#32;=&#32;0;
2501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_result_capture_1ab7dbdf8aa28427119583e24dbb302c63">handleNonExpr</link>
2502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;&#32;&#32;<link linkend="_struct_catch_1_1_assertion_info">AssertionInfo</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;<link linkend="_struct_catch_1_1true__given">info</link>,
2503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link>&#32;<link linkend="_struct_catch_1_1true__given">resultType</link>,
2504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_assertion_reaction">AssertionReaction</link>&#32;&amp;<link linkend="_struct_catch_1_1true__given">reaction</link>&#32;)&#32;=&#32;0;
2505 
2506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_i_result_capture_1a973435fbdcb2f6f07a0ec5719a01e956">lastAssertionPassed</link>()&#32;=&#32;0;
2507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_result_capture_1a9b0ef2cb071e9a9dc6ec1b533026aea7">assertionPassed</link>()&#32;=&#32;0;
2508 
2509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Deprecated,&#32;do&#32;not&#32;use:</emphasis>
2510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_i_result_capture_1aea1617f4a84cc648246aa3ed6918b5bf">getCurrentTestName</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
2511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">AssertionResult</link>*&#32;<link linkend="_struct_catch_1_1_i_result_capture_1a2f44f3fa0bb898ce1aef650c1e063cc9">getLastResult</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
2512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_result_capture_1ae63ecec95db4c236c63ecf616f483810">exceptionEarlyReported</link>()&#32;=&#32;0;
2513 &#32;&#32;&#32;&#32;};
2514 
2515 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_result_capture">IResultCapture</link>&amp;&#32;<link linkend="_namespace_catch_1af718eeab870712f292ed8dc6ee3f6488">getResultCapture</link>();
2516 }
2517 
2518 <emphasis role="comment">//&#32;end&#32;catch_interfaces_capture.h</emphasis>
2519 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
2520 
2521 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_test_failure_exception">TestFailureException</link>{};
2522 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1true__given">AssertionResultData</link>;
2523 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_i_result_capture">IResultCapture</link>;
2524 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>RunContext;
2525 
2526 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_lazy_expression">LazyExpression</link>&#32;{
2527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_assertion_handler">AssertionHandler</link>;
2528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_class_catch_1_1_lazy_expression_1a64019eb137f5ce447cdc71cb80b6e7a4">AssertionStats</link>;
2529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_lazy_expression_1af3aa096bb29a772bc534830f29a2ce7a">RunContext</link>;
2530 
2531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_transient_expression">ITransientExpression</link>&#32;<emphasis role="keyword">const</emphasis>*&#32;<link linkend="_class_catch_1_1_lazy_expression_1a5a9ce4c2401a262c21b4e107551180bc">m_transientExpression</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
2532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_lazy_expression_1a975fdfe2bb139512024bb479d478425e">m_isNegated</link>;
2533 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_lazy_expression_1a47186c2487bd4bf871e870ba8048553a">LazyExpression</link>(&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">isNegated</link>&#32;);
2535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_lazy_expression_1ab82d5e94df0e159b018fbde0170e46f8">LazyExpression</link>(&#32;<link linkend="_class_catch_1_1_lazy_expression">LazyExpression</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">other</link>&#32;);
2536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_lazy_expression">LazyExpression</link>&amp;&#32;<link linkend="_class_catch_1_1_lazy_expression_1a1b080e25fdfdecbc3e475d0e96cf0fd4">operator = </link>(&#32;<link linkend="_class_catch_1_1_lazy_expression">LazyExpression</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
2537 
2538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">bool</link>()&#32;<emphasis role="keyword">const</emphasis>;
2539 
2540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_lazy_expression_1aa01086581cab2fcd2d4580b8fa787dfc">operator &lt;&lt; </link>(&#32;std::ostream&amp;&#32;<link linkend="_struct_catch_1_1true__given">os</link>,&#32;<link linkend="_class_catch_1_1_lazy_expression">LazyExpression</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">lazyExpr</link>&#32;)&#32;-&gt;&#32;std::ostream&amp;;
2541 &#32;&#32;&#32;&#32;};
2542 
2543 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_assertion_reaction">AssertionReaction</link>&#32;{
2544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_assertion_reaction_1adcf30fb90ff20d9789df78d424652497">shouldDebugBreak</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
2545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_assertion_reaction_1a82c8d95a2c1b6a331bde66982a8e090f">shouldThrow</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
2546 &#32;&#32;&#32;&#32;};
2547 
2548 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_assertion_handler">AssertionHandler</link>&#32;{
2549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_assertion_info">AssertionInfo</link>&#32;<link linkend="_class_catch_1_1_assertion_handler_1ad171e8724bb771d97949b7270f400303">m_assertionInfo</link>;
2550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_assertion_reaction">AssertionReaction</link>&#32;<link linkend="_class_catch_1_1_assertion_handler_1a8203c08a43a3761b5f400ee6587fad55">m_reaction</link>;
2551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_assertion_handler_1a5a756818dff781c155e8eb970d1d4c68">m_completed</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
2552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_result_capture">IResultCapture</link>&amp;&#32;<link linkend="_class_catch_1_1_assertion_handler_1aea5283ee36124ce5c51dc2a697b22a39">m_resultCapture</link>;
2553 
2554 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_assertion_handler_1a32efbb1b56b71d758d4c2094bac1f1a9">AssertionHandler</link>
2556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;&#32;&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;macroName,
2557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lineInfo,
2558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;capturedExpression,
2559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8">ResultDisposition::Flags</link>&#32;resultDisposition&#32;);
2560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_assertion_handler_1a1e839d810f6ac0fa6d127fe8350175ed">~AssertionHandler</link>()&#32;{
2561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;!<link linkend="_class_catch_1_1_assertion_handler_1a5a756818dff781c155e8eb970d1d4c68">m_completed</link>&#32;)&#32;{
2562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_assertion_handler_1aea5283ee36124ce5c51dc2a697b22a39">m_resultCapture</link>.<link linkend="_struct_catch_1_1_i_result_capture_1a89b89372eb09cc44f8dcad363de6157d">handleIncomplete</link>(&#32;<link linkend="_class_catch_1_1_assertion_handler_1ad171e8724bb771d97949b7270f400303">m_assertionInfo</link>&#32;);
2563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2565 
2566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_assertion_handler_1a2ef387e567bad90ec6e4b5bf5c367388">handleExpr</link>(&#32;<link linkend="_struct_catch_1_1true__given">ExprLhs&lt;T&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">expr</link>&#32;)&#32;{
2568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_assertion_handler_1a2ef387e567bad90ec6e4b5bf5c367388">handleExpr</link>(&#32;<link linkend="_struct_catch_1_1true__given">expr</link>.makeUnaryExpr()&#32;);
2569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_assertion_handler_1afe14d9cf1b1c7f70dae439fbdb51d0c4">handleExpr</link>(&#32;<link linkend="_struct_catch_1_1_i_transient_expression">ITransientExpression</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">expr</link>&#32;);
2571 
2572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_assertion_handler_1abdb4c180ed83ec2858b2fb87712c516d">handleMessage</link>(<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link>&#32;<link linkend="_struct_catch_1_1true__given">resultType</link>,&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;message);
2573 
2574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_assertion_handler_1ab6caf765764a4064e90fce829eec201d">handleExceptionThrownAsExpected</link>();
2575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_assertion_handler_1a7764d0adb6ed5eeb10964f6abc02fab1">handleUnexpectedExceptionNotThrown</link>();
2576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_assertion_handler_1a51e4936e3af43b74690cedae6d2e297a">handleExceptionNotThrownAsExpected</link>();
2577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_assertion_handler_1a67a194d5518f307c4a16faa03a7f7442">handleThrowingCallSkipped</link>();
2578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_assertion_handler_1aa2504dad6a91f3645e5f52c932c11270">handleUnexpectedInflightException</link>();
2579 
2580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_assertion_handler_1a878a9eb828d8a1863c8dcb6575f6f40e">complete</link>();
2581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_assertion_handler_1a6756bd5395c0ddd28764a9fb4612d5e4">setCompleted</link>();
2582 
2583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;query</emphasis>
2584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_assertion_handler_1a193bb3999494c46457f3059184c6b251">allowThrows</link>()&#32;<link linkend="_struct_catch_1_1true__given">const</link>&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>;
2585 &#32;&#32;&#32;&#32;};
2586 
2587 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1aea6f8ff3b3838829d4a61694e4bc41ca">handleExceptionMatchExpr</link>(&#32;<link linkend="_class_catch_1_1_assertion_handler">AssertionHandler</link>&amp;&#32;<link linkend="_struct_catch_1_1true__given">handler</link>,&#32;std::<emphasis role="keywordtype">string</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">const</link>&amp;&#32;str,&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<link linkend="_struct_catch_1_1true__given">const</link>&amp;&#32;<link linkend="_struct_catch_1_1true__given">matcherString</link>&#32;);
2588 
2589 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
2590 
2591 <emphasis role="comment">//&#32;end&#32;catch_assertionhandler.h</emphasis>
2592 <emphasis role="comment">//&#32;start&#32;catch_message.h</emphasis>
2593 
2594 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
2595 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
2596 
2597 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
2598 
2599 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_message_info">MessageInfo</link>&#32;{
2600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_message_info_1afac7a84a9e8655428035a3c5418044f0">MessageInfo</link>(&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">_macroName</link>,
2601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">_lineInfo</link>,
2602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link>&#32;<link linkend="_struct_catch_1_1true__given">_type</link>&#32;);
2603 
2604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<link linkend="_struct_catch_1_1_message_info_1a3ee7cd41def0989d2193bad7101436a0">macroName</link>;
2605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_message_info_1ab6cd06e050bf426c6577502a5c50e256">message</link>;
2606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;<link linkend="_struct_catch_1_1_message_info_1a985165328723e599696ebd8e43195cc5">lineInfo</link>;
2607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link>&#32;<link linkend="_struct_catch_1_1_message_info_1ae928b9117465c696e45951d9d0284e78">type</link>;
2608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_catch_1_1_message_info_1a7f4f57ea21e50160adefce7b68a781d6">sequence</link>;
2609 
2610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">operator == </link>(&#32;<link linkend="_struct_catch_1_1_message_info">MessageInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">other</link>&#32;)&#32;<emphasis role="keyword">const</emphasis>;
2611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">operator &lt; </link>(&#32;<link linkend="_struct_catch_1_1_message_info">MessageInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">other</link>&#32;)&#32;<emphasis role="keyword">const</emphasis>;
2612 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_catch_1_1_message_info_1a250459555d236f9510a5afd78a6c1979">globalCount</link>;
2614 &#32;&#32;&#32;&#32;};
2615 
2616 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_message_stream">MessageStream</link>&#32;{
2617 
2618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_message_stream">MessageStream</link>&amp;&#32;<link linkend="_catch_8h_1aae0cdd5d2f0ac242b9ab18b0f66ba26e">operator &lt;&lt; </link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;value&#32;)&#32;{
2620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_stream&#32;&lt;&lt;&#32;value;
2621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
2622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2623 
2624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_reusable_string_stream">ReusableStringStream</link>&#32;<link linkend="_struct_catch_1_1_message_stream_1a9202520faed8882ef469db9f353ec578">m_stream</link>;
2625 &#32;&#32;&#32;&#32;};
2626 
2627 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_message_builder">MessageBuilder</link>&#32;:&#32;<link linkend="_struct_catch_1_1_message_stream">MessageStream</link>&#32;{
2628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_message_builder_1ac34832ca527a758f000ac233d32dd068">MessageBuilder</link>(&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;macroName,
2629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lineInfo,
2630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link>&#32;type&#32;);
2631 
2632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_message_builder">MessageBuilder</link>&amp;&#32;<link linkend="_catch_8h_1aae0cdd5d2f0ac242b9ab18b0f66ba26e">operator &lt;&lt; </link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;value&#32;)&#32;{
2634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_stream&#32;&lt;&lt;&#32;value;
2635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
2636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2637 
2638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_message_info">MessageInfo</link>&#32;<link linkend="_struct_catch_1_1_message_builder_1a979f1c2b36d78f80ee275bfa5ba0209f">m_info</link>;
2639 &#32;&#32;&#32;&#32;};
2640 
2641 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_scoped_message">ScopedMessage</link>&#32;{
2642 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_class_catch_1_1_scoped_message_1a5cc59f0f2ebe840e6607f83004d49a17">ScopedMessage</link>(&#32;<link linkend="_struct_catch_1_1_message_builder">MessageBuilder</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">builder</link>&#32;);
2644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_scoped_message_1a5fe2e79afdfd737818c15edfc49f378e">ScopedMessage</link>(&#32;<link linkend="_class_catch_1_1_scoped_message">ScopedMessage</link>&amp;&#32;<link linkend="_struct_catch_1_1true__given">duplicate</link>&#32;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
2645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_scoped_message_1aac833a6a2245a26e6bd5c9252ca1caa0">ScopedMessage</link>(&#32;<link linkend="_class_catch_1_1_scoped_message">ScopedMessage</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">old</link>&#32;);
2646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_scoped_message_1a43190843f9eeb84a0b42b0bc95fdf93a">~ScopedMessage</link>();
2647 
2648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_message_info">MessageInfo</link>&#32;<link linkend="_class_catch_1_1_scoped_message_1ae6e1476f389cc6e1586f033b3747b27b">m_info</link>;
2649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_scoped_message_1a4fe5607c1f7407240a0da8405b1c12e7">m_moved</link>;
2650 &#32;&#32;&#32;&#32;};
2651 
2652 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_capturer">Capturer</link>&#32;{
2653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;MessageInfo&gt;&#32;<link linkend="_class_catch_1_1_capturer_1aefa14693d28906e5e7b06975af38aaed">m_messages</link>;
2654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_result_capture">IResultCapture</link>&amp;&#32;m_resultCapture&#32;=&#32;<link linkend="_namespace_catch_1af718eeab870712f292ed8dc6ee3f6488">getResultCapture</link>();
2655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;m_captured&#32;=&#32;0;
2656 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_capturer_1a86b0b27acc803a4e1310c10820f3038f">Capturer</link>(&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;macroName,&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lineInfo,&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link>&#32;<link linkend="_struct_catch_1_1true__given">resultType</link>,&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<link linkend="_struct_catch_1_1true__given">names</link>&#32;);
2658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_capturer_1aecde85cf69e65565cec91e325a657b82">~Capturer</link>();
2659 
2660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_capturer_1a0695ebf77f7cdcb344c73bcb3d9131e4">captureValue</link>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;index,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;value&#32;);
2661 
2662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_capturer_1a60d08e6db2e54740bb2298bbbec3bc0b">captureValues</link>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;index,&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;value&#32;)&#32;{
2664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;captureValue(&#32;index,&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">Catch::Detail::stringify</link>(&#32;value&#32;)&#32;);
2665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2666 
2667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">T</link>,&#32;<emphasis role="keyword">typename</emphasis>...&#32;<link linkend="_struct_catch_1_1true__given">Ts</link>&gt;
2668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_capturer_1a76f2a097cfeb3042688300b81eb9bcbc">captureValues</link>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;index,&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;value,&#32;<link linkend="_struct_catch_1_1true__given">Ts</link>&#32;<emphasis role="keyword">const</emphasis>&amp;...&#32;values&#32;)&#32;{
2669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;captureValue(&#32;index,&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">Catch::Detail::stringify</link>(value)&#32;);
2670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;captureValues(&#32;index+1,&#32;values...&#32;);
2671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2672 &#32;&#32;&#32;&#32;};
2673 
2674 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
2675 
2676 <emphasis role="comment">//&#32;end&#32;catch_message.h</emphasis>
2677 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE)</emphasis>
2678 
2679 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE_STRINGIFICATION)</emphasis>
2680 <emphasis role="preprocessor">&#32;&#32;#define&#32;CATCH_INTERNAL_STRINGIFY(...)&#32;#__VA_ARGS__</emphasis>
2681 <emphasis role="preprocessor">#else</emphasis>
2682 <emphasis role="preprocessor">&#32;&#32;#define&#32;CATCH_INTERNAL_STRINGIFY(...)&#32;&quot;Disabled&#32;by&#32;CATCH_CONFIG_DISABLE_STRINGIFICATION&quot;</emphasis>
2683 <emphasis role="preprocessor">#endif</emphasis>
2684 
2685 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_FAST_COMPILE)&#32;||&#32;defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</emphasis>
2686 
2688 <emphasis role="comment">//&#32;Another&#32;way&#32;to&#32;speed-up&#32;compilation&#32;is&#32;to&#32;omit&#32;local&#32;try-catch&#32;for&#32;REQUIRE*</emphasis>
2689 <emphasis role="comment">//&#32;macros.</emphasis>
2690 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_TRY</emphasis>
2691 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_CATCH(&#32;capturer&#32;)</emphasis>
2692 
2693 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_FAST_COMPILE</emphasis>
2694 
2695 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_TRY&#32;try</emphasis>
2696 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_CATCH(&#32;handler&#32;)&#32;catch(...)&#32;{&#32;handler.handleUnexpectedInflightException();&#32;}</emphasis>
2697 
2698 <emphasis role="preprocessor">#endif</emphasis>
2699 
2700 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_REACT(&#32;handler&#32;)&#32;handler.complete();</emphasis>
2701 
2703 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_TEST(&#32;macroName,&#32;resultDisposition,&#32;...&#32;)&#32;\</emphasis>
2704 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;{&#32;\</emphasis>
2705 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_IGNORE_BUT_WARN(__VA_ARGS__);&#32;\</emphasis>
2706 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Catch::AssertionHandler&#32;catchAssertionHandler(&#32;macroName##_catch_sr,&#32;CATCH_INTERNAL_LINEINFO,&#32;CATCH_INTERNAL_STRINGIFY(__VA_ARGS__),&#32;resultDisposition&#32;);&#32;\</emphasis>
2707 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TRY&#32;{&#32;\</emphasis>
2708 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\</emphasis>
2709 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS&#32;\</emphasis>
2710 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleExpr(&#32;Catch::Decomposer()&#32;&lt;=&#32;__VA_ARGS__&#32;);&#32;\</emphasis>
2711 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION&#32;\</emphasis>
2712 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;INTERNAL_CATCH_CATCH(&#32;catchAssertionHandler&#32;)&#32;\</emphasis>
2713 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_REACT(&#32;catchAssertionHandler&#32;)&#32;\</emphasis>
2714 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;while(&#32;(void)0,&#32;(false)&#32;&amp;&amp;&#32;static_cast&lt;bool&gt;(&#32;!!(__VA_ARGS__)&#32;)&#32;)</emphasis>
2715 
2717 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_IF(&#32;macroName,&#32;resultDisposition,&#32;...&#32;)&#32;\</emphasis>
2718 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;INTERNAL_CATCH_TEST(&#32;macroName,&#32;resultDisposition,&#32;__VA_ARGS__&#32;);&#32;\</emphasis>
2719 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;if(&#32;Catch::getResultCapture().lastAssertionPassed()&#32;)</emphasis>
2720 
2722 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_ELSE(&#32;macroName,&#32;resultDisposition,&#32;...&#32;)&#32;\</emphasis>
2723 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;INTERNAL_CATCH_TEST(&#32;macroName,&#32;resultDisposition,&#32;__VA_ARGS__&#32;);&#32;\</emphasis>
2724 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;if(&#32;!Catch::getResultCapture().lastAssertionPassed()&#32;)</emphasis>
2725 
2727 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_NO_THROW(&#32;macroName,&#32;resultDisposition,&#32;...&#32;)&#32;\</emphasis>
2728 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;{&#32;\</emphasis>
2729 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Catch::AssertionHandler&#32;catchAssertionHandler(&#32;macroName##_catch_sr,&#32;CATCH_INTERNAL_LINEINFO,&#32;CATCH_INTERNAL_STRINGIFY(__VA_ARGS__),&#32;resultDisposition&#32;);&#32;\</emphasis>
2730 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;try&#32;{&#32;\</emphasis>
2731 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_cast&lt;void&gt;(__VA_ARGS__);&#32;\</emphasis>
2732 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleExceptionNotThrownAsExpected();&#32;\</emphasis>
2733 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
2734 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catch(&#32;...&#32;)&#32;{&#32;\</emphasis>
2735 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleUnexpectedInflightException();&#32;\</emphasis>
2736 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
2737 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_REACT(&#32;catchAssertionHandler&#32;)&#32;\</emphasis>
2738 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;while(&#32;false&#32;)</emphasis>
2739 
2741 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_THROWS(&#32;macroName,&#32;resultDisposition,&#32;...&#32;)&#32;\</emphasis>
2742 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;{&#32;\</emphasis>
2743 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Catch::AssertionHandler&#32;catchAssertionHandler(&#32;macroName##_catch_sr,&#32;CATCH_INTERNAL_LINEINFO,&#32;CATCH_INTERNAL_STRINGIFY(__VA_ARGS__),&#32;resultDisposition);&#32;\</emphasis>
2744 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(&#32;catchAssertionHandler.allowThrows()&#32;)&#32;\</emphasis>
2745 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;try&#32;{&#32;\</emphasis>
2746 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_cast&lt;void&gt;(__VA_ARGS__);&#32;\</emphasis>
2747 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleUnexpectedExceptionNotThrown();&#32;\</emphasis>
2748 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
2749 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catch(&#32;...&#32;)&#32;{&#32;\</emphasis>
2750 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleExceptionThrownAsExpected();&#32;\</emphasis>
2751 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
2752 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;\</emphasis>
2753 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleThrowingCallSkipped();&#32;\</emphasis>
2754 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_REACT(&#32;catchAssertionHandler&#32;)&#32;\</emphasis>
2755 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;while(&#32;false&#32;)</emphasis>
2756 
2758 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_THROWS_AS(&#32;macroName,&#32;exceptionType,&#32;resultDisposition,&#32;expr&#32;)&#32;\</emphasis>
2759 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;{&#32;\</emphasis>
2760 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Catch::AssertionHandler&#32;catchAssertionHandler(&#32;macroName##_catch_sr,&#32;CATCH_INTERNAL_LINEINFO,&#32;CATCH_INTERNAL_STRINGIFY(expr)&#32;&quot;,&#32;&quot;&#32;CATCH_INTERNAL_STRINGIFY(exceptionType),&#32;resultDisposition&#32;);&#32;\</emphasis>
2761 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(&#32;catchAssertionHandler.allowThrows()&#32;)&#32;\</emphasis>
2762 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;try&#32;{&#32;\</emphasis>
2763 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_cast&lt;void&gt;(expr);&#32;\</emphasis>
2764 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleUnexpectedExceptionNotThrown();&#32;\</emphasis>
2765 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
2766 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catch(&#32;exceptionType&#32;const&amp;&#32;)&#32;{&#32;\</emphasis>
2767 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleExceptionThrownAsExpected();&#32;\</emphasis>
2768 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
2769 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catch(&#32;...&#32;)&#32;{&#32;\</emphasis>
2770 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleUnexpectedInflightException();&#32;\</emphasis>
2771 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
2772 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;\</emphasis>
2773 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleThrowingCallSkipped();&#32;\</emphasis>
2774 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_REACT(&#32;catchAssertionHandler&#32;)&#32;\</emphasis>
2775 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;while(&#32;false&#32;)</emphasis>
2776 
2778 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_MSG(&#32;macroName,&#32;messageType,&#32;resultDisposition,&#32;...&#32;)&#32;\</emphasis>
2779 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;{&#32;\</emphasis>
2780 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Catch::AssertionHandler&#32;catchAssertionHandler(&#32;macroName##_catch_sr,&#32;CATCH_INTERNAL_LINEINFO,&#32;Catch::StringRef(),&#32;resultDisposition&#32;);&#32;\</emphasis>
2781 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleMessage(&#32;messageType,&#32;(&#32;Catch::MessageStream()&#32;&lt;&lt;&#32;__VA_ARGS__&#32;+&#32;::Catch::StreamEndStop()&#32;).m_stream.str()&#32;);&#32;\</emphasis>
2782 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_REACT(&#32;catchAssertionHandler&#32;)&#32;\</emphasis>
2783 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;while(&#32;false&#32;)</emphasis>
2784 
2786 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_CAPTURE(&#32;varName,&#32;macroName,&#32;...&#32;)&#32;\</emphasis>
2787 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;auto&#32;varName&#32;=&#32;Catch::Capturer(&#32;macroName,&#32;CATCH_INTERNAL_LINEINFO,&#32;Catch::ResultWas::Info,&#32;#__VA_ARGS__&#32;);&#32;\</emphasis>
2788 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;varName.captureValues(&#32;0,&#32;__VA_ARGS__&#32;)</emphasis>
2789 
2791 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_INFO(&#32;macroName,&#32;log&#32;)&#32;\</emphasis>
2792 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;Catch::ScopedMessage&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;scopedMessage&#32;)(&#32;Catch::MessageBuilder(&#32;macroName##_catch_sr,&#32;CATCH_INTERNAL_LINEINFO,&#32;Catch::ResultWas::Info&#32;)&#32;&lt;&lt;&#32;log&#32;);</emphasis>
2793 
2795 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_UNSCOPED_INFO(&#32;macroName,&#32;log&#32;)&#32;\</emphasis>
2796 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;Catch::getResultCapture().emplaceUnscopedMessage(&#32;Catch::MessageBuilder(&#32;macroName##_catch_sr,&#32;CATCH_INTERNAL_LINEINFO,&#32;Catch::ResultWas::Info&#32;)&#32;&lt;&lt;&#32;log&#32;)</emphasis>
2797 
2799 <emphasis role="comment">//&#32;Although&#32;this&#32;is&#32;matcher-based,&#32;it&#32;can&#32;be&#32;used&#32;with&#32;just&#32;a&#32;string</emphasis>
2800 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_THROWS_STR_MATCHES(&#32;macroName,&#32;resultDisposition,&#32;matcher,&#32;...&#32;)&#32;\</emphasis>
2801 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;{&#32;\</emphasis>
2802 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Catch::AssertionHandler&#32;catchAssertionHandler(&#32;macroName##_catch_sr,&#32;CATCH_INTERNAL_LINEINFO,&#32;CATCH_INTERNAL_STRINGIFY(__VA_ARGS__)&#32;&quot;,&#32;&quot;&#32;CATCH_INTERNAL_STRINGIFY(matcher),&#32;resultDisposition&#32;);&#32;\</emphasis>
2803 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(&#32;catchAssertionHandler.allowThrows()&#32;)&#32;\</emphasis>
2804 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;try&#32;{&#32;\</emphasis>
2805 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_cast&lt;void&gt;(__VA_ARGS__);&#32;\</emphasis>
2806 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleUnexpectedExceptionNotThrown();&#32;\</emphasis>
2807 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
2808 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catch(&#32;...&#32;)&#32;{&#32;\</emphasis>
2809 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Catch::handleExceptionMatchExpr(&#32;catchAssertionHandler,&#32;matcher,&#32;#matcher##_catch_sr&#32;);&#32;\</emphasis>
2810 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
2811 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;\</emphasis>
2812 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleThrowingCallSkipped();&#32;\</emphasis>
2813 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_REACT(&#32;catchAssertionHandler&#32;)&#32;\</emphasis>
2814 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;while(&#32;false&#32;)</emphasis>
2815 
2816 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_DISABLE</emphasis>
2817 
2818 <emphasis role="comment">//&#32;end&#32;catch_capture.hpp</emphasis>
2819 <emphasis role="comment">//&#32;start&#32;catch_section.h</emphasis>
2820 
2821 <emphasis role="comment">//&#32;start&#32;catch_section_info.h</emphasis>
2822 
2823 <emphasis role="comment">//&#32;start&#32;catch_totals.h</emphasis>
2824 
2825 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>
2826 
2827 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
2828 
2829 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_counts">Counts</link>&#32;{
2830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_counts">Counts</link>&#32;<link linkend="_struct_catch_1_1true__given">operator - </link>(&#32;<link linkend="_struct_catch_1_1_counts">Counts</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">other</link>&#32;)&#32;<emphasis role="keyword">const</emphasis>;
2831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_counts">Counts</link>&amp;&#32;<link linkend="_struct_catch_1_1true__given">operator += </link>(&#32;<link linkend="_struct_catch_1_1_counts">Counts</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">other</link>&#32;);
2832 
2833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;<link linkend="_struct_catch_1_1_counts_1a94f969c09cf52d1339c085c9603cd1d3">total</link>()&#32;<emphasis role="keyword">const</emphasis>;
2834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_counts_1a84999490e0ecaa3de5e121bf48eda1b3">allPassed</link>()&#32;<emphasis role="keyword">const</emphasis>;
2835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_counts_1a33bd996e016030155b99fe1c51c08991">allOk</link>()&#32;<emphasis role="keyword">const</emphasis>;
2836 
2837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;passed&#32;=&#32;0;
2838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;failed&#32;=&#32;0;
2839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;failedButOk&#32;=&#32;0;
2840 &#32;&#32;&#32;&#32;};
2841 
2842 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_totals">Totals</link>&#32;{
2843 
2844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_totals">Totals</link>&#32;<link linkend="_struct_catch_1_1true__given">operator - </link>(&#32;<link linkend="_struct_catch_1_1_totals">Totals</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">other</link>&#32;)&#32;<emphasis role="keyword">const</emphasis>;
2845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_totals">Totals</link>&amp;&#32;<link linkend="_struct_catch_1_1true__given">operator += </link>(&#32;<link linkend="_struct_catch_1_1_totals">Totals</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">other</link>&#32;);
2846 
2847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_totals">Totals</link>&#32;<link linkend="_struct_catch_1_1_totals_1a1a94a654f5f3786b75695e081fc9bca2">delta</link>(&#32;<link linkend="_struct_catch_1_1_totals">Totals</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">prevTotals</link>&#32;)&#32;<emphasis role="keyword">const</emphasis>;
2848 
2849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;error&#32;=&#32;0;
2850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_counts">Counts</link>&#32;<link linkend="_struct_catch_1_1_totals_1a885ded66df752147b30c3d45aa602ec9">assertions</link>;
2851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_counts">Counts</link>&#32;<link linkend="_struct_catch_1_1_totals_1adb195fe477aedee2ecea88c888f16506">testCases</link>;
2852 &#32;&#32;&#32;&#32;};
2853 }
2854 
2855 <emphasis role="comment">//&#32;end&#32;catch_totals.h</emphasis>
2856 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
2857 
2858 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
2859 
2860 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_section_info">SectionInfo</link>&#32;{
2861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_section_info_1a2808437ae7d4bc0830cee1c3995165a6">SectionInfo</link>
2862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;&#32;&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">_lineInfo</link>,
2863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">_name</link>&#32;);
2864 
2865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Deprecated</emphasis>
2866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_section_info_1a139875f2e7bd12a5898a948f8bad15b3">SectionInfo</link>
2867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;&#32;&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">_lineInfo</link>,
2868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">_name</link>,
2869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;:&#32;<link linkend="_struct_catch_1_1_section_info">SectionInfo</link>(&#32;<link linkend="_struct_catch_1_1true__given">_lineInfo</link>,&#32;<link linkend="_struct_catch_1_1true__given">_name</link>&#32;)&#32;{}
2870 
2871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_section_info_1a704c8fc662d309137e0d4f199cb7df58">name</link>;
2872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_section_info_1a0052060219a6de74bb7ade34d4163a4e">description</link>;&#32;<emphasis role="comment">//&#32;!Deprecated:&#32;this&#32;will&#32;always&#32;be&#32;empty</emphasis>
2873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;<link linkend="_struct_catch_1_1_section_info_1adbc83b8a3507c4acc8ee249e93465711">lineInfo</link>;
2874 &#32;&#32;&#32;&#32;};
2875 
2876 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_section_end_info">SectionEndInfo</link>&#32;{
2877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_section_info">SectionInfo</link>&#32;<link linkend="_struct_catch_1_1_section_end_info_1a2d44793392cb83735d086d726822abe9">sectionInfo</link>;
2878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_counts">Counts</link>&#32;<link linkend="_struct_catch_1_1_section_end_info_1ae70b154cbc05b5dd2901d97f89303d8c">prevAssertions</link>;
2879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_catch_1_1_section_end_info_1a7c262f2dab9cff166b8eca620c47eea5">durationInSeconds</link>;
2880 &#32;&#32;&#32;&#32;};
2881 
2882 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
2883 
2884 <emphasis role="comment">//&#32;end&#32;catch_section_info.h</emphasis>
2885 <emphasis role="comment">//&#32;start&#32;catch_timer.h</emphasis>
2886 
2887 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>
2888 
2889 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
2890 
2891 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1a98d058468488c486a9cb5c8463f3ba29">getCurrentNanosecondsSinceEpoch</link>()&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">uint64_t</link>;
2892 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1ac8e1ed37624bd0d97b2c0d4ec099d31f">getEstimatedClockResolution</link>()&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">uint64_t</link>;
2893 
2894 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_timer">Timer</link>&#32;{
2895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">uint64_t</link>&#32;m_nanoseconds&#32;=&#32;0;
2896 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_timer_1a0a56e879e43f36c102bf9ea8b5fc8b72">start</link>();
2898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_timer_1a57be5d17ca868a2d6fb1eea84de665cf">getElapsedNanoseconds</link>()&#32;<link linkend="_struct_catch_1_1true__given">const</link>&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">uint64_t</link>;
2899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">auto</link>&#32;getElapsedMicroseconds()&#32;<link linkend="_struct_catch_1_1true__given">const</link>&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">uint64_t</link>;
2900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">auto</link>&#32;getElapsedMilliseconds()&#32;<link linkend="_struct_catch_1_1true__given">const</link>&#32;-&gt;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>;
2901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">auto</link>&#32;getElapsedSeconds()&#32;<link linkend="_struct_catch_1_1true__given">const</link>&#32;-&gt;&#32;<emphasis role="keywordtype">double</emphasis>;
2902 &#32;&#32;&#32;&#32;};
2903 
2904 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
2905 
2906 <emphasis role="comment">//&#32;end&#32;catch_timer.h</emphasis>
2907 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
2908 
2909 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
2910 
2911 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_section">Section</link>&#32;:&#32;<link linkend="_class_catch_1_1_non_copyable">NonCopyable</link>&#32;{
2912 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_section_1a68fd4e51e8981aaa7ddb00d8a6abd099">Section</link>(&#32;<link linkend="_struct_catch_1_1_section_info">SectionInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">info</link>&#32;);
2914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_section_1aa1422edd68a77aa578b5cc6b8b69f86f">~Section</link>();
2915 
2916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;indicates&#32;whether&#32;the&#32;section&#32;should&#32;be&#32;executed&#32;or&#32;not</emphasis>
2917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">bool</link>()&#32;<emphasis role="keyword">const</emphasis>;
2918 
2919 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_section_info">SectionInfo</link>&#32;<link linkend="_class_catch_1_1_section_1a22f54832b33b341ae5a78807a6219af6">m_info</link>;
2921 
2922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_catch_1_1_section_1a29a372077fda582bbd79fb192067f277">m_name</link>;
2923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_counts">Counts</link>&#32;<link linkend="_class_catch_1_1_section_1ae0a2acc394d4bd1bc7a51a1445d25034">m_assertions</link>;
2924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_section_1a038bb0d5d2718df6e3ae1ece4b3d695d">m_sectionIncluded</link>;
2925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_timer">Timer</link>&#32;<link linkend="_class_catch_1_1_section_1a1548993afa64305a1b093391c6884b7e">m_timer</link>;
2926 &#32;&#32;&#32;&#32;};
2927 
2928 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
2929 
2930 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_SECTION(&#32;...&#32;)&#32;\</emphasis>
2931 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\</emphasis>
2932 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS&#32;\</emphasis>
2933 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;if(&#32;Catch::Section&#32;const&amp;&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;catch_internal_Section&#32;)&#32;=&#32;Catch::SectionInfo(&#32;CATCH_INTERNAL_LINEINFO,&#32;__VA_ARGS__&#32;)&#32;)&#32;\</emphasis>
2934 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</emphasis>
2935 
2936 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_DYNAMIC_SECTION(&#32;...&#32;)&#32;\</emphasis>
2937 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\</emphasis>
2938 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS&#32;\</emphasis>
2939 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;if(&#32;Catch::Section&#32;const&amp;&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;catch_internal_Section&#32;)&#32;=&#32;Catch::SectionInfo(&#32;CATCH_INTERNAL_LINEINFO,&#32;(Catch::ReusableStringStream()&#32;&lt;&lt;&#32;__VA_ARGS__).str()&#32;)&#32;)&#32;\</emphasis>
2940 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</emphasis>
2941 
2942 <emphasis role="comment">//&#32;end&#32;catch_section.h</emphasis>
2943 <emphasis role="comment">//&#32;start&#32;catch_interfaces_exception.h</emphasis>
2944 
2945 <emphasis role="comment">//&#32;start&#32;catch_interfaces_registry_hub.h</emphasis>
2946 
2947 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
2948 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
2949 
2950 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
2951 
2952 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>TestCase;
2953 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>ITestCaseRegistry;
2954 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>IExceptionTranslatorRegistry;
2955 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>IExceptionTranslator;
2956 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>IReporterRegistry;
2957 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>IReporterFactory;
2958 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>ITagAliasRegistry;
2959 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>IMutableEnumValuesRegistry;
2960 
2961 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>StartupExceptionRegistry;
2962 
2963 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_catch_1a4e6617700df10519be17cc0e62ab427e">IReporterFactoryPtr</link>&#32;=&#32;std::shared_ptr&lt;IReporterFactory&gt;;
2964 
2965 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_i_registry_hub">IRegistryHub</link>&#32;{
2966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_i_registry_hub_1a050de0f27f96888c8b410992146c9a09">~IRegistryHub</link>();
2967 
2968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">IReporterRegistry</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1_i_registry_hub_1abbb3aafb58916d633ef959d724d4b82c">getReporterRegistry</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
2969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_i_test_case_registry">ITestCaseRegistry</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1_i_registry_hub_1a3016c8766e42bae7b021f02d1cbd356b">getTestCaseRegistry</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
2970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">ITagAliasRegistry</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1_i_registry_hub_1a3fb24564dba3f679dfa58792f1e21708">getTagAliasRegistry</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
2971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_i_exception_translator_registry">IExceptionTranslatorRegistry</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1_i_registry_hub_1aa97defa756fe28dd6249b19c12bbbec1">getExceptionTranslatorRegistry</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
2972 
2973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">StartupExceptionRegistry</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1_i_registry_hub_1a6a1810bb78ba99c3be091958bcc12f29">getStartupExceptionRegistry</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
2974 &#32;&#32;&#32;&#32;};
2975 
2976 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_i_mutable_registry_hub">IMutableRegistryHub</link>&#32;{
2977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_i_mutable_registry_hub_1a759ca1e044e19f905fb4d306f1367193">~IMutableRegistryHub</link>();
2978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_mutable_registry_hub_1a1c0ac202ac31ee9f88e8ff5cbac4b243">registerReporter</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;<link linkend="_namespace_catch_1a4e6617700df10519be17cc0e62ab427e">IReporterFactoryPtr</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">factory</link>&#32;)&#32;=&#32;0;
2979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_mutable_registry_hub_1abd892a133f85581fd00ee75bb379ca56">registerListener</link>(&#32;<link linkend="_namespace_catch_1a4e6617700df10519be17cc0e62ab427e">IReporterFactoryPtr</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">factory</link>&#32;)&#32;=&#32;0;
2980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_mutable_registry_hub_1a11b85c6744d88c9f83fe16ad4a8dd451">registerTest</link>(&#32;<link linkend="_class_catch_1_1_test_case">TestCase</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">testInfo</link>&#32;)&#32;=&#32;0;
2981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_mutable_registry_hub_1ae6825365102693cf7707db022a2c2b49">registerTranslator</link>(&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_catch_1_1_i_exception_translator">IExceptionTranslator</link>*&#32;<link linkend="_struct_catch_1_1true__given">translator</link>&#32;)&#32;=&#32;0;
2982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_mutable_registry_hub_1abf2e386b6f94f615719ada711adbf822">registerTagAlias</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">alias</link>,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">tag</link>,&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lineInfo&#32;)&#32;=&#32;0;
2983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_mutable_registry_hub_1a72a7d5386851ac3200f8da794a009c86">registerStartupException</link>()&#32;<link linkend="_struct_catch_1_1true__given">noexcept</link>&#32;=&#32;0;
2984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">virtual</link>&#32;<link linkend="_struct_catch_1_1_i_mutable_enum_values_registry">IMutableEnumValuesRegistry</link>&amp;&#32;getMutableEnumValuesRegistry()&#32;=&#32;0;
2985 &#32;&#32;&#32;&#32;};
2986 
2987 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_registry_hub">IRegistryHub</link>&#32;<link linkend="_struct_catch_1_1true__given">const</link>&amp;&#32;getRegistryHub();
2988 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_mutable_registry_hub">IMutableRegistryHub</link>&amp;&#32;getMutableRegistryHub();
2989 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;cleanUp();
2990 &#32;&#32;&#32;&#32;std::<emphasis role="keywordtype">string</emphasis>&#32;translateActiveException();
2991 
2992 }
2993 
2994 <emphasis role="comment">//&#32;end&#32;catch_interfaces_registry_hub.h</emphasis>
2995 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_DISABLE)</emphasis>
2996 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INTERNAL_CATCH_TRANSLATE_EXCEPTION_NO_REG(&#32;translatorName,&#32;signature)&#32;\</emphasis>
2997 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;std::string&#32;translatorName(&#32;signature&#32;)</emphasis>
2998 <emphasis role="preprocessor">#endif</emphasis>
2999 
3000 <emphasis role="preprocessor">#include&#32;&lt;exception&gt;</emphasis>
3001 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
3002 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
3003 
3004 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
3005 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_catch_1a7f2ab9adc3729f9c197f43e5cfcd4b40">exceptionTranslateFunction</link>&#32;=&#32;std::string(*)();
3006 
3007 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_i_exception_translator">IExceptionTranslator</link>;
3008 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_catch_1a49b7a6b4679e1b57f1646f0ebda713b6">ExceptionTranslators</link>&#32;=&#32;std::vector&lt;std::unique_ptr&lt;IExceptionTranslator&#32;const&gt;&gt;;
3009 
3010 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_i_exception_translator">IExceptionTranslator</link>&#32;{
3011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_i_exception_translator_1afa00bb6258c07591df472aadae05783f">~IExceptionTranslator</link>();
3012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_i_exception_translator_1a2a554b96ed5ed411e7c796b6b42837a5">translate</link>(&#32;ExceptionTranslators::const_iterator&#32;<link linkend="_struct_catch_1_1true__given">it</link>,&#32;ExceptionTranslators::const_iterator&#32;<link linkend="_struct_catch_1_1true__given">itEnd</link>&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
3013 &#32;&#32;&#32;&#32;};
3014 
3015 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_i_exception_translator_registry">IExceptionTranslatorRegistry</link>&#32;{
3016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_i_exception_translator_registry_1acf7402e18789ea46d54ea8564ac358d3">~IExceptionTranslatorRegistry</link>();
3017 
3018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_i_exception_translator_registry_1af76ae8c331a17f2a94c9720bc0d686bb">translateActiveException</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
3019 &#32;&#32;&#32;&#32;};
3020 
3021 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_exception_translator_registrar">ExceptionTranslatorRegistrar</link>&#32;{
3022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_exception_translator_registrar_1_1_exception_translator">ExceptionTranslator</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_catch_1_1_i_exception_translator">IExceptionTranslator</link>&#32;{
3024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
3025 
3026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_exception_translator_registrar_1_1_exception_translator_1a2de4e9bcaad47996159763e69f614d7a">ExceptionTranslator</link>(&#32;std::string(*<link linkend="_struct_catch_1_1true__given">translateFunction</link>)(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&amp;&#32;)&#32;)
3027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_translateFunction(&#32;<link linkend="_struct_catch_1_1true__given">translateFunction</link>&#32;)
3028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
3029 
3030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_catch_1_1_exception_translator_registrar_1_1_exception_translator_1a29e85940ee9ce719f26e43550cb4ed48">translate</link>(&#32;ExceptionTranslators::const_iterator&#32;<link linkend="_struct_catch_1_1true__given">it</link>,&#32;ExceptionTranslators::const_iterator&#32;<link linkend="_struct_catch_1_1true__given">itEnd</link>&#32;)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
3031 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</emphasis>
3032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
3033 <emphasis role="preprocessor">#else</emphasis>
3034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
3035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_struct_catch_1_1true__given">it</link>&#32;==&#32;<link linkend="_struct_catch_1_1true__given">itEnd</link>&#32;)
3036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::rethrow_exception(std::current_exception());
3037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*it)-&gt;translate(&#32;<link linkend="_struct_catch_1_1true__given">it</link>+1,&#32;<link linkend="_struct_catch_1_1true__given">itEnd</link>&#32;);
3039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&amp;&#32;<link linkend="_struct_catch_1_1true__given">ex</link>&#32;)&#32;{
3041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_translateFunction(&#32;<link linkend="_struct_catch_1_1true__given">ex</link>&#32;);
3042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3043 <emphasis role="preprocessor">#endif</emphasis>
3044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3045 
3046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
3047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string(*m_translateFunction)(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&amp;&#32;);
3048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3049 
3050 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
3051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_exception_translator_registrar_1aa73229de911f26b1df6c6c87c4d9e04e">ExceptionTranslatorRegistrar</link>(&#32;std::string(*<link linkend="_struct_catch_1_1true__given">translateFunction</link>)(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&amp;&#32;)&#32;)&#32;{
3053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a585459763f2c7610e57de2dd22dd1ad8">getMutableRegistryHub</link>().<link linkend="_struct_catch_1_1_i_mutable_registry_hub_1ae6825365102693cf7707db022a2c2b49">registerTranslator</link>
3054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">ExceptionTranslator&lt;T&gt;</link>(&#32;<link linkend="_struct_catch_1_1true__given">translateFunction</link>&#32;)&#32;);
3055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3056 &#32;&#32;&#32;&#32;};
3057 }
3058 
3060 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_TRANSLATE_EXCEPTION2(&#32;translatorName,&#32;signature&#32;)&#32;\</emphasis>
3061 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static&#32;std::string&#32;translatorName(&#32;signature&#32;);&#32;\</emphasis>
3062 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;\</emphasis>
3063 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;\</emphasis>
3064 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;namespace{&#32;Catch::ExceptionTranslatorRegistrar&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;catch_internal_ExceptionRegistrar&#32;)(&#32;&amp;translatorName&#32;);&#32;}&#32;\</emphasis>
3065 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION&#32;\</emphasis>
3066 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static&#32;std::string&#32;translatorName(&#32;signature&#32;)</emphasis>
3067 
3068 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_TRANSLATE_EXCEPTION(&#32;signature&#32;)&#32;INTERNAL_CATCH_TRANSLATE_EXCEPTION2(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;catch_internal_ExceptionTranslator&#32;),&#32;signature&#32;)</emphasis>
3069 
3070 <emphasis role="comment">//&#32;end&#32;catch_interfaces_exception.h</emphasis>
3071 <emphasis role="comment">//&#32;start&#32;catch_approx.h</emphasis>
3072 
3073 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
3074 
3075 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
3076 <emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
3077 
3078 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link>&#32;{
3079 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
3080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_detail_1_1_approx_1af53c48227a7b654da58adeb1d360b715">equalityComparisonImpl</link>(<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">other</link>)&#32;<emphasis role="keyword">const</emphasis>;
3081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Validates&#32;the&#32;new&#32;margin&#32;(margin&#32;&gt;=&#32;0)</emphasis>
3082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;out-of-line&#32;to&#32;avoid&#32;including&#32;stdexcept&#32;in&#32;the&#32;header</emphasis>
3083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_detail_1_1_approx_1aff04b8b32edc707138eb395ed45ec576">setMargin</link>(<emphasis role="keywordtype">double</emphasis>&#32;margin);
3084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Validates&#32;the&#32;new&#32;epsilon&#32;(0&#32;&lt;&#32;epsilon&#32;&lt;&#32;1)</emphasis>
3085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;out-of-line&#32;to&#32;avoid&#32;including&#32;stdexcept&#32;in&#32;the&#32;header</emphasis>
3086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_detail_1_1_approx_1a28fd65e069b698bc7ae8f060bfbcd6b6">setEpsilon</link>(<emphasis role="keywordtype">double</emphasis>&#32;epsilon);
3087 
3088 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
3089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_class_catch_1_1_detail_1_1_approx_1a1a8618ea8db08c66bd3d9fe8f74b957a">Approx</link>&#32;(&#32;<emphasis role="keywordtype">double</emphasis>&#32;value&#32;);
3090 
3091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link>&#32;<link linkend="_class_catch_1_1_detail_1_1_approx_1aaf86dc0ee92272ac2d9839197a07951d">custom</link>();
3092 
3093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link>&#32;<link linkend="_class_catch_1_1_detail_1_1_approx_1aa9adf5f05e641df770039543d5067d30">operator-</link>()&#32;<emphasis role="keyword">const</emphasis>;
3094 
3095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">template &lt;typename T, typename = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value</link>&gt;::type&gt;
3096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link>&#32;<link linkend="_class_catch_1_1_detail_1_1_approx_1a006f6f92cecf2b2e7d2c70329709f6e4">operator()</link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;value&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
3097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link>&#32;approx(&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(value)&#32;);
3098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;approx.<link linkend="_class_catch_1_1_detail_1_1_approx_1af17c8e869ae7a55d14b99eb18e178114">m_epsilon</link>&#32;=&#32;m_epsilon;
3099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;approx.<link linkend="_class_catch_1_1_detail_1_1_approx_1a4262a7e821eec507b424c335121ea0d8">m_margin</link>&#32;=&#32;m_margin;
3100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;approx.<link linkend="_class_catch_1_1_detail_1_1_approx_1a65e9bdab9113ff3300b45f0a4e048dd7">m_scale</link>&#32;=&#32;m_scale;
3101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;approx;
3102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3103 
3104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">template &lt;typename T, typename = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value</link>&gt;::type&gt;
3105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_class_catch_1_1_detail_1_1_approx_1ab14b979fa8a37f21d037157fabed4072">Approx</link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;value&#32;):&#32;<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link>(<link linkend="_struct_catch_1_1true__given">static_cast</link>&lt;<link linkend="_struct_catch_1_1true__given">double</link>&gt;(value))
3106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
3107 
3108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">template &lt;typename T, typename = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value</link>&gt;::type&gt;
3109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">operator == </link>(&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">T</link>&amp;&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;{
3110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">lhs_v</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="_struct_catch_1_1true__given">lhs</link>);
3111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>.equalityComparisonImpl(<link linkend="_struct_catch_1_1true__given">lhs_v</link>);
3112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3113 
3114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">template &lt;typename T, typename = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value</link>&gt;::type&gt;
3115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">operator == </link>(&#32;<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">T</link>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;{
3116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;operator==(&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>,&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>&#32;);
3117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3118 
3119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">template &lt;typename T, typename = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value</link>&gt;::type&gt;
3120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">operator != </link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;{
3121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!operator==(&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;);
3122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3123 
3124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">template &lt;typename T, typename = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value</link>&gt;::type&gt;
3125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">operator != </link>(&#32;<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;{
3126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!operator==(&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>,&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>&#32;);
3127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3128 
3129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">template &lt;typename T, typename = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value</link>&gt;::type&gt;
3130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">operator &lt;= </link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;{
3131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="_struct_catch_1_1true__given">lhs</link>)&#32;&lt;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>.m_value&#32;||&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>&#32;==&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>;
3132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3133 
3134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">template &lt;typename T, typename = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value</link>&gt;::type&gt;
3135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">operator &lt;= </link>(&#32;<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;{
3136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>.m_value&#32;&lt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="_struct_catch_1_1true__given">rhs</link>)&#32;||&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>&#32;==&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>;
3137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3138 
3139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">template &lt;typename T, typename = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value</link>&gt;::type&gt;
3140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">operator &gt;= </link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;{
3141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="_struct_catch_1_1true__given">lhs</link>)&#32;&gt;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>.m_value&#32;||&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>&#32;==&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>;
3142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3143 
3144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">template &lt;typename T, typename = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value</link>&gt;::type&gt;
3145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">operator &gt;= </link>(&#32;<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>&#32;)&#32;{
3146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>.m_value&#32;&gt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="_struct_catch_1_1true__given">rhs</link>)&#32;||&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>&#32;==&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>;
3147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3148 
3149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">template &lt;typename T, typename = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value</link>&gt;::type&gt;
3150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link>&amp;&#32;<link linkend="_class_catch_1_1_detail_1_1_approx_1a1feb255ab2b116e126c1994ab6c250fd">epsilon</link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">newEpsilon</link>&#32;)&#32;{
3151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">epsilonAsDouble</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="_struct_catch_1_1true__given">newEpsilon</link>);
3152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setEpsilon(<link linkend="_struct_catch_1_1true__given">epsilonAsDouble</link>);
3153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3155 
3156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">template &lt;typename T, typename = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value</link>&gt;::type&gt;
3157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link>&amp;&#32;<link linkend="_class_catch_1_1_detail_1_1_approx_1a617c79e67f8a52df3918293a3a8066ef">margin</link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">newMargin</link>&#32;)&#32;{
3158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">marginAsDouble</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="_struct_catch_1_1true__given">newMargin</link>);
3159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setMargin(<link linkend="_struct_catch_1_1true__given">marginAsDouble</link>);
3160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3162 
3163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">template &lt;typename T, typename = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value</link>&gt;::type&gt;
3164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link>&amp;&#32;<link linkend="_class_catch_1_1_detail_1_1_approx_1a9504645876aabe1fe4a807b84e445bc2">scale</link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">newScale</link>&#32;)&#32;{
3165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_scale&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="_struct_catch_1_1true__given">newScale</link>);
3166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3168 
3169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_catch_1_1_detail_1_1_approx_1a972fd9ac60607483263f1b0f0f9955e6">toString</link>()&#32;<emphasis role="keyword">const</emphasis>;
3170 
3171 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
3172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_catch_1_1_detail_1_1_approx_1af17c8e869ae7a55d14b99eb18e178114">m_epsilon</link>;
3173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_catch_1_1_detail_1_1_approx_1a4262a7e821eec507b424c335121ea0d8">m_margin</link>;
3174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_catch_1_1_detail_1_1_approx_1a65e9bdab9113ff3300b45f0a4e048dd7">m_scale</link>;
3175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_catch_1_1_detail_1_1_approx_1af7aeef703bd591f5ec85407b1dac053c">m_value</link>;
3176 &#32;&#32;&#32;&#32;};
3177 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Detail</emphasis>
3178 
3179 <emphasis role="keyword">namespace&#32;</emphasis>literals&#32;{
3180 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_detail_1_1_approx">Detail::Approx</link>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">_a</link>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">val</link>);
3181 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_detail_1_1_approx">Detail::Approx</link>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">_a</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">val</link>);
3182 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;literals</emphasis>
3183 
3184 <emphasis role="keyword">template</emphasis>&lt;&gt;
3185 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker</link>&lt;<link linkend="_namespace_catch">Catch</link>::<link linkend="_class_catch_1_1_detail_1_1_approx">Detail::Approx</link>&gt;&#32;{
3186 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_string_maker_3_01_catch_1_1_detail_1_1_approx_01_4_1a8e5015720682fecfbff0f05de19a698f">convert</link>(<link linkend="_class_catch_1_1_detail_1_1_approx">Catch::Detail::Approx</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;value);
3187 };
3188 
3189 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
3190 
3191 <emphasis role="comment">//&#32;end&#32;catch_approx.h</emphasis>
3192 <emphasis role="comment">//&#32;start&#32;catch_string_manip.h</emphasis>
3193 
3194 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
3195 <emphasis role="preprocessor">#include&#32;&lt;iosfwd&gt;</emphasis>
3196 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
3197 
3198 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
3199 
3200 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1a695f62327be0676e046291eeaae15110">startsWith</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">s</link>,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">prefix</link>&#32;);
3201 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1a695f62327be0676e046291eeaae15110">startsWith</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">s</link>,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">prefix</link>&#32;);
3202 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1ada025504f627feaf9ac68ca391515dff">endsWith</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">s</link>,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">suffix</link>&#32;);
3203 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1ada025504f627feaf9ac68ca391515dff">endsWith</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">s</link>,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">suffix</link>&#32;);
3204 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1aa52974b0e426e7e2fbd725a900e9c36e">contains</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">s</link>,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">infix</link>&#32;);
3205 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1a0760dbe87d090a55a35414db57d272c4">toLowerInPlace</link>(&#32;std::string&amp;&#32;<link linkend="_struct_catch_1_1true__given">s</link>&#32;);
3206 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_namespace_catch_1ac036a17412d318598ffda8e1fe7a1177">toLower</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">s</link>&#32;);
3208 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_namespace_catch_1a084108b47f37d8bfd5db51c50c7451b3">trim</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str&#32;);
3210 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<link linkend="_namespace_catch_1a084108b47f37d8bfd5db51c50c7451b3">trim</link>(<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<link linkend="_struct_catch_1_1true__given">ref</link>);
3211 
3212 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;!!!&#32;Be&#32;aware,&#32;returns&#32;refs&#32;into&#32;original&#32;string&#32;-&#32;make&#32;sure&#32;original&#32;string&#32;outlives&#32;them</emphasis>
3213 &#32;&#32;&#32;&#32;std::vector&lt;StringRef&gt;&#32;<link linkend="_namespace_catch_1a678e3c779388970bb3ec5802245f93d7">splitStringRef</link>(&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;str,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">delimiter</link>&#32;);
3214 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1afe4e6770da547e43e9e4eeaa05f946ea">replaceInPlace</link>(&#32;std::string&amp;&#32;str,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">replaceThis</link>,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">withThis</link>&#32;);
3215 
3216 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1pluralise">pluralise</link>&#32;{
3217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1pluralise_1a5c55e22de2416cfe416edf715c6b9234">pluralise</link>(&#32;std::size_t&#32;<link linkend="_struct_catch_1_1true__given">count</link>,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">label</link>&#32;);
3218 
3219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_catch_8h_1aae0cdd5d2f0ac242b9ab18b0f66ba26e">operator &lt;&lt; </link>(&#32;std::ostream&amp;&#32;<link linkend="_struct_catch_1_1true__given">os</link>,&#32;<link linkend="_struct_catch_1_1pluralise">pluralise</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">pluraliser</link>&#32;);
3220 
3221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;<link linkend="_struct_catch_1_1pluralise_1a4dce2fa13ec6f00fac09b2418265441e">m_count</link>;
3222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1pluralise_1a8849cbdd3f11ebe7747597c8644e8793">m_label</link>;
3223 &#32;&#32;&#32;&#32;};
3224 }
3225 
3226 <emphasis role="comment">//&#32;end&#32;catch_string_manip.h</emphasis>
3227 <emphasis role="preprocessor">#ifndef&#32;CATCH_CONFIG_DISABLE_MATCHERS</emphasis>
3228 <emphasis role="comment">//&#32;start&#32;catch_capture_matchers.h</emphasis>
3229 
3230 <emphasis role="comment">//&#32;start&#32;catch_matchers.h</emphasis>
3231 
3232 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
3233 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
3234 
3235 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
3236 <emphasis role="keyword">namespace&#32;</emphasis>Matchers&#32;{
3237 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Impl&#32;{
3238 
3239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ArgT&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_match_all_of">MatchAllOf</link>;
3240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ArgT&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_match_any_of">MatchAnyOf</link>;
3241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ArgT&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_match_not_of">MatchNotOf</link>;
3242 
3243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base">MatcherUntypedBase</link>&#32;{
3244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
3245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base_1ab65764dc245d85e2b268d3be870b650a">MatcherUntypedBase</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
3246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base_1a985fd3c3ffcc9f2e8dc7a330130040b0">MatcherUntypedBase</link>&#32;(&#32;<link linkend="_class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base">MatcherUntypedBase</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
3247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base">MatcherUntypedBase</link>&amp;&#32;<link linkend="_struct_catch_1_1true__given">operator = </link>(&#32;<link linkend="_class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base">MatcherUntypedBase</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
3248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base_1a5982c7c80ca71dfe2298babadad7a453">toString</link>()&#32;<emphasis role="keyword">const</emphasis>;
3249 
3250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
3251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base_1a853be93ce33f71b5abede38081c79e9d">~MatcherUntypedBase</link>();
3252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;std::string&#32;<link linkend="_class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base_1a91d3a907dbfcbb596077df24f6e11fe2">describe</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
3253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;std::string&#32;<link linkend="_class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base_1a951095c462657e7097a9a6dc4dde813f">m_cachedToString</link>;
3254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3255 
3256 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
3257 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;pragma&#32;clang&#32;diagnostic&#32;push</emphasis>
3258 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wnon-virtual-dtor&quot;</emphasis>
3259 <emphasis role="preprocessor">#endif</emphasis>
3260 
3261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ObjectT&gt;
3262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_method">MatcherMethod</link>&#32;{
3263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_method_1ae0920ff9e817acf08e1bb0cbcb044e30">match</link>(&#32;<link linkend="_struct_catch_1_1true__given">ObjectT</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">arg</link>&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
3264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3265 
3266 <emphasis role="preprocessor">#if&#32;defined(__OBJC__)</emphasis>
3267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Hack&#32;to&#32;fix&#32;Catch&#32;GH&#32;issue&#32;#1661.&#32;Could&#32;use&#32;id&#32;for&#32;generic&#32;Object&#32;support.</emphasis>
3268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;of&#32;const&#32;for&#32;Object&#32;pointers&#32;is&#32;very&#32;uncommon&#32;and&#32;under&#32;ARC&#32;it&#32;causes&#32;some&#32;kind&#32;of&#32;signature&#32;mismatch&#32;that&#32;breaks&#32;compilation</emphasis>
3269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
3270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_method">MatcherMethod</link>&lt;<link linkend="_struct_catch_1_1true__given">NSString</link>*&gt;&#32;{
3271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;match(&#32;<link linkend="_struct_catch_1_1true__given">NSString</link>*&#32;<link linkend="_struct_catch_1_1true__given">arg</link>&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
3272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3273 <emphasis role="preprocessor">#endif</emphasis>
3274 
3275 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
3276 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;pragma&#32;clang&#32;diagnostic&#32;pop</emphasis>
3277 <emphasis role="preprocessor">#endif</emphasis>
3278 
3279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">MatcherBase</link>&#32;:&#32;<link linkend="_class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base">MatcherUntypedBase</link>,&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_method">MatcherMethod</link>&lt;T&gt;&#32;{
3281 
3282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">MatchAllOf&lt;T&gt;</link>&#32;<link linkend="_struct_catch_1_1true__given">operator &amp;&amp; </link>(&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">MatcherBase</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">other</link>&#32;)&#32;<emphasis role="keyword">const</emphasis>;
3283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">MatchAnyOf&lt;T&gt;</link>&#32;<link linkend="_struct_catch_1_1true__given">operator || </link>(&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">MatcherBase</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">other</link>&#32;)&#32;<emphasis role="keyword">const</emphasis>;
3284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">MatchNotOf&lt;T&gt;</link>&#32;<link linkend="_struct_catch_1_1true__given">operator ! </link>()&#32;<emphasis role="keyword">const</emphasis>;
3285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3286 
3287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ArgT&gt;
3288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_match_all_of">MatchAllOf</link>&#32;:&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">MatcherBase</link>&lt;ArgT&gt;&#32;{
3289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_match_all_of_1acfb377bda2c58ae62e6df9c3a8a89f8f">match</link>(&#32;<link linkend="_struct_catch_1_1true__given">ArgT</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">arg</link>&#32;)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
3290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">matcher</link>&#32;:&#32;m_matchers&#32;)&#32;{
3291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_catch_1_1true__given">matcher</link>-&gt;match(<link linkend="_struct_catch_1_1true__given">arg</link>))
3292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
3295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_match_all_of_1acbb9a083e93b546fd33c9235b644c40f">describe</link>()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
3297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;description;
3298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;description.reserve(&#32;4&#32;+&#32;m_matchers.size()*32&#32;);
3299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;description&#32;+=&#32;<emphasis role="stringliteral">&quot;(&#32;&quot;</emphasis>;
3300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">first</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
3301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">matcher</link>&#32;:&#32;m_matchers&#32;)&#32;{
3302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_struct_catch_1_1true__given">first</link>&#32;)
3303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">first</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
3304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;description&#32;+=&#32;<emphasis role="stringliteral">&quot;&#32;and&#32;&quot;</emphasis>;
3306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;description&#32;+=&#32;<link linkend="_struct_catch_1_1true__given">matcher</link>-&gt;toString();
3307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;description&#32;+=&#32;<emphasis role="stringliteral">&quot;&#32;)&quot;</emphasis>;
3309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;description;
3310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3311 
3312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">MatchAllOf&lt;ArgT&gt;</link>&#32;<link linkend="_struct_catch_1_1true__given">operator &amp;&amp; </link>(&#32;<link linkend="_struct_catch_1_1true__given">MatcherBase&lt;ArgT&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">other</link>&#32;)&#32;{
3313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">copy</link>(*<emphasis role="keyword">this</emphasis>);
3314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">copy</link>.m_matchers.push_back(&#32;&amp;<link linkend="_struct_catch_1_1true__given">other</link>&#32;);
3315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">copy</link>;
3316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3317 
3318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;MatcherBase&lt;ArgT&gt;&#32;<emphasis role="keyword">const</emphasis>*&gt;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_match_all_of_1a98d6a2611f195a4a5c49f92fd877be9a">m_matchers</link>;
3319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ArgT&gt;
3321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_match_any_of">MatchAnyOf</link>&#32;:&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">MatcherBase</link>&lt;ArgT&gt;&#32;{
3322 
3323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_match_any_of_1a8a3e8338f979e56277dcf553efb78dc0">match</link>(&#32;<link linkend="_struct_catch_1_1true__given">ArgT</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">arg</link>&#32;)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
3324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">matcher</link>&#32;:&#32;m_matchers&#32;)&#32;{
3325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_catch_1_1true__given">matcher</link>-&gt;match(<link linkend="_struct_catch_1_1true__given">arg</link>))
3326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
3327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_match_any_of_1a315285204df93d1f8e72f50dd66eb709">describe</link>()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
3331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;description;
3332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;description.reserve(&#32;4&#32;+&#32;m_matchers.size()*32&#32;);
3333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;description&#32;+=&#32;<emphasis role="stringliteral">&quot;(&#32;&quot;</emphasis>;
3334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">first</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
3335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">matcher</link>&#32;:&#32;m_matchers&#32;)&#32;{
3336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_struct_catch_1_1true__given">first</link>&#32;)
3337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">first</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
3338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;description&#32;+=&#32;<emphasis role="stringliteral">&quot;&#32;or&#32;&quot;</emphasis>;
3340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;description&#32;+=&#32;<link linkend="_struct_catch_1_1true__given">matcher</link>-&gt;toString();
3341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;description&#32;+=&#32;<emphasis role="stringliteral">&quot;&#32;)&quot;</emphasis>;
3343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;description;
3344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3345 
3346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">MatchAnyOf&lt;ArgT&gt;</link>&#32;<link linkend="_struct_catch_1_1true__given">operator || </link>(&#32;<link linkend="_struct_catch_1_1true__given">MatcherBase&lt;ArgT&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">other</link>&#32;)&#32;{
3347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">copy</link>(*<emphasis role="keyword">this</emphasis>);
3348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">copy</link>.m_matchers.push_back(&#32;&amp;<link linkend="_struct_catch_1_1true__given">other</link>&#32;);
3349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">copy</link>;
3350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3351 
3352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;MatcherBase&lt;ArgT&gt;&#32;<emphasis role="keyword">const</emphasis>*&gt;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_match_any_of_1a1fb1119e6110dc15b8d5262ec0aeddd5">m_matchers</link>;
3353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3354 
3355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ArgT&gt;
3356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_match_not_of">MatchNotOf</link>&#32;:&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">MatcherBase</link>&lt;ArgT&gt;&#32;{
3357 
3358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_match_not_of_1a47afdd9e4c3354cef85adc3186097ae4">MatchNotOf</link>(&#32;<link linkend="_struct_catch_1_1true__given">MatcherBase&lt;ArgT&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">underlyingMatcher</link>&#32;)&#32;:&#32;m_underlyingMatcher(&#32;<link linkend="_struct_catch_1_1true__given">underlyingMatcher</link>&#32;)&#32;{}
3359 
3360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_match_not_of_1a181d693c0258e582d80dc6117a1f2b66">match</link>(&#32;<link linkend="_struct_catch_1_1true__given">ArgT</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">arg</link>&#32;)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
3361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!m_underlyingMatcher.match(&#32;<link linkend="_struct_catch_1_1true__given">arg</link>&#32;);
3362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3363 
3364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_match_not_of_1ac5fb4ef6a9069d23a4098c3c818f06b0">describe</link>()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
3365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;not&#32;&quot;</emphasis>&#32;+&#32;m_underlyingMatcher.toString();
3366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">MatcherBase&lt;ArgT&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_match_not_of_1af7ac67f112b0e93796b048a47329aad4">m_underlyingMatcher</link>;
3368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3369 
3370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">MatchAllOf&lt;T&gt;</link>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">MatcherBase&lt;T&gt;::operator &amp;&amp; </link>(&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">MatcherBase</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">other</link>&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
3372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">MatchAllOf&lt;T&gt;</link>()&#32;&amp;&amp;&#32;*<emphasis role="keyword">this</emphasis>&#32;&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">other</link>;
3373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">MatchAnyOf&lt;T&gt;</link>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">MatcherBase&lt;T&gt;::operator || </link>(&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">MatcherBase</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">other</link>&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
3376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">MatchAnyOf&lt;T&gt;</link>()&#32;||&#32;*<emphasis role="keyword">this</emphasis>&#32;||&#32;<link linkend="_struct_catch_1_1true__given">other</link>;
3377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">MatchNotOf&lt;T&gt;</link>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">MatcherBase&lt;T&gt;::operator ! </link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">MatchNotOf&lt;T&gt;</link>(&#32;*<emphasis role="keyword">this</emphasis>&#32;);
3381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3382 
3383 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Impl</emphasis>
3384 
3385 }&#32;<emphasis role="comment">//&#32;namespace&#32;Matchers</emphasis>
3386 
3387 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>Matchers;
3388 <emphasis role="keyword">using&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">Matchers::Impl::MatcherBase</link>;
3389 
3390 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
3391 
3392 <emphasis role="comment">//&#32;end&#32;catch_matchers.h</emphasis>
3393 <emphasis role="comment">//&#32;start&#32;catch_matchers_exception.hpp</emphasis>
3394 
3395 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
3396 <emphasis role="keyword">namespace&#32;</emphasis>Matchers&#32;{
3397 <emphasis role="keyword">namespace&#32;</emphasis>Exception&#32;{
3398 
3399 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_matchers_1_1_exception_1_1_exception_message_matcher">ExceptionMessageMatcher</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">MatcherBase</link>&lt;std::exception&gt;&#32;{
3400 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_catch_1_1_matchers_1_1_exception_1_1_exception_message_matcher_1a1cf4836834c357febac9180ab74a178a">m_message</link>;
3401 <emphasis role="keyword">public</emphasis>:
3402 
3403 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_matchers_1_1_exception_1_1_exception_message_matcher_1ace55942f39ba653db3fd69d6d90e188f">ExceptionMessageMatcher</link>(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;message):
3404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_message(message)
3405 &#32;&#32;&#32;&#32;{}
3406 
3407 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_matchers_1_1_exception_1_1_exception_message_matcher_1aa0566d24990d69e96495360b8f79593d">match</link>(std::exception&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">ex</link>)&#32;<emphasis role="keyword">const&#32;override</emphasis>;
3408 
3409 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_catch_1_1_matchers_1_1_exception_1_1_exception_message_matcher_1a3543441985ec877a781e660a403b1bae">describe</link>()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
3410 };
3411 
3412 }&#32;<emphasis role="comment">//&#32;namespace&#32;Exception</emphasis>
3413 
3414 <link linkend="_class_catch_1_1_matchers_1_1_exception_1_1_exception_message_matcher">Exception::ExceptionMessageMatcher</link>&#32;<link linkend="_namespace_catch_1_1_matchers_1a0fcd8bd126bb510a6bb99e6360aa270a">Message</link>(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;message);
3415 
3416 }&#32;<emphasis role="comment">//&#32;namespace&#32;Matchers</emphasis>
3417 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
3418 
3419 <emphasis role="comment">//&#32;end&#32;catch_matchers_exception.hpp</emphasis>
3420 <emphasis role="comment">//&#32;start&#32;catch_matchers_floating.h</emphasis>
3421 
3422 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
3423 <emphasis role="keyword">namespace&#32;</emphasis>Matchers&#32;{
3424 
3425 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Floating&#32;{
3426 
3427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">FloatingPointKind</link>&#32;:&#32;<link linkend="_struct_catch_1_1true__given">uint8_t</link>;
3428 
3429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_abs_matcher">WithinAbsMatcher</link>&#32;:&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">MatcherBase</link>&lt;double&gt;&#32;{
3430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_abs_matcher_1ac45340b98c41230a7def5bd86c2d870f">WithinAbsMatcher</link>(<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">target</link>,&#32;<emphasis role="keywordtype">double</emphasis>&#32;margin);
3431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_abs_matcher_1afa5d8eed57f12c1e5d006471eb0bfe72">match</link>(<emphasis role="keywordtype">double</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">matchee</link>)&#32;<emphasis role="keyword">const&#32;override</emphasis>;
3432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_abs_matcher_1a206a738680f8767af31d3f1835afff3f">describe</link>()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
3433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
3434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_abs_matcher_1a8d9f249c0e2969cf0522dc81db6ff280">m_target</link>;
3435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_abs_matcher_1a2270487cd55fa06044f5f6aaab724c5f">m_margin</link>;
3436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3437 
3438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_ulps_matcher">WithinUlpsMatcher</link>&#32;:&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">MatcherBase</link>&lt;double&gt;&#32;{
3439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_ulps_matcher_1a0d29702ebd6ab7b679c9ce275514fe1e">WithinUlpsMatcher</link>(<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">target</link>,&#32;<link linkend="_struct_catch_1_1true__given">uint64_t</link>&#32;<link linkend="_struct_catch_1_1true__given">ulps</link>,&#32;<link linkend="_struct_catch_1_1true__given">FloatingPointKind</link>&#32;<link linkend="_struct_catch_1_1true__given">baseType</link>);
3440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_ulps_matcher_1aabda42a0dc5d00f3c5916feb75006b32">match</link>(<emphasis role="keywordtype">double</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">matchee</link>)&#32;<emphasis role="keyword">const&#32;override</emphasis>;
3441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_ulps_matcher_1ad9bc8bb7f3abd326580a4bf6cf369b1b">describe</link>()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
3442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
3443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_ulps_matcher_1a97b0112726f510af8ca22cb490c2b14d">m_target</link>;
3444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">uint64_t</link>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_ulps_matcher_1a78fbf35cf9419ff31deb9432e314c1e3">m_ulps</link>;
3445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">FloatingPointKind</link>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_ulps_matcher_1ac5dc48ae38dbfe143647d450f03771ab">m_type</link>;
3446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3447 
3448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Given&#32;IEEE-754&#32;format&#32;for&#32;floats&#32;and&#32;doubles,&#32;we&#32;can&#32;assume</emphasis>
3449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;that&#32;float&#32;-&gt;&#32;double&#32;promotion&#32;is&#32;lossless.&#32;Given&#32;this,&#32;we&#32;can</emphasis>
3450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;assume&#32;that&#32;if&#32;we&#32;do&#32;the&#32;standard&#32;relative&#32;comparison&#32;of</emphasis>
3451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;|lhs&#32;-&#32;rhs|&#32;&lt;=&#32;epsilon&#32;*&#32;max(fabs(lhs),&#32;fabs(rhs)),&#32;then&#32;we&#32;get</emphasis>
3452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;same&#32;result&#32;if&#32;we&#32;do&#32;this&#32;for&#32;floats,&#32;as&#32;if&#32;we&#32;do&#32;this&#32;for</emphasis>
3453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;doubles&#32;that&#32;were&#32;promoted&#32;from&#32;floats.</emphasis>
3454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_rel_matcher">WithinRelMatcher</link>&#32;:&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">MatcherBase</link>&lt;double&gt;&#32;{
3455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_rel_matcher_1aadfe37f6ed9bb025c93e51e11d8bee43">WithinRelMatcher</link>(<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">target</link>,&#32;<emphasis role="keywordtype">double</emphasis>&#32;epsilon);
3456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_rel_matcher_1ac4fc68ff316028137a6d940e10d78e12">match</link>(<emphasis role="keywordtype">double</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">matchee</link>)&#32;<emphasis role="keyword">const&#32;override</emphasis>;
3457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_rel_matcher_1aeabbf5394d7dafebe874fef8a959fe8a">describe</link>()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
3458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
3459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_rel_matcher_1a183b3f551a7b016c741df61d0cde2a79">m_target</link>;
3460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_rel_matcher_1a8bc98bd240502f817308e1c17a153ced">m_epsilon</link>;
3461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3462 
3463 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Floating</emphasis>
3464 
3465 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;following&#32;functions&#32;create&#32;the&#32;actual&#32;matcher&#32;objects.</emphasis>
3466 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;allows&#32;the&#32;types&#32;to&#32;be&#32;inferred</emphasis>
3467 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_ulps_matcher">Floating::WithinUlpsMatcher</link>&#32;<link linkend="_namespace_catch_1_1_matchers_1ae77e233c3ed735ea12b7c726153798d1">WithinULP</link>(<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">target</link>,&#32;<link linkend="_struct_catch_1_1true__given">uint64_t</link>&#32;<link linkend="_struct_catch_1_1true__given">maxUlpDiff</link>);
3468 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_ulps_matcher">Floating::WithinUlpsMatcher</link>&#32;<link linkend="_namespace_catch_1_1_matchers_1ae77e233c3ed735ea12b7c726153798d1">WithinULP</link>(<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">target</link>,&#32;<link linkend="_struct_catch_1_1true__given">uint64_t</link>&#32;<link linkend="_struct_catch_1_1true__given">maxUlpDiff</link>);
3469 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_abs_matcher">Floating::WithinAbsMatcher</link>&#32;<link linkend="_namespace_catch_1_1_matchers_1a4c9ea76d47d02de0cf2d354c87c26e95">WithinAbs</link>(<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">target</link>,&#32;<emphasis role="keywordtype">double</emphasis>&#32;margin);
3470 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_rel_matcher">Floating::WithinRelMatcher</link>&#32;<link linkend="_namespace_catch_1_1_matchers_1a0c559d9cfda02a81941ad6933f4ca450">WithinRel</link>(<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">target</link>,&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">eps</link>);
3471 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;defaults&#32;epsilon&#32;to&#32;100*numeric_limits&lt;double&gt;::epsilon()</emphasis>
3472 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_rel_matcher">Floating::WithinRelMatcher</link>&#32;<link linkend="_namespace_catch_1_1_matchers_1a0c559d9cfda02a81941ad6933f4ca450">WithinRel</link>(<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">target</link>);
3473 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_rel_matcher">Floating::WithinRelMatcher</link>&#32;<link linkend="_namespace_catch_1_1_matchers_1a0c559d9cfda02a81941ad6933f4ca450">WithinRel</link>(<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">target</link>,&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">eps</link>);
3474 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;defaults&#32;epsilon&#32;to&#32;100*numeric_limits&lt;float&gt;::epsilon()</emphasis>
3475 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_floating_1_1_within_rel_matcher">Floating::WithinRelMatcher</link>&#32;<link linkend="_namespace_catch_1_1_matchers_1a0c559d9cfda02a81941ad6933f4ca450">WithinRel</link>(<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">target</link>);
3476 
3477 }&#32;<emphasis role="comment">//&#32;namespace&#32;Matchers</emphasis>
3478 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
3479 
3480 <emphasis role="comment">//&#32;end&#32;catch_matchers_floating.h</emphasis>
3481 <emphasis role="comment">//&#32;start&#32;catch_matchers_generic.hpp</emphasis>
3482 
3483 <emphasis role="preprocessor">#include&#32;&lt;functional&gt;</emphasis>
3484 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
3485 
3486 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
3487 <emphasis role="keyword">namespace&#32;</emphasis>Matchers&#32;{
3488 <emphasis role="keyword">namespace&#32;</emphasis>Generic&#32;{
3489 
3490 <emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
3491 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_namespace_catch_1_1_matchers_1_1_generic_1_1_detail_1a79ef1103073f7a8d31735436d2012835">finalizeDescription</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;<link linkend="_struct_catch_1_1true__given">desc</link>);
3492 }
3493 
3494 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3495 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_matchers_1_1_generic_1_1_predicate_matcher">PredicateMatcher</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">MatcherBase</link>&lt;T&gt;&#32;{
3496 &#32;&#32;&#32;&#32;std::function&lt;<link linkend="_struct_catch_1_1true__given">bool</link>(<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;)&gt;&#32;<link linkend="_class_catch_1_1_matchers_1_1_generic_1_1_predicate_matcher_1a7f09569a99ae04086f75e2c358d17fc6">m_predicate</link>;
3497 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_catch_1_1_matchers_1_1_generic_1_1_predicate_matcher_1a7736732e65a93e4e1f889804d043407e">m_description</link>;
3498 <emphasis role="keyword">public</emphasis>:
3499 
3500 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_matchers_1_1_generic_1_1_predicate_matcher_1a57d53ef028c2f7b92b016f627f91aa76">PredicateMatcher</link>(std::function&lt;<emphasis role="keywordtype">bool</emphasis>(<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;)&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">elem</link>,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">descr</link>)
3501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:m_predicate(std::<link linkend="_struct_catch_1_1true__given">move</link>(<link linkend="_struct_catch_1_1true__given">elem</link>)),
3502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_description(Detail::finalizeDescription(<link linkend="_struct_catch_1_1true__given">descr</link>))
3503 &#32;&#32;&#32;&#32;{}
3504 
3505 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_matchers_1_1_generic_1_1_predicate_matcher_1a2ec0e8ec19c4c5e26271d59a06a62b52">match</link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">item</link>&#32;)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
3506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_predicate(<link linkend="_struct_catch_1_1true__given">item</link>);
3507 &#32;&#32;&#32;&#32;}
3508 
3509 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_catch_1_1_matchers_1_1_generic_1_1_predicate_matcher_1af7d59e94892cc09471bbaefac4c889fd">describe</link>()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
3510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_description;
3511 &#32;&#32;&#32;&#32;}
3512 };
3513 
3514 }&#32;<emphasis role="comment">//&#32;namespace&#32;Generic</emphasis>
3515 
3516 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;following&#32;functions&#32;create&#32;the&#32;actual&#32;matcher&#32;objects.</emphasis>
3517 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;user&#32;has&#32;to&#32;explicitly&#32;specify&#32;type&#32;to&#32;the&#32;function,&#32;because</emphasis>
3518 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;inferring&#32;std::function&lt;bool(T&#32;const&amp;)&gt;&#32;is&#32;hard&#32;(but&#32;possible)&#32;and</emphasis>
3519 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;requires&#32;a&#32;lot&#32;of&#32;TMP.</emphasis>
3520 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3521 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_matchers_1_1_generic_1_1_predicate_matcher">Generic::PredicateMatcher&lt;T&gt;</link>&#32;<link linkend="_namespace_catch_1_1_matchers_1a70a7c65c44f6ea7f739402c0b6f28657">Predicate</link>(std::function&lt;<emphasis role="keywordtype">bool</emphasis>(<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;)&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">predicate</link>,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;description&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;{
3522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_catch_1_1_matchers_1_1_generic_1_1_predicate_matcher">Generic::PredicateMatcher&lt;T&gt;</link>(<link linkend="_struct_catch_1_1true__given">predicate</link>,&#32;description);
3523 &#32;&#32;&#32;&#32;}
3524 
3525 }&#32;<emphasis role="comment">//&#32;namespace&#32;Matchers</emphasis>
3526 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
3527 
3528 <emphasis role="comment">//&#32;end&#32;catch_matchers_generic.hpp</emphasis>
3529 <emphasis role="comment">//&#32;start&#32;catch_matchers_string.h</emphasis>
3530 
3531 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
3532 
3533 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
3534 <emphasis role="keyword">namespace&#32;</emphasis>Matchers&#32;{
3535 
3536 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>StdString&#32;{
3537 
3538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string">CasedString</link>
3539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string_1aa88bbc5acd2bff22351d8d4b1816b561">CasedString</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str,&#32;<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6a">CaseSensitive::Choice</link>&#32;<link linkend="_struct_catch_1_1true__given">caseSensitivity</link>&#32;);
3541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string_1a77639b1165c01f424ee0e96f53335010">adjustString</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str&#32;)&#32;<emphasis role="keyword">const</emphasis>;
3542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string_1a9759155344d696b2476d764a1d95fcc9">caseSensitivitySuffix</link>()&#32;<emphasis role="keyword">const</emphasis>;
3543 
3544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6a">CaseSensitive::Choice</link>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string_1ae1c2864c986941536a6e94cca0528f92">m_caseSensitivity</link>;
3545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string_1ad05dbc99aba3c3c386d6b856b213f911">m_str</link>;
3546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3547 
3548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_string_matcher_base">StringMatcherBase</link>&#32;:&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">MatcherBase</link>&lt;std::string&gt;&#32;{
3549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_string_matcher_base_1a3a9b66bae298ae27058478529b4bb39d">StringMatcherBase</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">operation</link>,&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string">CasedString</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">comparator</link>&#32;);
3550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_string_matcher_base_1a47af030f8cea42a601ffb1000eea5cca">describe</link>()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
3551 
3552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string">CasedString</link>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_string_matcher_base_1a17c9f0fe40587070ffe998c193742831">m_comparator</link>;
3553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_string_matcher_base_1a7a25c4b7d863e9a1c406d81efd0f83ca">m_operation</link>;
3554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3555 
3556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_equals_matcher">EqualsMatcher</link>&#32;:&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_string_matcher_base">StringMatcherBase</link>&#32;{
3557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_equals_matcher_1ab740f1fb2310e9fe3fed5134d4c7e4c8">EqualsMatcher</link>(&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string">CasedString</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">comparator</link>&#32;);
3558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_equals_matcher_1a0bb9d64693f7bb1ef7441062d219f21a">match</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">source</link>&#32;)&#32;<emphasis role="keyword">const&#32;override</emphasis>;
3559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_contains_matcher">ContainsMatcher</link>&#32;:&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_string_matcher_base">StringMatcherBase</link>&#32;{
3561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_contains_matcher_1acc892883c8409e34b28c9b39d4ef1fe3">ContainsMatcher</link>(&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string">CasedString</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">comparator</link>&#32;);
3562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_contains_matcher_1a630628b234b037be83fe587081a80b53">match</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">source</link>&#32;)&#32;<emphasis role="keyword">const&#32;override</emphasis>;
3563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_starts_with_matcher">StartsWithMatcher</link>&#32;:&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_string_matcher_base">StringMatcherBase</link>&#32;{
3565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_starts_with_matcher_1a7b86f258bdbd131a6e7bcd94a8977325">StartsWithMatcher</link>(&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string">CasedString</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">comparator</link>&#32;);
3566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_starts_with_matcher_1a7da4747aed0c48989d8be59a89e2b7fb">match</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">source</link>&#32;)&#32;<emphasis role="keyword">const&#32;override</emphasis>;
3567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_ends_with_matcher">EndsWithMatcher</link>&#32;:&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_string_matcher_base">StringMatcherBase</link>&#32;{
3569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_ends_with_matcher_1aa5ec700b4629562f74f362080accfd7b">EndsWithMatcher</link>(&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string">CasedString</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">comparator</link>&#32;);
3570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_ends_with_matcher_1aca2741fa57374a2a98d2a84ac3e13a6d">match</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">source</link>&#32;)&#32;<emphasis role="keyword">const&#32;override</emphasis>;
3571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3572 
3573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_regex_matcher">RegexMatcher</link>&#32;:&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">MatcherBase</link>&lt;std::string&gt;&#32;{
3574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_regex_matcher_1ab914deb885fe25558c41ab368c6b3916">RegexMatcher</link>(&#32;std::string&#32;<link linkend="_struct_catch_1_1true__given">regex</link>,&#32;<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6a">CaseSensitive::Choice</link>&#32;<link linkend="_struct_catch_1_1true__given">caseSensitivity</link>&#32;);
3575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_regex_matcher_1aa8e61adccabb2f36133029301f6b8f4e">match</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">matchee</link>&#32;)&#32;<emphasis role="keyword">const&#32;override</emphasis>;
3576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_regex_matcher_1a1f788cd5258c987e5043f6c7f43adeb9">describe</link>()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
3577 
3578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
3579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_regex_matcher_1af1020e7266bcfa76ffad011ff89ea14e">m_regex</link>;
3580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6a">CaseSensitive::Choice</link>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_regex_matcher_1afb5fb3d3734c4e882162b51559d09bd4">m_caseSensitivity</link>;
3581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3582 
3583 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;StdString</emphasis>
3584 
3585 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;following&#32;functions&#32;create&#32;the&#32;actual&#32;matcher&#32;objects.</emphasis>
3586 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;allows&#32;the&#32;types&#32;to&#32;be&#32;inferred</emphasis>
3587 
3588 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_equals_matcher">StdString::EqualsMatcher</link>&#32;<link linkend="_namespace_catch_1_1_matchers_1af8af7dfc338335ed4c788cb1b37fc59f">Equals</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str,&#32;<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6a">CaseSensitive::Choice</link>&#32;<link linkend="_struct_catch_1_1true__given">caseSensitivity</link>&#32;=&#32;CaseSensitive::Yes&#32;);
3589 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_contains_matcher">StdString::ContainsMatcher</link>&#32;<link linkend="_namespace_catch_1_1_matchers_1a1f6c2accdc6cd75a84d7112dcad647b4">Contains</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str,&#32;<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6a">CaseSensitive::Choice</link>&#32;<link linkend="_struct_catch_1_1true__given">caseSensitivity</link>&#32;=&#32;CaseSensitive::Yes&#32;);
3590 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_ends_with_matcher">StdString::EndsWithMatcher</link>&#32;<link linkend="_namespace_catch_1_1_matchers_1ae5a45efb4538c57c43e04f3f9043ad6e">EndsWith</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str,&#32;<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6a">CaseSensitive::Choice</link>&#32;<link linkend="_struct_catch_1_1true__given">caseSensitivity</link>&#32;=&#32;CaseSensitive::Yes&#32;);
3591 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_starts_with_matcher">StdString::StartsWithMatcher</link>&#32;<link linkend="_namespace_catch_1_1_matchers_1a97c9ee09a70378ca7e8c6f9f01b0d6d1">StartsWith</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str,&#32;<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6a">CaseSensitive::Choice</link>&#32;<link linkend="_struct_catch_1_1true__given">caseSensitivity</link>&#32;=&#32;CaseSensitive::Yes&#32;);
3592 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_regex_matcher">StdString::RegexMatcher</link>&#32;<link linkend="_namespace_catch_1_1_matchers_1a82f1893cf50ae4c14b9b3e0980bf22b8">Matches</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">regex</link>,&#32;<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6a">CaseSensitive::Choice</link>&#32;<link linkend="_struct_catch_1_1true__given">caseSensitivity</link>&#32;=&#32;CaseSensitive::Yes&#32;);
3593 
3594 }&#32;<emphasis role="comment">//&#32;namespace&#32;Matchers</emphasis>
3595 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
3596 
3597 <emphasis role="comment">//&#32;end&#32;catch_matchers_string.h</emphasis>
3598 <emphasis role="comment">//&#32;start&#32;catch_matchers_vector.h</emphasis>
3599 
3600 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
3601 
3602 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
3603 <emphasis role="keyword">namespace&#32;</emphasis>Matchers&#32;{
3604 
3605 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Vector&#32;{
3606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;Alloc&gt;
3607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_contains_element_matcher">ContainsElementMatcher</link>&#32;:&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">MatcherBase</link>&lt;std::vector&lt;T,&#32;Alloc&gt;&gt;&#32;{
3608 
3609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_contains_element_matcher_1a3f094e7ba2cf4764e784253818c506c8">ContainsElementMatcher</link>(<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;<link linkend="_struct_catch_1_1true__given">comparator</link>)&#32;:&#32;m_comparator(&#32;<link linkend="_struct_catch_1_1true__given">comparator</link>)&#32;{}
3610 
3611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_contains_element_matcher_1ac39745f1d1e2f102121a443fad761de3">match</link>(std::vector&lt;T,&#32;Alloc&gt;&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;<link linkend="_struct_catch_1_1true__given">v</link>)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
3612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">el</link>&#32;:&#32;<link linkend="_struct_catch_1_1true__given">v</link>)&#32;{
3613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_catch_1_1true__given">el</link>&#32;==&#32;m_comparator)&#32;{
3614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
3615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3619 
3620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_contains_element_matcher_1a4bcd9a471271ed4dadf5db7987baeeaa">describe</link>()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
3621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Contains:&#32;&quot;</emphasis>&#32;+&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">::Catch::Detail::stringify</link>(&#32;m_comparator&#32;);
3622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3623 
3624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_contains_element_matcher_1adecd94fee58a2fea0fc6d4d62a7a95ee">m_comparator</link>;
3625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3626 
3627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;AllocComp,&#32;<emphasis role="keyword">typename</emphasis>&#32;AllocMatch&gt;
3628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_contains_matcher">ContainsMatcher</link>&#32;:&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">MatcherBase</link>&lt;std::vector&lt;T,&#32;AllocMatch&gt;&gt;&#32;{
3629 
3630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_contains_matcher_1a5cff10175edc91ed105b157493218ad8">ContainsMatcher</link>(std::vector&lt;T,&#32;AllocComp&gt;&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;<link linkend="_struct_catch_1_1true__given">comparator</link>)&#32;:&#32;m_comparator(&#32;<link linkend="_struct_catch_1_1true__given">comparator</link>&#32;)&#32;{}
3631 
3632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_contains_matcher_1a3104513b50a3da1659f82d69ac79057d">match</link>(std::vector&lt;T,&#32;AllocMatch&gt;&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;<link linkend="_struct_catch_1_1true__given">v</link>)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
3633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;!TBD:&#32;see&#32;note&#32;in&#32;EqualsMatcher</emphasis>
3634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_comparator.size()&#32;&gt;&#32;<link linkend="_struct_catch_1_1true__given">v</link>.size())
3635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">comparator</link>&#32;:&#32;m_comparator)&#32;{
3637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">present</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
3638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">el</link>&#32;:&#32;<link linkend="_struct_catch_1_1true__given">v</link>)&#32;{
3639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_catch_1_1true__given">el</link>&#32;==&#32;<link linkend="_struct_catch_1_1true__given">comparator</link>)&#32;{
3640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">present</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
3641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_catch_1_1true__given">present</link>)&#32;{
3645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
3649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_contains_matcher_1aa8ba33f6de86d0198b77023e1808933b">describe</link>()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
3651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Contains:&#32;&quot;</emphasis>&#32;+&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">::Catch::Detail::stringify</link>(&#32;m_comparator&#32;);
3652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3653 
3654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;T,&#32;AllocComp&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_contains_matcher_1a76f6a1d34cfe94e506fc44175fc2981d">m_comparator</link>;
3655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3656 
3657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;AllocComp,&#32;<emphasis role="keyword">typename</emphasis>&#32;AllocMatch&gt;
3658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_equals_matcher">EqualsMatcher</link>&#32;:&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">MatcherBase</link>&lt;std::vector&lt;T,&#32;AllocMatch&gt;&gt;&#32;{
3659 
3660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_equals_matcher_1aca4855dbe43977f4aceae8fd0a0422a8">EqualsMatcher</link>(std::vector&lt;T,&#32;AllocComp&gt;&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;<link linkend="_struct_catch_1_1true__given">comparator</link>)&#32;:&#32;m_comparator(&#32;<link linkend="_struct_catch_1_1true__given">comparator</link>&#32;)&#32;{}
3661 
3662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_equals_matcher_1a4d46442b9d25b2234138359faab4f19d">match</link>(std::vector&lt;T,&#32;AllocMatch&gt;&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;<link linkend="_struct_catch_1_1true__given">v</link>)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
3663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;!TBD:&#32;This&#32;currently&#32;works&#32;if&#32;all&#32;elements&#32;can&#32;be&#32;compared&#32;using&#32;!=</emphasis>
3664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-&#32;a&#32;more&#32;general&#32;approach&#32;would&#32;be&#32;via&#32;a&#32;compare&#32;template&#32;that&#32;defaults</emphasis>
3665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;using&#32;!=.&#32;but&#32;could&#32;be&#32;specialised&#32;for,&#32;e.g.&#32;std::vector&lt;T,&#32;Alloc&gt;&#32;etc</emphasis>
3666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-&#32;then&#32;just&#32;call&#32;that&#32;directly</emphasis>
3667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_comparator.size()&#32;!=&#32;<link linkend="_struct_catch_1_1true__given">v</link>.size())
3668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;<link linkend="_struct_catch_1_1true__given">i</link>&#32;=&#32;0;&#32;<link linkend="_struct_catch_1_1true__given">i</link>&#32;&lt;&#32;<link linkend="_struct_catch_1_1true__given">v</link>.size();&#32;++<link linkend="_struct_catch_1_1true__given">i</link>)
3670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_comparator[<link linkend="_struct_catch_1_1true__given">i</link>]&#32;!=&#32;<link linkend="_struct_catch_1_1true__given">v</link>[<link linkend="_struct_catch_1_1true__given">i</link>])
3671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
3673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_equals_matcher_1a398b5cc80200b3b45922c36bddcb4b37">describe</link>()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
3675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Equals:&#32;&quot;</emphasis>&#32;+&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">::Catch::Detail::stringify</link>(&#32;m_comparator&#32;);
3676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;T,&#32;AllocComp&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_equals_matcher_1aaa9099439a6f553fe47ff5ac2fdf3b3c">m_comparator</link>;
3678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3679 
3680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;AllocComp,&#32;<emphasis role="keyword">typename</emphasis>&#32;AllocMatch&gt;
3681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher">ApproxMatcher</link>&#32;:&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">MatcherBase</link>&lt;std::vector&lt;T,&#32;AllocMatch&gt;&gt;&#32;{
3682 
3683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher_1a23147d891d3d9b6bb0af599ee87bbcc2">ApproxMatcher</link>(std::vector&lt;T,&#32;AllocComp&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">comparator</link>)&#32;:&#32;m_comparator(&#32;<link linkend="_struct_catch_1_1true__given">comparator</link>&#32;)&#32;{}
3684 
3685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher_1af200c5c98e8e2a6f24617ef4a0a6830a">match</link>(std::vector&lt;T,&#32;AllocMatch&gt;&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;<link linkend="_struct_catch_1_1true__given">v</link>)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
3686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_comparator.size()&#32;!=&#32;<link linkend="_struct_catch_1_1true__given">v</link>.size())
3687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;<link linkend="_struct_catch_1_1true__given">i</link>&#32;=&#32;0;&#32;<link linkend="_struct_catch_1_1true__given">i</link>&#32;&lt;&#32;<link linkend="_struct_catch_1_1true__given">v</link>.size();&#32;++<link linkend="_struct_catch_1_1true__given">i</link>)
3689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_comparator[<link linkend="_struct_catch_1_1true__given">i</link>]&#32;!=&#32;approx(<link linkend="_struct_catch_1_1true__given">v</link>[<link linkend="_struct_catch_1_1true__given">i</link>]))
3690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
3692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher_1a760b0d1922d53b7ec327ac7418681c3f">describe</link>()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
3694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;is&#32;approx:&#32;&quot;</emphasis>&#32;+&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">::Catch::Detail::stringify</link>(&#32;m_comparator&#32;);
3695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">template &lt;typename = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value</link>&gt;::type&gt;
3697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher">ApproxMatcher</link>&amp;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher_1aa459371d702f3230df20000f40585f2a">epsilon</link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">newEpsilon</link>&#32;)&#32;{
3698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;approx.<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher_1aa459371d702f3230df20000f40585f2a">epsilon</link>(<link linkend="_struct_catch_1_1true__given">newEpsilon</link>);
3699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">template &lt;typename = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value</link>&gt;::type&gt;
3702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher">ApproxMatcher</link>&amp;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher_1a9cb1a0ca6bd538f98a6c87d9202156d6">margin</link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">newMargin</link>&#32;)&#32;{
3703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;approx.<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher_1a9cb1a0ca6bd538f98a6c87d9202156d6">margin</link>(<link linkend="_struct_catch_1_1true__given">newMargin</link>);
3704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">template &lt;typename = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value</link>&gt;::type&gt;
3707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher">ApproxMatcher</link>&amp;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher_1a0c30af2e88e9ba997fd7400d3d4ac93d">scale</link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">newScale</link>&#32;)&#32;{
3708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;approx.<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher_1a0c30af2e88e9ba997fd7400d3d4ac93d">scale</link>(<link linkend="_struct_catch_1_1true__given">newScale</link>);
3709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3711 
3712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;T,&#32;AllocComp&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher_1a482a43ccf47697830d23bf0beaf06b9b">m_comparator</link>;
3713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;<link linkend="_class_catch_1_1_detail_1_1_approx">Catch::Detail::Approx</link>&#32;approx&#32;=&#32;<link linkend="_class_catch_1_1_detail_1_1_approx_1aaf86dc0ee92272ac2d9839197a07951d">Catch::Detail::Approx::custom</link>();
3714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3715 
3716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;AllocComp,&#32;<emphasis role="keyword">typename</emphasis>&#32;AllocMatch&gt;
3717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_unordered_equals_matcher">UnorderedEqualsMatcher</link>&#32;:&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">MatcherBase</link>&lt;std::vector&lt;T,&#32;AllocMatch&gt;&gt;&#32;{
3718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_unordered_equals_matcher_1ab78e6bbbad05472815a695650edc062c">UnorderedEqualsMatcher</link>(std::vector&lt;T,&#32;AllocComp&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">target</link>)&#32;:&#32;m_target(<link linkend="_struct_catch_1_1true__given">target</link>)&#32;{}
3719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_unordered_equals_matcher_1abd5547585ba722cf3bb7aa3f9a8ffc0e">match</link>(std::vector&lt;T,&#32;AllocMatch&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">vec</link>)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
3720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_target.size()&#32;!=&#32;<link linkend="_struct_catch_1_1true__given">vec</link>.size())&#32;{
3721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::is_permutation(m_target.begin(),&#32;m_target.end(),&#32;<link linkend="_struct_catch_1_1true__given">vec</link>.begin());
3724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3725 
3726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_unordered_equals_matcher_1a33b685a1505a0afe06ded7e0d207bc14">describe</link>()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
3727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;UnorderedEquals:&#32;&quot;</emphasis>&#32;+&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">::Catch::Detail::stringify</link>(m_target);
3728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
3730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;T,&#32;AllocComp&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_unordered_equals_matcher_1af80c33049e111b60cff3682f5829d3b6">m_target</link>;
3731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3732 
3733 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Vector</emphasis>
3734 
3735 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;following&#32;functions&#32;create&#32;the&#32;actual&#32;matcher&#32;objects.</emphasis>
3736 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;allows&#32;the&#32;types&#32;to&#32;be&#32;inferred</emphasis>
3737 
3738 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;AllocComp&#32;=&#32;std::allocator&lt;T&gt;,&#32;<emphasis role="keyword">typename</emphasis>&#32;AllocMatch&#32;=&#32;AllocComp&gt;
3739 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_contains_matcher">Vector::ContainsMatcher&lt;T, AllocComp, AllocMatch&gt;</link>&#32;<link linkend="_namespace_catch_1_1_matchers_1a1f6c2accdc6cd75a84d7112dcad647b4">Contains</link>(&#32;std::vector&lt;T,&#32;AllocComp&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">comparator</link>&#32;)&#32;{
3740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_contains_matcher">Vector::ContainsMatcher&lt;T, AllocComp, AllocMatch&gt;</link>(&#32;<link linkend="_struct_catch_1_1true__given">comparator</link>&#32;);
3741 &#32;&#32;&#32;&#32;}
3742 
3743 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;Alloc&#32;=&#32;std::allocator&lt;T&gt;&gt;
3744 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_contains_element_matcher">Vector::ContainsElementMatcher&lt;T, Alloc&gt;</link>&#32;<link linkend="_namespace_catch_1_1_matchers_1ad8092d8b34128390dbff20b87f2f6f99">VectorContains</link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">comparator</link>&#32;)&#32;{
3745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_contains_element_matcher">Vector::ContainsElementMatcher&lt;T, Alloc&gt;</link>(&#32;<link linkend="_struct_catch_1_1true__given">comparator</link>&#32;);
3746 &#32;&#32;&#32;&#32;}
3747 
3748 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;AllocComp&#32;=&#32;std::allocator&lt;T&gt;,&#32;<emphasis role="keyword">typename</emphasis>&#32;AllocMatch&#32;=&#32;AllocComp&gt;
3749 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_equals_matcher">Vector::EqualsMatcher&lt;T, AllocComp, AllocMatch&gt;</link>&#32;<link linkend="_namespace_catch_1_1_matchers_1af8af7dfc338335ed4c788cb1b37fc59f">Equals</link>(&#32;std::vector&lt;T,&#32;AllocComp&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">comparator</link>&#32;)&#32;{
3750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_equals_matcher">Vector::EqualsMatcher&lt;T, AllocComp, AllocMatch&gt;</link>(&#32;<link linkend="_struct_catch_1_1true__given">comparator</link>&#32;);
3751 &#32;&#32;&#32;&#32;}
3752 
3753 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;AllocComp&#32;=&#32;std::allocator&lt;T&gt;,&#32;<emphasis role="keyword">typename</emphasis>&#32;AllocMatch&#32;=&#32;AllocComp&gt;
3754 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher">Vector::ApproxMatcher&lt;T, AllocComp, AllocMatch&gt;</link>&#32;<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link>(&#32;std::vector&lt;T,&#32;AllocComp&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">comparator</link>&#32;)&#32;{
3755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher">Vector::ApproxMatcher&lt;T, AllocComp, AllocMatch&gt;</link>(&#32;<link linkend="_struct_catch_1_1true__given">comparator</link>&#32;);
3756 &#32;&#32;&#32;&#32;}
3757 
3758 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;AllocComp&#32;=&#32;std::allocator&lt;T&gt;,&#32;<emphasis role="keyword">typename</emphasis>&#32;AllocMatch&#32;=&#32;AllocComp&gt;
3759 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_unordered_equals_matcher">Vector::UnorderedEqualsMatcher&lt;T, AllocComp, AllocMatch&gt;</link>&#32;<link linkend="_namespace_catch_1_1_matchers_1a3b1784cd26bd7e3fea38505eb138b186">UnorderedEquals</link>(std::vector&lt;T,&#32;AllocComp&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">target</link>)&#32;{
3760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_matchers_1_1_vector_1_1_unordered_equals_matcher">Vector::UnorderedEqualsMatcher&lt;T, AllocComp, AllocMatch&gt;</link>(&#32;<link linkend="_struct_catch_1_1true__given">target</link>&#32;);
3761 &#32;&#32;&#32;&#32;}
3762 
3763 }&#32;<emphasis role="comment">//&#32;namespace&#32;Matchers</emphasis>
3764 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
3765 
3766 <emphasis role="comment">//&#32;end&#32;catch_matchers_vector.h</emphasis>
3767 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
3768 
3769 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ArgT,&#32;<emphasis role="keyword">typename</emphasis>&#32;MatcherT&gt;
3770 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_match_expr">MatchExpr</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_catch_1_1_i_transient_expression">ITransientExpression</link>&#32;{
3771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">ArgT</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_class_catch_1_1_match_expr_1afb77e2fbf49f956d27f8617a70cf7118">m_arg</link>;
3772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">MatcherT</link>&#32;<link linkend="_class_catch_1_1_match_expr_1a4dea78586dd2b3268b4a186e7c0adbe2">m_matcher</link>;
3773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<link linkend="_class_catch_1_1_match_expr_1a33ec706994f744ff1f4a549177ec08f9">m_matcherString</link>;
3774 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
3775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_match_expr_1ae55ee9bf46c8676c65e9df291a98c345">MatchExpr</link>(&#32;<link linkend="_struct_catch_1_1true__given">ArgT</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">arg</link>,&#32;<link linkend="_struct_catch_1_1true__given">MatcherT</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">matcher</link>,&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">matcherString</link>&#32;)
3776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_transient_expression">ITransientExpression</link>{&#32;<link linkend="_struct_catch_1_1true__given">true</link>,&#32;<link linkend="_struct_catch_1_1true__given">matcher</link>.match(&#32;<link linkend="_struct_catch_1_1true__given">arg</link>&#32;)&#32;},
3777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_arg(&#32;<link linkend="_struct_catch_1_1true__given">arg</link>&#32;),
3778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_matcher(&#32;<link linkend="_struct_catch_1_1true__given">matcher</link>&#32;),
3779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_matcherString(&#32;<link linkend="_struct_catch_1_1true__given">matcherString</link>&#32;)
3780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
3781 
3782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_match_expr_1ad3e41adb597750b2219bb37e51185629">streamReconstructedExpression</link>(&#32;std::ostream&#32;&amp;<link linkend="_struct_catch_1_1true__given">os</link>&#32;)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
3783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">matcherAsString</link>&#32;=&#32;m_matcher.toString();
3784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">os</link>&#32;&lt;&lt;&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">Catch::Detail::stringify</link>(&#32;m_arg&#32;)&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>;
3785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_struct_catch_1_1true__given">matcherAsString</link>&#32;==&#32;Detail::unprintableString&#32;)
3786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">os</link>&#32;&lt;&lt;&#32;m_matcherString;
3787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">os</link>&#32;&lt;&lt;&#32;<link linkend="_struct_catch_1_1true__given">matcherAsString</link>;
3789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3790 &#32;&#32;&#32;&#32;};
3791 
3792 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">StringMatcher</link>&#32;=&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">Matchers::Impl::MatcherBase&lt;std::string&gt;</link>;
3793 
3794 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1aea6f8ff3b3838829d4a61694e4bc41ca">handleExceptionMatchExpr</link>(&#32;<link linkend="_class_catch_1_1_assertion_handler">AssertionHandler</link>&amp;&#32;<link linkend="_struct_catch_1_1true__given">handler</link>,&#32;<link linkend="_struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base">StringMatcher</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">matcher</link>,&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">matcherString</link>&#32;&#32;);
3795 
3796 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ArgT,&#32;<emphasis role="keyword">typename</emphasis>&#32;MatcherT&gt;
3797 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1a23a9a9a6dfef7ecd5e0eaf553fc52de6">makeMatchExpr</link>(&#32;<link linkend="_struct_catch_1_1true__given">ArgT</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">arg</link>,&#32;<link linkend="_struct_catch_1_1true__given">MatcherT</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">matcher</link>,&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">matcherString</link>&#32;&#32;)&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">MatchExpr&lt;ArgT, MatcherT&gt;</link>&#32;{
3798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">MatchExpr&lt;ArgT, MatcherT&gt;</link>(&#32;<link linkend="_struct_catch_1_1true__given">arg</link>,&#32;<link linkend="_struct_catch_1_1true__given">matcher</link>,&#32;<link linkend="_struct_catch_1_1true__given">matcherString</link>&#32;);
3799 &#32;&#32;&#32;&#32;}
3800 
3801 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
3802 
3804 <emphasis role="preprocessor">#define&#32;INTERNAL_CHECK_THAT(&#32;macroName,&#32;matcher,&#32;resultDisposition,&#32;arg&#32;)&#32;\</emphasis>
3805 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;{&#32;\</emphasis>
3806 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Catch::AssertionHandler&#32;catchAssertionHandler(&#32;macroName##_catch_sr,&#32;CATCH_INTERNAL_LINEINFO,&#32;CATCH_INTERNAL_STRINGIFY(arg)&#32;&quot;,&#32;&quot;&#32;CATCH_INTERNAL_STRINGIFY(matcher),&#32;resultDisposition&#32;);&#32;\</emphasis>
3807 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_TRY&#32;{&#32;\</emphasis>
3808 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleExpr(&#32;Catch::makeMatchExpr(&#32;arg,&#32;matcher,&#32;#matcher##_catch_sr&#32;)&#32;);&#32;\</emphasis>
3809 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;INTERNAL_CATCH_CATCH(&#32;catchAssertionHandler&#32;)&#32;\</emphasis>
3810 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_REACT(&#32;catchAssertionHandler&#32;)&#32;\</emphasis>
3811 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;while(&#32;false&#32;)</emphasis>
3812 
3814 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_THROWS_MATCHES(&#32;macroName,&#32;exceptionType,&#32;resultDisposition,&#32;matcher,&#32;...&#32;)&#32;\</emphasis>
3815 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;{&#32;\</emphasis>
3816 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Catch::AssertionHandler&#32;catchAssertionHandler(&#32;macroName##_catch_sr,&#32;CATCH_INTERNAL_LINEINFO,&#32;CATCH_INTERNAL_STRINGIFY(__VA_ARGS__)&#32;&quot;,&#32;&quot;&#32;CATCH_INTERNAL_STRINGIFY(exceptionType)&#32;&quot;,&#32;&quot;&#32;CATCH_INTERNAL_STRINGIFY(matcher),&#32;resultDisposition&#32;);&#32;\</emphasis>
3817 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(&#32;catchAssertionHandler.allowThrows()&#32;)&#32;\</emphasis>
3818 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;try&#32;{&#32;\</emphasis>
3819 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_cast&lt;void&gt;(__VA_ARGS__&#32;);&#32;\</emphasis>
3820 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleUnexpectedExceptionNotThrown();&#32;\</emphasis>
3821 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
3822 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catch(&#32;exceptionType&#32;const&amp;&#32;ex&#32;)&#32;{&#32;\</emphasis>
3823 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleExpr(&#32;Catch::makeMatchExpr(&#32;ex,&#32;matcher,&#32;#matcher##_catch_sr&#32;)&#32;);&#32;\</emphasis>
3824 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
3825 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catch(&#32;...&#32;)&#32;{&#32;\</emphasis>
3826 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleUnexpectedInflightException();&#32;\</emphasis>
3827 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
3828 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;\</emphasis>
3829 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catchAssertionHandler.handleThrowingCallSkipped();&#32;\</emphasis>
3830 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_REACT(&#32;catchAssertionHandler&#32;)&#32;\</emphasis>
3831 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;while(&#32;false&#32;)</emphasis>
3832 
3833 <emphasis role="comment">//&#32;end&#32;catch_capture_matchers.h</emphasis>
3834 <emphasis role="preprocessor">#endif</emphasis>
3835 <emphasis role="comment">//&#32;start&#32;catch_generators.hpp</emphasis>
3836 
3837 <emphasis role="comment">//&#32;start&#32;catch_interfaces_generatortracker.h</emphasis>
3838 
3839 
3840 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
3841 
3842 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
3843 
3844 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis><link linkend="_class_catch_1_1_generators_1_1_generators">Generators</link>&#32;{
3845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_generators_1_1_generator_untyped_base">GeneratorUntypedBase</link>&#32;{
3846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
3847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_generators_1_1_generator_untyped_base_1a00ff0179d739c3016756b6cf56fabbad">GeneratorUntypedBase</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
3848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_generator_untyped_base_1a6f05f8099fdc5744a7aff68aa8c09c7f">~GeneratorUntypedBase</link>();
3849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Attempts&#32;to&#32;move&#32;the&#32;generator&#32;to&#32;the&#32;next&#32;element</emphasis>
3850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;true&#32;iff&#32;the&#32;move&#32;succeeded&#32;(and&#32;a&#32;valid&#32;element</emphasis>
3852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;can&#32;be&#32;retrieved).</emphasis>
3853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_generator_untyped_base_1aeed3c0cd6233c5f553549e453b8d6638">next</link>()&#32;=&#32;0;
3854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_catch_1_1_generators_1a9578dfa233a0ab3fb14f58203161b6b8">GeneratorBasePtr</link>&#32;=&#32;std::unique_ptr&lt;GeneratorUntypedBase&gt;;
3856 
3857 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Generators</emphasis>
3858 
3859 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_i_generator_tracker">IGeneratorTracker</link>&#32;{
3860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_i_generator_tracker_1a20b3c82baa68f821c180d6dac1234eb1">~IGeneratorTracker</link>();
3861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_struct_catch_1_1_i_generator_tracker_1ae88084f9af27c8b9a5d5775b9c148498">hasGenerator</link>()&#32;<link linkend="_struct_catch_1_1true__given">const</link>&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;0;
3862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">virtual</link>&#32;<link linkend="_struct_catch_1_1true__given">auto</link>&#32;getGenerator()&#32;<link linkend="_struct_catch_1_1true__given">const</link>&#32;-&gt;&#32;Generators::GeneratorBasePtr&#32;<link linkend="_struct_catch_1_1true__given">const</link>&amp;&#32;=&#32;0;
3863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">virtual</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;setGenerator(&#32;Generators::GeneratorBasePtr&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">generator</link>&#32;)&#32;=&#32;0;
3864 &#32;&#32;&#32;&#32;};
3865 
3866 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
3867 
3868 <emphasis role="comment">//&#32;end&#32;catch_interfaces_generatortracker.h</emphasis>
3869 <emphasis role="comment">//&#32;start&#32;catch_enforce.h</emphasis>
3870 
3871 <emphasis role="preprocessor">#include&#32;&lt;exception&gt;</emphasis>
3872 
3873 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
3874 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</emphasis>
3875 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Ex&gt;
3876 &#32;&#32;&#32;&#32;[[<link linkend="_struct_catch_1_1true__given">noreturn</link>]]
3877 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1a3cbceeab9252d1b752f66a2826e92548">throw_exception</link>(<link linkend="_struct_catch_1_1true__given">Ex</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">e</link>)&#32;{
3878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">e</link>;
3879 &#32;&#32;&#32;&#32;}
3880 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;^^&#32;Exceptions&#32;are&#32;enabled&#32;//&#32;&#32;Exceptions&#32;are&#32;disabled&#32;vv</emphasis>
3881 &#32;&#32;&#32;&#32;[[<link linkend="_struct_catch_1_1true__given">noreturn</link>]]
3882 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1a3cbceeab9252d1b752f66a2826e92548">throw_exception</link>(std::exception&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">e</link>);
3883 <emphasis role="preprocessor">#endif</emphasis>
3884 
3885 &#32;&#32;&#32;&#32;[[<link linkend="_struct_catch_1_1true__given">noreturn</link>]]
3886 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1a707884e681203fef6bf7dbf752532fa5">throw_logic_error</link>(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">msg</link>);
3887 &#32;&#32;&#32;&#32;[[<link linkend="_struct_catch_1_1true__given">noreturn</link>]]
3888 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1ae67297c3e265b0fcd55de371bf408e4e">throw_domain_error</link>(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">msg</link>);
3889 &#32;&#32;&#32;&#32;[[<link linkend="_struct_catch_1_1true__given">noreturn</link>]]
3890 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1a48d2c35022dd9d56a1b7ee78ad581eea">throw_runtime_error</link>(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">msg</link>);
3891 
3892 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch;</emphasis>
3893 
3894 <emphasis role="preprocessor">#define&#32;CATCH_MAKE_MSG(...)&#32;\</emphasis>
3895 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(Catch::ReusableStringStream()&#32;&lt;&lt;&#32;__VA_ARGS__).str()</emphasis>
3896 
3897 <emphasis role="preprocessor">#define&#32;CATCH_INTERNAL_ERROR(...)&#32;\</emphasis>
3898 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;Catch::throw_logic_error(CATCH_MAKE_MSG(&#32;CATCH_INTERNAL_LINEINFO&#32;&lt;&lt;&#32;&quot;:&#32;Internal&#32;Catch2&#32;error:&#32;&quot;&#32;&lt;&lt;&#32;__VA_ARGS__))</emphasis>
3899 
3900 <emphasis role="preprocessor">#define&#32;CATCH_ERROR(...)&#32;\</emphasis>
3901 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;Catch::throw_domain_error(CATCH_MAKE_MSG(&#32;__VA_ARGS__&#32;))</emphasis>
3902 
3903 <emphasis role="preprocessor">#define&#32;CATCH_RUNTIME_ERROR(...)&#32;\</emphasis>
3904 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;Catch::throw_runtime_error(CATCH_MAKE_MSG(&#32;__VA_ARGS__&#32;))</emphasis>
3905 
3906 <emphasis role="preprocessor">#define&#32;CATCH_ENFORCE(&#32;condition,&#32;...&#32;)&#32;\</emphasis>
3907 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do{&#32;if(&#32;!(condition)&#32;)&#32;CATCH_ERROR(&#32;__VA_ARGS__&#32;);&#32;}&#32;while(false)</emphasis>
3908 
3909 <emphasis role="comment">//&#32;end&#32;catch_enforce.h</emphasis>
3910 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
3911 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
3912 <emphasis role="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>
3913 
3914 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
3915 <emphasis role="preprocessor">#include&#32;&lt;exception&gt;</emphasis>
3916 
3917 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
3918 
3919 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_generator_exception">GeneratorException</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::exception&#32;{
3920 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>&#32;m_msg&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
3921 
3922 <emphasis role="keyword">public</emphasis>:
3923 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_generator_exception_1a3cf9282d555ec32389665ce723bf36ea">GeneratorException</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_struct_catch_1_1true__given">msg</link>):
3924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_msg(<link linkend="_struct_catch_1_1true__given">msg</link>)
3925 &#32;&#32;&#32;&#32;{}
3926 
3927 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_class_catch_1_1_generator_exception_1ac40705ff5da208ce3a7d3023d0d3f4c6">what</link>()&#32;<link linkend="_struct_catch_1_1true__given">const</link>&#32;<link linkend="_struct_catch_1_1true__given">noexcept</link>&#32;<link linkend="_struct_catch_1_1true__given">override</link>&#32;<link linkend="_struct_catch_1_1true__given">final</link>;
3928 };
3929 
3930 <link linkend="_struct_catch_1_1true__given">namespace</link>&#32;Generators&#32;{
3931 
3932 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;!TBD&#32;move&#32;this&#32;into&#32;its&#32;own&#32;location?</emphasis>
3933 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>pf{
3934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">T</link>,&#32;<emphasis role="keyword">typename</emphasis>...&#32;<link linkend="_struct_catch_1_1true__given">Args</link>&gt;
3935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::unique_ptr&lt;T&gt;&#32;<link linkend="_namespace_catch_1_1_generators_1_1pf_1a015e8fcef2972da878a07023e40d46d8">make_unique</link>(&#32;<link linkend="_struct_catch_1_1true__given">Args</link>&amp;&amp;...&#32;<link linkend="_struct_catch_1_1true__given">args</link>&#32;)&#32;{
3936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::unique_ptr&lt;T&gt;(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">T</link>(std::forward&lt;Args&gt;(<link linkend="_struct_catch_1_1true__given">args</link>)...));
3937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3938 &#32;&#32;&#32;&#32;}
3939 
3940 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3941 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_generators_1_1_i_generator">IGenerator</link>&#32;:&#32;<link linkend="_class_catch_1_1_generators_1_1_generator_untyped_base">GeneratorUntypedBase</link>&#32;{
3942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_generators_1_1_i_generator_1afe5b6eecbbd735e69748d68574611747">~IGenerator</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
3943 
3944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;the&#32;current&#32;element&#32;of&#32;the&#32;generator</emphasis>
3945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;\Precondition&#32;The&#32;generator&#32;is&#32;either&#32;freshly&#32;constructed,</emphasis>
3947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;or&#32;the&#32;last&#32;call&#32;to&#32;`next()`&#32;returned&#32;true</emphasis>
3948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1_generators_1_1_i_generator_1a0fb6da789cda5b4e90f036737db82485">get</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
3949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_struct_catch_1_1true__given">type</link>&#32;=&#32;<link linkend="_struct_catch_1_1true__given">T</link>;
3950 &#32;&#32;&#32;&#32;};
3951 
3952 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3953 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_generators_1_1_single_value_generator">SingleValueGenerator</link>&#32;<link linkend="_struct_catch_1_1true__given">final</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_catch_1_1_generators_1_1_i_generator">IGenerator</link>&lt;T&gt;&#32;{
3954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<link linkend="_class_catch_1_1_generators_1_1_single_value_generator_1a93402a3203dad8ae7edcd681b1ed5938">m_value</link>;
3955 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
3956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_generators_1_1_single_value_generator_1a532140dd2d1a673692271bb76a661ebe">SingleValueGenerator</link>(<link linkend="_struct_catch_1_1true__given">T</link>&amp;&amp;&#32;value)&#32;:&#32;m_value(std::<link linkend="_struct_catch_1_1true__given">move</link>(<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>))&#32;{}
3957 
3958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_class_catch_1_1_generators_1_1_single_value_generator_1af1ed1913c9c73687fd74378fe5394382">get</link>()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
3959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_value;
3960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_single_value_generator_1a10833b34e3ccbc484624185712eb8b6e">next</link>()<emphasis role="keyword">&#32;override&#32;</emphasis>{
3962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3964 &#32;&#32;&#32;&#32;};
3965 
3966 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3967 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_generators_1_1_fixed_values_generator">FixedValuesGenerator</link>&#32;<link linkend="_struct_catch_1_1true__given">final</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_catch_1_1_generators_1_1_i_generator">IGenerator</link>&lt;T&gt;&#32;{
3968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!std::is_same&lt;T,&#32;bool&gt;::value,
3969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;FixedValuesGenerator&#32;does&#32;not&#32;support&#32;bools&#32;because&#32;of&#32;std::vector&lt;bool&gt;&quot;</emphasis>
3970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;specialization,&#32;use&#32;SingleValue&#32;Generator&#32;instead.&quot;</emphasis>);
3971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;T&gt;&#32;<link linkend="_class_catch_1_1_generators_1_1_fixed_values_generator_1a591837f944b435858bc3b9fa73502ee6">m_values</link>;
3972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;m_idx&#32;=&#32;0;
3973 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
3974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_generators_1_1_fixed_values_generator_1a6e9f473655413c1cb15f079890f06b86">FixedValuesGenerator</link>(&#32;std::initializer_list&lt;T&gt;&#32;values&#32;)&#32;:&#32;m_values(&#32;<link linkend="_namespace_catch_1_1_generators_1aff55717239311a0e8352a4de5d29967f">values</link>&#32;)&#32;{}
3975 
3976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_class_catch_1_1_generators_1_1_fixed_values_generator_1a8d64d3d943f3029d1669ae3cf91cc493">get</link>()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
3977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_values[m_idx];
3978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_fixed_values_generator_1a6ce9e3ed045239c7b82873f24bd9cd3b">next</link>()<emphasis role="keyword">&#32;override&#32;</emphasis>{
3980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++m_idx;
3981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_idx&#32;&lt;&#32;m_values.size();
3982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3983 &#32;&#32;&#32;&#32;};
3984 
3985 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3986 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">GeneratorWrapper</link>&#32;<link linkend="_struct_catch_1_1true__given">final</link>&#32;{
3987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::unique_ptr&lt;IGenerator&lt;T&gt;&gt;&#32;<link linkend="_class_catch_1_1_generators_1_1_generator_wrapper_1a8f35291599183b36e4c5af78e17d3a8c">m_generator</link>;
3988 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
3989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_generators_1_1_generator_wrapper_1ad65b09392d8b3a7472a8b5375048748d">GeneratorWrapper</link>(std::unique_ptr&lt;<link linkend="_struct_catch_1_1true__given">IGenerator&lt;T&gt;</link>&gt;&#32;<link linkend="_struct_catch_1_1true__given">generator</link>):
3990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_generator(std::<link linkend="_struct_catch_1_1true__given">move</link>(<link linkend="_struct_catch_1_1true__given">generator</link>))
3991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
3992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_class_catch_1_1_generators_1_1_generator_wrapper_1a4a461a591d0bd5360a2745cb2b5011cc">get</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_generator-&gt;get();
3994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_generator_wrapper_1acbfdca94811ae02461bd2cf5f60b666e">next</link>()&#32;{
3996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_generator-&gt;next();
3997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3998 &#32;&#32;&#32;&#32;};
3999 
4000 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4001 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>(<link linkend="_struct_catch_1_1true__given">T</link>&amp;&amp;&#32;value)&#32;{
4002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>(pf::make_unique&lt;<link linkend="_struct_catch_1_1true__given">SingleValueGenerator&lt;T&gt;</link>&gt;(std::forward&lt;T&gt;(<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>)));
4003 &#32;&#32;&#32;&#32;}
4004 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4005 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&#32;<link linkend="_namespace_catch_1_1_generators_1aff55717239311a0e8352a4de5d29967f">values</link>(std::initializer_list&lt;T&gt;&#32;values)&#32;{
4006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>(pf::make_unique&lt;<link linkend="_struct_catch_1_1true__given">FixedValuesGenerator&lt;T&gt;</link>&gt;(<link linkend="_namespace_catch_1_1_generators_1aff55717239311a0e8352a4de5d29967f">values</link>));
4007 &#32;&#32;&#32;&#32;}
4008 
4009 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4010 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_generators_1_1_generators">Generators</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_catch_1_1_generators_1_1_i_generator">IGenerator</link>&lt;T&gt;&#32;{
4011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;GeneratorWrapper&lt;T&gt;&gt;&#32;<link linkend="_class_catch_1_1_generators_1_1_generators_1a4d41bb9f0e8d726a8a53c86354bf19de">m_generators</link>;
4012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;m_current&#32;=&#32;0;
4013 
4014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_generators_1a56e1b82d4c9c952076cd58efbf7a4572">populate</link>(<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">generator</link>)&#32;{
4015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_generators.emplace_back(std::move(<link linkend="_struct_catch_1_1true__given">generator</link>));
4016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_generators_1ad708036fa5a9bf0cd1520ce111bc851d">populate</link>(<link linkend="_struct_catch_1_1true__given">T</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">val</link>)&#32;{
4018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_generators.emplace_back(<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>(std::forward&lt;T&gt;(<link linkend="_struct_catch_1_1true__given">val</link>)));
4019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
4021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_generators_1a8ff8b7dda734d1808b644fefc67f4c98">populate</link>(<link linkend="_struct_catch_1_1true__given">U</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">val</link>)&#32;{
4022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;populate(<link linkend="_struct_catch_1_1true__given">T</link>(std::forward&lt;U&gt;(<link linkend="_struct_catch_1_1true__given">val</link>)));
4023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">U</link>,&#32;<emphasis role="keyword">typename</emphasis>...&#32;<link linkend="_struct_catch_1_1true__given">Gs</link>&gt;
4025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_generators_1aebb8051e604c7415bb7e7de91278c278">populate</link>(<link linkend="_struct_catch_1_1true__given">U</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">valueOrGenerator</link>,&#32;<link linkend="_struct_catch_1_1true__given">Gs</link>&#32;&amp;&amp;...&#32;<link linkend="_struct_catch_1_1true__given">moreGenerators</link>)&#32;{
4026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;populate(std::forward&lt;U&gt;(<link linkend="_struct_catch_1_1true__given">valueOrGenerator</link>));
4027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;populate(std::forward&lt;Gs&gt;(<link linkend="_struct_catch_1_1true__given">moreGenerators</link>)...);
4028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4029 
4030 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
4031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;<link linkend="_struct_catch_1_1true__given">Gs</link>&gt;
4032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_generators_1_1_generators_1a2bcb50c42a8729cbac079b3b61699a61">Generators</link>(<link linkend="_struct_catch_1_1true__given">Gs</link>&#32;&amp;&amp;...&#32;<link linkend="_struct_catch_1_1true__given">moreGenerators</link>)&#32;{
4033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_generators.reserve(<emphasis role="keyword">sizeof</emphasis>...(<link linkend="_struct_catch_1_1true__given">Gs</link>));
4034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;populate(std::forward&lt;Gs&gt;(<link linkend="_struct_catch_1_1true__given">moreGenerators</link>)...);
4035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4036 
4037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_class_catch_1_1_generators_1_1_generators_1ad86b343eac34f6771358507dd8ea98c4">get</link>()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
4038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_generators[m_current].get();
4039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4040 
4041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_generators_1ad127fd2a07347b527f79ab3b78bd40fb">next</link>()<emphasis role="keyword">&#32;override&#32;</emphasis>{
4042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_current&#32;&gt;=&#32;m_generators.size())&#32;{
4043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
4044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">current_status</link>&#32;=&#32;m_generators[m_current].next();
4046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_catch_1_1true__given">current_status</link>)&#32;{
4047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++m_current;
4048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_current&#32;&lt;&#32;m_generators.size();
4050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4051 &#32;&#32;&#32;&#32;};
4052 
4053 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;<link linkend="_struct_catch_1_1true__given">Ts</link>&gt;
4054 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_generators_1_1_generator_wrapper">GeneratorWrapper</link>&lt;std::tuple&lt;<link linkend="_struct_catch_1_1true__given">Ts</link>...&gt;&gt;&#32;<link linkend="_namespace_catch_1_1_generators_1ae980a8b181bc56242a73161a05b312ee">table</link>(&#32;std::initializer_list&lt;std::tuple&lt;<emphasis role="keyword">typename</emphasis>&#32;std::decay&lt;Ts&gt;::type...&gt;&gt;&#32;<link linkend="_struct_catch_1_1true__given">tuples</link>&#32;)&#32;{
4055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1_1_generators_1aff55717239311a0e8352a4de5d29967f">values</link>&lt;std::tuple&lt;<link linkend="_struct_catch_1_1true__given">Ts</link>...&gt;&gt;(&#32;<link linkend="_struct_catch_1_1true__given">tuples</link>&#32;);
4056 &#32;&#32;&#32;&#32;}
4057 
4058 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Tag&#32;type&#32;to&#32;signal&#32;that&#32;a&#32;generator&#32;sequence&#32;should&#32;convert&#32;arguments&#32;to&#32;a&#32;specific&#32;type</emphasis>
4059 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4060 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_generators_1_1as">as</link>&#32;{};
4061 
4062 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">T</link>,&#32;<emphasis role="keyword">typename</emphasis>...&#32;<link linkend="_struct_catch_1_1true__given">Gs</link>&gt;
4063 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1_1_generators_1a7cc95d72b060e2819b2edbbdbf8c646b">makeGenerators</link>(&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">generator</link>,&#32;<link linkend="_struct_catch_1_1true__given">Gs</link>&#32;&amp;&amp;...&#32;<link linkend="_struct_catch_1_1true__given">moreGenerators</link>&#32;)&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">Generators&lt;T&gt;</link>&#32;{
4064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">Generators&lt;T&gt;</link>(std::move(<link linkend="_struct_catch_1_1true__given">generator</link>),&#32;std::forward&lt;Gs&gt;(<link linkend="_struct_catch_1_1true__given">moreGenerators</link>)...);
4065 &#32;&#32;&#32;&#32;}
4066 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4067 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1_1_generators_1a7cc95d72b060e2819b2edbbdbf8c646b">makeGenerators</link>(&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">generator</link>&#32;)&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">Generators&lt;T&gt;</link>&#32;{
4068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">Generators&lt;T&gt;</link>(std::move(<link linkend="_struct_catch_1_1true__given">generator</link>));
4069 &#32;&#32;&#32;&#32;}
4070 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">T</link>,&#32;<emphasis role="keyword">typename</emphasis>...&#32;<link linkend="_struct_catch_1_1true__given">Gs</link>&gt;
4071 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1_1_generators_1a7cc95d72b060e2819b2edbbdbf8c646b">makeGenerators</link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">val</link>,&#32;<link linkend="_struct_catch_1_1true__given">Gs</link>&#32;&amp;&amp;...&#32;<link linkend="_struct_catch_1_1true__given">moreGenerators</link>&#32;)&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">Generators&lt;T&gt;</link>&#32;{
4072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1_1_generators_1a7cc95d72b060e2819b2edbbdbf8c646b">makeGenerators</link>(&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>(&#32;std::forward&lt;T&gt;(&#32;<link linkend="_struct_catch_1_1true__given">val</link>&#32;)&#32;),&#32;std::forward&lt;Gs&gt;(&#32;<link linkend="_struct_catch_1_1true__given">moreGenerators</link>&#32;)...&#32;);
4073 &#32;&#32;&#32;&#32;}
4074 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">T</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">U</link>,&#32;<emphasis role="keyword">typename</emphasis>...&#32;<link linkend="_struct_catch_1_1true__given">Gs</link>&gt;
4075 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1_1_generators_1a7cc95d72b060e2819b2edbbdbf8c646b">makeGenerators</link>(&#32;<link linkend="_struct_catch_1_1true__given">as&lt;T&gt;</link>,&#32;<link linkend="_struct_catch_1_1true__given">U</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">val</link>,&#32;<link linkend="_struct_catch_1_1true__given">Gs</link>&#32;&amp;&amp;...&#32;<link linkend="_struct_catch_1_1true__given">moreGenerators</link>&#32;)&#32;-&gt;&#32;<link linkend="_struct_catch_1_1true__given">Generators&lt;T&gt;</link>&#32;{
4076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1_1_generators_1a7cc95d72b060e2819b2edbbdbf8c646b">makeGenerators</link>(&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>(&#32;std::forward&lt;U&gt;(&#32;<link linkend="_struct_catch_1_1true__given">val</link>&#32;)&#32;)&#32;),&#32;std::forward&lt;Gs&gt;(&#32;<link linkend="_struct_catch_1_1true__given">moreGenerators</link>&#32;)...&#32;);
4077 &#32;&#32;&#32;&#32;}
4078 
4079 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1_1_generators_1ac1fe3550c5f97370fc6729e04d7571b8">acquireGeneratorTracker</link>(&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<link linkend="_struct_catch_1_1true__given">generatorName</link>,&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lineInfo&#32;)&#32;-&gt;&#32;<link linkend="_struct_catch_1_1_i_generator_tracker">IGeneratorTracker</link>&amp;;
4080 
4081 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;L&gt;
4082 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note:&#32;The&#32;type&#32;after&#32;-&gt;&#32;is&#32;weird,&#32;because&#32;VS2015&#32;cannot&#32;parse_expr</emphasis>
4083 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;the&#32;expression&#32;used&#32;in&#32;the&#32;typedef&#32;inside,&#32;when&#32;it&#32;is&#32;in</emphasis>
4084 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;type.&#32;Yeah.</emphasis>
4085 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1_1_generators_1a3b0ab1f589b1d1e0e92afcd12cf4ab12">generate</link>(&#32;<link linkend="_class_catch_1_1_string_ref">StringRef</link>&#32;<link linkend="_struct_catch_1_1true__given">generatorName</link>,&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lineInfo,&#32;<link linkend="_struct_catch_1_1true__given">L</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">generatorExpression</link>&#32;)&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;decltype(generatorExpression())&gt;().get())&#32;{
4086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_struct_catch_1_1true__given">UnderlyingType</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<link linkend="_struct_catch_1_1true__given">generatorExpression</link>())::type;
4087 
4088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_generator_tracker">IGeneratorTracker</link>&amp;&#32;<link linkend="_struct_catch_1_1true__given">tracker</link>&#32;=&#32;<link linkend="_namespace_catch_1_1_generators_1ac1fe3550c5f97370fc6729e04d7571b8">acquireGeneratorTracker</link>(&#32;<link linkend="_struct_catch_1_1true__given">generatorName</link>,&#32;lineInfo&#32;);
4089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_catch_1_1true__given">tracker</link>.hasGenerator())&#32;{
4090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">tracker</link>.setGenerator(pf::make_unique&lt;<link linkend="_struct_catch_1_1true__given">Generators&lt;UnderlyingType&gt;</link>&gt;(<link linkend="_struct_catch_1_1true__given">generatorExpression</link>()));
4091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4092 
4093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">generator</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_catch_1_1true__given">IGenerator&lt;UnderlyingType&gt;</link>&#32;<link linkend="_struct_catch_1_1true__given">const</link>&amp;<emphasis role="keyword">&gt;</emphasis>(&#32;*<link linkend="_struct_catch_1_1true__given">tracker</link>.getGenerator()&#32;);
4094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">generator</link>.get();
4095 &#32;&#32;&#32;&#32;}
4096 
4097 }&#32;<emphasis role="comment">//&#32;namespace&#32;Generators</emphasis>
4098 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
4099 
4100 <emphasis role="preprocessor">#define&#32;GENERATE(&#32;...&#32;)&#32;\</emphasis>
4101 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;Catch::Generators::generate(&#32;INTERNAL_CATCH_STRINGIZE(INTERNAL_CATCH_UNIQUE_NAME(generator)),&#32;\</emphasis>
4102 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_LINEINFO,&#32;\</emphasis>
4103 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&#32;]{&#32;using&#32;namespace&#32;Catch::Generators;&#32;return&#32;makeGenerators(&#32;__VA_ARGS__&#32;);&#32;}&#32;)&#32;</emphasis><emphasis role="comment">//NOLINT(google-build-using-namespace)</emphasis>
4104 <emphasis role="preprocessor">#define&#32;GENERATE_COPY(&#32;...&#32;)&#32;\</emphasis>
4105 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;Catch::Generators::generate(&#32;INTERNAL_CATCH_STRINGIZE(INTERNAL_CATCH_UNIQUE_NAME(generator)),&#32;\</emphasis>
4106 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_LINEINFO,&#32;\</emphasis>
4107 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=]{&#32;using&#32;namespace&#32;Catch::Generators;&#32;return&#32;makeGenerators(&#32;__VA_ARGS__&#32;);&#32;}&#32;)&#32;</emphasis><emphasis role="comment">//NOLINT(google-build-using-namespace)</emphasis>
4108 <emphasis role="preprocessor">#define&#32;GENERATE_REF(&#32;...&#32;)&#32;\</emphasis>
4109 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;Catch::Generators::generate(&#32;INTERNAL_CATCH_STRINGIZE(INTERNAL_CATCH_UNIQUE_NAME(generator)),&#32;\</emphasis>
4110 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_INTERNAL_LINEINFO,&#32;\</emphasis>
4111 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]{&#32;using&#32;namespace&#32;Catch::Generators;&#32;return&#32;makeGenerators(&#32;__VA_ARGS__&#32;);&#32;}&#32;)&#32;</emphasis><emphasis role="comment">//NOLINT(google-build-using-namespace)</emphasis>
4112 
4113 <emphasis role="comment">//&#32;end&#32;catch_generators.hpp</emphasis>
4114 <emphasis role="comment">//&#32;start&#32;catch_generators_generic.hpp</emphasis>
4115 
4116 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
4117 <emphasis role="keyword">namespace&#32;</emphasis>Generators&#32;{
4118 
4119 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4120 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_generators_1_1_take_generator">TakeGenerator</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_catch_1_1_generators_1_1_i_generator">IGenerator</link>&lt;T&gt;&#32;{
4121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&#32;<link linkend="_class_catch_1_1_generators_1_1_take_generator_1a2193ff62cd0fe809049b6d6b2f399d89">m_generator</link>;
4122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;m_returned&#32;=&#32;0;
4123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_take_generator_1a8ad16c4baed05b024a86a9c87c9cd0a7">m_target</link>;
4124 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
4125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_generators_1_1_take_generator_1aacef789c01a86246249c88a184268c65">TakeGenerator</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">target</link>,&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">generator</link>):
4126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_generator(std::<link linkend="_struct_catch_1_1true__given">move</link>(<link linkend="_struct_catch_1_1true__given">generator</link>)),
4127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_target(<link linkend="_struct_catch_1_1true__given">target</link>)
4128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">assert</link>(<link linkend="_struct_catch_1_1true__given">target</link>&#32;!=&#32;0&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Empty&#32;generators&#32;are&#32;not&#32;allowed&quot;</emphasis>);
4130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_class_catch_1_1_generators_1_1_take_generator_1a7240fb96c311b7d7fde32d1fb5bb67c6">get</link>()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
4132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_generator.get();
4133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_take_generator_1ae343f3e28fe04e0a20d6fdf69bfb4c78">next</link>()<emphasis role="keyword">&#32;override&#32;</emphasis>{
4135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++m_returned;
4136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_returned&#32;&gt;=&#32;m_target)&#32;{
4137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
4138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4139 
4140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">success</link>&#32;=&#32;m_generator.next();
4141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;underlying&#32;generator&#32;does&#32;not&#32;contain&#32;enough&#32;values</emphasis>
4142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;then&#32;we&#32;cut&#32;short&#32;as&#32;well</emphasis>
4143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_catch_1_1true__given">success</link>)&#32;{
4144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_returned&#32;=&#32;m_target;
4145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">success</link>;
4147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4148 &#32;&#32;&#32;&#32;};
4149 
4150 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4151 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&#32;<link linkend="_namespace_catch_1_1_generators_1adedfdb318219078ce9107690745d2f2f">take</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">target</link>,&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">generator</link>)&#32;{
4152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>(pf::make_unique&lt;<link linkend="_struct_catch_1_1true__given">TakeGenerator&lt;T&gt;</link>&gt;(<link linkend="_struct_catch_1_1true__given">target</link>,&#32;std::move(<link linkend="_struct_catch_1_1true__given">generator</link>)));
4153 &#32;&#32;&#32;&#32;}
4154 
4155 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;Predicate&gt;
4156 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_generators_1_1_filter_generator">FilterGenerator</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_catch_1_1_generators_1_1_i_generator">IGenerator</link>&lt;T&gt;&#32;{
4157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&#32;<link linkend="_class_catch_1_1_generators_1_1_filter_generator_1a6fb6975b1401cf7bd7e76e3a542a45cf">m_generator</link>;
4158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1_1_matchers_1a70a7c65c44f6ea7f739402c0b6f28657">Predicate</link>&#32;<link linkend="_class_catch_1_1_generators_1_1_filter_generator_1a51cda8aafad62eba1d26618f3ca8cff1">m_predicate</link>;
4159 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
4160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;P&#32;=&#32;Predicate&gt;
4161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_generators_1_1_filter_generator_1aa16886a5e41cbd3b6ffa3dd52388a3a1">FilterGenerator</link>(<link linkend="_struct_catch_1_1true__given">P</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">pred</link>,&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">generator</link>):
4162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_generator(std::<link linkend="_struct_catch_1_1true__given">move</link>(<link linkend="_struct_catch_1_1true__given">generator</link>)),
4163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_predicate(std::<link linkend="_struct_catch_1_1true__given">forward</link>&lt;<link linkend="_struct_catch_1_1true__given">P</link>&gt;(<link linkend="_struct_catch_1_1true__given">pred</link>))
4164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!m_predicate(m_generator.get()))&#32;{
4166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;It&#32;might&#32;happen&#32;that&#32;there&#32;are&#32;no&#32;values&#32;that&#32;pass&#32;the</emphasis>
4167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;filter.&#32;In&#32;that&#32;case&#32;we&#32;throw&#32;an&#32;exception.</emphasis>
4168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">has_initial_value</link>&#32;=&#32;nextImpl();
4169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_catch_1_1true__given">has_initial_value</link>)&#32;{
4170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a3cbceeab9252d1b752f66a2826e92548">Catch::throw_exception</link>(<link linkend="_class_catch_1_1_generator_exception">GeneratorException</link>(<emphasis role="stringliteral">&quot;No&#32;valid&#32;value&#32;found&#32;in&#32;filtered&#32;generator&quot;</emphasis>));
4171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4174 
4175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_class_catch_1_1_generators_1_1_filter_generator_1a903396f7cf5f1a04379b7c917351e6da">get</link>()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
4176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_generator.get();
4177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4178 
4179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_filter_generator_1a02ce0839dcaa7545c55d0fe70cc50e84">next</link>()<emphasis role="keyword">&#32;override&#32;</emphasis>{
4180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nextImpl();
4181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4182 
4183 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
4184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_filter_generator_1a412ef28c6fa263fca71d3b0bb618af09">nextImpl</link>()&#32;{
4185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">success</link>&#32;=&#32;m_generator.next();
4186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_catch_1_1true__given">success</link>)&#32;{
4187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
4188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!m_predicate(m_generator.get())&#32;&amp;&amp;&#32;(<link linkend="_struct_catch_1_1true__given">success</link>&#32;=&#32;m_generator.next())&#32;==&#32;<emphasis role="keyword">true</emphasis>);
4190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">success</link>;
4191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4192 &#32;&#32;&#32;&#32;};
4193 
4194 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;Predicate&gt;
4195 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&#32;<link linkend="_namespace_catch_1_1_generators_1a4df89be8072a9685ee89b6776a54bb93">filter</link>(Predicate&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">pred</link>,&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">generator</link>)&#32;{
4196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>(std::unique_ptr&lt;<link linkend="_struct_catch_1_1true__given">IGenerator&lt;T&gt;</link>&gt;(pf::make_unique&lt;<link linkend="_struct_catch_1_1true__given">FilterGenerator&lt;T, Predicate&gt;</link>&gt;(std::forward&lt;Predicate&gt;(<link linkend="_struct_catch_1_1true__given">pred</link>),&#32;std::move(<link linkend="_struct_catch_1_1true__given">generator</link>))));
4197 &#32;&#32;&#32;&#32;}
4198 
4199 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4200 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_generators_1_1_repeat_generator">RepeatGenerator</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_catch_1_1_generators_1_1_i_generator">IGenerator</link>&lt;T&gt;&#32;{
4201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!std::is_same&lt;T,&#32;bool&gt;::value,
4202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;RepeatGenerator&#32;currently&#32;does&#32;not&#32;support&#32;bools&quot;</emphasis>
4203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;because&#32;of&#32;std::vector&lt;bool&gt;&#32;specialization&quot;</emphasis>);
4204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&#32;<link linkend="_class_catch_1_1_generators_1_1_repeat_generator_1ae4eeba772ffba6d928f959835e8db154">m_generator</link>;
4205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;std::vector&lt;T&gt;&#32;<link linkend="_class_catch_1_1_generators_1_1_repeat_generator_1aee4c7a8c54c739f2fea75c01b02ccc6e">m_returned</link>;
4206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_repeat_generator_1af73981a50e1e1438d0159ac0b55a84bf">m_target_repeats</link>;
4207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;m_current_repeat&#32;=&#32;0;
4208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;m_repeat_index&#32;=&#32;0;
4209 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
4210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_generators_1_1_repeat_generator_1a3aee12c4f9c2c04823ca3c75a20f234f">RepeatGenerator</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">repeats</link>,&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">generator</link>):
4211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_generator(std::<link linkend="_struct_catch_1_1true__given">move</link>(<link linkend="_struct_catch_1_1true__given">generator</link>)),
4212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_target_repeats(<link linkend="_struct_catch_1_1true__given">repeats</link>)
4213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">assert</link>(m_target_repeats&#32;&gt;&#32;0&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Repeat&#32;generator&#32;must&#32;repeat&#32;at&#32;least&#32;once&quot;</emphasis>);
4215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4216 
4217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_class_catch_1_1_generators_1_1_repeat_generator_1a1b5a4018df276b05dc48e5fa0bcd3d28">get</link>()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
4218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_current_repeat&#32;==&#32;0)&#32;{
4219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_returned.push_back(m_generator.get());
4220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_returned.back();
4221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_returned[m_repeat_index];
4223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4224 
4225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_repeat_generator_1a24d5c2b1c09d6d220d4bd4c83f222dcb">next</link>()<emphasis role="keyword">&#32;override&#32;</emphasis>{
4226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;There&#32;are&#32;2&#32;basic&#32;cases:</emphasis>
4227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1)&#32;We&#32;are&#32;still&#32;reading&#32;the&#32;generator</emphasis>
4228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2)&#32;We&#32;are&#32;reading&#32;our&#32;own&#32;cache</emphasis>
4229 
4230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;In&#32;the&#32;first&#32;case,&#32;we&#32;need&#32;to&#32;poke&#32;the&#32;underlying&#32;generator.</emphasis>
4231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;it&#32;happily&#32;moves,&#32;we&#32;are&#32;left&#32;in&#32;that&#32;state,&#32;otherwise&#32;it&#32;is&#32;time&#32;to&#32;start&#32;reading&#32;from&#32;our&#32;cache</emphasis>
4232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_current_repeat&#32;==&#32;0)&#32;{
4233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">success</link>&#32;=&#32;m_generator.next();
4234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_catch_1_1true__given">success</link>)&#32;{
4235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++m_current_repeat;
4236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_current_repeat&#32;&lt;&#32;m_target_repeats;
4238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4239 
4240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;In&#32;the&#32;second&#32;case,&#32;we&#32;need&#32;to&#32;move&#32;indices&#32;forward&#32;and&#32;check&#32;that&#32;we&#32;haven&apos;t&#32;run&#32;up&#32;against&#32;the&#32;end</emphasis>
4241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++m_repeat_index;
4242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_repeat_index&#32;==&#32;m_returned.size())&#32;{
4243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_repeat_index&#32;=&#32;0;
4244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++m_current_repeat;
4245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_current_repeat&#32;&lt;&#32;m_target_repeats;
4247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4248 &#32;&#32;&#32;&#32;};
4249 
4250 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4251 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&#32;<link linkend="_namespace_catch_1_1_generators_1a510cc0d72a7bab8f967827e695b981ba">repeat</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">repeats</link>,&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">generator</link>)&#32;{
4252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>(pf::make_unique&lt;<link linkend="_struct_catch_1_1true__given">RepeatGenerator&lt;T&gt;</link>&gt;(<link linkend="_struct_catch_1_1true__given">repeats</link>,&#32;std::move(<link linkend="_struct_catch_1_1true__given">generator</link>)));
4253 &#32;&#32;&#32;&#32;}
4254 
4255 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;U,&#32;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
4256 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_generators_1_1_map_generator">MapGenerator</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_catch_1_1_generators_1_1_i_generator">IGenerator</link>&lt;T&gt;&#32;{
4257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TBD:&#32;provide&#32;static&#32;assert&#32;for&#32;mapping&#32;function,&#32;for&#32;friendly&#32;error&#32;message</emphasis>
4258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;U&gt;</link>&#32;<link linkend="_class_catch_1_1_generators_1_1_map_generator_1a7a4c986b7721df82559d5c3cbb3bdb66">m_generator</link>;
4259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">Func</link>&#32;<link linkend="_class_catch_1_1_generators_1_1_map_generator_1add8fa24bfa56705c798fe70f4c6235ff">m_function</link>;
4260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;To&#32;avoid&#32;returning&#32;dangling&#32;reference,&#32;we&#32;have&#32;to&#32;save&#32;the&#32;values</emphasis>
4261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<link linkend="_class_catch_1_1_generators_1_1_map_generator_1a970d45e8dccf903d3539daada255da42">m_cache</link>;
4262 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
4263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;F2&#32;=&#32;Func&gt;
4264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_generators_1_1_map_generator_1a525c7eaf53ad220ee7add534aff2522c">MapGenerator</link>(<link linkend="_struct_catch_1_1true__given">F2</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">function</link>,&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;U&gt;</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">generator</link>)&#32;:
4265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_generator(std::<link linkend="_struct_catch_1_1true__given">move</link>(<link linkend="_struct_catch_1_1true__given">generator</link>)),
4266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_function(std::<link linkend="_struct_catch_1_1true__given">forward</link>&lt;<link linkend="_struct_catch_1_1true__given">F2</link>&gt;(<link linkend="_struct_catch_1_1true__given">function</link>)),
4267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_cache(m_function(m_generator.get()))
4268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
4269 
4270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_class_catch_1_1_generators_1_1_map_generator_1abd7ffdef7f7c8575331146c4a95141ad">get</link>()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
4271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_cache;
4272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_map_generator_1aa07e2f12d38ae060c30cc30d9dc236c5">next</link>()<emphasis role="keyword">&#32;override&#32;</emphasis>{
4274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">success</link>&#32;=&#32;m_generator.next();
4275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_catch_1_1true__given">success</link>)&#32;{
4276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_cache&#32;=&#32;m_function(m_generator.get());
4277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">success</link>;
4279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4280 &#32;&#32;&#32;&#32;};
4281 
4282 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;U,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&#32;=&#32;FunctionReturnType&lt;Func,&#32;U&gt;&gt;
4283 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&#32;<link linkend="_namespace_catch_1_1_generators_1af33fd06c51ac9173c3bee2ddee2559a6">map</link>(<link linkend="_struct_catch_1_1true__given">Func</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">function</link>,&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;U&gt;</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">generator</link>)&#32;{
4284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>(
4285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pf::make_unique&lt;<link linkend="_struct_catch_1_1true__given">MapGenerator&lt;T, U, Func&gt;</link>&gt;(std::forward&lt;Func&gt;(<link linkend="_struct_catch_1_1true__given">function</link>),&#32;std::move(<link linkend="_struct_catch_1_1true__given">generator</link>))
4286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
4287 &#32;&#32;&#32;&#32;}
4288 
4289 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;U,&#32;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
4290 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&#32;map(<link linkend="_struct_catch_1_1true__given">Func</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">function</link>,&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;U&gt;</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">generator</link>)&#32;{
4291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>(
4292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pf::make_unique&lt;<link linkend="_struct_catch_1_1true__given">MapGenerator&lt;T, U, Func&gt;</link>&gt;(std::forward&lt;Func&gt;(<link linkend="_struct_catch_1_1true__given">function</link>),&#32;std::move(<link linkend="_struct_catch_1_1true__given">generator</link>))
4293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
4294 &#32;&#32;&#32;&#32;}
4295 
4296 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4297 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_generators_1_1_chunk_generator">ChunkGenerator</link>&#32;<link linkend="_struct_catch_1_1true__given">final</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_catch_1_1_generators_1_1_i_generator">IGenerator</link>&lt;std::vector&lt;T&gt;&gt;&#32;{
4298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;T&gt;&#32;<link linkend="_class_catch_1_1_generators_1_1_chunk_generator_1ab5e382bc5be2e327331bd694a40fa827">m_chunk</link>;
4299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_chunk_generator_1a222b9cd460e6d48b12f939833b1b0beb">m_chunk_size</link>;
4300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&#32;<link linkend="_class_catch_1_1_generators_1_1_chunk_generator_1aa12b90ee9d029c44528fdba6b9de17bb">m_generator</link>;
4301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;m_used_up&#32;=&#32;<emphasis role="keyword">false</emphasis>;
4302 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
4303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_generators_1_1_chunk_generator_1a50c334d00cde3166d71e9b90ebc2d2e3">ChunkGenerator</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;size,&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&#32;<link linkend="_struct_catch_1_1true__given">generator</link>)&#32;:
4304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_chunk_size(size),&#32;m_generator(std::<link linkend="_struct_catch_1_1true__given">move</link>(<link linkend="_struct_catch_1_1true__given">generator</link>))
4305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_chunk.reserve(m_chunk_size);
4307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_chunk_size&#32;!=&#32;0)&#32;{
4308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_chunk.push_back(m_generator.get());
4309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">i</link>&#32;=&#32;1;&#32;<link linkend="_struct_catch_1_1true__given">i</link>&#32;&lt;&#32;m_chunk_size;&#32;++<link linkend="_struct_catch_1_1true__given">i</link>)&#32;{
4310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!m_generator.next())&#32;{
4311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a3cbceeab9252d1b752f66a2826e92548">Catch::throw_exception</link>(<link linkend="_class_catch_1_1_generator_exception">GeneratorException</link>(<emphasis role="stringliteral">&quot;Not&#32;enough&#32;values&#32;to&#32;initialize&#32;the&#32;first&#32;chunk&quot;</emphasis>));
4312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_chunk.push_back(m_generator.get());
4314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;T&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_class_catch_1_1_generators_1_1_chunk_generator_1afab9d06c84aa469b3af60eb3e8f10597">get</link>()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
4318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_chunk;
4319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_chunk_generator_1a545e89f80eb1e3c953491541ea083f86">next</link>()<emphasis role="keyword">&#32;override&#32;</emphasis>{
4321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_chunk.clear();
4322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">idx</link>&#32;=&#32;0;&#32;<link linkend="_struct_catch_1_1true__given">idx</link>&#32;&lt;&#32;m_chunk_size;&#32;++<link linkend="_struct_catch_1_1true__given">idx</link>)&#32;{
4323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!m_generator.next())&#32;{
4324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
4325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_chunk.push_back(m_generator.get());
4327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
4329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4330 &#32;&#32;&#32;&#32;};
4331 
4332 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4333 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;std::vector&lt;T&gt;</link>&gt;&#32;<link linkend="_namespace_catch_1_1_generators_1acb4654b4e840e438e3bc204ac4d8e157">chunk</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;size,&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">generator</link>)&#32;{
4334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;std::vector&lt;T&gt;</link>&gt;(
4335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pf::make_unique&lt;ChunkGenerator&lt;T&gt;&gt;(size,&#32;std::move(<link linkend="_struct_catch_1_1true__given">generator</link>))
4336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
4337 &#32;&#32;&#32;&#32;}
4338 
4339 }&#32;<emphasis role="comment">//&#32;namespace&#32;Generators</emphasis>
4340 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
4341 
4342 <emphasis role="comment">//&#32;end&#32;catch_generators_generic.hpp</emphasis>
4343 <emphasis role="comment">//&#32;start&#32;catch_generators_specific.hpp</emphasis>
4344 
4345 <emphasis role="comment">//&#32;start&#32;catch_context.h</emphasis>
4346 
4347 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
4348 
4349 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
4350 
4351 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>IResultCapture;
4352 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>IRunner;
4353 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>IConfig;
4354 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>IMutableContext;
4355 
4356 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6">IConfigPtr</link>&#32;=&#32;std::shared_ptr&lt;IConfig&#32;const&gt;;
4357 
4358 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_i_context">IContext</link>
4359 &#32;&#32;&#32;&#32;{
4360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_i_context_1aeb17355c1be6c2ced5407cad7202628d">~IContext</link>();
4361 
4362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_i_result_capture">IResultCapture</link>*&#32;<link linkend="_struct_catch_1_1_i_context_1a950f10a5f6d3c9385f9493ba6298b174">getResultCapture</link>()&#32;=&#32;0;
4363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_i_runner">IRunner</link>*&#32;<link linkend="_struct_catch_1_1_i_context_1ace6ece997b27c76d70563272f9e93f2f">getRunner</link>()&#32;=&#32;0;
4364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6">IConfigPtr</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1_i_context_1ad72743ae753feab0a6f5505f26f79ced">getConfig</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4365 &#32;&#32;&#32;&#32;};
4366 
4367 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_i_mutable_context">IMutableContext</link>&#32;:&#32;<link linkend="_struct_catch_1_1_i_context">IContext</link>
4368 &#32;&#32;&#32;&#32;{
4369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_i_mutable_context_1a93f32b2ab6d0fb83637059240be799ab">~IMutableContext</link>();
4370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_mutable_context_1a4a80afd0525b7def21bee8d9b48f2d39">setResultCapture</link>(&#32;<link linkend="_struct_catch_1_1_i_result_capture">IResultCapture</link>*&#32;<link linkend="_struct_catch_1_1true__given">resultCapture</link>&#32;)&#32;=&#32;0;
4371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_mutable_context_1af2e53b1dea4527a2587cff266a730f6e">setRunner</link>(&#32;<link linkend="_struct_catch_1_1_i_runner">IRunner</link>*&#32;<link linkend="_struct_catch_1_1true__given">runner</link>&#32;)&#32;=&#32;0;
4372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_mutable_context_1aa81ba080fce084e9482f20338bc88531">setConfig</link>(&#32;<link linkend="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6">IConfigPtr</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">config</link>&#32;)&#32;=&#32;0;
4373 
4374 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
4375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_catch_1_1_i_mutable_context">IMutableContext</link>&#32;*<link linkend="_struct_catch_1_1_i_mutable_context_1aca4de034d0deed74dba34f143e4e273e">currentContext</link>;
4376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="_struct_catch_1_1_i_mutable_context">IMutableContext</link>&amp;&#32;<link linkend="_namespace_catch_1a710841d4732b86c06f816bd4822bd425">getCurrentMutableContext</link>();
4377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_mutable_context_1ac07cdb7d744cc8f09672d924324b55fd">cleanUpContext</link>();
4378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_mutable_context_1a17e4b3f9a9674af7e2c4f081c692a628">createContext</link>();
4379 &#32;&#32;&#32;&#32;};
4380 
4381 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_struct_catch_1_1_i_mutable_context">IMutableContext</link>&amp;&#32;<link linkend="_namespace_catch_1a710841d4732b86c06f816bd4822bd425">getCurrentMutableContext</link>()
4382 &#32;&#32;&#32;&#32;{
4383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!IMutableContext::currentContext&#32;)
4384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IMutableContext::createContext();
4385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOLINTNEXTLINE(clang-analyzer-core.uninitialized.UndefReturn)</emphasis>
4386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*IMutableContext::currentContext;
4387 &#32;&#32;&#32;&#32;}
4388 
4389 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_struct_catch_1_1_i_context">IContext</link>&amp;&#32;<link linkend="_namespace_catch_1a228a625318bb6183842e394eeba17d50">getCurrentContext</link>()
4390 &#32;&#32;&#32;&#32;{
4391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1a710841d4732b86c06f816bd4822bd425">getCurrentMutableContext</link>();
4392 &#32;&#32;&#32;&#32;}
4393 
4394 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1ae50508f10ffc4ed873a31a4db4caea16">cleanUpContext</link>();
4395 
4396 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_simple_pcg32">SimplePcg32</link>;
4397 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_simple_pcg32">SimplePcg32</link>&amp;&#32;<link linkend="_namespace_catch_1a66ea553511cbbc59d99e1720d8da514e">rng</link>();
4398 }
4399 
4400 <emphasis role="comment">//&#32;end&#32;catch_context.h</emphasis>
4401 <emphasis role="comment">//&#32;start&#32;catch_interfaces_config.h</emphasis>
4402 
4403 <emphasis role="comment">//&#32;start&#32;catch_option.hpp</emphasis>
4404 
4405 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
4406 
4407 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;An&#32;optional&#32;type</emphasis>
4408 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4409 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_option">Option</link>&#32;{
4410 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
4411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_option_1a8efb01b593d798decc80cbbdf311f2a3">Option</link>()&#32;:&#32;nullableValue(&#32;<link linkend="_struct_catch_1_1true__given">nullptr</link>&#32;)&#32;{}
4412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_option_1a5aeb9c22d48a6882bdf5fb4730b06c86">Option</link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">_value</link>&#32;)
4413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;nullableValue(&#32;<link linkend="_struct_catch_1_1true__given">new</link>(&#32;storage&#32;)&#32;<link linkend="_struct_catch_1_1true__given">T</link>(&#32;<link linkend="_struct_catch_1_1true__given">_value</link>&#32;)&#32;)
4414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
4415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_option_1af02f2e4559f06384baec0def8c68c5fd">Option</link>(&#32;<link linkend="_class_catch_1_1_option">Option</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">_other</link>&#32;)
4416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;nullableValue(&#32;<link linkend="_struct_catch_1_1true__given">_other</link>&#32;?&#32;<link linkend="_struct_catch_1_1true__given">new</link>(&#32;storage&#32;)&#32;<link linkend="_struct_catch_1_1true__given">T</link>(&#32;*<link linkend="_struct_catch_1_1true__given">_other</link>&#32;)&#32;:&#32;<link linkend="_struct_catch_1_1true__given">nullptr</link>&#32;)
4417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
4418 
4419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_option_1a37fe90bb47bb909f150a5ad6be25581a">~Option</link>()&#32;{
4420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reset();
4421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4422 
4423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_option">Option</link>&amp;&#32;<link linkend="_struct_catch_1_1true__given">operator= </link>(&#32;<link linkend="_class_catch_1_1_option">Option</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">_other</link>&#32;)&#32;{
4424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;&amp;<link linkend="_struct_catch_1_1true__given">_other</link>&#32;!=&#32;<emphasis role="keyword">this</emphasis>&#32;)&#32;{
4425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reset();
4426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_struct_catch_1_1true__given">_other</link>&#32;)
4427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nullableValue&#32;=&#32;<emphasis role="keyword">new</emphasis>(&#32;storage&#32;)&#32;<link linkend="_struct_catch_1_1true__given">T</link>(&#32;*<link linkend="_struct_catch_1_1true__given">_other</link>&#32;);
4428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
4430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_option">Option</link>&amp;&#32;<link linkend="_struct_catch_1_1true__given">operator = </link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">_value</link>&#32;)&#32;{
4432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reset();
4433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nullableValue&#32;=&#32;<emphasis role="keyword">new</emphasis>(&#32;storage&#32;)&#32;<link linkend="_struct_catch_1_1true__given">T</link>(&#32;<link linkend="_struct_catch_1_1true__given">_value</link>&#32;);
4434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
4435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4436 
4437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_option_1a37b4e0e5d4d56296adacd267a616f4e0">reset</link>()&#32;{
4438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;nullableValue&#32;)
4439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nullableValue-&gt;~T();
4440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nullableValue&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
4441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4442 
4443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">T</link>&amp;&#32;<link linkend="_class_catch_1_1_option_1ac250ca96c9af3bf5f94f253f4c0ec336">operator*</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*nullableValue;&#32;}
4444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_class_catch_1_1_option_1a873a00ed8844b137287f25c811cfd330">operator*</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*nullableValue;&#32;}
4445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">T</link>*&#32;<link linkend="_class_catch_1_1_option_1a04da75b6b0946cc38b4bbd51c8d407e0">operator-&gt;</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;nullableValue;&#32;}
4446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">T</link>*&#32;<link linkend="_class_catch_1_1_option_1acb3ec06778a8761e5f0014543d8f898e">operator-&gt;</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;nullableValue;&#32;}
4447 
4448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<link linkend="_class_catch_1_1_option_1a8d9ae2e30b0eb76fe134a6fbc8423124">valueOr</link>(&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">defaultValue</link>&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
4449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nullableValue&#32;?&#32;*nullableValue&#32;:&#32;<link linkend="_struct_catch_1_1true__given">defaultValue</link>;
4450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4451 
4452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_option_1a97c95829afbe92f2bcc5fd75b32c0825">some</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;nullableValue&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
4453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_option_1a821753afdc3fac947a13a01fbe0d248e">none</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;nullableValue&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
4454 
4455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">operator !</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;nullableValue&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
4456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">bool</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
4457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;some();
4458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4459 
4460 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
4461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;*<link linkend="_class_catch_1_1_option_1aa6643e8dc409f4fc86cc8c80f9c3266b">nullableValue</link>;
4462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(<emphasis role="keyword">alignof</emphasis>(<link linkend="_struct_catch_1_1true__given">T</link>))&#32;<emphasis role="keywordtype">char</emphasis>&#32;storage[<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_catch_1_1true__given">T</link>)];
4463 &#32;&#32;&#32;&#32;};
4464 
4465 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
4466 
4467 <emphasis role="comment">//&#32;end&#32;catch_option.hpp</emphasis>
4468 <emphasis role="preprocessor">#include&#32;&lt;chrono&gt;</emphasis>
4469 <emphasis role="preprocessor">#include&#32;&lt;iosfwd&gt;</emphasis>
4470 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
4471 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
4472 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
4473 
4474 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
4475 
4476 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737">Verbosity</link>&#32;{
4477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737a098753f8980036f4b936e3d4b6997111">Quiet</link>&#32;=&#32;0,
4478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737a960b44c579bc2f6818d2daaf9e4c16f0">Normal</link>,
4479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737a655d20c1ca69519ca647684edbb2db35">High</link>
4480 &#32;&#32;&#32;&#32;};
4481 
4482 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_warn_about">WarnAbout</link>&#32;{&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_struct_catch_1_1_warn_about_1ae3dde70ef78d700ea896eb29314e0fa3">What</link>&#32;{
4483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Nothing&#32;=&#32;0x00,
4484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NoAssertions&#32;=&#32;0x01,
4485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NoTests&#32;=&#32;0x02
4486 &#32;&#32;&#32;&#32;};&#32;};
4487 
4488 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_show_durations">ShowDurations</link>&#32;{&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_struct_catch_1_1_show_durations_1a82fa0174554187220c1eda175f122ee1">OrNot</link>&#32;{
4489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_show_durations_1a82fa0174554187220c1eda175f122ee1aba1710583107b0736c1f5f0f8dfd23c8">DefaultForReporter</link>,
4490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_show_durations_1a82fa0174554187220c1eda175f122ee1ab49682ccb55f2d6b4dfcdb027c09da9a">Always</link>,
4491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Never
4492 &#32;&#32;&#32;&#32;};&#32;};
4493 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_run_tests">RunTests</link>&#32;{&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_struct_catch_1_1_run_tests_1ab56bd851b1dd085869992d1a9d73dc5d">InWhatOrder</link>&#32;{
4494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_run_tests_1ab56bd851b1dd085869992d1a9d73dc5da732a98670b4661d80d8c392784a14f09">InDeclarationOrder</link>,
4495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_run_tests_1ab56bd851b1dd085869992d1a9d73dc5da8c62a42e94d867c708b421322b1c386f">InLexicographicalOrder</link>,
4496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InRandomOrder
4497 &#32;&#32;&#32;&#32;};&#32;};
4498 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_use_colour">UseColour</link>&#32;{&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_struct_catch_1_1_use_colour_1a6aa78da0c2de7539bb9e3757e204a3f1">YesOrNo</link>&#32;{
4499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_use_colour_1a6aa78da0c2de7539bb9e3757e204a3f1a5c7fa9f5f5536187e8f47df35b892bb7">Auto</link>,
4500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_use_colour_1a6aa78da0c2de7539bb9e3757e204a3f1ad7bb64e0fe49ba51aafbd3e14f06e98d">Yes</link>,
4501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;No
4502 &#32;&#32;&#32;&#32;};&#32;};
4503 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_wait_for_keypress">WaitForKeypress</link>&#32;{&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_struct_catch_1_1_wait_for_keypress_1a2e8c4369d0a605d64e3e83b5af3399ba">When</link>&#32;{
4504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_wait_for_keypress_1a2e8c4369d0a605d64e3e83b5af3399baa3a78e4f64675e7ce54ffd29e6109f1ce">Never</link>,
4505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BeforeStart&#32;=&#32;1,
4506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BeforeExit&#32;=&#32;2,
4507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BeforeStartAndExit&#32;=&#32;BeforeStart&#32;|&#32;BeforeExit
4508 &#32;&#32;&#32;&#32;};&#32;};
4509 
4510 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>TestSpec;
4511 
4512 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_i_config">IConfig</link>&#32;:&#32;<link linkend="_class_catch_1_1_non_copyable">NonCopyable</link>&#32;{
4513 
4514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_i_config_1adadf7c57478e4b0c83bea5b38d2dbc87">~IConfig</link>();
4515 
4516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_i_config_1aadb95f849359de1e6eb915aab063e542">allowThrows</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_struct_catch_1_1_i_config_1a4e4714e479596394d5e129e8763f7853">stream</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;std::string&#32;<link linkend="_struct_catch_1_1_i_config_1aa2315800a05c19db71518b1edc39d43b">name</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_i_config_1a2f1b0391019b9ce69921527a684eab23">includeSuccessfulResults</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_i_config_1a5b886c5aad9001e90f63a7cf0726af63">shouldDebugBreak</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_i_config_1a75d970c495a28e46b8e9b04a1d32149f">warnAboutMissingAssertions</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_i_config_1a30590623e3918825f2896c2262bf6fe3">warnAboutNoTests</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_catch_1_1_i_config_1a363f3388a439d02217f37198eff96744">abortAfter</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_i_config_1aa288bf92ccd0aafd85409d8aefdf738c">showInvisibles</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_show_durations_1a82fa0174554187220c1eda175f122ee1">ShowDurations::OrNot</link>&#32;<link linkend="_struct_catch_1_1_i_config_1abaa97d281484278291f0d3db6d404aeb">showDurations</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_catch_1_1_i_config_1a160c6f6e19ed6ae946f7a9e737099189">minDuration</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">TestSpec</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1_i_config_1a6c021a1bf5cae58cb6c4b754af6cd4b5">testSpec</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_i_config_1a49a475bbeb3180c06799d6d958914649">hasTestFilters</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;std::vector&lt;std::string&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1_i_config_1a439d37638d37248d8a7f3f39ad5dc6f2">getTestsOrTags</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_run_tests_1ab56bd851b1dd085869992d1a9d73dc5d">RunTests::InWhatOrder</link>&#32;<link linkend="_struct_catch_1_1_i_config_1a0fc59c9aba1d4018538d5526daa5eb78">runOrder</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_catch_1_1_i_config_1ae049eb45979d841073fa65d1094c7f14">rngSeed</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_use_colour_1a6aa78da0c2de7539bb9e3757e204a3f1">UseColour::YesOrNo</link>&#32;<link linkend="_struct_catch_1_1_i_config_1a87ec19a6b486eb5b5015cf7738fee026">useColour</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;std::vector&lt;std::string&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1_i_config_1aeb282b2b74d01c0d95ef1a4dbd2d12df">getSectionsToRun</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737">Verbosity</link>&#32;<link linkend="_struct_catch_1_1_i_config_1a55aff5924bdbb3f558775821b1eb4b3d">verbosity</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4535 
4536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_i_config_1aa9aa1eafdbe510e27bf319233969ee2c">benchmarkNoAnalysis</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_catch_1_1_i_config_1a583734a61796b495b80779a6540eb6cc">benchmarkSamples</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_catch_1_1_i_config_1ae1ec73d460a2b58c7c9b022a430a34dd">benchmarkConfidenceInterval</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_catch_1_1_i_config_1a3b8e5581be01f4773593f8b85eb7db98">benchmarkResamples</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;std::chrono::milliseconds&#32;<link linkend="_struct_catch_1_1_i_config_1a516879e39f2e46f69bb4ef1f1fe7023c">benchmarkWarmupTime</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4541 &#32;&#32;&#32;&#32;};
4542 
4543 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6">IConfigPtr</link>&#32;=&#32;std::shared_ptr&lt;IConfig&#32;const&gt;;
4544 }
4545 
4546 <emphasis role="comment">//&#32;end&#32;catch_interfaces_config.h</emphasis>
4547 <emphasis role="comment">//&#32;start&#32;catch_random_number_generator.h</emphasis>
4548 
4549 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>
4550 
4551 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
4552 
4553 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;a&#32;simple&#32;implementation&#32;of&#32;C++11&#32;Uniform&#32;Random&#32;Number</emphasis>
4554 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Generator.&#32;It&#32;does&#32;not&#32;provide&#32;all&#32;operators,&#32;because&#32;Catch2</emphasis>
4555 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;does&#32;not&#32;use&#32;it,&#32;but&#32;it&#32;should&#32;behave&#32;as&#32;expected&#32;inside&#32;stdlib&apos;s</emphasis>
4556 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;distributions.</emphasis>
4557 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;implementation&#32;is&#32;based&#32;on&#32;the&#32;PCG&#32;family&#32;(http://pcg-random.org)</emphasis>
4558 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_simple_pcg32">SimplePcg32</link>&#32;{
4559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_class_catch_1_1_simple_pcg32_1a87e58661dd1fa2994b6b9c38c4efafdb">state_type</link>&#32;=&#32;std::uint64_t;
4560 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
4561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_class_catch_1_1_simple_pcg32_1a220ca38f6d16804c6e99937a673ec3ff">result_type</link>&#32;=&#32;std::uint32_t;
4562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_class_catch_1_1_simple_pcg32_1a220ca38f6d16804c6e99937a673ec3ff">result_type</link>&#32;(min)()&#32;{
4563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
4564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_class_catch_1_1_simple_pcg32_1a220ca38f6d16804c6e99937a673ec3ff">result_type</link>&#32;(max)()&#32;{
4566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class_catch_1_1_simple_pcg32_1a220ca38f6d16804c6e99937a673ec3ff">result_type</link><emphasis role="keyword">&gt;</emphasis>(-1);
4567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4568 
4569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Provide&#32;some&#32;default&#32;initial&#32;state&#32;for&#32;the&#32;default&#32;constructor</emphasis>
4570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_simple_pcg32_1a045c99a96f9b0faf384e22f871576282">SimplePcg32</link>():<link linkend="_class_catch_1_1_simple_pcg32">SimplePcg32</link>(0xed743cc4U)&#32;{}
4571 
4572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_class_catch_1_1_simple_pcg32_1a901fc48d250c3d92b1ec067bcc6155c1">SimplePcg32</link>(<link linkend="_class_catch_1_1_simple_pcg32_1a220ca38f6d16804c6e99937a673ec3ff">result_type</link>&#32;<link linkend="_struct_catch_1_1true__given">seed_</link>);
4573 
4574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_simple_pcg32_1a215dac93c384973353a2b4f87f68c8bc">seed</link>(<link linkend="_class_catch_1_1_simple_pcg32_1a220ca38f6d16804c6e99937a673ec3ff">result_type</link>&#32;<link linkend="_struct_catch_1_1true__given">seed_</link>);
4575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_simple_pcg32_1a877e7a9c14d378af729ad19a0e959178">discard</link>(<link linkend="_struct_catch_1_1true__given">uint64_t</link>&#32;<link linkend="_struct_catch_1_1true__given">skip</link>);
4576 
4577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_simple_pcg32_1a220ca38f6d16804c6e99937a673ec3ff">result_type</link>&#32;<link linkend="_class_catch_1_1_simple_pcg32_1acda21743a5ac46fdff9a0b4a6d45a91f">operator()</link>();
4578 
4579 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
4580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_simple_pcg32_1a3f1e143181b91f902ce034e2878f87eb">operator==</link>(<link linkend="_class_catch_1_1_simple_pcg32">SimplePcg32</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<link linkend="_class_catch_1_1_simple_pcg32">SimplePcg32</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>);
4581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_simple_pcg32_1a4940863fe85f6c5a2fa9b3910bfb7406">operator!=</link>(<link linkend="_class_catch_1_1_simple_pcg32">SimplePcg32</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">lhs</link>,&#32;<link linkend="_class_catch_1_1_simple_pcg32">SimplePcg32</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">rhs</link>);
4582 
4583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;In&#32;theory&#32;we&#32;also&#32;need&#32;operator&lt;&lt;&#32;and&#32;operator&gt;&gt;</emphasis>
4584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;In&#32;practice&#32;we&#32;do&#32;not&#32;use&#32;them,&#32;so&#32;we&#32;will&#32;skip&#32;them&#32;for&#32;now</emphasis>
4585 
4586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint64_t&#32;<link linkend="_class_catch_1_1_simple_pcg32_1a830bb20e51776b605910f4a00dde46ad">m_state</link>;
4587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;part&#32;of&#32;the&#32;state&#32;determines&#32;which&#32;&quot;stream&quot;&#32;of&#32;the&#32;numbers</emphasis>
4588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;chosen&#32;--&#32;we&#32;take&#32;it&#32;as&#32;a&#32;constant&#32;for&#32;Catch2,&#32;so&#32;we&#32;only</emphasis>
4589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;need&#32;to&#32;deal&#32;with&#32;seeding&#32;the&#32;main&#32;state.</emphasis>
4590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Picked&#32;by&#32;reading&#32;8&#32;bytes&#32;from&#32;`/dev/random`&#32;:-)</emphasis>
4591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint64_t&#32;s_inc&#32;=&#32;(0x13ed0cc53f939476ULL&#32;&lt;&lt;&#32;1ULL)&#32;|&#32;1ULL;
4592 &#32;&#32;&#32;&#32;};
4593 
4594 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
4595 
4596 <emphasis role="comment">//&#32;end&#32;catch_random_number_generator.h</emphasis>
4597 <emphasis role="preprocessor">#include&#32;&lt;random&gt;</emphasis>
4598 
4599 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
4600 <emphasis role="keyword">namespace&#32;</emphasis>Generators&#32;{
4601 
4602 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Float&gt;
4603 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_generators_1_1_random_floating_generator">RandomFloatingGenerator</link>&#32;<link linkend="_struct_catch_1_1true__given">final</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_catch_1_1_generators_1_1_i_generator">IGenerator</link>&lt;Float&gt;&#32;{
4604 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_simple_pcg32">Catch::SimplePcg32</link>&amp;&#32;<link linkend="_class_catch_1_1_generators_1_1_random_floating_generator_1a6142d65c14d2749ecb3dbc6949c0ca1c">m_rng</link>;
4605 &#32;&#32;&#32;&#32;std::uniform_real_distribution&lt;Float&gt;&#32;<link linkend="_class_catch_1_1_generators_1_1_random_floating_generator_1a6a79be0000a6c2a17e4f11dadb43c8ac">m_dist</link>;
4606 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">Float</link>&#32;<link linkend="_class_catch_1_1_generators_1_1_random_floating_generator_1a3591690761d8da0f4438623a453e6bc0">m_current_number</link>;
4607 <emphasis role="keyword">public</emphasis>:
4608 
4609 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_generators_1_1_random_floating_generator_1abce275ce88f7c3465addd7a98b6c408d">RandomFloatingGenerator</link>(<link linkend="_struct_catch_1_1true__given">Float</link>&#32;<link linkend="_struct_catch_1_1true__given">a</link>,&#32;<link linkend="_struct_catch_1_1true__given">Float</link>&#32;<link linkend="_struct_catch_1_1true__given">b</link>):
4610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_rng(<link linkend="_namespace_catch_1a66ea553511cbbc59d99e1720d8da514e">rng</link>()),
4611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dist(<link linkend="_struct_catch_1_1true__given">a</link>,&#32;<link linkend="_struct_catch_1_1true__given">b</link>)&#32;{
4612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis><emphasis role="keyword">&gt;</emphasis>(next());
4613 &#32;&#32;&#32;&#32;}
4614 
4615 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">Float</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_class_catch_1_1_generators_1_1_random_floating_generator_1a307eff56c58d4c6a223f35ac4d4ba710">get</link>()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
4616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_current_number;
4617 &#32;&#32;&#32;&#32;}
4618 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_random_floating_generator_1a6a65e5f16abd884f58c31581b2a0d6db">next</link>()<emphasis role="keyword">&#32;override&#32;</emphasis>{
4619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_current_number&#32;=&#32;m_dist(m_rng);
4620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
4621 &#32;&#32;&#32;&#32;}
4622 };
4623 
4624 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Integer&gt;
4625 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_generators_1_1_random_integer_generator">RandomIntegerGenerator</link>&#32;<link linkend="_struct_catch_1_1true__given">final</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_catch_1_1_generators_1_1_i_generator">IGenerator</link>&lt;Integer&gt;&#32;{
4626 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_simple_pcg32">Catch::SimplePcg32</link>&amp;&#32;<link linkend="_class_catch_1_1_generators_1_1_random_integer_generator_1af561ef07b93877d15a9af5e5fe19ea13">m_rng</link>;
4627 &#32;&#32;&#32;&#32;std::uniform_int_distribution&lt;Integer&gt;&#32;<link linkend="_class_catch_1_1_generators_1_1_random_integer_generator_1a0f9a8e409e291c332ebba1667cdc90fe">m_dist</link>;
4628 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">Integer</link>&#32;<link linkend="_class_catch_1_1_generators_1_1_random_integer_generator_1a1b811ebf04416b6b822ce153b040f020">m_current_number</link>;
4629 <emphasis role="keyword">public</emphasis>:
4630 
4631 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_generators_1_1_random_integer_generator_1a886d16c899ad70781b83a0e8f9d2cf96">RandomIntegerGenerator</link>(<link linkend="_struct_catch_1_1true__given">Integer</link>&#32;<link linkend="_struct_catch_1_1true__given">a</link>,&#32;<link linkend="_struct_catch_1_1true__given">Integer</link>&#32;<link linkend="_struct_catch_1_1true__given">b</link>):
4632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_rng(<link linkend="_namespace_catch_1a66ea553511cbbc59d99e1720d8da514e">rng</link>()),
4633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dist(<link linkend="_struct_catch_1_1true__given">a</link>,&#32;<link linkend="_struct_catch_1_1true__given">b</link>)&#32;{
4634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis><emphasis role="keyword">&gt;</emphasis>(next());
4635 &#32;&#32;&#32;&#32;}
4636 
4637 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">Integer</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_class_catch_1_1_generators_1_1_random_integer_generator_1af160cf856809beca4503491481a4865e">get</link>()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
4638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_current_number;
4639 &#32;&#32;&#32;&#32;}
4640 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_random_integer_generator_1aaa3db70fbdfa3e8dcb61fb5592eba81f">next</link>()<emphasis role="keyword">&#32;override&#32;</emphasis>{
4641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_current_number&#32;=&#32;m_dist(m_rng);
4642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
4643 &#32;&#32;&#32;&#32;}
4644 };
4645 
4646 <emphasis role="comment">//&#32;TODO:&#32;Ideally&#32;this&#32;would&#32;be&#32;also&#32;constrained&#32;against&#32;the&#32;various&#32;char&#32;types,</emphasis>
4647 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;but&#32;I&#32;don&apos;t&#32;expect&#32;users&#32;to&#32;run&#32;into&#32;that&#32;in&#32;practice.</emphasis>
4648 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4649 <emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;std::is_integral&lt;T&gt;::value&#32;&amp;&amp;&#32;!std::is_same&lt;T,&#32;bool&gt;::value,
4650 <link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&gt;::type
4651 <link linkend="_namespace_catch_1_1_generators_1a079a48b510a5f171707e87f351328e52">random</link>(<link linkend="_struct_catch_1_1true__given">T</link>&#32;<link linkend="_struct_catch_1_1true__given">a</link>,&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<link linkend="_struct_catch_1_1true__given">b</link>)&#32;{
4652 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>(
4653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pf::make_unique&lt;<link linkend="_struct_catch_1_1true__given">RandomIntegerGenerator&lt;T&gt;</link>&gt;(<link linkend="_struct_catch_1_1true__given">a</link>,&#32;<link linkend="_struct_catch_1_1true__given">b</link>)
4654 &#32;&#32;&#32;&#32;);
4655 }
4656 
4657 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4658 <emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;std::is_floating_point&lt;T&gt;::value,
4659 <link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&gt;::type
4660 <link linkend="_namespace_catch_1_1_generators_1a079a48b510a5f171707e87f351328e52">random</link>(<link linkend="_struct_catch_1_1true__given">T</link>&#32;<link linkend="_struct_catch_1_1true__given">a</link>,&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<link linkend="_struct_catch_1_1true__given">b</link>)&#32;{
4661 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>(
4662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pf::make_unique&lt;<link linkend="_struct_catch_1_1true__given">RandomFloatingGenerator&lt;T&gt;</link>&gt;(<link linkend="_struct_catch_1_1true__given">a</link>,&#32;<link linkend="_struct_catch_1_1true__given">b</link>)
4663 &#32;&#32;&#32;&#32;);
4664 }
4665 
4666 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4667 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_generators_1_1_range_generator">RangeGenerator</link>&#32;<link linkend="_struct_catch_1_1true__given">final</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_catch_1_1_generators_1_1_i_generator">IGenerator</link>&lt;T&gt;&#32;{
4668 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<link linkend="_class_catch_1_1_generators_1_1_range_generator_1af2be334be7dc9be55bcb75b2609dea64">m_current</link>;
4669 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<link linkend="_class_catch_1_1_generators_1_1_range_generator_1adea61e79cfc8c51efdea2526daa33dec">m_end</link>;
4670 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<link linkend="_class_catch_1_1_generators_1_1_range_generator_1a44e4683a9f98df49792502a2c51ff249">m_step</link>;
4671 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_range_generator_1ad4f0ce4efcf625e04150547363437ff8">m_positive</link>;
4672 
4673 <emphasis role="keyword">public</emphasis>:
4674 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_generators_1_1_range_generator_1a6a9b3cc009471c085c985642e0ab102e">RangeGenerator</link>(<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;start,&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;end,&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">step</link>):
4675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_current(start),
4676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_end(end),
4677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_step(<link linkend="_struct_catch_1_1true__given">step</link>),
4678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_positive(m_step&#32;&gt;&#32;<link linkend="_struct_catch_1_1true__given">T</link>(0))
4679 &#32;&#32;&#32;&#32;{
4680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">assert</link>(m_current&#32;!=&#32;m_end&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Range&#32;start&#32;and&#32;end&#32;cannot&#32;be&#32;equal&quot;</emphasis>);
4681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">assert</link>(m_step&#32;!=&#32;<link linkend="_struct_catch_1_1true__given">T</link>(0)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Step&#32;size&#32;cannot&#32;be&#32;zero&quot;</emphasis>);
4682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">assert</link>(((m_positive&#32;&amp;&amp;&#32;m_current&#32;&lt;=&#32;m_end)&#32;||&#32;(!m_positive&#32;&amp;&amp;&#32;m_current&#32;&gt;=&#32;m_end))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Step&#32;moves&#32;away&#32;from&#32;end&quot;</emphasis>);
4683 &#32;&#32;&#32;&#32;}
4684 
4685 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_generators_1_1_range_generator_1ac999eb143945ff311b97d2c767df90d3">RangeGenerator</link>(<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;start,&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;end):
4686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_generators_1_1_range_generator">RangeGenerator</link>(start,&#32;end,&#32;(start&#32;&lt;&#32;end)&#32;?&#32;<link linkend="_struct_catch_1_1true__given">T</link>(1)&#32;:&#32;<link linkend="_struct_catch_1_1true__given">T</link>(-1))
4687 &#32;&#32;&#32;&#32;{}
4688 
4689 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_class_catch_1_1_generators_1_1_range_generator_1a5484de93ae75cf01cff02172c6875848">get</link>()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
4690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_current;
4691 &#32;&#32;&#32;&#32;}
4692 
4693 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_range_generator_1a4e6b2038832f09724d5a4355b4691259">next</link>()<emphasis role="keyword">&#32;override&#32;</emphasis>{
4694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_current&#32;+=&#32;m_step;
4695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_positive)&#32;?&#32;(m_current&#32;&lt;&#32;m_end)&#32;:&#32;(m_current&#32;&gt;&#32;m_end);
4696 &#32;&#32;&#32;&#32;}
4697 };
4698 
4699 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4700 <link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&#32;<link linkend="_namespace_catch_1_1_generators_1a6e53e65dfedc4d39febcb7b2b862afd9">range</link>(<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;start,&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;end,&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">step</link>)&#32;{
4701 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_arithmetic&lt;T&gt;::value&#32;&amp;&amp;&#32;!std::is_same&lt;T,&#32;bool&gt;::value,&#32;<emphasis role="stringliteral">&quot;Type&#32;must&#32;be&#32;numeric&quot;</emphasis>);
4702 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>(pf::make_unique&lt;<link linkend="_struct_catch_1_1true__given">RangeGenerator&lt;T&gt;</link>&gt;(start,&#32;end,&#32;<link linkend="_struct_catch_1_1true__given">step</link>));
4703 }
4704 
4705 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4706 <link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>&#32;<link linkend="_namespace_catch_1_1_generators_1a6e53e65dfedc4d39febcb7b2b862afd9">range</link>(<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;start,&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;end)&#32;{
4707 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_integral&lt;T&gt;::value&#32;&amp;&amp;&#32;!std::is_same&lt;T,&#32;bool&gt;::value,&#32;<emphasis role="stringliteral">&quot;Type&#32;must&#32;be&#32;an&#32;integer&quot;</emphasis>);
4708 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;T&gt;</link>(pf::make_unique&lt;<link linkend="_struct_catch_1_1true__given">RangeGenerator&lt;T&gt;</link>&gt;(start,&#32;end));
4709 }
4710 
4711 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4712 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_generators_1_1_iterator_generator">IteratorGenerator</link>&#32;<link linkend="_struct_catch_1_1true__given">final</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_catch_1_1_generators_1_1_i_generator">IGenerator</link>&lt;T&gt;&#32;{
4713 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!std::is_same&lt;T,&#32;bool&gt;::value,
4714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;IteratorGenerator&#32;currently&#32;does&#32;not&#32;support&#32;bools&quot;</emphasis>
4715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;because&#32;of&#32;std::vector&lt;bool&gt;&#32;specialization&quot;</emphasis>);
4716 
4717 &#32;&#32;&#32;&#32;std::vector&lt;T&gt;&#32;<link linkend="_class_catch_1_1_generators_1_1_iterator_generator_1a74eb1a6990cf0e3b548e8654bd6e99ef">m_elems</link>;
4718 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;m_current&#32;=&#32;0;
4719 <emphasis role="keyword">public</emphasis>:
4720 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;InputSentinel&gt;
4721 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_generators_1_1_iterator_generator_1a1f795b1bbd515274673115c0a9fc2e54">IteratorGenerator</link>(<link linkend="_struct_catch_1_1true__given">InputIterator</link>&#32;<link linkend="_struct_catch_1_1true__given">first</link>,&#32;<link linkend="_struct_catch_1_1true__given">InputSentinel</link>&#32;<link linkend="_struct_catch_1_1true__given">last</link>):m_elems(<link linkend="_struct_catch_1_1true__given">first</link>,&#32;<link linkend="_struct_catch_1_1true__given">last</link>)&#32;{
4722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_elems.empty())&#32;{
4723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a3cbceeab9252d1b752f66a2826e92548">Catch::throw_exception</link>(<link linkend="_class_catch_1_1_generator_exception">GeneratorException</link>(<emphasis role="stringliteral">&quot;IteratorGenerator&#32;received&#32;no&#32;valid&#32;values&quot;</emphasis>));
4724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4725 &#32;&#32;&#32;&#32;}
4726 
4727 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">T</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_class_catch_1_1_generators_1_1_iterator_generator_1a21783f931147e4ba2300070c5c417db5">get</link>()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
4728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_elems[m_current];
4729 &#32;&#32;&#32;&#32;}
4730 
4731 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_generators_1_1_iterator_generator_1acafb4fa1eebe5e1db571621a35a3f137">next</link>()<emphasis role="keyword">&#32;override&#32;</emphasis>{
4732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++m_current;
4733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_current&#32;!=&#32;m_elems.size();
4734 &#32;&#32;&#32;&#32;}
4735 };
4736 
4737 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">InputIterator</link>,
4738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">InputSentinel</link>,
4739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">ResultType</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;InputIterator&gt;::value_type&gt;
4740 <link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;ResultType&gt;</link>&#32;<link linkend="_namespace_catch_1_1_generators_1a62a768a07d44903a0691ec620d4f72c4">from_range</link>(<link linkend="_struct_catch_1_1true__given">InputIterator</link>&#32;<link linkend="_struct_catch_1_1true__given">from</link>,&#32;<link linkend="_struct_catch_1_1true__given">InputSentinel</link>&#32;<link linkend="_struct_catch_1_1true__given">to</link>)&#32;{
4741 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;ResultType&gt;</link>(pf::make_unique&lt;<link linkend="_struct_catch_1_1true__given">IteratorGenerator&lt;ResultType&gt;</link>&gt;(<link linkend="_struct_catch_1_1true__given">from</link>,&#32;<link linkend="_struct_catch_1_1true__given">to</link>));
4742 }
4743 
4744 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">Container</link>,
4745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">ResultType</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;Container::value_type&gt;
4746 <link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;ResultType&gt;</link>&#32;<link linkend="_namespace_catch_1_1_generators_1a62a768a07d44903a0691ec620d4f72c4">from_range</link>(<link linkend="_struct_catch_1_1true__given">Container</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">cnt</link>)&#32;{
4747 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">GeneratorWrapper&lt;ResultType&gt;</link>(pf::make_unique&lt;<link linkend="_struct_catch_1_1true__given">IteratorGenerator&lt;ResultType&gt;</link>&gt;(<link linkend="_struct_catch_1_1true__given">cnt</link>.begin(),&#32;<link linkend="_struct_catch_1_1true__given">cnt</link>.end()));
4748 }
4749 
4750 }&#32;<emphasis role="comment">//&#32;namespace&#32;Generators</emphasis>
4751 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
4752 
4753 <emphasis role="comment">//&#32;end&#32;catch_generators_specific.hpp</emphasis>
4754 
4755 <emphasis role="comment">//&#32;These&#32;files&#32;are&#32;included&#32;here&#32;so&#32;the&#32;single_include&#32;script&#32;doesn&apos;t&#32;put&#32;them</emphasis>
4756 <emphasis role="comment">//&#32;in&#32;the&#32;conditionally&#32;compiled&#32;sections</emphasis>
4757 <emphasis role="comment">//&#32;start&#32;catch_test_case_info.h</emphasis>
4758 
4759 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
4760 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
4761 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
4762 
4763 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
4764 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;push</emphasis>
4765 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wpadded&quot;</emphasis>
4766 <emphasis role="preprocessor">#endif</emphasis>
4767 
4768 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
4769 
4770 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>ITestInvoker;
4771 
4772 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_test_case_info">TestCaseInfo</link>&#32;{
4773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eac">SpecialProperties</link>{
4774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;None&#32;=&#32;0,
4775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IsHidden&#32;=&#32;1&#32;&lt;&lt;&#32;1,
4776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ShouldFail&#32;=&#32;1&#32;&lt;&lt;&#32;2,
4777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MayFail&#32;=&#32;1&#32;&lt;&lt;&#32;3,
4778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Throws&#32;=&#32;1&#32;&lt;&lt;&#32;4,
4779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NonPortable&#32;=&#32;1&#32;&lt;&lt;&#32;5,
4780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Benchmark&#32;=&#32;1&#32;&lt;&lt;&#32;6
4781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
4782 
4783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_test_case_info_1ad1a6b08b5a83d1c5eb4596b727b5305f">TestCaseInfo</link>(&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">_name</link>,
4784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">_className</link>,
4785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">_description</link>,
4786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">_tags</link>,
4787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">_lineInfo</link>&#32;);
4788 
4789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_test_case_info_1a0fe44abaf18ae7c26f98a9fc2b08679c">setTags</link>(&#32;<link linkend="_struct_catch_1_1_test_case_info">TestCaseInfo</link>&amp;&#32;<link linkend="_struct_catch_1_1true__given">testCaseInfo</link>,&#32;std::vector&lt;std::string&gt;&#32;tags&#32;);
4790 
4791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_test_case_info_1a934b1a0952700743e99d62ec1731a2e2">isHidden</link>()&#32;<emphasis role="keyword">const</emphasis>;
4792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<emphasis role="keywordflow">throws</emphasis>()&#32;<emphasis role="keyword">const</emphasis>;
4793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_test_case_info_1a5f37291295e3a6de2dd85324c941edaf">okToFail</link>()&#32;<emphasis role="keyword">const</emphasis>;
4794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_test_case_info_1abe33d81233230cdae8afa714688e905b">expectedToFail</link>()&#32;<emphasis role="keyword">const</emphasis>;
4795 
4796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_test_case_info_1a17506de67fb18e27511c17f8a81119d8">tagsAsString</link>()&#32;<emphasis role="keyword">const</emphasis>;
4797 
4798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_test_case_info_1a463794e2f5cfead307c93efd134ade36">name</link>;
4799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_test_case_info_1a1a5e0825132a38d091defdebbf2f8ce9">className</link>;
4800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_test_case_info_1a37fe2db9425bc45f6a33893eac31198e">description</link>;
4801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;<link linkend="_struct_catch_1_1_test_case_info_1a150a7cbca1dd0c91799ccb14ff822eb0">tags</link>;
4802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;<link linkend="_struct_catch_1_1_test_case_info_1a844e3de9baf6e53cadfba9733c236bfe">lcaseTags</link>;
4803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;<link linkend="_struct_catch_1_1_test_case_info_1aa9407b7f442655b51a2aad24b3fa2fd3">lineInfo</link>;
4804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eac">SpecialProperties</link>&#32;<link linkend="_struct_catch_1_1_test_case_info_1afc1e84bd7a2e180895a06d9131302af0">properties</link>;
4805 &#32;&#32;&#32;&#32;};
4806 
4807 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_catch_1_1_test_case">TestCase</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_catch_1_1_test_case_info">TestCaseInfo</link>&#32;{
4808 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
4809 
4810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_test_case_1aae5709fc1cb68e19ab0ac27e1ffd6a76">TestCase</link>(&#32;<link linkend="_struct_catch_1_1_i_test_invoker">ITestInvoker</link>*&#32;<link linkend="_struct_catch_1_1true__given">testCase</link>,&#32;<link linkend="_struct_catch_1_1_test_case_info">TestCaseInfo</link>&amp;&amp;&#32;<link linkend="_struct_catch_1_1true__given">info</link>&#32;);
4811 
4812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_test_case">TestCase</link>&#32;<link linkend="_class_catch_1_1_test_case_1a0812e8a216d09b087d5874687009f0d6">withName</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">_newName</link>&#32;)&#32;<emphasis role="keyword">const</emphasis>;
4813 
4814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_test_case_1a26f346c8446dded0562fe3818ae71651">invoke</link>()&#32;<emphasis role="keyword">const</emphasis>;
4815 
4816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_test_case_info">TestCaseInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_class_catch_1_1_test_case_1a804d0a6a5dc92b219e724f1390c25c7f">getTestCaseInfo</link>()&#32;<emphasis role="keyword">const</emphasis>;
4817 
4818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">operator == </link>(&#32;<link linkend="_class_catch_1_1_test_case">TestCase</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">other</link>&#32;)&#32;<emphasis role="keyword">const</emphasis>;
4819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">operator &lt; </link>(&#32;<link linkend="_class_catch_1_1_test_case">TestCase</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">other</link>&#32;)&#32;<emphasis role="keyword">const</emphasis>;
4820 
4821 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
4822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::shared_ptr&lt;ITestInvoker&gt;&#32;<link linkend="_class_catch_1_1_test_case_1a7aaa375d6f2bda735095eaa43395b54b">test</link>;
4823 &#32;&#32;&#32;&#32;};
4824 
4825 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_test_case">TestCase</link>&#32;<link linkend="_namespace_catch_1a5e63df38d06a43d4cee17454e724b5c0">makeTestCase</link>(&#32;&#32;<link linkend="_struct_catch_1_1_i_test_invoker">ITestInvoker</link>*&#32;<link linkend="_struct_catch_1_1true__given">testCase</link>,
4826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;className,
4827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_name_and_tags">NameAndTags</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_struct_catch_1_1true__given">nameAndTags</link>,
4828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_source_line_info">SourceLineInfo</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lineInfo&#32;);
4829 }
4830 
4831 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
4832 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;pop</emphasis>
4833 <emphasis role="preprocessor">#endif</emphasis>
4834 
4835 <emphasis role="comment">//&#32;end&#32;catch_test_case_info.h</emphasis>
4836 <emphasis role="comment">//&#32;start&#32;catch_interfaces_runner.h</emphasis>
4837 
4838 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
4839 
4840 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_i_runner">IRunner</link>&#32;{
4841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_struct_catch_1_1_i_runner_1a5f539a88a7772d68de8a2e4028774209">~IRunner</link>();
4842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_i_runner_1a03713202dd2e041e30b8030088ab0116">aborting</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
4843 &#32;&#32;&#32;&#32;};
4844 }
4845 
4846 <emphasis role="comment">//&#32;end&#32;catch_interfaces_runner.h</emphasis>
4847 
4848 <emphasis role="preprocessor">#ifdef&#32;__OBJC__</emphasis>
4849 <emphasis role="comment">//&#32;start&#32;catch_objc.hpp</emphasis>
4850 
4851 <emphasis role="preprocessor">#import&#32;&lt;objc/runtime.h&gt;</emphasis>
4852 
4853 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
4854 
4855 <emphasis role="comment">//&#32;NB.&#32;Any&#32;general&#32;catch&#32;headers&#32;included&#32;here&#32;must&#32;be&#32;included</emphasis>
4856 <emphasis role="comment">//&#32;in&#32;catch.hpp&#32;first&#32;to&#32;make&#32;sure&#32;they&#32;are&#32;included&#32;by&#32;the&#32;single</emphasis>
4857 <emphasis role="comment">//&#32;header&#32;for&#32;non&#32;obj-usage</emphasis>
4858 
4860 <emphasis role="comment">//&#32;This&#32;protocol&#32;is&#32;really&#32;only&#32;here&#32;for&#32;(self)&#32;documenting&#32;purposes,&#32;since</emphasis>
4861 <emphasis role="comment">//&#32;all&#32;its&#32;methods&#32;are&#32;optional.</emphasis>
4862 <emphasis role="keyword">@protocol&#32;</emphasis>OcFixture
4863 
4864 <emphasis role="keyword">@optional</emphasis>
4865 
4866 -(void)&#32;setUp;
4867 -(void)&#32;tearDown;
4868 
4869 <emphasis role="keyword">@end</emphasis>
4870 
4871 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
4872 
4873 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>OcMethod&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;ITestInvoker&#32;{
4874 
4875 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
4876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OcMethod(&#32;Class&#32;cls,&#32;<emphasis role="keywordtype">SEL</emphasis>&#32;sel&#32;)&#32;:&#32;m_cls(&#32;cls&#32;),&#32;m_sel(&#32;sel&#32;)&#32;{}
4877 
4878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;invoke()<emphasis role="keyword">&#32;const&#32;</emphasis>{
4879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">id</emphasis>&#32;obj&#32;=&#32;[[m_cls&#32;alloc]&#32;init];
4880 
4881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;performOptionalSelector(&#32;obj,&#32;<emphasis role="keyword">@selector</emphasis>(setUp)&#32;&#32;);
4882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;performOptionalSelector(&#32;obj,&#32;m_sel&#32;);
4883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;performOptionalSelector(&#32;obj,&#32;<emphasis role="keyword">@selector</emphasis>(tearDown)&#32;&#32;);
4884 
4885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arcSafeRelease(&#32;obj&#32;);
4886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4887 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
4888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~OcMethod()&#32;{}
4889 
4890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Class&#32;m_cls;
4891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">SEL</emphasis>&#32;m_sel;
4892 &#32;&#32;&#32;&#32;};
4893 
4894 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail{
4895 
4896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::string&#32;getAnnotation(&#32;&#32;&#32;Class&#32;cls,
4897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;annotationName,
4898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCaseName&#32;)&#32;{
4899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NSString*&#32;selStr&#32;=&#32;[[NSString&#32;alloc]&#32;initWithFormat:@&quot;Catch_%s_%s&quot;,&#32;annotationName.c_str(),&#32;testCaseName.c_str()];
4900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">SEL</emphasis>&#32;sel&#32;=&#32;NSSelectorFromString(&#32;selStr&#32;);
4901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arcSafeRelease(&#32;selStr&#32;);
4902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">id</emphasis>&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>&#32;=&#32;performOptionalSelector(&#32;cls,&#32;sel&#32;);
4903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;value&#32;)
4904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;[(NSString*)value&#32;UTF8String];
4905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
4906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4907 &#32;&#32;&#32;&#32;}
4908 
4909 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::size_t&#32;registerTestMethods()&#32;{
4910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;noTestMethods&#32;=&#32;0;
4911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;noClasses&#32;=&#32;objc_getClassList(&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;0&#32;);
4912 
4913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Class*&#32;classes&#32;=&#32;(CATCH_UNSAFE_UNRETAINED&#32;Class&#32;*)malloc(&#32;<emphasis role="keyword">sizeof</emphasis>(Class)&#32;*&#32;noClasses);
4914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;objc_getClassList(&#32;classes,&#32;noClasses&#32;);
4915 
4916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">int</emphasis>&#32;c&#32;=&#32;0;&#32;c&#32;&lt;&#32;noClasses;&#32;c++&#32;)&#32;{
4917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Class&#32;cls&#32;=&#32;classes[c];
4918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;u_int&#32;count;
4920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Method*&#32;methods&#32;=&#32;class_copyMethodList(&#32;cls,&#32;&amp;count&#32;);
4921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;u_int&#32;m&#32;=&#32;0;&#32;m&#32;&lt;&#32;count&#32;;&#32;m++&#32;)&#32;{
4922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">SEL</emphasis>&#32;selector&#32;=&#32;method_getName(methods[m]);
4923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;methodName&#32;=&#32;sel_getName(selector);
4924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_namespace_catch_1a695f62327be0676e046291eeaae15110">startsWith</link>(&#32;methodName,&#32;<emphasis role="stringliteral">&quot;Catch_TestCase_&quot;</emphasis>&#32;)&#32;)&#32;{
4925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;testCaseName&#32;=&#32;methodName.substr(&#32;15&#32;);
4926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;name&#32;=&#32;Detail::getAnnotation(&#32;cls,&#32;<emphasis role="stringliteral">&quot;Name&quot;</emphasis>,&#32;testCaseName&#32;);
4927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;desc&#32;=&#32;Detail::getAnnotation(&#32;cls,&#32;<emphasis role="stringliteral">&quot;Description&quot;</emphasis>,&#32;testCaseName&#32;);
4928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;className&#32;=&#32;class_getName(&#32;cls&#32;);
4929 
4930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a585459763f2c7610e57de2dd22dd1ad8">getMutableRegistryHub</link>().<link linkend="_struct_catch_1_1_i_mutable_registry_hub_1a11b85c6744d88c9f83fe16ad4a8dd451">registerTest</link>(&#32;<link linkend="_namespace_catch_1a5e63df38d06a43d4cee17454e724b5c0">makeTestCase</link>(&#32;<emphasis role="keyword">new</emphasis>&#32;OcMethod(&#32;cls,&#32;selector&#32;),&#32;className,&#32;NameAndTags(&#32;name.c_str(),&#32;desc.c_str()&#32;),&#32;SourceLineInfo(<emphasis role="stringliteral">&quot;&quot;</emphasis>,0)&#32;)&#32;);
4931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;noTestMethods++;
4932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;free(methods);
4935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;noTestMethods;
4938 &#32;&#32;&#32;&#32;}
4939 
4940 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE_MATCHERS)</emphasis>
4941 
4942 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Matchers&#32;{
4943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Impl&#32;{
4944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>NSStringMatchers&#32;{
4945 
4946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>StringHolder&#32;:&#32;MatcherBase&lt;NSString*&gt;{
4947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StringHolder(&#32;NSString*&#32;substr&#32;)&#32;:&#32;m_substr(&#32;[substr&#32;copy]&#32;){}
4948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StringHolder(&#32;StringHolder&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other&#32;)&#32;:&#32;m_substr(&#32;[other.m_substr&#32;copy]&#32;){}
4949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StringHolder()&#32;{
4950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arcSafeRelease(&#32;m_substr&#32;);
4951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4952 
4953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;match(&#32;NSString*&#32;str&#32;)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
4954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
4955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4956 
4957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NSString*&#32;CATCH_ARC_STRONG&#32;m_substr;
4958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
4959 
4960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_namespace_catch_1_1_matchers_1af8af7dfc338335ed4c788cb1b37fc59f">Equals</link>&#32;:&#32;StringHolder&#32;{
4961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1_1_matchers_1af8af7dfc338335ed4c788cb1b37fc59f">Equals</link>(&#32;NSString*&#32;substr&#32;)&#32;:&#32;StringHolder(&#32;substr&#32;){}
4962 
4963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;match(&#32;NSString*&#32;str&#32;)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
4964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;(str&#32;!=&#32;nil&#32;||&#32;m_substr&#32;==&#32;nil&#32;)&#32;&amp;&amp;
4965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[str&#32;isEqualToString:m_substr];
4966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4967 
4968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;describe()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
4969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;equals&#32;string:&#32;&quot;</emphasis>&#32;+&#32;<link linkend="_namespace_catch">Catch</link>::Detail::stringify(&#32;m_substr&#32;);
4970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
4972 
4973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_namespace_catch_1_1_matchers_1a1f6c2accdc6cd75a84d7112dcad647b4">Contains</link>&#32;:&#32;StringHolder&#32;{
4974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1_1_matchers_1a1f6c2accdc6cd75a84d7112dcad647b4">Contains</link>(&#32;NSString*&#32;substr&#32;)&#32;:&#32;StringHolder(&#32;substr&#32;){}
4975 
4976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;match(&#32;NSString*&#32;str&#32;)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
4977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;(str&#32;!=&#32;nil&#32;||&#32;m_substr&#32;==&#32;nil&#32;)&#32;&amp;&amp;
4978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[str&#32;rangeOfString:m_substr].location&#32;!=&#32;NSNotFound;
4979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4980 
4981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;describe()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
4982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;contains&#32;string:&#32;&quot;</emphasis>&#32;+&#32;<link linkend="_namespace_catch">Catch</link>::Detail::stringify(&#32;m_substr&#32;);
4983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
4985 
4986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_namespace_catch_1_1_matchers_1a97c9ee09a70378ca7e8c6f9f01b0d6d1">StartsWith</link>&#32;:&#32;StringHolder&#32;{
4987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1_1_matchers_1a97c9ee09a70378ca7e8c6f9f01b0d6d1">StartsWith</link>(&#32;NSString*&#32;substr&#32;)&#32;:&#32;StringHolder(&#32;substr&#32;){}
4988 
4989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;match(&#32;NSString*&#32;str&#32;)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
4990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;(str&#32;!=&#32;nil&#32;||&#32;m_substr&#32;==&#32;nil&#32;)&#32;&amp;&amp;
4991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[str&#32;rangeOfString:m_substr].location&#32;==&#32;0;
4992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4993 
4994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;describe()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
4995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;starts&#32;with:&#32;&quot;</emphasis>&#32;+&#32;<link linkend="_namespace_catch">Catch</link>::Detail::stringify(&#32;m_substr&#32;);
4996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
4998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_namespace_catch_1_1_matchers_1ae5a45efb4538c57c43e04f3f9043ad6e">EndsWith</link>&#32;:&#32;StringHolder&#32;{
4999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1_1_matchers_1ae5a45efb4538c57c43e04f3f9043ad6e">EndsWith</link>(&#32;NSString*&#32;substr&#32;)&#32;:&#32;StringHolder(&#32;substr&#32;){}
5000 
5001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;match(&#32;NSString*&#32;str&#32;)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
5002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;(str&#32;!=&#32;nil&#32;||&#32;m_substr&#32;==&#32;nil&#32;)&#32;&amp;&amp;
5003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[str&#32;rangeOfString:m_substr].location&#32;==&#32;[str&#32;length]&#32;-&#32;[m_substr&#32;length];
5004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5005 
5006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;describe()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
5007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;ends&#32;with:&#32;&quot;</emphasis>&#32;+&#32;<link linkend="_namespace_catch">Catch</link>::Detail::stringify(&#32;m_substr&#32;);
5008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
5010 
5011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;NSStringMatchers</emphasis>
5012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Impl</emphasis>
5013 
5014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;Impl::NSStringMatchers::Equals
5015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1_1_matchers_1af8af7dfc338335ed4c788cb1b37fc59f">Equals</link>(&#32;NSString*&#32;substr&#32;){&#32;<emphasis role="keywordflow">return</emphasis>&#32;Impl::NSStringMatchers::Equals(&#32;substr&#32;);&#32;}
5016 
5017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;Impl::NSStringMatchers::Contains
5018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1_1_matchers_1a1f6c2accdc6cd75a84d7112dcad647b4">Contains</link>(&#32;NSString*&#32;substr&#32;){&#32;<emphasis role="keywordflow">return</emphasis>&#32;Impl::NSStringMatchers::Contains(&#32;substr&#32;);&#32;}
5019 
5020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;Impl::NSStringMatchers::StartsWith
5021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1_1_matchers_1a97c9ee09a70378ca7e8c6f9f01b0d6d1">StartsWith</link>(&#32;NSString*&#32;substr&#32;){&#32;<emphasis role="keywordflow">return</emphasis>&#32;Impl::NSStringMatchers::StartsWith(&#32;substr&#32;);&#32;}
5022 
5023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;Impl::NSStringMatchers::EndsWith
5024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1_1_matchers_1ae5a45efb4538c57c43e04f3f9043ad6e">EndsWith</link>(&#32;NSString*&#32;substr&#32;){&#32;<emphasis role="keywordflow">return</emphasis>&#32;Impl::NSStringMatchers::EndsWith(&#32;substr&#32;);&#32;}
5025 
5026 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Matchers</emphasis>
5027 
5028 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>Matchers;
5029 
5030 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_DISABLE_MATCHERS</emphasis>
5031 
5032 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
5033 
5035 <emphasis role="preprocessor">#define&#32;OC_MAKE_UNIQUE_NAME(&#32;root,&#32;uniqueSuffix&#32;)&#32;root##uniqueSuffix</emphasis>
5036 <emphasis role="preprocessor">#define&#32;OC_TEST_CASE2(&#32;name,&#32;desc,&#32;uniqueSuffix&#32;)&#32;\</emphasis>
5037 <emphasis role="preprocessor">+(NSString*)&#32;OC_MAKE_UNIQUE_NAME(&#32;Catch_Name_test_,&#32;uniqueSuffix&#32;)&#32;\</emphasis>
5038 <emphasis role="preprocessor">{&#32;\</emphasis>
5039 <emphasis role="preprocessor">return&#32;@&#32;name;&#32;\</emphasis>
5040 <emphasis role="preprocessor">}&#32;\</emphasis>
5041 <emphasis role="preprocessor">+(NSString*)&#32;OC_MAKE_UNIQUE_NAME(&#32;Catch_Description_test_,&#32;uniqueSuffix&#32;)&#32;\</emphasis>
5042 <emphasis role="preprocessor">{&#32;\</emphasis>
5043 <emphasis role="preprocessor">return&#32;@&#32;desc;&#32;\</emphasis>
5044 <emphasis role="preprocessor">}&#32;\</emphasis>
5045 <emphasis role="preprocessor">-(void)&#32;OC_MAKE_UNIQUE_NAME(&#32;Catch_TestCase_test_,&#32;uniqueSuffix&#32;)</emphasis>
5046 
5047 <emphasis role="preprocessor">#define&#32;OC_TEST_CASE(&#32;name,&#32;desc&#32;)&#32;OC_TEST_CASE2(&#32;name,&#32;desc,&#32;__LINE__&#32;)</emphasis>
5048 
5049 <emphasis role="comment">//&#32;end&#32;catch_objc.hpp</emphasis>
5050 <emphasis role="preprocessor">#endif</emphasis>
5051 
5052 <emphasis role="comment">//&#32;Benchmarking&#32;needs&#32;the&#32;externally-facing&#32;parts&#32;of&#32;reporters&#32;to&#32;work</emphasis>
5053 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_EXTERNAL_INTERFACES)&#32;||&#32;defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</emphasis>
5054 <emphasis role="comment">//&#32;start&#32;catch_external_interfaces.h</emphasis>
5055 
5056 <emphasis role="comment">//&#32;start&#32;catch_reporter_bases.hpp</emphasis>
5057 
5058 <emphasis role="comment">//&#32;start&#32;catch_interfaces_reporter.h</emphasis>
5059 
5060 <emphasis role="comment">//&#32;start&#32;catch_config.hpp</emphasis>
5061 
5062 <emphasis role="comment">//&#32;start&#32;catch_test_spec_parser.h</emphasis>
5063 
5064 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
5065 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;push</emphasis>
5066 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wpadded&quot;</emphasis>
5067 <emphasis role="preprocessor">#endif</emphasis>
5068 
5069 <emphasis role="comment">//&#32;start&#32;catch_test_spec.h</emphasis>
5070 
5071 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
5072 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;push</emphasis>
5073 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wpadded&quot;</emphasis>
5074 <emphasis role="preprocessor">#endif</emphasis>
5075 
5076 <emphasis role="comment">//&#32;start&#32;catch_wildcard_pattern.h</emphasis>
5077 
5078 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>
5079 {
5080 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>WildcardPattern&#32;{
5081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;WildcardPosition&#32;{
5082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NoWildcard&#32;=&#32;0,
5083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WildcardAtStart&#32;=&#32;1,
5084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WildcardAtEnd&#32;=&#32;2,
5085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WildcardAtBothEnds&#32;=&#32;WildcardAtStart&#32;|&#32;WildcardAtEnd
5086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
5087 
5088 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
5089 
5090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WildcardPattern(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;pattern,&#32;CaseSensitive::Choice&#32;caseSensitivity&#32;);
5091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~WildcardPattern()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;matches(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str&#32;)&#32;<emphasis role="keyword">const</emphasis>;
5093 
5094 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
5095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;normaliseString(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str&#32;)&#32;<emphasis role="keyword">const</emphasis>;
5096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CaseSensitive::Choice&#32;m_caseSensitivity;
5097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WildcardPosition&#32;m_wildcard&#32;=&#32;NoWildcard;
5098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;m_pattern;
5099 &#32;&#32;&#32;&#32;};
5100 }
5101 
5102 <emphasis role="comment">//&#32;end&#32;catch_wildcard_pattern.h</emphasis>
5103 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
5104 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
5105 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
5106 
5107 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
5108 
5109 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>IConfig;
5110 
5111 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>TestSpec&#32;{
5112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>Pattern&#32;{
5113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
5114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;Pattern(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name&#32;);
5115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~Pattern();
5116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;matches(&#32;TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
5117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name()&#32;<emphasis role="keyword">const</emphasis>;
5118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
5119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&#32;m_name;
5120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
5121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>PatternPtr&#32;=&#32;std::shared_ptr&lt;Pattern&gt;;
5122 
5123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>NamePattern&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;Pattern&#32;{
5124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
5125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;NamePattern(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;filterString&#32;);
5126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;matches(&#32;TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase&#32;)&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
5128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WildcardPattern&#32;m_wildcardPattern;
5129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
5130 
5131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>TagPattern&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;Pattern&#32;{
5132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
5133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;TagPattern(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;tag,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;filterString&#32;);
5134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;matches(&#32;TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase&#32;)&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
5136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;m_tag;
5137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
5138 
5139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ExcludedPattern&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;Pattern&#32;{
5140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
5141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;ExcludedPattern(&#32;PatternPtr&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;underlyingPattern&#32;);
5142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;matches(&#32;TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase&#32;)&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
5144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PatternPtr&#32;m_underlyingPattern;
5145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
5146 
5147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Filter&#32;{
5148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;PatternPtr&gt;&#32;m_patterns;
5149 
5150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;matches(&#32;TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase&#32;)&#32;<emphasis role="keyword">const</emphasis>;
5151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;name()&#32;<emphasis role="keyword">const</emphasis>;
5152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
5153 
5154 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
5155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>FilterMatch&#32;{
5156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;name;
5157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;TestCase&#32;const*&gt;&#32;tests;
5158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
5159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_catch_1_1_matchers_1a82f1893cf50ae4c14b9b3e0980bf22b8">Matches</link>&#32;=&#32;std::vector&lt;FilterMatch&gt;;
5160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>vectorStrings&#32;=&#32;std::vector&lt;std::string&gt;;
5161 
5162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;hasFilters()&#32;<emphasis role="keyword">const</emphasis>;
5163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;matches(&#32;TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase&#32;)&#32;<emphasis role="keyword">const</emphasis>;
5164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1_1_matchers_1a82f1893cf50ae4c14b9b3e0980bf22b8">Matches</link>&#32;matchesByFilter(&#32;std::vector&lt;TestCase&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCases,&#32;IConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;)&#32;<emphasis role="keyword">const</emphasis>;
5165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;vectorStrings&#32;&amp;&#32;getInvalidArgs()&#32;<emphasis role="keyword">const</emphasis>;
5166 
5167 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
5168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;Filter&gt;&#32;m_filters;
5169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;m_invalidArgs;
5170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>TestSpecParser;
5171 &#32;&#32;&#32;&#32;};
5172 }
5173 
5174 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
5175 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;pop</emphasis>
5176 <emphasis role="preprocessor">#endif</emphasis>
5177 
5178 <emphasis role="comment">//&#32;end&#32;catch_test_spec.h</emphasis>
5179 <emphasis role="comment">//&#32;start&#32;catch_interfaces_tag_alias_registry.h</emphasis>
5180 
5181 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
5182 
5183 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
5184 
5185 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>TagAlias;
5186 
5187 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>ITagAliasRegistry&#32;{
5188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~ITagAliasRegistry();
5189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Nullptr&#32;if&#32;not&#32;present</emphasis>
5190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;TagAlias&#32;<emphasis role="keyword">const</emphasis>*&#32;find(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;alias&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
5191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;std::string&#32;expandAliases(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;unexpandedTestSpec&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
5192 
5193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;ITagAliasRegistry&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;get();
5194 &#32;&#32;&#32;&#32;};
5195 
5196 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
5197 
5198 <emphasis role="comment">//&#32;end&#32;catch_interfaces_tag_alias_registry.h</emphasis>
5199 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
5200 
5201 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>TestSpecParser&#32;{
5202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;Mode{&#32;None,&#32;Name,&#32;QuotedName,&#32;Tag,&#32;EscapedName&#32;};
5203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Mode&#32;m_mode&#32;=&#32;None;
5204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Mode&#32;lastMode&#32;=&#32;None;
5205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;m_exclusion&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;m_pos&#32;=&#32;0;
5207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;m_realPatternPos&#32;=&#32;0;
5208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;m_arg;
5209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;m_substring;
5210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;m_patternName;
5211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::size_t&gt;&#32;m_escapeChars;
5212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestSpec::Filter&#32;m_currentFilter;
5213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestSpec&#32;m_testSpec;
5214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ITagAliasRegistry&#32;<emphasis role="keyword">const</emphasis>*&#32;m_tagAliases&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
5215 
5216 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
5217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestSpecParser(&#32;ITagAliasRegistry&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;tagAliases&#32;);
5218 
5219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestSpecParser&amp;&#32;parse_expr(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;arg&#32;);
5220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestSpec&#32;testSpec();
5221 
5222 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
5223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;visitChar(&#32;<emphasis role="keywordtype">char</emphasis>&#32;c&#32;);
5224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;startNewMode(&#32;Mode&#32;mode&#32;);
5225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;processNoneChar(&#32;<emphasis role="keywordtype">char</emphasis>&#32;c&#32;);
5226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;processNameChar(&#32;<emphasis role="keywordtype">char</emphasis>&#32;c&#32;);
5227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;processOtherChar(&#32;<emphasis role="keywordtype">char</emphasis>&#32;c&#32;);
5228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;endMode();
5229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;escape();
5230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isControlChar(&#32;<emphasis role="keywordtype">char</emphasis>&#32;c&#32;)&#32;<emphasis role="keyword">const</emphasis>;
5231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;saveLastMode();
5232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;revertBackToLastMode();
5233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;addFilter();
5234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;separate();
5235 
5236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Handles&#32;common&#32;preprocessing&#32;of&#32;the&#32;pattern&#32;for&#32;name/tag&#32;patterns</emphasis>
5237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;preprocessPattern();
5238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Adds&#32;the&#32;current&#32;pattern&#32;as&#32;a&#32;test&#32;name</emphasis>
5239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;addNamePattern();
5240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Adds&#32;the&#32;current&#32;pattern&#32;as&#32;a&#32;tag</emphasis>
5241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;addTagPattern();
5242 
5243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;addCharToPattern(<emphasis role="keywordtype">char</emphasis>&#32;c)&#32;{
5244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_substring&#32;+=&#32;c;
5245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_patternName&#32;+=&#32;c;
5246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_realPatternPos++;
5247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5248 
5249 &#32;&#32;&#32;&#32;};
5250 &#32;&#32;&#32;&#32;TestSpec&#32;parseTestSpec(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;arg&#32;);
5251 
5252 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
5253 
5254 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
5255 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;pop</emphasis>
5256 <emphasis role="preprocessor">#endif</emphasis>
5257 
5258 <emphasis role="comment">//&#32;end&#32;catch_test_spec_parser.h</emphasis>
5259 <emphasis role="comment">//&#32;Libstdc++&#32;doesn&apos;t&#32;like&#32;incomplete&#32;classes&#32;for&#32;unique_ptr</emphasis>
5260 
5261 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
5262 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
5263 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
5264 
5265 <emphasis role="preprocessor">#ifndef&#32;CATCH_CONFIG_CONSOLE_WIDTH</emphasis>
5266 <emphasis role="preprocessor">#define&#32;CATCH_CONFIG_CONSOLE_WIDTH&#32;80</emphasis>
5267 <emphasis role="preprocessor">#endif</emphasis>
5268 
5269 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
5270 
5271 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>IStream;
5272 
5273 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>ConfigData&#32;{
5274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;listTests&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;listTags&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;listReporters&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;listTestNamesOnly&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5278 
5279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;showSuccessfulTests&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;shouldDebugBreak&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;noThrow&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;showHelp&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;showInvisibles&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;filenamesAsTags&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;libIdentify&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5286 
5287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;abortAfter&#32;=&#32;-1;
5288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespace_catch_1acf5ea05e942d2d7fe79111e12754ed76">rngSeed</link>&#32;=&#32;0;
5289 
5290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;benchmarkNoAnalysis&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;benchmarkSamples&#32;=&#32;100;
5292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;benchmarkConfidenceInterval&#32;=&#32;0.95;
5293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;benchmarkResamples&#32;=&#32;100000;
5294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::chrono::milliseconds::rep&#32;benchmarkWarmupTime&#32;=&#32;100;
5295 
5296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737">Verbosity</link>&#32;verbosity&#32;=&#32;Verbosity::Normal;
5297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WarnAbout::What&#32;warnings&#32;=&#32;WarnAbout::Nothing;
5298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ShowDurations::OrNot&#32;showDurations&#32;=&#32;ShowDurations::DefaultForReporter;
5299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;minDuration&#32;=&#32;-1;
5300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RunTests::InWhatOrder&#32;runOrder&#32;=&#32;RunTests::InDeclarationOrder;
5301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UseColour::YesOrNo&#32;useColour&#32;=&#32;UseColour::Auto;
5302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WaitForKeypress::When&#32;waitForKeypress&#32;=&#32;WaitForKeypress::Never;
5303 
5304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;outputFilename;
5305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;name;
5306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;processName;
5307 <emphasis role="preprocessor">#ifndef&#32;CATCH_CONFIG_DEFAULT_REPORTER</emphasis>
5308 <emphasis role="preprocessor">#define&#32;CATCH_CONFIG_DEFAULT_REPORTER&#32;&quot;console&quot;</emphasis>
5309 <emphasis role="preprocessor">#endif</emphasis>
5310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;reporterName&#32;=&#32;CATCH_CONFIG_DEFAULT_REPORTER;
5311 <emphasis role="preprocessor">#undef&#32;CATCH_CONFIG_DEFAULT_REPORTER</emphasis>
5312 
5313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;testsOrTags;
5314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;sectionsToRun;
5315 &#32;&#32;&#32;&#32;};
5316 
5317 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>Config&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;IConfig&#32;{
5318 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
5319 
5320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Config()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Config(&#32;ConfigData&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;data&#32;);
5322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~Config()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5323 
5324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;getFilename()&#32;<emphasis role="keyword">const</emphasis>;
5325 
5326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;listTests()&#32;<emphasis role="keyword">const</emphasis>;
5327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;listTestNamesOnly()&#32;<emphasis role="keyword">const</emphasis>;
5328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;listTags()&#32;<emphasis role="keyword">const</emphasis>;
5329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;listReporters()&#32;<emphasis role="keyword">const</emphasis>;
5330 
5331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;getProcessName()&#32;<emphasis role="keyword">const</emphasis>;
5332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;getReporterName()&#32;<emphasis role="keyword">const</emphasis>;
5333 
5334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;getTestsOrTags()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;getSectionsToRun()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5336 
5337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestSpec&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testSpec()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;hasTestFilters()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5339 
5340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;showHelp()&#32;<emphasis role="keyword">const</emphasis>;
5341 
5342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;IConfig&#32;interface</emphasis>
5343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allowThrows()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostream&amp;&#32;stream()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;name()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;includeSuccessfulResults()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;warnAboutMissingAssertions()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;warnAboutNoTests()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ShowDurations::OrNot&#32;showDurations()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;minDuration()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RunTests::InWhatOrder&#32;runOrder()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespace_catch_1acf5ea05e942d2d7fe79111e12754ed76">rngSeed</link>()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UseColour::YesOrNo&#32;useColour()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;shouldDebugBreak()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;abortAfter()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;showInvisibles()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737">Verbosity</link>&#32;verbosity()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;benchmarkNoAnalysis()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;benchmarkSamples()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;benchmarkConfidenceInterval()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;benchmarkResamples()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::chrono::milliseconds&#32;benchmarkWarmupTime()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
5363 
5364 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
5365 
5366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IStream&#32;<emphasis role="keyword">const</emphasis>*&#32;openStream();
5367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ConfigData&#32;m_data;
5368 
5369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::unique_ptr&lt;IStream&#32;const&gt;&#32;m_stream;
5370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestSpec&#32;m_testSpec;
5371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;m_hasTestFilters&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5372 &#32;&#32;&#32;&#32;};
5373 
5374 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
5375 
5376 <emphasis role="comment">//&#32;end&#32;catch_config.hpp</emphasis>
5377 <emphasis role="comment">//&#32;start&#32;catch_assertionresult.h</emphasis>
5378 
5379 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
5380 
5381 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
5382 
5383 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>AssertionResultData
5384 &#32;&#32;&#32;&#32;{
5385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionResultData()&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
5386 
5387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionResultData(&#32;ResultWas::OfType&#32;_resultType,&#32;LazyExpression&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_lazyExpression&#32;);
5388 
5389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;message;
5390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;std::string&#32;reconstructedExpression;
5391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LazyExpression&#32;lazyExpression;
5392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultWas::OfType&#32;resultType;
5393 
5394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;reconstructExpression()&#32;<emphasis role="keyword">const</emphasis>;
5395 &#32;&#32;&#32;&#32;};
5396 
5397 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>AssertionResult&#32;{
5398 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
5399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionResult()&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
5400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionResult(&#32;AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;info,&#32;AssertionResultData&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;data&#32;);
5401 
5402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1a5205869c81c06d3460759cb86676ae68">isOk</link>()&#32;<emphasis role="keyword">const</emphasis>;
5403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;succeeded()&#32;<emphasis role="keyword">const</emphasis>;
5404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultWas::OfType&#32;getResultType()&#32;<emphasis role="keyword">const</emphasis>;
5405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;hasExpression()&#32;<emphasis role="keyword">const</emphasis>;
5406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;hasMessage()&#32;<emphasis role="keyword">const</emphasis>;
5407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;getExpression()&#32;<emphasis role="keyword">const</emphasis>;
5408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;getExpressionInMacro()&#32;<emphasis role="keyword">const</emphasis>;
5409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;hasExpandedExpression()&#32;<emphasis role="keyword">const</emphasis>;
5410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;getExpandedExpression()&#32;<emphasis role="keyword">const</emphasis>;
5411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;getMessage()&#32;<emphasis role="keyword">const</emphasis>;
5412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLineInfo&#32;getSourceInfo()&#32;<emphasis role="keyword">const</emphasis>;
5413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StringRef&#32;getTestMacroName()&#32;<emphasis role="keyword">const</emphasis>;
5414 
5415 &#32;&#32;&#32;&#32;<emphasis role="comment">//protected:</emphasis>
5416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionInfo&#32;m_info;
5417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionResultData&#32;m_resultData;
5418 &#32;&#32;&#32;&#32;};
5419 
5420 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
5421 
5422 <emphasis role="comment">//&#32;end&#32;catch_assertionresult.h</emphasis>
5423 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</emphasis>
5424 <emphasis role="comment">//&#32;start&#32;catch_estimate.hpp</emphasis>
5425 
5426 &#32;<emphasis role="comment">//&#32;Statistics&#32;estimates</emphasis>
5427 
5428 
5429 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
5430 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Benchmark&#32;{
5431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Duration&gt;
5432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Estimate&#32;{
5433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Duration&#32;point;
5434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Duration&#32;lower_bound;
5435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Duration&#32;upper_bound;
5436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;confidence_interval;
5437 
5438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Duration2&gt;
5439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;Estimate&lt;Duration2&gt;()<emphasis role="keyword">&#32;const&#32;</emphasis>{
5440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;point,&#32;lower_bound,&#32;upper_bound,&#32;confidence_interval&#32;};
5441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
5443 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Benchmark</emphasis>
5444 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
5445 
5446 <emphasis role="comment">//&#32;end&#32;catch_estimate.hpp</emphasis>
5447 <emphasis role="comment">//&#32;start&#32;catch_outlier_classification.hpp</emphasis>
5448 
5449 <emphasis role="comment">//&#32;Outlier&#32;information</emphasis>
5450 
5451 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
5452 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Benchmark&#32;{
5453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>OutlierClassification&#32;{
5454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;samples_seen&#32;=&#32;0;
5455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;low_severe&#32;=&#32;0;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;more&#32;than&#32;3&#32;times&#32;IQR&#32;below&#32;Q1</emphasis>
5456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;low_mild&#32;=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1.5&#32;to&#32;3&#32;times&#32;IQR&#32;below&#32;Q1</emphasis>
5457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;high_mild&#32;=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1.5&#32;to&#32;3&#32;times&#32;IQR&#32;above&#32;Q3</emphasis>
5458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;high_severe&#32;=&#32;0;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;more&#32;than&#32;3&#32;times&#32;IQR&#32;above&#32;Q3</emphasis>
5459 
5460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;total()<emphasis role="keyword">&#32;const&#32;</emphasis>{
5461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;low_severe&#32;+&#32;low_mild&#32;+&#32;high_mild&#32;+&#32;high_severe;
5462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
5464 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Benchmark</emphasis>
5465 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
5466 
5467 <emphasis role="comment">//&#32;end&#32;catch_outlier_classification.hpp</emphasis>
5468 
5469 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>
5470 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_ENABLE_BENCHMARKING</emphasis>
5471 
5472 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
5473 <emphasis role="preprocessor">#include&#32;&lt;iosfwd&gt;</emphasis>
5474 <emphasis role="preprocessor">#include&#32;&lt;map&gt;</emphasis>
5475 <emphasis role="preprocessor">#include&#32;&lt;set&gt;</emphasis>
5476 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
5477 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
5478 
5479 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
5480 
5481 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>ReporterConfig&#32;{
5482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;ReporterConfig(&#32;IConfigPtr&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_fullConfig&#32;);
5483 
5484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReporterConfig(&#32;IConfigPtr&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_fullConfig,&#32;std::ostream&amp;&#32;_stream&#32;);
5485 
5486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostream&amp;&#32;stream()&#32;<emphasis role="keyword">const</emphasis>;
5487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6">IConfigPtr</link>&#32;fullConfig()&#32;<emphasis role="keyword">const</emphasis>;
5488 
5489 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
5490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostream*&#32;m_stream;
5491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6">IConfigPtr</link>&#32;m_fullConfig;
5492 &#32;&#32;&#32;&#32;};
5493 
5494 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>ReporterPreferences&#32;{
5495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;shouldRedirectStdOut&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;shouldReportAllAssertions&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5497 &#32;&#32;&#32;&#32;};
5498 
5499 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5500 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>LazyStat&#32;:&#32;Option&lt;T&gt;&#32;{
5501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LazyStat&amp;&#32;operator=(&#32;T&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_value&#32;)&#32;{
5502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Option&lt;T&gt;::operator=(&#32;_value&#32;);
5503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;used&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
5505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;reset()&#32;{
5507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Option&lt;T&gt;::reset();
5508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;used&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;used&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5511 &#32;&#32;&#32;&#32;};
5512 
5513 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>TestRunInfo&#32;{
5514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestRunInfo(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_name&#32;);
5515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;name;
5516 &#32;&#32;&#32;&#32;};
5517 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>GroupInfo&#32;{
5518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GroupInfo(&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_name,
5519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;_groupIndex,
5520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;_groupsCount&#32;);
5521 
5522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;name;
5523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;groupIndex;
5524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;groupsCounts;
5525 &#32;&#32;&#32;&#32;};
5526 
5527 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>AssertionStats&#32;{
5528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionStats(&#32;AssertionResult&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_assertionResult,
5529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;MessageInfo&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_infoMessages,
5530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Totals&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_totals&#32;);
5531 
5532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionStats(&#32;AssertionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionStats(&#32;AssertionStats&#32;&amp;&amp;&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionStats&amp;&#32;operator&#32;=&#32;(&#32;AssertionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
5535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionStats&amp;&#32;operator&#32;=&#32;(&#32;AssertionStats&#32;&amp;&amp;&#32;)&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
5536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~AssertionStats();
5537 
5538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionResult&#32;assertionResult;
5539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;MessageInfo&gt;&#32;infoMessages;
5540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Totals&#32;totals;
5541 &#32;&#32;&#32;&#32;};
5542 
5543 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>SectionStats&#32;{
5544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SectionStats(&#32;&#32;&#32;SectionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_sectionInfo,
5545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Counts&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_assertions,
5546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;_durationInSeconds,
5547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_missingAssertions&#32;);
5548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SectionStats(&#32;SectionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SectionStats(&#32;SectionStats&#32;&amp;&amp;&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SectionStats&amp;&#32;operator&#32;=&#32;(&#32;SectionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SectionStats&amp;&#32;operator&#32;=&#32;(&#32;SectionStats&#32;&amp;&amp;&#32;)&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~SectionStats();
5553 
5554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SectionInfo&#32;sectionInfo;
5555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Counts&#32;assertions;
5556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;durationInSeconds;
5557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;missingAssertions;
5558 &#32;&#32;&#32;&#32;};
5559 
5560 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>TestCaseStats&#32;{
5561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestCaseStats(&#32;&#32;TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_testInfo,
5562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Totals&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_totals,
5563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_stdOut,
5564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_stdErr,
5565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_aborting&#32;);
5566 
5567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestCaseStats(&#32;TestCaseStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestCaseStats(&#32;TestCaseStats&#32;&amp;&amp;&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestCaseStats&amp;&#32;operator&#32;=&#32;(&#32;TestCaseStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestCaseStats&amp;&#32;operator&#32;=&#32;(&#32;TestCaseStats&#32;&amp;&amp;&#32;)&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~TestCaseStats();
5572 
5573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestCaseInfo&#32;testInfo;
5574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Totals&#32;totals;
5575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;stdOut;
5576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;stdErr;
5577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;aborting;
5578 &#32;&#32;&#32;&#32;};
5579 
5580 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>TestGroupStats&#32;{
5581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestGroupStats(&#32;GroupInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_groupInfo,
5582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Totals&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_totals,
5583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_aborting&#32;);
5584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestGroupStats(&#32;GroupInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_groupInfo&#32;);
5585 
5586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestGroupStats(&#32;TestGroupStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestGroupStats(&#32;TestGroupStats&#32;&amp;&amp;&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestGroupStats&amp;&#32;operator&#32;=&#32;(&#32;TestGroupStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestGroupStats&amp;&#32;operator&#32;=&#32;(&#32;TestGroupStats&#32;&amp;&amp;&#32;)&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~TestGroupStats();
5591 
5592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GroupInfo&#32;groupInfo;
5593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Totals&#32;totals;
5594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;aborting;
5595 &#32;&#32;&#32;&#32;};
5596 
5597 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>TestRunStats&#32;{
5598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestRunStats(&#32;&#32;&#32;TestRunInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_runInfo,
5599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Totals&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_totals,
5600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_aborting&#32;);
5601 
5602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestRunStats(&#32;TestRunStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestRunStats(&#32;TestRunStats&#32;&amp;&amp;&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestRunStats&amp;&#32;operator&#32;=&#32;(&#32;TestRunStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestRunStats&amp;&#32;operator&#32;=&#32;(&#32;TestRunStats&#32;&amp;&amp;&#32;)&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~TestRunStats();
5607 
5608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestRunInfo&#32;runInfo;
5609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Totals&#32;totals;
5610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;aborting;
5611 &#32;&#32;&#32;&#32;};
5612 
5613 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</emphasis>
5614 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>BenchmarkInfo&#32;{
5615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;name;
5616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;estimatedDuration;
5617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;iterations;
5618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;samples;
5619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;resamples;
5620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;clockResolution;
5621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;clockCost;
5622 &#32;&#32;&#32;&#32;};
5623 
5624 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;Duration&gt;
5625 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>BenchmarkStats&#32;{
5626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BenchmarkInfo&#32;info;
5627 
5628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;Duration&gt;&#32;samples;
5629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Benchmark::Estimate&lt;Duration&gt;&#32;mean;
5630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Benchmark::Estimate&lt;Duration&gt;&#32;standardDeviation;
5631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Benchmark::OutlierClassification&#32;outliers;
5632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;outlierVariance;
5633 
5634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Duration2&gt;
5635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;BenchmarkStats&lt;Duration2&gt;()<emphasis role="keyword">&#32;const&#32;</emphasis>{
5636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;Duration2&gt;&#32;samples2;
5637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;samples2.reserve(samples.size());
5638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::transform(samples.begin(),&#32;samples.end(),&#32;std::back_inserter(samples2),&#32;[](Duration&#32;d)&#32;{&#32;return&#32;Duration2(d);&#32;});
5639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{
5640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info,
5641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::move(samples2),
5642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mean,
5643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;standardDeviation,
5644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outliers,
5645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outlierVariance,
5646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
5647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5648 &#32;&#32;&#32;&#32;};
5649 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_ENABLE_BENCHMARKING</emphasis>
5650 
5651 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>IStreamingReporter&#32;{
5652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~IStreamingReporter()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5653 
5654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Implementing&#32;class&#32;must&#32;also&#32;provide&#32;the&#32;following&#32;static&#32;methods:</emphasis>
5655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;static&#32;std::string&#32;getDescription();</emphasis>
5656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;static&#32;std::set&lt;Verbosity&gt;&#32;getSupportedVerbosities()</emphasis>
5657 
5658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;ReporterPreferences&#32;getPreferences()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
5659 
5660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;noMatchingTestCases(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;spec&#32;)&#32;=&#32;0;
5661 
5662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;reportInvalidArguments(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;{}
5663 
5664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;testRunStarting(&#32;TestRunInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testRunInfo&#32;)&#32;=&#32;0;
5665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;testGroupStarting(&#32;GroupInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;groupInfo&#32;)&#32;=&#32;0;
5666 
5667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;testCaseStarting(&#32;TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testInfo&#32;)&#32;=&#32;0;
5668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;sectionStarting(&#32;SectionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;sectionInfo&#32;)&#32;=&#32;0;
5669 
5670 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</emphasis>
5671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;benchmarkPreparing(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;{}
5672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;benchmarkStarting(&#32;BenchmarkInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;{}
5673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;benchmarkEnded(&#32;BenchmarkStats&lt;&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;{}
5674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;benchmarkFailed(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;{}
5675 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_ENABLE_BENCHMARKING</emphasis>
5676 
5677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;assertionStarting(&#32;AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;assertionInfo&#32;)&#32;=&#32;0;
5678 
5679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;return&#32;value&#32;indicates&#32;if&#32;the&#32;messages&#32;buffer&#32;should&#32;be&#32;cleared:</emphasis>
5680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;assertionEnded(&#32;AssertionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;assertionStats&#32;)&#32;=&#32;0;
5681 
5682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;sectionEnded(&#32;SectionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;sectionStats&#32;)&#32;=&#32;0;
5683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;testCaseEnded(&#32;TestCaseStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCaseStats&#32;)&#32;=&#32;0;
5684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;testGroupEnded(&#32;TestGroupStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testGroupStats&#32;)&#32;=&#32;0;
5685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;testRunEnded(&#32;TestRunStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testRunStats&#32;)&#32;=&#32;0;
5686 
5687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;skipTest(&#32;TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testInfo&#32;)&#32;=&#32;0;
5688 
5689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Default&#32;empty&#32;implementation&#32;provided</emphasis>
5690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;fatalErrorEncountered(&#32;StringRef&#32;name&#32;);
5691 
5692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isMulti()&#32;<emphasis role="keyword">const</emphasis>;
5693 &#32;&#32;&#32;&#32;};
5694 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>IStreamingReporterPtr&#32;=&#32;std::unique_ptr&lt;IStreamingReporter&gt;;
5695 
5696 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>IReporterFactory&#32;{
5697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~IReporterFactory();
5698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;IStreamingReporterPtr&#32;create(&#32;ReporterConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
5699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;std::string&#32;getDescription()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
5700 &#32;&#32;&#32;&#32;};
5701 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_catch_1a4e6617700df10519be17cc0e62ab427e">IReporterFactoryPtr</link>&#32;=&#32;std::shared_ptr&lt;IReporterFactory&gt;;
5702 
5703 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>IReporterRegistry&#32;{
5704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>FactoryMap&#32;=&#32;std::map&lt;std::string,&#32;IReporterFactoryPtr&gt;;
5705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>Listeners&#32;=&#32;std::vector&lt;IReporterFactoryPtr&gt;;
5706 
5707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~IReporterRegistry();
5708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;IStreamingReporterPtr&#32;create(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;IConfigPtr&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
5709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;FactoryMap&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;getFactories()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
5710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;Listeners&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;getListeners()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
5711 &#32;&#32;&#32;&#32;};
5712 
5713 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
5714 
5715 <emphasis role="comment">//&#32;end&#32;catch_interfaces_reporter.h</emphasis>
5716 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
5717 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>
5718 <emphasis role="preprocessor">#include&#32;&lt;cfloat&gt;</emphasis>
5719 <emphasis role="preprocessor">#include&#32;&lt;cstdio&gt;</emphasis>
5720 <emphasis role="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>
5721 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
5722 <emphasis role="preprocessor">#include&#32;&lt;ostream&gt;</emphasis>
5723 
5724 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
5725 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;prepareExpandedExpression(AssertionResult&amp;&#32;result);
5726 
5727 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;double&#32;formatted&#32;as&#32;%.3f&#32;(format&#32;expected&#32;on&#32;output)</emphasis>
5728 &#32;&#32;&#32;&#32;std::string&#32;getFormattedDuration(&#32;<emphasis role="keywordtype">double</emphasis>&#32;duration&#32;);
5729 
5731 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;shouldShowDuration(&#32;IConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config,&#32;<emphasis role="keywordtype">double</emphasis>&#32;duration&#32;);
5732 
5733 &#32;&#32;&#32;&#32;std::string&#32;serializeFilters(&#32;std::vector&lt;std::string&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;container&#32;);
5734 
5735 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;DerivedT&gt;
5736 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>StreamingReporterBase&#32;:&#32;IStreamingReporter&#32;{
5737 
5738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StreamingReporterBase(&#32;ReporterConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_config&#32;)
5739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_config(&#32;_config.fullConfig()&#32;),
5740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream(&#32;_config.stream()&#32;)
5741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporterPrefs.shouldRedirectStdOut&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!DerivedT::getSupportedVerbosities().count(&#32;m_config-&gt;verbosity()&#32;)&#32;)
5744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1ad9884641eb178d2628cf3ad19c394f47">CATCH_ERROR</link>(&#32;<emphasis role="stringliteral">&quot;Verbosity&#32;level&#32;not&#32;supported&#32;by&#32;this&#32;reporter&quot;</emphasis>&#32;);
5745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5746 
5747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReporterPreferences&#32;getPreferences()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
5748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_reporterPrefs;
5749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5750 
5751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::set&lt;Verbosity&gt;&#32;getSupportedVerbosities()&#32;{
5752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;Verbosity::Normal&#32;};
5753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5754 
5755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~StreamingReporterBase()&#32;<emphasis role="keyword">override</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5756 
5757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;noMatchingTestCases(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;)<emphasis role="keyword">&#32;override&#32;</emphasis>{}
5758 
5759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;reportInvalidArguments(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;)<emphasis role="keyword">&#32;override&#32;</emphasis>{}
5760 
5761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testRunStarting(TestRunInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_testRunInfo)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentTestRunInfo&#32;=&#32;_testRunInfo;
5763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5764 
5765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testGroupStarting(GroupInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_groupInfo)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentGroupInfo&#32;=&#32;_groupInfo;
5767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5768 
5769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testCaseStarting(TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_testInfo)<emphasis role="keyword">&#32;override&#32;&#32;</emphasis>{
5770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentTestCaseInfo&#32;=&#32;_testInfo;
5771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;sectionStarting(SectionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_sectionInfo)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_sectionStack.push_back(_sectionInfo);
5774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5775 
5776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;sectionEnded(SectionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<emphasis role="comment">/*&#32;_sectionStats&#32;*/</emphasis>)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_sectionStack.pop_back();
5778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testCaseEnded(TestCaseStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<emphasis role="comment">/*&#32;_testCaseStats&#32;*/</emphasis>)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentTestCaseInfo.reset();
5781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testGroupEnded(TestGroupStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<emphasis role="comment">/*&#32;_testGroupStats&#32;*/</emphasis>)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentGroupInfo.reset();
5784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testRunEnded(TestRunStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<emphasis role="comment">/*&#32;_testRunStats&#32;*/</emphasis>)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentTestCaseInfo.reset();
5787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentGroupInfo.reset();
5788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentTestRunInfo.reset();
5789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5790 
5791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;skipTest(TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Don&apos;t&#32;do&#32;anything&#32;with&#32;this&#32;by&#32;default.</emphasis>
5793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;It&#32;can&#32;optionally&#32;be&#32;overridden&#32;in&#32;the&#32;derived&#32;class.</emphasis>
5794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5795 
5796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6">IConfigPtr</link>&#32;m_config;
5797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostream&amp;&#32;stream;
5798 
5799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LazyStat&lt;TestRunInfo&gt;&#32;currentTestRunInfo;
5800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LazyStat&lt;GroupInfo&gt;&#32;currentGroupInfo;
5801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LazyStat&lt;TestCaseInfo&gt;&#32;currentTestCaseInfo;
5802 
5803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;SectionInfo&gt;&#32;m_sectionStack;
5804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReporterPreferences&#32;m_reporterPrefs;
5805 &#32;&#32;&#32;&#32;};
5806 
5807 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;DerivedT&gt;
5808 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>CumulativeReporterBase&#32;:&#32;IStreamingReporter&#32;{
5809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;ChildNodeT&gt;
5810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Node&#32;{
5811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;Node(&#32;T&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_value&#32;)&#32;:&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>(&#32;_value&#32;)&#32;{}
5812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~Node()&#32;{}
5813 
5814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>ChildNodes&#32;=&#32;std::vector&lt;std::shared_ptr&lt;ChildNodeT&gt;&gt;;
5815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>;
5816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ChildNodes&#32;children;
5817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
5818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>SectionNode&#32;{
5819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;SectionNode(SectionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_stats)&#32;:&#32;stats(_stats)&#32;{}
5820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~SectionNode()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5821 
5822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&#32;==&#32;(SectionNode&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other)<emphasis role="keyword">&#32;const&#32;</emphasis>{
5823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stats.sectionInfo.lineInfo&#32;==&#32;other.stats.sectionInfo.lineInfo;
5824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&#32;==&#32;(std::shared_ptr&lt;SectionNode&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other)<emphasis role="keyword">&#32;const&#32;</emphasis>{
5826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;operator==(*other);
5827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5828 
5829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SectionStats&#32;stats;
5830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>ChildSections&#32;=&#32;std::vector&lt;std::shared_ptr&lt;SectionNode&gt;&gt;;
5831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>Assertions&#32;=&#32;std::vector&lt;AssertionStats&gt;;
5832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ChildSections&#32;childSections;
5833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assertions&#32;assertions;
5834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;stdOut;
5835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;stdErr;
5836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
5837 
5838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>BySectionInfo&#32;{
5839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BySectionInfo(&#32;SectionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other&#32;)&#32;:&#32;m_other(&#32;other&#32;)&#32;{}
5840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BySectionInfo(&#32;BySectionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other&#32;)&#32;:&#32;m_other(&#32;other.m_other&#32;)&#32;{}
5841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator()&#32;(std::shared_ptr&lt;SectionNode&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;node)<emphasis role="keyword">&#32;const&#32;</emphasis>{
5842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((node-&gt;stats.sectionInfo.name&#32;==&#32;m_other.name)&#32;&amp;&amp;
5843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(node-&gt;stats.sectionInfo.lineInfo&#32;==&#32;m_other.lineInfo));
5844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator=(BySectionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
5846 
5847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
5848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SectionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;m_other;
5849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
5850 
5851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>TestCaseNode&#32;=&#32;Node&lt;TestCaseStats,&#32;SectionNode&gt;;
5852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>TestGroupNode&#32;=&#32;Node&lt;TestGroupStats,&#32;TestCaseNode&gt;;
5853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>TestRunNode&#32;=&#32;Node&lt;TestRunStats,&#32;TestGroupNode&gt;;
5854 
5855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CumulativeReporterBase(&#32;ReporterConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_config&#32;)
5856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_config(&#32;_config.fullConfig()&#32;),
5857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream(&#32;_config.stream()&#32;)
5858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporterPrefs.shouldRedirectStdOut&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!DerivedT::getSupportedVerbosities().count(&#32;m_config-&gt;verbosity()&#32;)&#32;)
5861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1ad9884641eb178d2628cf3ad19c394f47">CATCH_ERROR</link>(&#32;<emphasis role="stringliteral">&quot;Verbosity&#32;level&#32;not&#32;supported&#32;by&#32;this&#32;reporter&quot;</emphasis>&#32;);
5862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~CumulativeReporterBase()&#32;<emphasis role="keyword">override</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5864 
5865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReporterPreferences&#32;getPreferences()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
5866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_reporterPrefs;
5867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5868 
5869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::set&lt;Verbosity&gt;&#32;getSupportedVerbosities()&#32;{
5870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;Verbosity::Normal&#32;};
5871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5872 
5873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testRunStarting(&#32;TestRunInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)<emphasis role="keyword">&#32;override&#32;</emphasis>{}
5874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testGroupStarting(&#32;GroupInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)<emphasis role="keyword">&#32;override&#32;</emphasis>{}
5875 
5876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testCaseStarting(&#32;TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)<emphasis role="keyword">&#32;override&#32;</emphasis>{}
5877 
5878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;sectionStarting(&#32;SectionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;sectionInfo&#32;)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SectionStats&#32;incompleteStats(&#32;sectionInfo,&#32;Counts(),&#32;0,&#32;<emphasis role="keyword">false</emphasis>&#32;);
5880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::shared_ptr&lt;SectionNode&gt;&#32;node;
5881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_sectionStack.empty()&#32;)&#32;{
5882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!m_rootSection&#32;)
5883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_rootSection&#32;=&#32;std::make_shared&lt;SectionNode&gt;(&#32;incompleteStats&#32;);
5884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node&#32;=&#32;m_rootSection;
5885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
5887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SectionNode&amp;&#32;parentNode&#32;=&#32;*m_sectionStack.back();
5888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=
5889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::find_if(&#32;&#32;&#32;parentNode.childSections.begin(),
5890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parentNode.childSections.end(),
5891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BySectionInfo(&#32;sectionInfo&#32;)&#32;);
5892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;it&#32;==&#32;parentNode.childSections.end()&#32;)&#32;{
5893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node&#32;=&#32;std::make_shared&lt;SectionNode&gt;(&#32;incompleteStats&#32;);
5894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parentNode.childSections.push_back(&#32;node&#32;);
5895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node&#32;=&#32;*it;
5898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_sectionStack.push_back(&#32;node&#32;);
5900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_deepestSection&#32;=&#32;std::move(node);
5901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5902 
5903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;assertionStarting(AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;)<emphasis role="keyword">&#32;override&#32;</emphasis>{}
5904 
5905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;assertionEnded(AssertionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;assertionStats)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(!m_sectionStack.empty());
5907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;AssertionResult&#32;holds&#32;a&#32;pointer&#32;to&#32;a&#32;temporary&#32;DecomposedExpression,</emphasis>
5908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;which&#32;getExpandedExpression()&#32;calls&#32;to&#32;build&#32;the&#32;expression&#32;string.</emphasis>
5909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Our&#32;section&#32;stack&#32;copy&#32;of&#32;the&#32;assertionResult&#32;will&#32;likely&#32;outlive&#32;the</emphasis>
5910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;temporary,&#32;so&#32;it&#32;must&#32;be&#32;expanded&#32;or&#32;discarded&#32;now&#32;to&#32;avoid&#32;calling</emphasis>
5911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;a&#32;destroyed&#32;object&#32;later.</emphasis>
5912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prepareExpandedExpression(<emphasis role="keyword">const_cast&lt;</emphasis>AssertionResult&amp;<emphasis role="keyword">&gt;</emphasis>(&#32;assertionStats.assertionResult&#32;)&#32;);
5913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SectionNode&amp;&#32;sectionNode&#32;=&#32;*m_sectionStack.back();
5914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sectionNode.assertions.push_back(assertionStats);
5915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
5916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;sectionEnded(SectionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;sectionStats)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(!m_sectionStack.empty());
5919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SectionNode&amp;&#32;node&#32;=&#32;*m_sectionStack.back();
5920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node.stats&#32;=&#32;sectionStats;
5921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_sectionStack.pop_back();
5922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testCaseEnded(TestCaseStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCaseStats)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;node&#32;=&#32;std::make_shared&lt;TestCaseNode&gt;(testCaseStats);
5925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(m_sectionStack.size()&#32;==&#32;0);
5926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node-&gt;children.push_back(m_rootSection);
5927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_testCases.push_back(node);
5928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_rootSection.reset();
5929 
5930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(m_deepestSection);
5931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_deepestSection-&gt;stdOut&#32;=&#32;testCaseStats.stdOut;
5932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_deepestSection-&gt;stdErr&#32;=&#32;testCaseStats.stdErr;
5933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testGroupEnded(TestGroupStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testGroupStats)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;node&#32;=&#32;std::make_shared&lt;TestGroupNode&gt;(testGroupStats);
5936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node-&gt;children.swap(m_testCases);
5937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_testGroups.push_back(node);
5938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testRunEnded(TestRunStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testRunStats)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;node&#32;=&#32;std::make_shared&lt;TestRunNode&gt;(testRunStats);
5941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node-&gt;children.swap(m_testGroups);
5942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_testRuns.push_back(node);
5943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testRunEndedCumulative();
5944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;testRunEndedCumulative()&#32;=&#32;0;
5946 
5947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;skipTest(TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;)<emphasis role="keyword">&#32;override&#32;</emphasis>{}
5948 
5949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6">IConfigPtr</link>&#32;m_config;
5950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostream&amp;&#32;stream;
5951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;AssertionStats&gt;&#32;m_assertions;
5952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::vector&lt;std::shared_ptr&lt;SectionNode&gt;&gt;&gt;&#32;m_sections;
5953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::shared_ptr&lt;TestCaseNode&gt;&gt;&#32;m_testCases;
5954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::shared_ptr&lt;TestGroupNode&gt;&gt;&#32;m_testGroups;
5955 
5956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::shared_ptr&lt;TestRunNode&gt;&gt;&#32;m_testRuns;
5957 
5958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::shared_ptr&lt;SectionNode&gt;&#32;m_rootSection;
5959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::shared_ptr&lt;SectionNode&gt;&#32;m_deepestSection;
5960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::shared_ptr&lt;SectionNode&gt;&gt;&#32;m_sectionStack;
5961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReporterPreferences&#32;m_reporterPrefs;
5962 &#32;&#32;&#32;&#32;};
5963 
5964 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">char</emphasis>&#32;C&gt;
5965 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*&#32;getLineOfChars()&#32;{
5966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;line[CATCH_CONFIG_CONSOLE_WIDTH]&#32;=&#32;{0};
5967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!*line&#32;)&#32;{
5968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memset(&#32;line,&#32;C,&#32;CATCH_CONFIG_CONSOLE_WIDTH-1&#32;);
5969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;line[CATCH_CONFIG_CONSOLE_WIDTH-1]&#32;=&#32;0;
5970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;line;
5972 &#32;&#32;&#32;&#32;}
5973 
5974 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>TestEventListenerBase&#32;:&#32;StreamingReporterBase&lt;TestEventListenerBase&gt;&#32;{
5975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestEventListenerBase(&#32;ReporterConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_config&#32;);
5976 
5977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::set&lt;Verbosity&gt;&#32;getSupportedVerbosities();
5978 
5979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;assertionStarting(AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;<emphasis role="keyword">override</emphasis>;
5980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;assertionEnded(AssertionStats&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;<emphasis role="keyword">override</emphasis>;
5981 &#32;&#32;&#32;&#32;};
5982 
5983 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
5984 
5985 <emphasis role="comment">//&#32;end&#32;catch_reporter_bases.hpp</emphasis>
5986 <emphasis role="comment">//&#32;start&#32;catch_console_colour.h</emphasis>
5987 
5988 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
5989 
5990 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Colour&#32;{
5991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;Code&#32;{
5992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;None&#32;=&#32;0,
5993 
5994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;White,
5995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Red,
5996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Green,
5997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Blue,
5998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Cyan,
5999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Yellow,
6000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Grey,
6001 
6002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Bright&#32;=&#32;0x10,
6003 
6004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BrightRed&#32;=&#32;Bright&#32;|&#32;Red,
6005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BrightGreen&#32;=&#32;Bright&#32;|&#32;Green,
6006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LightGrey&#32;=&#32;Bright&#32;|&#32;Grey,
6007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BrightWhite&#32;=&#32;Bright&#32;|&#32;White,
6008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BrightYellow&#32;=&#32;Bright&#32;|&#32;Yellow,
6009 
6010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;By&#32;intention</emphasis>
6011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FileName&#32;=&#32;LightGrey,
6012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Warning&#32;=&#32;BrightYellow,
6013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultError&#32;=&#32;BrightRed,
6014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultSuccess&#32;=&#32;BrightGreen,
6015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultExpectedFailure&#32;=&#32;Warning,
6016 
6017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Error&#32;=&#32;BrightRed,
6018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Success&#32;=&#32;Green,
6019 
6020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OriginalExpression&#32;=&#32;Cyan,
6021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReconstructedExpression&#32;=&#32;BrightYellow,
6022 
6023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SecondaryText&#32;=&#32;LightGrey,
6024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Headers&#32;=&#32;White
6025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
6026 
6027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;constructed&#32;object&#32;for&#32;RAII&#32;guard</emphasis>
6028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Colour(&#32;Code&#32;_colourCode&#32;);
6029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Colour(&#32;Colour&amp;&amp;&#32;other&#32;)&#32;<emphasis role="keyword">noexcept</emphasis>;
6030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Colour&amp;&#32;operator=(&#32;Colour&amp;&amp;&#32;other&#32;)&#32;<emphasis role="keyword">noexcept</emphasis>;
6031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~Colour();
6032 
6033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;static&#32;method&#32;for&#32;one-shot&#32;changes</emphasis>
6034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;use(&#32;Code&#32;_colourCode&#32;);
6035 
6036 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
6037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;m_moved&#32;=&#32;<emphasis role="keyword">false</emphasis>;
6038 &#32;&#32;&#32;&#32;};
6039 
6040 &#32;&#32;&#32;&#32;std::ostream&amp;&#32;<link linkend="_catch_8h_1aae0cdd5d2f0ac242b9ab18b0f66ba26e">operator &lt;&lt; </link>(&#32;std::ostream&amp;&#32;os,&#32;Colour&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;);
6041 
6042 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
6043 
6044 <emphasis role="comment">//&#32;end&#32;catch_console_colour.h</emphasis>
6045 <emphasis role="comment">//&#32;start&#32;catch_reporter_registrars.hpp</emphasis>
6046 
6047 
6048 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
6049 
6050 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
6051 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ReporterRegistrar&#32;{
6052 
6053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ReporterFactory&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;IReporterFactory&#32;{
6054 
6055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IStreamingReporterPtr&#32;create(&#32;ReporterConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
6056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::unique_ptr&lt;T&gt;(&#32;<emphasis role="keyword">new</emphasis>&#32;T(&#32;config&#32;)&#32;);
6057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6058 
6059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;getDescription()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
6060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;T::getDescription();
6061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
6063 
6064 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
6065 
6066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;ReporterRegistrar(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name&#32;)&#32;{
6067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a585459763f2c7610e57de2dd22dd1ad8">getMutableRegistryHub</link>().<link linkend="_struct_catch_1_1_i_mutable_registry_hub_1a1c0ac202ac31ee9f88e8ff5cbac4b243">registerReporter</link>(&#32;name,&#32;std::make_shared&lt;ReporterFactory&gt;()&#32;);
6068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6069 &#32;&#32;&#32;&#32;};
6070 
6071 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
6072 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ListenerRegistrar&#32;{
6073 
6074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ListenerFactory&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;IReporterFactory&#32;{
6075 
6076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IStreamingReporterPtr&#32;create(&#32;ReporterConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
6077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::unique_ptr&lt;T&gt;(&#32;<emphasis role="keyword">new</emphasis>&#32;T(&#32;config&#32;)&#32;);
6078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;getDescription()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
6080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string();
6081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
6083 
6084 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
6085 
6086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ListenerRegistrar()&#32;{
6087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a585459763f2c7610e57de2dd22dd1ad8">getMutableRegistryHub</link>().<link linkend="_struct_catch_1_1_i_mutable_registry_hub_1abd892a133f85581fd00ee75bb379ca56">registerListener</link>(&#32;std::make_shared&lt;ListenerFactory&gt;()&#32;);
6088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6089 &#32;&#32;&#32;&#32;};
6090 }
6091 
6092 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE)</emphasis>
6093 
6094 <emphasis role="preprocessor">#define&#32;CATCH_REGISTER_REPORTER(&#32;name,&#32;reporterType&#32;)&#32;\</emphasis>
6095 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
6096 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
6097 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;namespace{&#32;Catch::ReporterRegistrar&lt;reporterType&gt;&#32;catch_internal_RegistrarFor##reporterType(&#32;name&#32;);&#32;}&#32;\</emphasis>
6098 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</emphasis>
6099 
6100 <emphasis role="preprocessor">#define&#32;CATCH_REGISTER_LISTENER(&#32;listenerType&#32;)&#32;\</emphasis>
6101 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CATCH_INTERNAL_START_WARNINGS_SUPPRESSION&#32;&#32;&#32;\</emphasis>
6102 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS&#32;&#32;&#32;&#32;\</emphasis>
6103 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;namespace{&#32;Catch::ListenerRegistrar&lt;listenerType&gt;&#32;catch_internal_RegistrarFor##listenerType;&#32;}&#32;\</emphasis>
6104 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</emphasis>
6105 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_DISABLE</emphasis>
6106 
6107 <emphasis role="preprocessor">#define&#32;CATCH_REGISTER_REPORTER(name,&#32;reporterType)</emphasis>
6108 <emphasis role="preprocessor">#define&#32;CATCH_REGISTER_LISTENER(listenerType)</emphasis>
6109 
6110 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_DISABLE</emphasis>
6111 
6112 <emphasis role="comment">//&#32;end&#32;catch_reporter_registrars.hpp</emphasis>
6113 <emphasis role="comment">//&#32;Allow&#32;users&#32;to&#32;base&#32;their&#32;work&#32;off&#32;existing&#32;reporters</emphasis>
6114 <emphasis role="comment">//&#32;start&#32;catch_reporter_compact.h</emphasis>
6115 
6116 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
6117 
6118 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>CompactReporter&#32;:&#32;StreamingReporterBase&lt;CompactReporter&gt;&#32;{
6119 
6120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>StreamingReporterBase::StreamingReporterBase;
6121 
6122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~CompactReporter()&#32;<emphasis role="keyword">override</emphasis>;
6123 
6124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;getDescription();
6125 
6126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;noMatchingTestCases(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;spec)&#32;<emphasis role="keyword">override</emphasis>;
6127 
6128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;assertionStarting(AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;<emphasis role="keyword">override</emphasis>;
6129 
6130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;assertionEnded(AssertionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_assertionStats)&#32;<emphasis role="keyword">override</emphasis>;
6131 
6132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;sectionEnded(SectionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_sectionStats)&#32;<emphasis role="keyword">override</emphasis>;
6133 
6134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testRunEnded(TestRunStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_testRunStats)&#32;<emphasis role="keyword">override</emphasis>;
6135 
6136 &#32;&#32;&#32;&#32;};
6137 
6138 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
6139 
6140 <emphasis role="comment">//&#32;end&#32;catch_reporter_compact.h</emphasis>
6141 <emphasis role="comment">//&#32;start&#32;catch_reporter_console.h</emphasis>
6142 
6143 <emphasis role="preprocessor">#if&#32;defined(_MSC_VER)</emphasis>
6144 <emphasis role="preprocessor">#pragma&#32;warning(push)</emphasis>
6145 <emphasis role="preprocessor">#pragma&#32;warning(disable:4061)&#32;</emphasis><emphasis role="comment">//&#32;Not&#32;all&#32;labels&#32;are&#32;EXPLICITLY&#32;handled&#32;in&#32;switch</emphasis>
6146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note&#32;that&#32;4062&#32;(not&#32;all&#32;labels&#32;are&#32;handled</emphasis>
6147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;default&#32;is&#32;missing)&#32;is&#32;enabled</emphasis>
6148 <emphasis role="preprocessor">#endif</emphasis>
6149 
6150 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
6151 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Fwd&#32;decls</emphasis>
6152 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>SummaryColumn;
6153 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>TablePrinter;
6154 
6155 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>ConsoleReporter&#32;:&#32;StreamingReporterBase&lt;ConsoleReporter&gt;&#32;{
6156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::unique_ptr&lt;TablePrinter&gt;&#32;m_tablePrinter;
6157 
6158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ConsoleReporter(ReporterConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config);
6159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~ConsoleReporter()&#32;<emphasis role="keyword">override</emphasis>;
6160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;getDescription();
6161 
6162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;noMatchingTestCases(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;spec)&#32;<emphasis role="keyword">override</emphasis>;
6163 
6164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;reportInvalidArguments(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;arg)&#32;<emphasis role="keyword">override</emphasis>;
6165 
6166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;assertionStarting(AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;<emphasis role="keyword">override</emphasis>;
6167 
6168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;assertionEnded(AssertionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_assertionStats)&#32;<emphasis role="keyword">override</emphasis>;
6169 
6170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;sectionStarting(SectionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_sectionInfo)&#32;<emphasis role="keyword">override</emphasis>;
6171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;sectionEnded(SectionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_sectionStats)&#32;<emphasis role="keyword">override</emphasis>;
6172 
6173 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</emphasis>
6174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;benchmarkPreparing(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name)&#32;<emphasis role="keyword">override</emphasis>;
6175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;benchmarkStarting(BenchmarkInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;info)&#32;<emphasis role="keyword">override</emphasis>;
6176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;benchmarkEnded(BenchmarkStats&lt;&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;stats)&#32;<emphasis role="keyword">override</emphasis>;
6177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;benchmarkFailed(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;error)&#32;<emphasis role="keyword">override</emphasis>;
6178 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_ENABLE_BENCHMARKING</emphasis>
6179 
6180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testCaseEnded(TestCaseStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_testCaseStats)&#32;<emphasis role="keyword">override</emphasis>;
6181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testGroupEnded(TestGroupStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_testGroupStats)&#32;<emphasis role="keyword">override</emphasis>;
6182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testRunEnded(TestRunStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_testRunStats)&#32;<emphasis role="keyword">override</emphasis>;
6183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testRunStarting(TestRunInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_testRunInfo)&#32;<emphasis role="keyword">override</emphasis>;
6184 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
6185 
6186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;lazyPrint();
6187 
6188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;lazyPrintWithoutClosingBenchmarkTable();
6189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;lazyPrintRunInfo();
6190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;lazyPrintGroupInfo();
6191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printTestCaseAndSectionHeader();
6192 
6193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printClosedHeader(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_name);
6194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printOpenHeader(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_name);
6195 
6196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;string&#32;has&#32;a&#32;:&#32;in&#32;first&#32;line&#32;will&#32;set&#32;indent&#32;to&#32;follow&#32;it&#32;on</emphasis>
6197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;subsequent&#32;lines</emphasis>
6198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printHeaderString(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_string,&#32;std::size_t&#32;indent&#32;=&#32;0);
6199 
6200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printTotals(Totals&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;totals);
6201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printSummaryRow(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;label,&#32;std::vector&lt;SummaryColumn&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;cols,&#32;std::size_t&#32;row);
6202 
6203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printTotalsDivider(Totals&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;totals);
6204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printSummaryDivider();
6205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printTestFilters();
6206 
6207 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
6208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;m_headerPrinted&#32;=&#32;<emphasis role="keyword">false</emphasis>;
6209 &#32;&#32;&#32;&#32;};
6210 
6211 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
6212 
6213 <emphasis role="preprocessor">#if&#32;defined(_MSC_VER)</emphasis>
6214 <emphasis role="preprocessor">#pragma&#32;warning(pop)</emphasis>
6215 <emphasis role="preprocessor">#endif</emphasis>
6216 
6217 <emphasis role="comment">//&#32;end&#32;catch_reporter_console.h</emphasis>
6218 <emphasis role="comment">//&#32;start&#32;catch_reporter_junit.h</emphasis>
6219 
6220 <emphasis role="comment">//&#32;start&#32;catch_xmlwriter.h</emphasis>
6221 
6222 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
6223 
6224 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
6225 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;XmlFormatting&#32;{
6226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;None&#32;=&#32;0x00,
6227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Indent&#32;=&#32;0x01,
6228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Newline&#32;=&#32;0x02,
6229 &#32;&#32;&#32;&#32;};
6230 
6231 &#32;&#32;&#32;&#32;XmlFormatting&#32;operator&#32;|&#32;(XmlFormatting&#32;lhs,&#32;XmlFormatting&#32;rhs);
6232 &#32;&#32;&#32;&#32;XmlFormatting&#32;operator&#32;&amp;&#32;(XmlFormatting&#32;lhs,&#32;XmlFormatting&#32;rhs);
6233 
6234 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>XmlEncode&#32;{
6235 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
6236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;ForWhat&#32;{&#32;ForTextNodes,&#32;ForAttributes&#32;};
6237 
6238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlEncode(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str,&#32;ForWhat&#32;forWhat&#32;=&#32;ForTextNodes&#32;);
6239 
6240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;encodeTo(&#32;std::ostream&amp;&#32;os&#32;)&#32;<emphasis role="keyword">const</emphasis>;
6241 
6242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_catch_8h_1aae0cdd5d2f0ac242b9ab18b0f66ba26e">operator &lt;&lt; </link>(&#32;std::ostream&amp;&#32;os,&#32;XmlEncode&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;xmlEncode&#32;);
6243 
6244 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
6245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;m_str;
6246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ForWhat&#32;m_forWhat;
6247 &#32;&#32;&#32;&#32;};
6248 
6249 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>XmlWriter&#32;{
6250 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
6251 
6252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ScopedElement&#32;{
6253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
6254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ScopedElement(&#32;XmlWriter*&#32;writer,&#32;XmlFormatting&#32;fmt&#32;);
6255 
6256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ScopedElement(&#32;ScopedElement&amp;&amp;&#32;other&#32;)&#32;<emphasis role="keyword">noexcept</emphasis>;
6257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ScopedElement&amp;&#32;operator=(&#32;ScopedElement&amp;&amp;&#32;other&#32;)&#32;<emphasis role="keyword">noexcept</emphasis>;
6258 
6259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~ScopedElement();
6260 
6261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ScopedElement&amp;&#32;writeText(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;text,&#32;XmlFormatting&#32;fmt&#32;=&#32;XmlFormatting::Newline&#32;|&#32;XmlFormatting::Indent&#32;);
6262 
6263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
6264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ScopedElement&amp;&#32;writeAttribute(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;T&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;attribute&#32;)&#32;{
6265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_writer-&gt;writeAttribute(&#32;name,&#32;attribute&#32;);
6266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
6267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6268 
6269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
6270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;XmlWriter*&#32;m_writer&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
6271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlFormatting&#32;m_fmt;
6272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
6273 
6274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter(&#32;std::ostream&amp;&#32;os&#32;=&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()&#32;);
6275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~XmlWriter();
6276 
6277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter(&#32;XmlWriter&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
6278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter&amp;&#32;operator=(&#32;XmlWriter&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
6279 
6280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter&amp;&#32;startElement(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;XmlFormatting&#32;fmt&#32;=&#32;XmlFormatting::Newline&#32;|&#32;XmlFormatting::Indent);
6281 
6282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ScopedElement&#32;scopedElement(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;XmlFormatting&#32;fmt&#32;=&#32;XmlFormatting::Newline&#32;|&#32;XmlFormatting::Indent);
6283 
6284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter&amp;&#32;endElement(XmlFormatting&#32;fmt&#32;=&#32;XmlFormatting::Newline&#32;|&#32;XmlFormatting::Indent);
6285 
6286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter&amp;&#32;writeAttribute(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;attribute&#32;);
6287 
6288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter&amp;&#32;writeAttribute(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;attribute&#32;);
6289 
6290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
6291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter&amp;&#32;writeAttribute(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;T&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;attribute&#32;)&#32;{
6292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReusableStringStream&#32;rss;
6293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;attribute;
6294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;writeAttribute(&#32;name,&#32;rss.str()&#32;);
6295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6296 
6297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter&amp;&#32;writeText(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;text,&#32;XmlFormatting&#32;fmt&#32;=&#32;XmlFormatting::Newline&#32;|&#32;XmlFormatting::Indent);
6298 
6299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter&amp;&#32;writeComment(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;text,&#32;XmlFormatting&#32;fmt&#32;=&#32;XmlFormatting::Newline&#32;|&#32;XmlFormatting::Indent);
6300 
6301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;writeStylesheetRef(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;url&#32;);
6302 
6303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter&amp;&#32;writeBlankLine();
6304 
6305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ensureTagClosed();
6306 
6307 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
6308 
6309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;applyFormatting(XmlFormatting&#32;fmt);
6310 
6311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;writeDeclaration();
6312 
6313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;newlineIfNecessary();
6314 
6315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;m_tagIsOpen&#32;=&#32;<emphasis role="keyword">false</emphasis>;
6316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;m_needsNewline&#32;=&#32;<emphasis role="keyword">false</emphasis>;
6317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;m_tags;
6318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;m_indent;
6319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostream&amp;&#32;m_os;
6320 &#32;&#32;&#32;&#32;};
6321 
6322 }
6323 
6324 <emphasis role="comment">//&#32;end&#32;catch_xmlwriter.h</emphasis>
6325 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
6326 
6327 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>JunitReporter&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;CumulativeReporterBase&lt;JunitReporter&gt;&#32;{
6328 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
6329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JunitReporter(ReporterConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_config);
6330 
6331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~JunitReporter()&#32;<emphasis role="keyword">override</emphasis>;
6332 
6333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;getDescription();
6334 
6335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;noMatchingTestCases(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<emphasis role="comment">/*spec*/</emphasis>)&#32;<emphasis role="keyword">override</emphasis>;
6336 
6337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testRunStarting(TestRunInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;runInfo)&#32;<emphasis role="keyword">override</emphasis>;
6338 
6339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testGroupStarting(GroupInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;groupInfo)&#32;<emphasis role="keyword">override</emphasis>;
6340 
6341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testCaseStarting(TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCaseInfo)&#32;<emphasis role="keyword">override</emphasis>;
6342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;assertionEnded(AssertionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;assertionStats)&#32;<emphasis role="keyword">override</emphasis>;
6343 
6344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testCaseEnded(TestCaseStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCaseStats)&#32;<emphasis role="keyword">override</emphasis>;
6345 
6346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testGroupEnded(TestGroupStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testGroupStats)&#32;<emphasis role="keyword">override</emphasis>;
6347 
6348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testRunEndedCumulative()&#32;<emphasis role="keyword">override</emphasis>;
6349 
6350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;writeGroup(TestGroupNode&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;groupNode,&#32;<emphasis role="keywordtype">double</emphasis>&#32;suiteTime);
6351 
6352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;writeTestCase(TestCaseNode&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCaseNode);
6353 
6354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;writeSection(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;className,
6355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;rootName,
6356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SectionNode&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;sectionNode,
6357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;testOkToFail&#32;);
6358 
6359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;writeAssertions(SectionNode&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;sectionNode);
6360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;writeAssertion(AssertionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;stats);
6361 
6362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter&#32;xml;
6363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Timer&#32;suiteTimer;
6364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;stdOutForSuite;
6365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;stdErrForSuite;
6366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;unexpectedExceptions&#32;=&#32;0;
6367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;m_okToFail&#32;=&#32;<emphasis role="keyword">false</emphasis>;
6368 &#32;&#32;&#32;&#32;};
6369 
6370 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
6371 
6372 <emphasis role="comment">//&#32;end&#32;catch_reporter_junit.h</emphasis>
6373 <emphasis role="comment">//&#32;start&#32;catch_reporter_xml.h</emphasis>
6374 
6375 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
6376 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>XmlReporter&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;StreamingReporterBase&lt;XmlReporter&gt;&#32;{
6377 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
6378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlReporter(ReporterConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_config);
6379 
6380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~XmlReporter()&#32;<emphasis role="keyword">override</emphasis>;
6381 
6382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;getDescription();
6383 
6384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;std::string&#32;getStylesheetRef()&#32;<emphasis role="keyword">const</emphasis>;
6385 
6386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;writeSourceInfo(SourceLineInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;sourceInfo);
6387 
6388 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:&#32;<emphasis role="comment">//&#32;StreamingReporterBase</emphasis>
6389 
6390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;noMatchingTestCases(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;s)&#32;<emphasis role="keyword">override</emphasis>;
6391 
6392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testRunStarting(TestRunInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testInfo)&#32;<emphasis role="keyword">override</emphasis>;
6393 
6394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testGroupStarting(GroupInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;groupInfo)&#32;<emphasis role="keyword">override</emphasis>;
6395 
6396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testCaseStarting(TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testInfo)&#32;<emphasis role="keyword">override</emphasis>;
6397 
6398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;sectionStarting(SectionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;sectionInfo)&#32;<emphasis role="keyword">override</emphasis>;
6399 
6400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;assertionStarting(AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;<emphasis role="keyword">override</emphasis>;
6401 
6402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;assertionEnded(AssertionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;assertionStats)&#32;<emphasis role="keyword">override</emphasis>;
6403 
6404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;sectionEnded(SectionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;sectionStats)&#32;<emphasis role="keyword">override</emphasis>;
6405 
6406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testCaseEnded(TestCaseStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCaseStats)&#32;<emphasis role="keyword">override</emphasis>;
6407 
6408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testGroupEnded(TestGroupStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testGroupStats)&#32;<emphasis role="keyword">override</emphasis>;
6409 
6410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testRunEnded(TestRunStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testRunStats)&#32;<emphasis role="keyword">override</emphasis>;
6411 
6412 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</emphasis>
6413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;benchmarkPreparing(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name)&#32;<emphasis role="keyword">override</emphasis>;
6414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;benchmarkStarting(BenchmarkInfo&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;<emphasis role="keyword">override</emphasis>;
6415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;benchmarkEnded(BenchmarkStats&lt;&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;<emphasis role="keyword">override</emphasis>;
6416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;benchmarkFailed(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;<emphasis role="keyword">override</emphasis>;
6417 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_ENABLE_BENCHMARKING</emphasis>
6418 
6419 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
6420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Timer&#32;m_testCaseTimer;
6421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter&#32;m_xml;
6422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;m_sectionDepth&#32;=&#32;0;
6423 &#32;&#32;&#32;&#32;};
6424 
6425 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
6426 
6427 <emphasis role="comment">//&#32;end&#32;catch_reporter_xml.h</emphasis>
6428 
6429 <emphasis role="comment">//&#32;end&#32;catch_external_interfaces.h</emphasis>
6430 <emphasis role="preprocessor">#endif</emphasis>
6431 
6432 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</emphasis>
6433 <emphasis role="comment">//&#32;start&#32;catch_benchmarking_all.hpp</emphasis>
6434 
6435 <emphasis role="comment">//&#32;A&#32;proxy&#32;header&#32;that&#32;includes&#32;all&#32;of&#32;the&#32;benchmarking&#32;headers&#32;to&#32;allow</emphasis>
6436 <emphasis role="comment">//&#32;concise&#32;include&#32;of&#32;the&#32;benchmarking&#32;features.&#32;You&#32;should&#32;prefer&#32;the</emphasis>
6437 <emphasis role="comment">//&#32;individual&#32;includes&#32;in&#32;standard&#32;use.</emphasis>
6438 
6439 <emphasis role="comment">//&#32;start&#32;catch_benchmark.hpp</emphasis>
6440 
6441 &#32;<emphasis role="comment">//&#32;Benchmark</emphasis>
6442 
6443 <emphasis role="comment">//&#32;start&#32;catch_chronometer.hpp</emphasis>
6444 
6445 <emphasis role="comment">//&#32;User-facing&#32;chronometer</emphasis>
6446 
6447 
6448 <emphasis role="comment">//&#32;start&#32;catch_clock.hpp</emphasis>
6449 
6450 <emphasis role="comment">//&#32;Clocks</emphasis>
6451 
6452 
6453 <emphasis role="preprocessor">#include&#32;&lt;chrono&gt;</emphasis>
6454 <emphasis role="preprocessor">#include&#32;&lt;ratio&gt;</emphasis>
6455 
6456 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
6457 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Benchmark&#32;{
6458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Clock&gt;
6459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>ClockDuration&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;Clock::duration;
6460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Clock&gt;
6461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>FloatDuration&#32;=&#32;std::chrono::duration&lt;double,&#32;typename&#32;Clock::period&gt;;
6462 
6463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Clock&gt;
6464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>TimePoint&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;Clock::time_point;
6465 
6466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>default_clock&#32;=&#32;std::chrono::steady_clock;
6467 
6468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Clock&gt;
6469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>now&#32;{
6470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TimePoint&lt;Clock&gt;&#32;operator()()<emphasis role="keyword">&#32;const&#32;</emphasis>{
6471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Clock::now();
6472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
6474 
6475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>fp_seconds&#32;=&#32;std::chrono::duration&lt;double,&#32;std::ratio&lt;1&gt;&gt;;
6476 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Benchmark</emphasis>
6477 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
6478 
6479 <emphasis role="comment">//&#32;end&#32;catch_clock.hpp</emphasis>
6480 <emphasis role="comment">//&#32;start&#32;catch_optimizer.hpp</emphasis>
6481 
6482 &#32;<emphasis role="comment">//&#32;Hinting&#32;the&#32;optimizer</emphasis>
6483 
6484 
6485 <emphasis role="preprocessor">#if&#32;defined(_MSC_VER)</emphasis>
6486 <emphasis role="preprocessor">#&#32;&#32;&#32;include&#32;&lt;atomic&gt;</emphasis>&#32;<emphasis role="comment">//&#32;atomic_thread_fence</emphasis>
6487 <emphasis role="preprocessor">#endif</emphasis>
6488 
6489 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
6490 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Benchmark&#32;{
6491 <emphasis role="preprocessor">#if&#32;defined(__GNUC__)&#32;||&#32;defined(__clang__)</emphasis>
6492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
6493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;keep_memory(T*&#32;p)&#32;{
6494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;g&quot;</emphasis>(p)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
6495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;keep_memory()&#32;{
6497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;:&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
6498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6499 
6500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
6501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;optimizer_barrier()&#32;{&#32;keep_memory();&#32;}
6502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Detail</emphasis>
6503 <emphasis role="preprocessor">#elif&#32;defined(_MSC_VER)</emphasis>
6504 
6505 <emphasis role="preprocessor">#pragma&#32;optimize(&quot;&quot;,&#32;off)</emphasis>
6506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
6507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;keep_memory(T*&#32;p)&#32;{
6508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;thanks&#32;@milleniumbug</emphasis>
6509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>&#32;volatile*<emphasis role="keyword">&gt;</emphasis>(p)&#32;=&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const&#32;</emphasis>volatile*<emphasis role="keyword">&gt;</emphasis>(p);
6510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;equivalent&#32;keep_memory()</emphasis>
6512 <emphasis role="preprocessor">#pragma&#32;optimize(&quot;&quot;,&#32;on)</emphasis>
6513 
6514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
6515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;optimizer_barrier()&#32;{
6516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::atomic_thread_fence(std::memory_order_seq_cst);
6517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Detail</emphasis>
6519 
6520 <emphasis role="preprocessor">#endif</emphasis>
6521 
6522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
6523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;deoptimize_value(T&amp;&amp;&#32;x)&#32;{
6524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;keep_memory(&amp;x);
6525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6526 
6527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Fn,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
6528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;invoke_deoptimized(Fn&amp;&amp;&#32;fn,&#32;Args&amp;&amp;...&#32;args)&#32;-&gt;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;!std::is_same&lt;void,&#32;<emphasis role="keyword">decltype</emphasis>(fn(args...))&gt;::value&gt;::type&#32;{
6529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deoptimize_value(std::forward&lt;Fn&gt;(fn)&#32;(std::forward&lt;Args...&gt;(args...)));
6530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6531 
6532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Fn,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
6533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;invoke_deoptimized(Fn&amp;&amp;&#32;fn,&#32;Args&amp;&amp;...&#32;args)&#32;-&gt;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;std::is_same&lt;void,&#32;<emphasis role="keyword">decltype</emphasis>(fn(args...))&gt;::value&gt;::type&#32;{
6534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;Fn&gt;(fn)&#32;(std::forward&lt;Args...&gt;(args...));
6535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6536 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Benchmark</emphasis>
6537 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
6538 
6539 <emphasis role="comment">//&#32;end&#32;catch_optimizer.hpp</emphasis>
6540 <emphasis role="comment">//&#32;start&#32;catch_complete_invoke.hpp</emphasis>
6541 
6542 <emphasis role="comment">//&#32;Invoke&#32;with&#32;a&#32;special&#32;case&#32;for&#32;void</emphasis>
6543 
6544 
6545 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
6546 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
6547 
6548 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
6549 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Benchmark&#32;{
6550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
6551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
6552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>CompleteType&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis>type&#32;=&#32;T;&#32;};
6553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
6554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>CompleteType&lt;void&gt;&#32;{&#32;<emphasis role="keyword">struct&#32;</emphasis>type&#32;{};&#32;};
6555 
6556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
6557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>CompleteType_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;CompleteType&lt;T&gt;::type;
6558 
6559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Result&gt;
6560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>CompleteInvoker&#32;{
6561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Fun,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
6562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;Result&#32;invoke(Fun&amp;&amp;&#32;fun,&#32;Args&amp;&amp;...&#32;args)&#32;{
6563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;Fun&gt;(fun)(std::forward&lt;Args&gt;(args)...);
6564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
6566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
6567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>CompleteInvoker&lt;void&gt;&#32;{
6568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Fun,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
6569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;CompleteType_t&lt;void&gt;&#32;invoke(Fun&amp;&amp;&#32;fun,&#32;Args&amp;&amp;...&#32;args)&#32;{
6570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;Fun&gt;(fun)(std::forward&lt;Args&gt;(args)...);
6571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
6572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
6574 
6575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;invoke&#32;and&#32;not&#32;return&#32;void&#32;:(</emphasis>
6576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Fun,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
6577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CompleteType_t&lt;<link linkend="_namespace_catch_1a9670af24a66c8f5cbe9d69b92b1c4383">FunctionReturnType</link>&lt;Fun,&#32;Args...&gt;&gt;&#32;complete_invoke(Fun&amp;&amp;&#32;fun,&#32;Args&amp;&amp;...&#32;args)&#32;{
6578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CompleteInvoker&lt;<link linkend="_namespace_catch_1a9670af24a66c8f5cbe9d69b92b1c4383">FunctionReturnType</link>&lt;Fun,&#32;Args...&gt;&gt;::invoke(std::forward&lt;Fun&gt;(fun),&#32;std::forward&lt;Args&gt;(args)...);
6579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6580 
6581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;benchmarkErrorMsg&#32;=&#32;<emphasis role="stringliteral">&quot;a&#32;benchmark&#32;failed&#32;to&#32;run&#32;successfully&quot;</emphasis>;
6582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Detail</emphasis>
6583 
6584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Fun&gt;
6585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Detail::CompleteType_t&lt;FunctionReturnType&lt;Fun&gt;&gt;&#32;user_code(Fun&amp;&amp;&#32;fun)&#32;{
6586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1ab76c2d22e571ab1a828f5c60d2f485a6">CATCH_TRY</link>{
6587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Detail::complete_invoke(std::forward&lt;Fun&gt;(fun));
6588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<link linkend="_catch_8h_1afa0ae14e70806dca4f8bf06d06645fa9">CATCH_CATCH_ALL</link>{
6589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1af718eeab870712f292ed8dc6ee3f6488">getResultCapture</link>().benchmarkFailed(<link linkend="_namespace_catch_1adafff91485eeeeb9e9333f317cc0e3b1">translateActiveException</link>());
6590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1a834a24a39cf448d5a0f812e716be1c76">CATCH_RUNTIME_ERROR</link>(Detail::benchmarkErrorMsg);
6591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6593 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Benchmark</emphasis>
6594 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
6595 
6596 <emphasis role="comment">//&#32;end&#32;catch_complete_invoke.hpp</emphasis>
6597 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
6598 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Benchmark&#32;{
6599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
6600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>ChronometerConcept&#32;{
6601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;start()&#32;=&#32;0;
6602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;finish()&#32;=&#32;0;
6603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~ChronometerConcept()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
6604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
6605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Clock&gt;
6606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>ChronometerModel&#32;final&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;ChronometerConcept&#32;{
6607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;start()<emphasis role="keyword">&#32;override&#32;</emphasis>{&#32;started&#32;=&#32;Clock::now();&#32;}
6608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;finish()<emphasis role="keyword">&#32;override&#32;</emphasis>{&#32;finished&#32;=&#32;Clock::now();&#32;}
6609 
6610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ClockDuration&lt;Clock&gt;&#32;elapsed()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;finished&#32;-&#32;started;&#32;}
6611 
6612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TimePoint&lt;Clock&gt;&#32;started;
6613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TimePoint&lt;Clock&gt;&#32;finished;
6614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
6615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Detail</emphasis>
6616 
6617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Chronometer&#32;{
6618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
6619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Fun&gt;
6620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;measure(Fun&amp;&amp;&#32;fun)&#32;{&#32;measure(std::forward&lt;Fun&gt;(fun),&#32;is_callable&lt;Fun(<emphasis role="keywordtype">int</emphasis>)&gt;());&#32;}
6621 
6622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;runs()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;k;&#32;}
6623 
6624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Chronometer(Detail::ChronometerConcept&amp;&#32;meter,&#32;<emphasis role="keywordtype">int</emphasis>&#32;k)
6625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;impl(&amp;meter)
6626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;k(k)&#32;{}
6627 
6628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
6629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Fun&gt;
6630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;measure(Fun&amp;&amp;&#32;fun,&#32;std::false_type)&#32;{
6631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;measure([&amp;fun](<emphasis role="keywordtype">int</emphasis>)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;fun();&#32;},&#32;std::true_type());
6632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6633 
6634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Fun&gt;
6635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;measure(Fun&amp;&amp;&#32;fun,&#32;std::true_type)&#32;{
6636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Detail::optimizer_barrier();
6637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl-&gt;start();
6638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;k;&#32;++i)&#32;invoke_deoptimized(fun,&#32;i);
6639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl-&gt;finish();
6640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Detail::optimizer_barrier();
6641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6642 
6643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Detail::ChronometerConcept*&#32;impl;
6644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;k;
6645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
6646 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Benchmark</emphasis>
6647 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
6648 
6649 <emphasis role="comment">//&#32;end&#32;catch_chronometer.hpp</emphasis>
6650 <emphasis role="comment">//&#32;start&#32;catch_environment.hpp</emphasis>
6651 
6652 <emphasis role="comment">//&#32;Environment&#32;information</emphasis>
6653 
6654 
6655 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
6656 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Benchmark&#32;{
6657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Duration&gt;
6658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>EnvironmentEstimate&#32;{
6659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Duration&#32;mean;
6660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OutlierClassification&#32;outliers;
6661 
6662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Duration2&gt;
6663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;EnvironmentEstimate&lt;Duration2&gt;()<emphasis role="keyword">&#32;const&#32;</emphasis>{
6664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;mean,&#32;outliers&#32;};
6665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
6667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Clock&gt;
6668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Environment&#32;{
6669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>clock_type&#32;=&#32;Clock;
6670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EnvironmentEstimate&lt;FloatDuration&lt;Clock&gt;&gt;&#32;clock_resolution;
6671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EnvironmentEstimate&lt;FloatDuration&lt;Clock&gt;&gt;&#32;clock_cost;
6672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
6673 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Benchmark</emphasis>
6674 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
6675 
6676 <emphasis role="comment">//&#32;end&#32;catch_environment.hpp</emphasis>
6677 <emphasis role="comment">//&#32;start&#32;catch_execution_plan.hpp</emphasis>
6678 
6679 &#32;<emphasis role="comment">//&#32;Execution&#32;plan</emphasis>
6680 
6681 
6682 <emphasis role="comment">//&#32;start&#32;catch_benchmark_function.hpp</emphasis>
6683 
6684 &#32;<emphasis role="comment">//&#32;Dumb&#32;std::function&#32;implementation&#32;for&#32;consistent&#32;call&#32;overhead</emphasis>
6685 
6686 
6687 <emphasis role="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>
6688 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
6689 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
6690 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
6691 
6692 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
6693 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Benchmark&#32;{
6694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
6695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
6696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>Decay&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::decay&lt;T&gt;::type;
6697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
6698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_related
6699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;std::is_same&lt;Decay&lt;T&gt;,&#32;Decay&lt;U&gt;&gt;&#32;{};
6700 
6708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>BenchmarkFunction&#32;{
6709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
6710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>callable&#32;{
6711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;call(Chronometer&#32;meter)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
6712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;callable*&#32;clone()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
6713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~callable()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
6714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
6715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Fun&gt;
6716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>model&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;callable&#32;{
6717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;model(Fun&amp;&amp;&#32;fun)&#32;:&#32;fun(std::move(fun))&#32;{}
6718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;model(Fun&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;fun)&#32;:&#32;fun(fun)&#32;{}
6719 
6720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;model&lt;Fun&gt;*&#32;clone()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;model&lt;Fun&gt;(*<emphasis role="keyword">this</emphasis>);&#32;}
6721 
6722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;call(Chronometer&#32;meter)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
6723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;call(meter,&#32;is_callable&lt;Fun(Chronometer)&gt;());
6724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;call(Chronometer&#32;meter,&#32;std::true_type)<emphasis role="keyword">&#32;const&#32;</emphasis>{
6726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fun(meter);
6727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;call(Chronometer&#32;meter,&#32;std::false_type)<emphasis role="keyword">&#32;const&#32;</emphasis>{
6729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meter.measure(fun);
6730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6731 
6732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Fun&#32;fun;
6733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
6734 
6735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>nothing&#32;{&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator()()<emphasis role="keyword">&#32;const&#32;</emphasis>{}&#32;};
6736 
6737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
6738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BenchmarkFunction(model&lt;T&gt;*&#32;c)&#32;:&#32;f(c)&#32;{}
6739 
6740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
6741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BenchmarkFunction()
6742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;f(new&#32;model&lt;nothing&gt;{&#32;{}&#32;})&#32;{}
6743 
6744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Fun,
6745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;!is_related&lt;Fun,&#32;BenchmarkFunction&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;::type&#32;=&#32;0&gt;
6746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BenchmarkFunction(Fun&amp;&amp;&#32;fun)
6747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;f(new&#32;model&lt;typename&#32;std::decay&lt;Fun&gt;::type&gt;(std::forward&lt;Fun&gt;(fun)))&#32;{}
6748 
6749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BenchmarkFunction(BenchmarkFunction&amp;&amp;&#32;that)
6750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;f(std::move(that.f))&#32;{}
6751 
6752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BenchmarkFunction(BenchmarkFunction&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;that)
6753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;f(that.f-&gt;clone())&#32;{}
6754 
6755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BenchmarkFunction&amp;&#32;operator=(BenchmarkFunction&amp;&amp;&#32;that)&#32;{
6756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;f&#32;=&#32;std::move(that.f);
6757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
6758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6759 
6760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BenchmarkFunction&amp;&#32;operator=(BenchmarkFunction&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;that)&#32;{
6761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;f.reset(that.f-&gt;clone());
6762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
6763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6764 
6765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator()(Chronometer&#32;meter)<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;f-&gt;call(meter);&#32;}
6766 
6767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
6768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::unique_ptr&lt;callable&gt;&#32;f;
6769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
6770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Detail</emphasis>
6771 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Benchmark</emphasis>
6772 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
6773 
6774 <emphasis role="comment">//&#32;end&#32;catch_benchmark_function.hpp</emphasis>
6775 <emphasis role="comment">//&#32;start&#32;catch_repeat.hpp</emphasis>
6776 
6777 <emphasis role="comment">//&#32;repeat&#32;algorithm</emphasis>
6778 
6779 
6780 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
6781 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
6782 
6783 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
6784 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Benchmark&#32;{
6785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
6786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Fun&gt;
6787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>repeater&#32;{
6788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator()(<emphasis role="keywordtype">int</emphasis>&#32;k)<emphasis role="keyword">&#32;const&#32;</emphasis>{
6789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;k;&#32;++i)&#32;{
6790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fun();
6791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Fun&#32;fun;
6794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
6795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Fun&gt;
6796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;repeater&lt;typename&#32;std::decay&lt;Fun&gt;::type&gt;&#32;<link linkend="_namespace_catch_1_1_generators_1a510cc0d72a7bab8f967827e695b981ba">repeat</link>(Fun&amp;&amp;&#32;fun)&#32;{
6797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;std::forward&lt;Fun&gt;(fun)&#32;};
6798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Detail</emphasis>
6800 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Benchmark</emphasis>
6801 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
6802 
6803 <emphasis role="comment">//&#32;end&#32;catch_repeat.hpp</emphasis>
6804 <emphasis role="comment">//&#32;start&#32;catch_run_for_at_least.hpp</emphasis>
6805 
6806 <emphasis role="comment">//&#32;Run&#32;a&#32;function&#32;for&#32;a&#32;minimum&#32;amount&#32;of&#32;time</emphasis>
6807 
6808 
6809 <emphasis role="comment">//&#32;start&#32;catch_measure.hpp</emphasis>
6810 
6811 <emphasis role="comment">//&#32;Measure</emphasis>
6812 
6813 
6814 <emphasis role="comment">//&#32;start&#32;catch_timing.hpp</emphasis>
6815 
6816 <emphasis role="comment">//&#32;Timing</emphasis>
6817 
6818 
6819 <emphasis role="preprocessor">#include&#32;&lt;tuple&gt;</emphasis>
6820 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
6821 
6822 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
6823 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Benchmark&#32;{
6824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Duration,&#32;<emphasis role="keyword">typename</emphasis>&#32;Result&gt;
6825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Timing&#32;{
6826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Duration&#32;elapsed;
6827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Result&#32;result;
6828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;iterations;
6829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
6830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
6831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>TimingOf&#32;=&#32;Timing&lt;ClockDuration&lt;Clock&gt;,&#32;Detail::CompleteType_t&lt;<link linkend="_namespace_catch_1a9670af24a66c8f5cbe9d69b92b1c4383">FunctionReturnType</link>&lt;Func,&#32;Args...&gt;&gt;&gt;;
6832 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Benchmark</emphasis>
6833 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
6834 
6835 <emphasis role="comment">//&#32;end&#32;catch_timing.hpp</emphasis>
6836 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
6837 
6838 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
6839 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Benchmark&#32;{
6840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
6841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;Fun,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
6842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TimingOf&lt;Clock,&#32;Fun,&#32;Args...&gt;&#32;measure(Fun&amp;&amp;&#32;fun,&#32;Args&amp;&amp;...&#32;args)&#32;{
6843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;start&#32;=&#32;Clock::now();
6844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;r&#32;=&#32;Detail::complete_invoke(fun,&#32;std::forward&lt;Args&gt;(args)...);
6845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;end&#32;=&#32;Clock::now();
6846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;delta&#32;=&#32;end&#32;-&#32;start;
6847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;delta,&#32;std::forward&lt;decltype(r)&gt;(r),&#32;1&#32;};
6848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Detail</emphasis>
6850 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Benchmark</emphasis>
6851 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
6852 
6853 <emphasis role="comment">//&#32;end&#32;catch_measure.hpp</emphasis>
6854 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
6855 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
6856 
6857 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
6858 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Benchmark&#32;{
6859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
6860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;Fun&gt;
6861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TimingOf&lt;Clock,&#32;Fun,&#32;int&gt;&#32;measure_one(Fun&amp;&amp;&#32;fun,&#32;<emphasis role="keywordtype">int</emphasis>&#32;iters,&#32;std::false_type)&#32;{
6862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Detail::measure&lt;Clock&gt;(fun,&#32;iters);
6863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;Fun&gt;
6865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TimingOf&lt;Clock,&#32;Fun,&#32;Chronometer&gt;&#32;measure_one(Fun&amp;&amp;&#32;fun,&#32;<emphasis role="keywordtype">int</emphasis>&#32;iters,&#32;std::true_type)&#32;{
6866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Detail::ChronometerModel&lt;Clock&gt;&#32;meter;
6867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;result&#32;=&#32;Detail::complete_invoke(fun,&#32;Chronometer(meter,&#32;iters));
6868 
6869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;meter.elapsed(),&#32;std::move(result),&#32;iters&#32;};
6870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6871 
6872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;Fun&gt;
6873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>run_for_at_least_argument_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::conditional&lt;is_callable&lt;Fun(Chronometer)&gt;::value,&#32;Chronometer,&#32;<emphasis role="keywordtype">int</emphasis>&gt;::type;
6874 
6875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>optimized_away_error&#32;:&#32;std::exception&#32;{
6876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;what()&#32;const&#32;noexcept<emphasis role="keyword">&#32;override&#32;</emphasis>{
6877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;could&#32;not&#32;measure&#32;benchmark,&#32;maybe&#32;it&#32;was&#32;optimized&#32;away&quot;</emphasis>;
6878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
6880 
6881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;Fun&gt;
6882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TimingOf&lt;Clock,&#32;Fun,&#32;run_for_at_least_argument_t&lt;Clock,&#32;Fun&gt;&gt;&#32;run_for_at_least(ClockDuration&lt;Clock&gt;&#32;how_long,&#32;<emphasis role="keywordtype">int</emphasis>&#32;seed,&#32;Fun&amp;&amp;&#32;fun)&#32;{
6883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;iters&#32;=&#32;seed;
6884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(iters&#32;&lt;&#32;(1&#32;&lt;&lt;&#32;30))&#32;{
6885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;Timing&#32;=&#32;measure_one&lt;Clock&gt;(fun,&#32;iters,&#32;is_callable&lt;Fun(Chronometer)&gt;());
6886 
6887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Timing.elapsed&#32;&gt;=&#32;how_long)&#32;{
6888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;Timing.elapsed,&#32;std::move(Timing.result),&#32;iters&#32;};
6889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iters&#32;*=&#32;2;
6891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a3cbceeab9252d1b752f66a2826e92548">Catch::throw_exception</link>(optimized_away_error{});
6893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Detail</emphasis>
6895 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Benchmark</emphasis>
6896 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
6897 
6898 <emphasis role="comment">//&#32;end&#32;catch_run_for_at_least.hpp</emphasis>
6899 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
6900 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>
6901 
6902 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
6903 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Benchmark&#32;{
6904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Duration&gt;
6905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>ExecutionPlan&#32;{
6906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;iterations_per_sample;
6907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Duration&#32;estimated_duration;
6908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Detail::BenchmarkFunction&#32;benchmark;
6909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Duration&#32;warmup_time;
6910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;warmup_iterations;
6911 
6912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Duration2&gt;
6913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;ExecutionPlan&lt;Duration2&gt;()<emphasis role="keyword">&#32;const&#32;</emphasis>{
6914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;iterations_per_sample,&#32;estimated_duration,&#32;benchmark,&#32;warmup_time,&#32;warmup_iterations&#32;};
6915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6916 
6917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Clock&gt;
6918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;FloatDuration&lt;Clock&gt;&gt;&#32;run(<emphasis role="keyword">const</emphasis>&#32;IConfig&#32;&amp;cfg,&#32;Environment&lt;FloatDuration&lt;Clock&gt;&gt;&#32;env)<emphasis role="keyword">&#32;const&#32;</emphasis>{
6919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;warmup&#32;a&#32;bit</emphasis>
6920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Detail::run_for_at_least&lt;Clock&gt;(std::chrono::duration_cast&lt;ClockDuration&lt;Clock&gt;&gt;(warmup_time),&#32;warmup_iterations,&#32;Detail::repeat(now&lt;Clock&gt;{}));
6921 
6922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;FloatDuration&lt;Clock&gt;&gt;&#32;times;
6923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;times.reserve(cfg.benchmarkSamples());
6924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::generate_n(std::back_inserter(times),&#32;cfg.benchmarkSamples(),&#32;[<emphasis role="keyword">this</emphasis>,&#32;env]&#32;{
6925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Detail::ChronometerModel&lt;Clock&gt;&#32;model;
6926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;benchmark(Chronometer(model,&#32;iterations_per_sample));
6927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;auto&#32;sample_time&#32;=&#32;model.elapsed()&#32;-&#32;env.clock_cost.mean;
6928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(sample_time&#32;&lt;&#32;FloatDuration&lt;Clock&gt;::zero())&#32;sample_time&#32;=&#32;FloatDuration&lt;Clock&gt;::zero();
6929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;sample_time&#32;/&#32;iterations_per_sample;
6930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
6931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;times;
6932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
6934 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Benchmark</emphasis>
6935 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
6936 
6937 <emphasis role="comment">//&#32;end&#32;catch_execution_plan.hpp</emphasis>
6938 <emphasis role="comment">//&#32;start&#32;catch_estimate_clock.hpp</emphasis>
6939 
6940 &#32;<emphasis role="comment">//&#32;Environment&#32;measurement</emphasis>
6941 
6942 
6943 <emphasis role="comment">//&#32;start&#32;catch_stats.hpp</emphasis>
6944 
6945 <emphasis role="comment">//&#32;Statistical&#32;analysis&#32;tools</emphasis>
6946 
6947 
6948 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
6949 <emphasis role="preprocessor">#include&#32;&lt;functional&gt;</emphasis>
6950 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
6951 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>
6952 <emphasis role="preprocessor">#include&#32;&lt;numeric&gt;</emphasis>
6953 <emphasis role="preprocessor">#include&#32;&lt;tuple&gt;</emphasis>
6954 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
6955 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
6956 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>
6957 <emphasis role="preprocessor">#include&#32;&lt;random&gt;</emphasis>
6958 
6959 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
6960 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Benchmark&#32;{
6961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
6962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>sample&#32;=&#32;std::vector&lt;double&gt;;
6963 
6964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;weighted_average_quantile(<emphasis role="keywordtype">int</emphasis>&#32;k,&#32;<emphasis role="keywordtype">int</emphasis>&#32;q,&#32;std::vector&lt;double&gt;::iterator&#32;first,&#32;std::vector&lt;double&gt;::iterator&#32;last);
6965 
6966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Iterator&gt;
6967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OutlierClassification&#32;classify_outliers(Iterator&#32;first,&#32;Iterator&#32;last)&#32;{
6968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;copy(first,&#32;last);
6969 
6970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;q1&#32;=&#32;weighted_average_quantile(1,&#32;4,&#32;copy.begin(),&#32;copy.end());
6971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;q3&#32;=&#32;weighted_average_quantile(3,&#32;4,&#32;copy.begin(),&#32;copy.end());
6972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;iqr&#32;=&#32;q3&#32;-&#32;q1;
6973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;los&#32;=&#32;q1&#32;-&#32;(iqr&#32;*&#32;3.);
6974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;lom&#32;=&#32;q1&#32;-&#32;(iqr&#32;*&#32;1.5);
6975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;him&#32;=&#32;q3&#32;+&#32;(iqr&#32;*&#32;1.5);
6976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;his&#32;=&#32;q3&#32;+&#32;(iqr&#32;*&#32;3.);
6977 
6978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OutlierClassification&#32;o;
6979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;first&#32;!=&#32;last;&#32;++first)&#32;{
6980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;t&#32;=&#32;*first;
6981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(t&#32;&lt;&#32;los)&#32;++o.low_severe;
6982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(t&#32;&lt;&#32;lom)&#32;++o.low_mild;
6983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(t&#32;&gt;&#32;his)&#32;++o.high_severe;
6984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(t&#32;&gt;&#32;him)&#32;++o.high_mild;
6985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++o.samples_seen;
6986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;o;
6988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6989 
6990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Iterator&gt;
6991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;mean(Iterator&#32;first,&#32;Iterator&#32;last)&#32;{
6992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;count&#32;=&#32;last&#32;-&#32;first;
6993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;sum&#32;=&#32;std::accumulate(first,&#32;last,&#32;0.);
6994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sum&#32;/&#32;count;
6995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6996 
6997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;URng,&#32;<emphasis role="keyword">typename</emphasis>&#32;Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;Estimator&gt;
6998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sample&#32;resample(URng&amp;&#32;rng,&#32;<emphasis role="keywordtype">int</emphasis>&#32;resamples,&#32;Iterator&#32;first,&#32;Iterator&#32;last,&#32;Estimator&amp;&#32;estimator)&#32;{
6999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;n&#32;=&#32;last&#32;-&#32;first;
7000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uniform_int_distribution&lt;<emphasis role="keyword">decltype</emphasis>(n)&gt;&#32;dist(0,&#32;n&#32;-&#32;1);
7001 
7002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sample&#32;out;
7003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out.reserve(resamples);
7004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::generate_n(std::back_inserter(out),&#32;resamples,&#32;[n,&#32;first,&#32;&amp;estimator,&#32;&amp;dist,&#32;&amp;rng]&#32;{
7005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;resampled;
7006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resampled.reserve(n);
7007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::generate_n(std::back_inserter(resampled),&#32;n,&#32;[first,&#32;&amp;dist,&#32;&amp;rng]&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;first[dist(rng)];&#32;});
7008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;estimator(resampled.begin(),&#32;resampled.end());
7009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
7010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::sort(out.begin(),&#32;out.end());
7011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;out;
7012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7013 
7014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Estimator,&#32;<emphasis role="keyword">typename</emphasis>&#32;Iterator&gt;
7015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sample&#32;jackknife(Estimator&amp;&amp;&#32;estimator,&#32;Iterator&#32;first,&#32;Iterator&#32;last)&#32;{
7016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;n&#32;=&#32;last&#32;-&#32;first;
7017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;second&#32;=&#32;std::next(first);
7018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sample&#32;results;
7019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.reserve(n);
7020 
7021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;first;&#32;it&#32;!=&#32;last;&#32;++it)&#32;{
7022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(it,&#32;first);
7023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.push_back(estimator(second,&#32;last));
7024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7025 
7026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;results;
7027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7028 
7029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;normal_cdf(<emphasis role="keywordtype">double</emphasis>&#32;x)&#32;{
7030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::erfc(-x&#32;/&#32;std::sqrt(2.0))&#32;/&#32;2.0;
7031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7032 
7033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;erfc_inv(<emphasis role="keywordtype">double</emphasis>&#32;x);
7034 
7035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;normal_quantile(<emphasis role="keywordtype">double</emphasis>&#32;p);
7036 
7037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;Estimator&gt;
7038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Estimate&lt;double&gt;&#32;bootstrap(<emphasis role="keywordtype">double</emphasis>&#32;confidence_level,&#32;Iterator&#32;first,&#32;Iterator&#32;last,&#32;sample&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;resample,&#32;Estimator&amp;&amp;&#32;estimator)&#32;{
7039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;n_samples&#32;=&#32;last&#32;-&#32;first;
7040 
7041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;point&#32;=&#32;estimator(first,&#32;last);
7042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Degenerate&#32;case&#32;with&#32;a&#32;single&#32;sample</emphasis>
7043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n_samples&#32;==&#32;1)&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;point,&#32;point,&#32;point,&#32;confidence_level&#32;};
7044 
7045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sample&#32;jack&#32;=&#32;jackknife(estimator,&#32;first,&#32;last);
7046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;jack_mean&#32;=&#32;mean(jack.begin(),&#32;jack.end());
7047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;sum_squares,&#32;sum_cubes;
7048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::tie(sum_squares,&#32;sum_cubes)&#32;=&#32;std::accumulate(jack.begin(),&#32;jack.end(),&#32;std::make_pair(0.,&#32;0.),&#32;[jack_mean](std::pair&lt;double,&#32;double&gt;&#32;sqcb,&#32;<emphasis role="keywordtype">double</emphasis>&#32;x)&#32;-&gt;&#32;std::pair&lt;double,&#32;double&gt;&#32;{
7049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;auto&#32;d&#32;=&#32;jack_mean&#32;-&#32;x;
7050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;auto&#32;d2&#32;=&#32;d&#32;*&#32;d;
7051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;auto&#32;d3&#32;=&#32;d2&#32;*&#32;d;
7052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;{&#32;sqcb.first&#32;+&#32;d2,&#32;sqcb.second&#32;+&#32;d3&#32;};
7053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
7054 
7055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;accel&#32;=&#32;sum_cubes&#32;/&#32;(6&#32;*&#32;std::pow(sum_squares,&#32;1.5));
7056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(resample.size());
7057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;prob_n&#32;=&#32;std::count_if(resample.begin(),&#32;resample.end(),&#32;[point](<emphasis role="keywordtype">double</emphasis>&#32;x)&#32;{&#32;return&#32;x&#32;&lt;&#32;point;&#32;})&#32;/&#32;(double)n;
7058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;degenerate&#32;case&#32;with&#32;uniform&#32;samples</emphasis>
7059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prob_n&#32;==&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;point,&#32;point,&#32;point,&#32;confidence_level&#32;};
7060 
7061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;bias&#32;=&#32;normal_quantile(prob_n);
7062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;z1&#32;=&#32;normal_quantile((1.&#32;-&#32;confidence_level)&#32;/&#32;2.);
7063 
7064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;cumn&#32;=&#32;[n](<emphasis role="keywordtype">double</emphasis>&#32;x)&#32;-&gt;&#32;<emphasis role="keywordtype">int</emphasis>&#32;{
7065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::lround(normal_cdf(x)&#32;*&#32;n);&#32;};
7066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;a&#32;=&#32;[bias,&#32;accel](<emphasis role="keywordtype">double</emphasis>&#32;b)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;bias&#32;+&#32;b&#32;/&#32;(1.&#32;-&#32;accel&#32;*&#32;b);&#32;};
7067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;b1&#32;=&#32;bias&#32;+&#32;z1;
7068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;b2&#32;=&#32;bias&#32;-&#32;z1;
7069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;a1&#32;=&#32;a(b1);
7070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;a2&#32;=&#32;a(b2);
7071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;lo&#32;=&#32;(std::max)(cumn(a1),&#32;0);
7072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;hi&#32;=&#32;(std::min)(cumn(a2),&#32;n&#32;-&#32;1);
7073 
7074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;point,&#32;resample[lo],&#32;resample[hi],&#32;confidence_level&#32;};
7075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7076 
7077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;outlier_variance(Estimate&lt;double&gt;&#32;mean,&#32;Estimate&lt;double&gt;&#32;stddev,&#32;<emphasis role="keywordtype">int</emphasis>&#32;n);
7078 
7079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>bootstrap_analysis&#32;{
7080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Estimate&lt;double&gt;&#32;mean;
7081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Estimate&lt;double&gt;&#32;standard_deviation;
7082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;outlier_variance;
7083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
7084 
7085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bootstrap_analysis&#32;analyse_samples(<emphasis role="keywordtype">double</emphasis>&#32;confidence_level,&#32;<emphasis role="keywordtype">int</emphasis>&#32;n_resamples,&#32;std::vector&lt;double&gt;::iterator&#32;first,&#32;std::vector&lt;double&gt;::iterator&#32;last);
7086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Detail</emphasis>
7087 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Benchmark</emphasis>
7088 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
7089 
7090 <emphasis role="comment">//&#32;end&#32;catch_stats.hpp</emphasis>
7091 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
7092 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>
7093 <emphasis role="preprocessor">#include&#32;&lt;tuple&gt;</emphasis>
7094 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
7095 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
7096 
7097 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
7098 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Benchmark&#32;{
7099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
7100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Clock&gt;
7101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;resolution(<emphasis role="keywordtype">int</emphasis>&#32;k)&#32;{
7102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;TimePoint&lt;Clock&gt;&gt;&#32;times;
7103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;times.reserve(k&#32;+&#32;1);
7104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::generate_n(std::back_inserter(times),&#32;k&#32;+&#32;1,&#32;now&lt;Clock&gt;{});
7105 
7106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;deltas;
7107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deltas.reserve(k);
7108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::transform(std::next(times.begin()),&#32;times.end(),&#32;times.begin(),
7109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::back_inserter(deltas),
7110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](TimePoint&lt;Clock&gt;&#32;a,&#32;TimePoint&lt;Clock&gt;&#32;b)&#32;{&#32;return&#32;static_cast&lt;double&gt;((a&#32;-&#32;b).count());&#32;});
7111 
7112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;deltas;
7113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7114 
7115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;warmup_iterations&#32;=&#32;10000;
7116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;warmup_time&#32;=&#32;std::chrono::milliseconds(100);
7117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;minimum_ticks&#32;=&#32;1000;
7118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;warmup_seed&#32;=&#32;10000;
7119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;clock_resolution_estimation_time&#32;=&#32;std::chrono::milliseconds(500);
7120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;clock_cost_estimation_time_limit&#32;=&#32;std::chrono::seconds(1);
7121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;clock_cost_estimation_tick_limit&#32;=&#32;100000;
7122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;clock_cost_estimation_time&#32;=&#32;std::chrono::milliseconds(10);
7123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;clock_cost_estimation_iterations&#32;=&#32;10000;
7124 
7125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Clock&gt;
7126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;warmup()&#32;{
7127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;run_for_at_least&lt;Clock&gt;(std::chrono::duration_cast&lt;ClockDuration&lt;Clock&gt;&gt;(warmup_time),&#32;warmup_seed,&#32;&amp;resolution&lt;Clock&gt;)
7128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.iterations;
7129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Clock&gt;
7131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EnvironmentEstimate&lt;FloatDuration&lt;Clock&gt;&gt;&#32;estimate_clock_resolution(<emphasis role="keywordtype">int</emphasis>&#32;iterations)&#32;{
7132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;r&#32;=&#32;run_for_at_least&lt;Clock&gt;(std::chrono::duration_cast&lt;ClockDuration&lt;Clock&gt;&gt;(clock_resolution_estimation_time),&#32;iterations,&#32;&amp;resolution&lt;Clock&gt;)
7133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.result;
7134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{
7135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FloatDuration&lt;Clock&gt;(mean(r.begin(),&#32;r.end())),
7136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;classify_outliers(r.begin(),&#32;r.end()),
7137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
7138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Clock&gt;
7140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EnvironmentEstimate&lt;FloatDuration&lt;Clock&gt;&gt;&#32;estimate_clock_cost(FloatDuration&lt;Clock&gt;&#32;resolution)&#32;{
7141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;time_limit&#32;=&#32;(std::min)(
7142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resolution&#32;*&#32;clock_cost_estimation_tick_limit,
7143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FloatDuration&lt;Clock&gt;(clock_cost_estimation_time_limit));
7144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;time_clock&#32;=&#32;[](<emphasis role="keywordtype">int</emphasis>&#32;k)&#32;{
7145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Detail::measure&lt;Clock&gt;([k]&#32;{
7146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;k;&#32;++i)&#32;{
7147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;ignored&#32;=&#32;Clock::now();
7148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)ignored;
7149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}).elapsed;
7151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
7152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;time_clock(1);
7153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;iters&#32;=&#32;clock_cost_estimation_iterations;
7154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;r&#32;=&#32;run_for_at_least&lt;Clock&gt;(std::chrono::duration_cast&lt;ClockDuration&lt;Clock&gt;&gt;(clock_cost_estimation_time),&#32;iters,&#32;time_clock);
7155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;times;
7156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nsamples&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(std::ceil(time_limit&#32;/&#32;r.elapsed));
7157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;times.reserve(nsamples);
7158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::generate_n(std::back_inserter(times),&#32;nsamples,&#32;[time_clock,&#32;&amp;r]&#32;{
7159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>((time_clock(r.iterations)&#32;/&#32;r.iterations).count());
7160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
7161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{
7162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FloatDuration&lt;Clock&gt;(mean(times.begin(),&#32;times.end())),
7163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;classify_outliers(times.begin(),&#32;times.end()),
7164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
7165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7166 
7167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Clock&gt;
7168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Environment&lt;FloatDuration&lt;Clock&gt;&gt;&#32;measure_environment()&#32;{
7169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;Environment&lt;FloatDuration&lt;Clock&gt;&gt;*&#32;env&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
7170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(env)&#32;{
7171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*env;
7172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7173 
7174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;iters&#32;=&#32;Detail::warmup&lt;Clock&gt;();
7175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;resolution&#32;=&#32;Detail::estimate_clock_resolution&lt;Clock&gt;(iters);
7176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;cost&#32;=&#32;Detail::estimate_clock_cost&lt;Clock&gt;(resolution.mean);
7177 
7178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;env&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Environment&lt;FloatDuration&lt;Clock&gt;&gt;{&#32;resolution,&#32;cost&#32;};
7179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*env;
7180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Detail</emphasis>
7182 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Benchmark</emphasis>
7183 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
7184 
7185 <emphasis role="comment">//&#32;end&#32;catch_estimate_clock.hpp</emphasis>
7186 <emphasis role="comment">//&#32;start&#32;catch_analyse.hpp</emphasis>
7187 
7188 &#32;<emphasis role="comment">//&#32;Run&#32;and&#32;analyse&#32;one&#32;benchmark</emphasis>
7189 
7190 
7191 <emphasis role="comment">//&#32;start&#32;catch_sample_analysis.hpp</emphasis>
7192 
7193 <emphasis role="comment">//&#32;Benchmark&#32;results</emphasis>
7194 
7195 
7196 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
7197 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
7198 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
7199 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>
7200 
7201 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
7202 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Benchmark&#32;{
7203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Duration&gt;
7204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>SampleAnalysis&#32;{
7205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;Duration&gt;&#32;samples;
7206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Estimate&lt;Duration&gt;&#32;mean;
7207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Estimate&lt;Duration&gt;&#32;standard_deviation;
7208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OutlierClassification&#32;outliers;
7209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;outlier_variance;
7210 
7211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Duration2&gt;
7212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;SampleAnalysis&lt;Duration2&gt;()<emphasis role="keyword">&#32;const&#32;</emphasis>{
7213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;Duration2&gt;&#32;samples2;
7214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;samples2.reserve(samples.size());
7215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::transform(samples.begin(),&#32;samples.end(),&#32;std::back_inserter(samples2),&#32;[](Duration&#32;d)&#32;{&#32;return&#32;Duration2(d);&#32;});
7216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{
7217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::move(samples2),
7218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mean,
7219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;standard_deviation,
7220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outliers,
7221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outlier_variance,
7222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
7223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
7225 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Benchmark</emphasis>
7226 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
7227 
7228 <emphasis role="comment">//&#32;end&#32;catch_sample_analysis.hpp</emphasis>
7229 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
7230 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>
7231 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
7232 
7233 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
7234 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Benchmark&#32;{
7235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
7236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Duration,&#32;<emphasis role="keyword">typename</emphasis>&#32;Iterator&gt;
7237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SampleAnalysis&lt;Duration&gt;&#32;analyse(<emphasis role="keyword">const</emphasis>&#32;IConfig&#32;&amp;cfg,&#32;Environment&lt;Duration&gt;,&#32;Iterator&#32;first,&#32;Iterator&#32;last)&#32;{
7238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!cfg.benchmarkNoAnalysis())&#32;{
7239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;samples;
7240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;samples.reserve(last&#32;-&#32;first);
7241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::transform(first,&#32;last,&#32;std::back_inserter(samples),&#32;[](Duration&#32;d)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;d.count();&#32;});
7242 
7243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;analysis&#32;=&#32;Catch::Benchmark::Detail::analyse_samples(cfg.benchmarkConfidenceInterval(),&#32;cfg.benchmarkResamples(),&#32;samples.begin(),&#32;samples.end());
7244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;outliers&#32;=&#32;Catch::Benchmark::Detail::classify_outliers(samples.begin(),&#32;samples.end());
7245 
7246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;wrap_estimate&#32;=&#32;[](Estimate&lt;double&gt;&#32;e)&#32;{
7247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Estimate&lt;Duration&gt;&#32;{
7248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Duration(e.point),
7249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Duration(e.lower_bound),
7250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Duration(e.upper_bound),
7251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;e.confidence_interval,
7252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
7253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
7254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;Duration&gt;&#32;samples2;
7255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;samples2.reserve(samples.size());
7256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::transform(samples.begin(),&#32;samples.end(),&#32;std::back_inserter(samples2),&#32;[](<emphasis role="keywordtype">double</emphasis>&#32;d)&#32;{&#32;return&#32;Duration(d);&#32;});
7257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{
7258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::move(samples2),
7259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wrap_estimate(analysis.mean),
7260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wrap_estimate(analysis.standard_deviation),
7261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outliers,
7262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;analysis.outlier_variance,
7263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
7264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
7265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;Duration&gt;&#32;samples;
7266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;samples.reserve(last&#32;-&#32;first);
7267 
7268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Duration&#32;mean&#32;=&#32;Duration(0);
7269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;
7270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;first;&#32;it&#32;&lt;&#32;last;&#32;++it,&#32;++i)&#32;{
7271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;samples.push_back(Duration(*it));
7272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mean&#32;+=&#32;Duration(*it);
7273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mean&#32;/=&#32;i;
7275 
7276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{
7277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::move(samples),
7278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Estimate&lt;Duration&gt;{mean,&#32;mean,&#32;mean,&#32;0.0},
7279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Estimate&lt;Duration&gt;{Duration(0),&#32;Duration(0),&#32;Duration(0),&#32;0.0},
7280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OutlierClassification{},
7281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.0
7282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
7283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Detail</emphasis>
7286 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Benchmark</emphasis>
7287 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
7288 
7289 <emphasis role="comment">//&#32;end&#32;catch_analyse.hpp</emphasis>
7290 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
7291 <emphasis role="preprocessor">#include&#32;&lt;functional&gt;</emphasis>
7292 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
7293 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
7294 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
7295 
7296 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
7297 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Benchmark&#32;{
7298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Benchmark&#32;{
7299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Benchmark(std::string&#32;&amp;&amp;name)
7300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;name(std::move(name))&#32;{}
7301 
7302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;FUN&gt;
7303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Benchmark(std::string&#32;&amp;&amp;name,&#32;FUN&#32;&amp;&amp;func)
7304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;fun(std::move(func)),&#32;name(std::move(name))&#32;{}
7305 
7306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Clock&gt;
7307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExecutionPlan&lt;FloatDuration&lt;Clock&gt;&gt;&#32;prepare(<emphasis role="keyword">const</emphasis>&#32;IConfig&#32;&amp;cfg,&#32;Environment&lt;FloatDuration&lt;Clock&gt;&gt;&#32;env)<emphasis role="keyword">&#32;const&#32;</emphasis>{
7308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;min_time&#32;=&#32;env.clock_resolution.mean&#32;*&#32;Detail::minimum_ticks;
7309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;run_time&#32;=&#32;std::max(min_time,&#32;std::chrono::duration_cast&lt;<emphasis role="keyword">decltype</emphasis>(min_time)&gt;(cfg.benchmarkWarmupTime()));
7310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;test&#32;=&#32;Detail::run_for_at_least&lt;Clock&gt;(std::chrono::duration_cast&lt;ClockDuration&lt;Clock&gt;&gt;(run_time),&#32;1,&#32;fun);
7311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;new_iters&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(std::ceil(min_time&#32;*&#32;test.iterations&#32;/&#32;test.elapsed));
7312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;new_iters,&#32;test.elapsed&#32;/&#32;test.iterations&#32;*&#32;new_iters&#32;*&#32;cfg.benchmarkSamples(),&#32;fun,&#32;std::chrono::duration_cast&lt;FloatDuration&lt;Clock&gt;&gt;(cfg.benchmarkWarmupTime()),&#32;Detail::warmup_iterations&#32;};
7313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7314 
7315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Clock&#32;=&#32;default_clock&gt;
7316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;run()&#32;{
7317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6">IConfigPtr</link>&#32;cfg&#32;=&#32;<link linkend="_namespace_catch_1a228a625318bb6183842e394eeba17d50">getCurrentContext</link>().<link linkend="_struct_catch_1_1_i_context_1ad72743ae753feab0a6f5505f26f79ced">getConfig</link>();
7318 
7319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;env&#32;=&#32;Detail::measure_environment&lt;Clock&gt;();
7320 
7321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1af718eeab870712f292ed8dc6ee3f6488">getResultCapture</link>().benchmarkPreparing(name);
7322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1ab76c2d22e571ab1a828f5c60d2f485a6">CATCH_TRY</link>{
7323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;plan&#32;=&#32;user_code([&amp;]&#32;{
7324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;prepare&lt;Clock&gt;(*cfg,&#32;env);
7325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
7326 
7327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BenchmarkInfo&#32;info&#32;{
7328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;name,
7329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;plan.estimated_duration.count(),
7330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;plan.iterations_per_sample,
7331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cfg-&gt;benchmarkSamples(),
7332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cfg-&gt;benchmarkResamples(),
7333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;env.clock_resolution.mean.count(),
7334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;env.clock_cost.mean.count()
7335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
7336 
7337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1af718eeab870712f292ed8dc6ee3f6488">getResultCapture</link>().benchmarkStarting(info);
7338 
7339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;samples&#32;=&#32;user_code([&amp;]&#32;{
7340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;plan.template&#32;run&lt;Clock&gt;(*cfg,&#32;env);
7341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
7342 
7343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;analysis&#32;=&#32;Detail::analyse(*cfg,&#32;env,&#32;samples.begin(),&#32;samples.end());
7344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BenchmarkStats&lt;FloatDuration&lt;Clock&gt;&gt;&#32;stats{&#32;info,&#32;analysis.samples,&#32;analysis.mean,&#32;analysis.standard_deviation,&#32;analysis.outliers,&#32;analysis.outlier_variance&#32;};
7345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1af718eeab870712f292ed8dc6ee3f6488">getResultCapture</link>().benchmarkEnded(stats);
7346 
7347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<link linkend="_catch_8h_1afa0ae14e70806dca4f8bf06d06645fa9">CATCH_CATCH_ALL</link>{
7348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespace_catch_1adafff91485eeeeb9e9333f317cc0e3b1">translateActiveException</link>()&#32;!=&#32;Detail::benchmarkErrorMsg)&#32;<emphasis role="comment">//&#32;benchmark&#32;errors&#32;have&#32;been&#32;reported,&#32;otherwise&#32;rethrow.</emphasis>
7349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::rethrow_exception(std::current_exception());
7350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7352 
7353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sets&#32;lambda&#32;to&#32;be&#32;used&#32;in&#32;fun&#32;*and*&#32;executes&#32;benchmark!</emphasis>
7354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Fun,
7355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;!Detail::is_related&lt;Fun,&#32;Benchmark&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;::type&#32;=&#32;0&gt;
7356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Benchmark&#32;&amp;&#32;operator=(Fun&#32;func)&#32;{
7357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fun&#32;=&#32;Detail::BenchmarkFunction(func);
7358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;run();
7359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
7360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7361 
7362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;bool()&#32;{
7363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
7364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7365 
7366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
7367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Detail::BenchmarkFunction&#32;fun;
7368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;name;
7369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
7370 &#32;&#32;&#32;&#32;}
7371 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
7372 
7373 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_GET_1_ARG(arg1,&#32;arg2,&#32;...)&#32;arg1</emphasis>
7374 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_GET_2_ARG(arg1,&#32;arg2,&#32;...)&#32;arg2</emphasis>
7375 
7376 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_BENCHMARK(BenchmarkName,&#32;name,&#32;benchmarkIndex)\</emphasis>
7377 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;if(&#32;Catch::Benchmark::Benchmark&#32;BenchmarkName{name}&#32;)&#32;\</emphasis>
7378 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BenchmarkName&#32;=&#32;[&amp;](int&#32;benchmarkIndex)</emphasis>
7379 
7380 <emphasis role="preprocessor">#define&#32;INTERNAL_CATCH_BENCHMARK_ADVANCED(BenchmarkName,&#32;name)\</emphasis>
7381 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;if(&#32;Catch::Benchmark::Benchmark&#32;BenchmarkName{name}&#32;)&#32;\</emphasis>
7382 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BenchmarkName&#32;=&#32;[&amp;]</emphasis>
7383 
7384 <emphasis role="comment">//&#32;end&#32;catch_benchmark.hpp</emphasis>
7385 <emphasis role="comment">//&#32;start&#32;catch_constructor.hpp</emphasis>
7386 
7387 <emphasis role="comment">//&#32;Constructor&#32;and&#32;destructor&#32;helpers</emphasis>
7388 
7389 
7390 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
7391 
7392 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
7393 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Benchmark&#32;{
7394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
7395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Destruct&gt;
7396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>ObjectStorage
7397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ObjectStorage()&#32;:&#32;data()&#32;{}
7399 
7400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ObjectStorage(<emphasis role="keyword">const</emphasis>&#32;ObjectStorage&amp;&#32;other)
7401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>(&amp;data)&#32;T(other.stored_object());
7403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7404 
7405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ObjectStorage(ObjectStorage&amp;&amp;&#32;other)
7406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>(&amp;data)&#32;T(std::move(other.stored_object()));
7408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7409 
7410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~ObjectStorage()&#32;{&#32;destruct_on_exit&lt;T&gt;();&#32;}
7411 
7412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
7413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;construct(Args&amp;&amp;...&#32;args)
7414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(&amp;data)&#32;T(std::forward&lt;Args&gt;(args)...);
7416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7417 
7418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">bool</emphasis>&#32;AllowManualDestruction&#32;=&#32;!Destruct&gt;
7419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;AllowManualDestruction&gt;::type&#32;destruct()
7420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stored_object().~T();
7422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7423 
7424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
7425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;this&#32;is&#32;a&#32;constructor&#32;benchmark,&#32;destruct&#32;the&#32;underlying&#32;object</emphasis>
7426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
7427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;destruct_on_exit(<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;Destruct,&#32;U&gt;::type*&#32;=&#32;0)&#32;{&#32;destruct&lt;true&gt;();&#32;}
7428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Otherwise,&#32;don&apos;t</emphasis>
7429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
7430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;destruct_on_exit(<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;!Destruct,&#32;U&gt;::type*&#32;=&#32;0)&#32;{&#32;}
7431 
7432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&amp;&#32;stored_object()&#32;{
7433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">static_cast&lt;</emphasis>T*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;data));
7434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7435 
7436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;stored_object()<emphasis role="keyword">&#32;const&#32;</emphasis>{
7437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">static_cast&lt;</emphasis>T*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;data));
7438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7439 
7440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>{&#32;<emphasis role="keyword">alignas</emphasis>(T)&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;data[<emphasis role="keyword">sizeof</emphasis>(T)];&#32;}&#32;&#32;data;
7441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
7442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7443 
7444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
7445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>storage_for&#32;=&#32;Detail::ObjectStorage&lt;T,&#32;true&gt;;
7446 
7447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
7448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>destructable_object&#32;=&#32;Detail::ObjectStorage&lt;T,&#32;false&gt;;
7449 &#32;&#32;&#32;&#32;}
7450 }
7451 
7452 <emphasis role="comment">//&#32;end&#32;catch_constructor.hpp</emphasis>
7453 <emphasis role="comment">//&#32;end&#32;catch_benchmarking_all.hpp</emphasis>
7454 <emphasis role="preprocessor">#endif</emphasis>
7455 
7456 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;!&#32;CATCH_CONFIG_IMPL_ONLY</emphasis>
7457 
7458 <emphasis role="preprocessor">#ifdef&#32;CATCH_IMPL</emphasis>
7459 <emphasis role="comment">//&#32;start&#32;catch_impl.hpp</emphasis>
7460 
7461 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
7462 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;push</emphasis>
7463 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wweak-vtables&quot;</emphasis>
7464 <emphasis role="preprocessor">#endif</emphasis>
7465 
7466 <emphasis role="comment">//&#32;Keep&#32;these&#32;here&#32;for&#32;external&#32;reporters</emphasis>
7467 <emphasis role="comment">//&#32;start&#32;catch_test_case_tracker.h</emphasis>
7468 
7469 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
7470 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
7471 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
7472 
7473 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
7474 <emphasis role="keyword">namespace&#32;</emphasis>TestCaseTracking&#32;{
7475 
7476 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>NameAndLocation&#32;{
7477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;name;
7478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLineInfo&#32;location;
7479 
7480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NameAndLocation(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_name,&#32;SourceLineInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_location&#32;);
7481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator==(NameAndLocation&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lhs,&#32;NameAndLocation&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;rhs)&#32;{
7482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.name&#32;==&#32;rhs.name
7483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;lhs.location&#32;==&#32;rhs.location;
7484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7485 &#32;&#32;&#32;&#32;};
7486 
7487 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ITracker;
7488 
7489 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>ITrackerPtr&#32;=&#32;std::shared_ptr&lt;ITracker&gt;;
7490 
7491 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;&#32;</emphasis>ITracker&#32;{
7492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NameAndLocation&#32;m_nameAndLocation;
7493 
7494 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
7495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ITracker(NameAndLocation&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;nameAndLoc)&#32;:
7496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_nameAndLocation(nameAndLoc)
7497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
7498 
7499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;static&#32;queries</emphasis>
7500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NameAndLocation&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;nameAndLocation()<emphasis role="keyword">&#32;const&#32;</emphasis>{
7501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_nameAndLocation;
7502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7503 
7504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~ITracker();
7505 
7506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;dynamic&#32;queries</emphasis>
7507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isComplete()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;&#32;<emphasis role="comment">//&#32;Successfully&#32;completed&#32;or&#32;failed</emphasis>
7508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isSuccessfullyCompleted()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
7509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isOpen()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;&#32;<emphasis role="comment">//&#32;Started&#32;but&#32;not&#32;complete</emphasis>
7510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;hasChildren()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
7511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;hasStarted()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
7512 
7513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;ITracker&amp;&#32;parent()&#32;=&#32;0;
7514 
7515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;actions</emphasis>
7516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;close()&#32;=&#32;0;&#32;<emphasis role="comment">//&#32;Successfully&#32;complete</emphasis>
7517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;fail()&#32;=&#32;0;
7518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;markAsNeedingAnotherRun()&#32;=&#32;0;
7519 
7520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;addChild(&#32;ITrackerPtr&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;child&#32;)&#32;=&#32;0;
7521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;ITrackerPtr&#32;findChild(&#32;NameAndLocation&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;nameAndLocation&#32;)&#32;=&#32;0;
7522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;openChild()&#32;=&#32;0;
7523 
7524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Debug/&#32;checking</emphasis>
7525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isSectionTracker()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
7526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isGeneratorTracker()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
7527 &#32;&#32;&#32;&#32;};
7528 
7529 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>TrackerContext&#32;{
7530 
7531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;RunState&#32;{
7532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NotStarted,
7533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Executing,
7534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CompletedCycle
7535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
7536 
7537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ITrackerPtr&#32;m_rootTracker;
7538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ITracker*&#32;m_currentTracker&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
7539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RunState&#32;m_runState&#32;=&#32;NotStarted;
7540 
7541 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
7542 
7543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ITracker&amp;&#32;startRun();
7544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;endRun();
7545 
7546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;startCycle();
7547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;completeCycle();
7548 
7549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;completedCycle()&#32;<emphasis role="keyword">const</emphasis>;
7550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ITracker&amp;&#32;currentTracker();
7551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setCurrentTracker(&#32;ITracker*&#32;tracker&#32;);
7552 &#32;&#32;&#32;&#32;};
7553 
7554 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>TrackerBase&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;ITracker&#32;{
7555 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
7556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CycleState&#32;{
7557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NotStarted,
7558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Executing,
7559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExecutingChildren,
7560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NeedsAnotherRun,
7561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CompletedSuccessfully,
7562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Failed
7563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
7564 
7565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>Children&#32;=&#32;std::vector&lt;ITrackerPtr&gt;;
7566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TrackerContext&amp;&#32;m_ctx;
7567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ITracker*&#32;m_parent;
7568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Children&#32;m_children;
7569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CycleState&#32;m_runState&#32;=&#32;NotStarted;
7570 
7571 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
7572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TrackerBase(&#32;NameAndLocation&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;nameAndLocation,&#32;TrackerContext&amp;&#32;ctx,&#32;ITracker*&#32;parent&#32;);
7573 
7574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isComplete()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
7575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isSuccessfullyCompleted()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
7576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isOpen()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
7577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;hasChildren()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
7578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;hasStarted()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
7579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_runState&#32;!=&#32;NotStarted;
7580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7581 
7582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;addChild(&#32;ITrackerPtr&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;child&#32;)&#32;<emphasis role="keyword">override</emphasis>;
7583 
7584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ITrackerPtr&#32;findChild(&#32;NameAndLocation&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;nameAndLocation&#32;)&#32;<emphasis role="keyword">override</emphasis>;
7585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ITracker&amp;&#32;parent()&#32;<emphasis role="keyword">override</emphasis>;
7586 
7587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;openChild()&#32;<emphasis role="keyword">override</emphasis>;
7588 
7589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isSectionTracker()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
7590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isGeneratorTracker()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
7591 
7592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;open();
7593 
7594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;close()&#32;<emphasis role="keyword">override</emphasis>;
7595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;fail()&#32;<emphasis role="keyword">override</emphasis>;
7596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;markAsNeedingAnotherRun()&#32;<emphasis role="keyword">override</emphasis>;
7597 
7598 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
7599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;moveToParent();
7600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;moveToThis();
7601 &#32;&#32;&#32;&#32;};
7602 
7603 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>SectionTracker&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;TrackerBase&#32;{
7604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;m_filters;
7605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;m_trimmed_name;
7606 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
7607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SectionTracker(&#32;NameAndLocation&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;nameAndLocation,&#32;TrackerContext&amp;&#32;ctx,&#32;ITracker*&#32;parent&#32;);
7608 
7609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isSectionTracker()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
7610 
7611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isComplete()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
7612 
7613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;SectionTracker&amp;&#32;acquire(&#32;TrackerContext&amp;&#32;ctx,&#32;NameAndLocation&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;nameAndLocation&#32;);
7614 
7615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;tryOpen();
7616 
7617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;addInitialFilters(&#32;std::vector&lt;std::string&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;filters&#32;);
7618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;addNextFilters(&#32;std::vector&lt;std::string&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;filters&#32;);
7620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;getFilters()&#32;<emphasis role="keyword">const</emphasis>;
7622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;trimmedName()&#32;<emphasis role="keyword">const</emphasis>;
7623 &#32;&#32;&#32;&#32;};
7624 
7625 }&#32;<emphasis role="comment">//&#32;namespace&#32;TestCaseTracking</emphasis>
7626 
7627 <emphasis role="keyword">using&#32;</emphasis>TestCaseTracking::ITracker;
7628 <emphasis role="keyword">using&#32;</emphasis>TestCaseTracking::TrackerContext;
7629 <emphasis role="keyword">using&#32;</emphasis>TestCaseTracking::SectionTracker;
7630 
7631 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
7632 
7633 <emphasis role="comment">//&#32;end&#32;catch_test_case_tracker.h</emphasis>
7634 
7635 <emphasis role="comment">//&#32;start&#32;catch_leak_detector.h</emphasis>
7636 
7637 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
7638 
7639 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>LeakDetector&#32;{
7640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LeakDetector();
7641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~LeakDetector();
7642 &#32;&#32;&#32;&#32;};
7643 
7644 }
7645 <emphasis role="comment">//&#32;end&#32;catch_leak_detector.h</emphasis>
7646 <emphasis role="comment">//&#32;Cpp&#32;files&#32;will&#32;be&#32;included&#32;in&#32;the&#32;single-header&#32;file&#32;here</emphasis>
7647 <emphasis role="comment">//&#32;start&#32;catch_stats.cpp</emphasis>
7648 
7649 <emphasis role="comment">//&#32;Statistical&#32;analysis&#32;tools</emphasis>
7650 
7651 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</emphasis>
7652 
7653 <emphasis role="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>
7654 <emphasis role="preprocessor">#include&#32;&lt;random&gt;</emphasis>
7655 
7656 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_USE_ASYNC)</emphasis>
7657 <emphasis role="preprocessor">#include&#32;&lt;future&gt;</emphasis>
7658 <emphasis role="preprocessor">#endif</emphasis>
7659 
7660 <emphasis role="keyword">namespace&#32;</emphasis>{
7661 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;erf_inv(<emphasis role="keywordtype">double</emphasis>&#32;x)&#32;{
7662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Code&#32;accompanying&#32;the&#32;article&#32;&quot;Approximating&#32;the&#32;erfinv&#32;function&quot;&#32;in&#32;GPU&#32;Computing&#32;Gems,&#32;Volume&#32;2</emphasis>
7663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;w,&#32;p;
7664 
7665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;w&#32;=&#32;-log((1.0&#32;-&#32;x)&#32;*&#32;(1.0&#32;+&#32;x));
7666 
7667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(w&#32;&lt;&#32;6.250000)&#32;{
7668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;w&#32;=&#32;w&#32;-&#32;3.125000;
7669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-3.6444120640178196996e-21;
7670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-1.685059138182016589e-19&#32;+&#32;p&#32;*&#32;w;
7671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;1.2858480715256400167e-18&#32;+&#32;p&#32;*&#32;w;
7672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;1.115787767802518096e-17&#32;+&#32;p&#32;*&#32;w;
7673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-1.333171662854620906e-16&#32;+&#32;p&#32;*&#32;w;
7674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;2.0972767875968561637e-17&#32;+&#32;p&#32;*&#32;w;
7675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;6.6376381343583238325e-15&#32;+&#32;p&#32;*&#32;w;
7676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-4.0545662729752068639e-14&#32;+&#32;p&#32;*&#32;w;
7677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-8.1519341976054721522e-14&#32;+&#32;p&#32;*&#32;w;
7678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;2.6335093153082322977e-12&#32;+&#32;p&#32;*&#32;w;
7679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-1.2975133253453532498e-11&#32;+&#32;p&#32;*&#32;w;
7680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-5.4154120542946279317e-11&#32;+&#32;p&#32;*&#32;w;
7681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;1.051212273321532285e-09&#32;+&#32;p&#32;*&#32;w;
7682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-4.1126339803469836976e-09&#32;+&#32;p&#32;*&#32;w;
7683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-2.9070369957882005086e-08&#32;+&#32;p&#32;*&#32;w;
7684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;4.2347877827932403518e-07&#32;+&#32;p&#32;*&#32;w;
7685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-1.3654692000834678645e-06&#32;+&#32;p&#32;*&#32;w;
7686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-1.3882523362786468719e-05&#32;+&#32;p&#32;*&#32;w;
7687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;0.0001867342080340571352&#32;+&#32;p&#32;*&#32;w;
7688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-0.00074070253416626697512&#32;+&#32;p&#32;*&#32;w;
7689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-0.0060336708714301490533&#32;+&#32;p&#32;*&#32;w;
7690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;0.24015818242558961693&#32;+&#32;p&#32;*&#32;w;
7691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;1.6536545626831027356&#32;+&#32;p&#32;*&#32;w;
7692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(w&#32;&lt;&#32;16.000000)&#32;{
7693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;w&#32;=&#32;sqrt(w)&#32;-&#32;3.250000;
7694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;2.2137376921775787049e-09;
7695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;9.0756561938885390979e-08&#32;+&#32;p&#32;*&#32;w;
7696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-2.7517406297064545428e-07&#32;+&#32;p&#32;*&#32;w;
7697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;1.8239629214389227755e-08&#32;+&#32;p&#32;*&#32;w;
7698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;1.5027403968909827627e-06&#32;+&#32;p&#32;*&#32;w;
7699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-4.013867526981545969e-06&#32;+&#32;p&#32;*&#32;w;
7700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;2.9234449089955446044e-06&#32;+&#32;p&#32;*&#32;w;
7701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;1.2475304481671778723e-05&#32;+&#32;p&#32;*&#32;w;
7702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-4.7318229009055733981e-05&#32;+&#32;p&#32;*&#32;w;
7703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;6.8284851459573175448e-05&#32;+&#32;p&#32;*&#32;w;
7704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;2.4031110387097893999e-05&#32;+&#32;p&#32;*&#32;w;
7705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-0.0003550375203628474796&#32;+&#32;p&#32;*&#32;w;
7706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;0.00095328937973738049703&#32;+&#32;p&#32;*&#32;w;
7707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-0.0016882755560235047313&#32;+&#32;p&#32;*&#32;w;
7708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;0.0024914420961078508066&#32;+&#32;p&#32;*&#32;w;
7709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-0.0037512085075692412107&#32;+&#32;p&#32;*&#32;w;
7710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;0.005370914553590063617&#32;+&#32;p&#32;*&#32;w;
7711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;1.0052589676941592334&#32;+&#32;p&#32;*&#32;w;
7712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;3.0838856104922207635&#32;+&#32;p&#32;*&#32;w;
7713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
7714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;w&#32;=&#32;sqrt(w)&#32;-&#32;5.000000;
7715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-2.7109920616438573243e-11;
7716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-2.5556418169965252055e-10&#32;+&#32;p&#32;*&#32;w;
7717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;1.5076572693500548083e-09&#32;+&#32;p&#32;*&#32;w;
7718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-3.7894654401267369937e-09&#32;+&#32;p&#32;*&#32;w;
7719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;7.6157012080783393804e-09&#32;+&#32;p&#32;*&#32;w;
7720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-1.4960026627149240478e-08&#32;+&#32;p&#32;*&#32;w;
7721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;2.9147953450901080826e-08&#32;+&#32;p&#32;*&#32;w;
7722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-6.7711997758452339498e-08&#32;+&#32;p&#32;*&#32;w;
7723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;2.2900482228026654717e-07&#32;+&#32;p&#32;*&#32;w;
7724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-9.9298272942317002539e-07&#32;+&#32;p&#32;*&#32;w;
7725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;4.5260625972231537039e-06&#32;+&#32;p&#32;*&#32;w;
7726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-1.9681778105531670567e-05&#32;+&#32;p&#32;*&#32;w;
7727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;7.5995277030017761139e-05&#32;+&#32;p&#32;*&#32;w;
7728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-0.00021503011930044477347&#32;+&#32;p&#32;*&#32;w;
7729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;-0.00013871931833623122026&#32;+&#32;p&#32;*&#32;w;
7730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;1.0103004648645343977&#32;+&#32;p&#32;*&#32;w;
7731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;4.8499064014085844221&#32;+&#32;p&#32;*&#32;w;
7732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p&#32;*&#32;x;
7734 &#32;&#32;&#32;&#32;}
7735 
7736 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;standard_deviation(std::vector&lt;double&gt;::iterator&#32;first,&#32;std::vector&lt;double&gt;::iterator&#32;last)&#32;{
7737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;m&#32;=&#32;Catch::Benchmark::Detail::mean(first,&#32;last);
7738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;variance&#32;=&#32;std::accumulate(first,&#32;last,&#32;0.,&#32;[m](<emphasis role="keywordtype">double</emphasis>&#32;a,&#32;<emphasis role="keywordtype">double</emphasis>&#32;b)&#32;{
7739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;diff&#32;=&#32;b&#32;-&#32;m;
7740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;a&#32;+&#32;diff&#32;*&#32;diff;
7741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;})&#32;/&#32;(last&#32;-&#32;first);
7742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::sqrt(variance);
7743 &#32;&#32;&#32;&#32;}
7744 
7745 }
7746 
7747 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
7748 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Benchmark&#32;{
7749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
7750 
7751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;weighted_average_quantile(<emphasis role="keywordtype">int</emphasis>&#32;k,&#32;<emphasis role="keywordtype">int</emphasis>&#32;q,&#32;std::vector&lt;double&gt;::iterator&#32;first,&#32;std::vector&lt;double&gt;::iterator&#32;last)&#32;{
7752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;count&#32;=&#32;last&#32;-&#32;first;
7753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;idx&#32;=&#32;(count&#32;-&#32;1)&#32;*&#32;k&#32;/&#32;static_cast&lt;double&gt;(q);
7754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(idx);
7755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;g&#32;=&#32;idx&#32;-&#32;j;
7756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::nth_element(first,&#32;first&#32;+&#32;j,&#32;last);
7757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;xj&#32;=&#32;first[j];
7758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(g&#32;==&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>&#32;xj;
7759 
7760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;xj1&#32;=&#32;*std::min_element(first&#32;+&#32;(j&#32;+&#32;1),&#32;last);
7761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;xj&#32;+&#32;g&#32;*&#32;(xj1&#32;-&#32;xj);
7762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7763 
7764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;erfc_inv(<emphasis role="keywordtype">double</emphasis>&#32;x)&#32;{
7765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;erf_inv(1.0&#32;-&#32;x);
7766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7767 
7768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;normal_quantile(<emphasis role="keywordtype">double</emphasis>&#32;p)&#32;{
7769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;ROOT_TWO&#32;=&#32;std::sqrt(2.0);
7770 
7771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;result&#32;=&#32;0.0;
7772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(p&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;p&#32;&lt;=&#32;1);
7773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p&#32;&lt;&#32;0&#32;||&#32;p&#32;&gt;&#32;1)&#32;{
7774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
7775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7776 
7777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;-erfc_inv(2.0&#32;*&#32;p);
7778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;result&#32;*=&#32;normal&#32;distribution&#32;standard&#32;deviation&#32;(1.0)&#32;*&#32;sqrt(2)</emphasis>
7779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;*=&#32;<emphasis role="comment">/*sd&#32;*&#32;*/</emphasis>&#32;ROOT_TWO;
7780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;result&#32;+=&#32;normal&#32;disttribution&#32;mean&#32;(0)</emphasis>
7781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
7782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7783 
7784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;outlier_variance(Estimate&lt;double&gt;&#32;mean,&#32;Estimate&lt;double&gt;&#32;stddev,&#32;<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{
7785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;sb&#32;=&#32;stddev.point;
7786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;mn&#32;=&#32;mean.point&#32;/&#32;n;
7787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;mg_min&#32;=&#32;mn&#32;/&#32;2.;
7788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;sg&#32;=&#32;(std::min)(mg_min&#32;/&#32;4.,&#32;sb&#32;/&#32;std::sqrt(n));
7789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;sg2&#32;=&#32;sg&#32;*&#32;sg;
7790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;sb2&#32;=&#32;sb&#32;*&#32;sb;
7791 
7792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;c_max&#32;=&#32;[n,&#32;mn,&#32;sb2,&#32;sg2](<emphasis role="keywordtype">double</emphasis>&#32;x)&#32;-&gt;&#32;<emphasis role="keywordtype">double</emphasis>&#32;{
7793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;k&#32;=&#32;mn&#32;-&#32;x;
7794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;d&#32;=&#32;k&#32;*&#32;k;
7795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;nd&#32;=&#32;n&#32;*&#32;d;
7796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;k0&#32;=&#32;-n&#32;*&#32;nd;
7797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;k1&#32;=&#32;sb2&#32;-&#32;n&#32;*&#32;sg2&#32;+&#32;nd;
7798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;det&#32;=&#32;k1&#32;*&#32;k1&#32;-&#32;4&#32;*&#32;sg2&#32;*&#32;k0;
7799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)(-2.&#32;*&#32;k0&#32;/&#32;(k1&#32;+&#32;std::sqrt(det)));
7800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
7801 
7802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;var_out&#32;=&#32;[n,&#32;sb2,&#32;sg2](<emphasis role="keywordtype">double</emphasis>&#32;c)&#32;{
7803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;nc&#32;=&#32;n&#32;-&#32;c;
7804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(nc&#32;/&#32;n)&#32;*&#32;(sb2&#32;-&#32;nc&#32;*&#32;sg2);
7805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
7806 
7807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(std::min)(var_out(1),&#32;var_out((std::min)(c_max(0.),&#32;c_max(mg_min))))&#32;/&#32;sb2;
7808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7809 
7810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bootstrap_analysis&#32;analyse_samples(<emphasis role="keywordtype">double</emphasis>&#32;confidence_level,&#32;<emphasis role="keywordtype">int</emphasis>&#32;n_resamples,&#32;std::vector&lt;double&gt;::iterator&#32;first,&#32;std::vector&lt;double&gt;::iterator&#32;last)&#32;{
7811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1a1500dca9a578a0bd2f85771cfa3fd35d">CATCH_INTERNAL_START_WARNINGS_SUPPRESSION</link>
7812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1aa0200c23b35ba2bd8ebed69a8f3c1c66">CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS</link>
7813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::random_device&#32;entropy;
7814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1ad9594e9891b032f0dd0279960dc861a5">CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</link>
7815 
7816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;n&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(last&#32;-&#32;first);&#32;<emphasis role="comment">//&#32;seriously,&#32;one&#32;can&apos;t&#32;use&#32;integral&#32;types&#32;without&#32;hell&#32;in&#32;C++</emphasis>
7817 
7818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;mean&#32;=&#32;&amp;Detail::mean&lt;std::vector&lt;double&gt;::iterator&gt;;
7819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;stddev&#32;=&#32;&amp;standard_deviation;
7820 
7821 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_USE_ASYNC)</emphasis>
7822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;Estimate&#32;=&#32;[=](double(*f)(std::vector&lt;double&gt;::iterator,&#32;std::vector&lt;double&gt;::iterator))&#32;{
7823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;seed&#32;=&#32;entropy();
7824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::async(std::launch::async,&#32;[=]&#32;{
7825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::mt19937&#32;<link linkend="_namespace_catch_1a66ea553511cbbc59d99e1720d8da514e">rng</link>(seed);
7826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;resampled&#32;=&#32;resample(rng,&#32;n_resamples,&#32;first,&#32;last,&#32;f);
7827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bootstrap(confidence_level,&#32;first,&#32;last,&#32;resampled,&#32;f);
7828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
7829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
7830 
7831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;mean_future&#32;=&#32;Estimate(mean);
7832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;stddev_future&#32;=&#32;Estimate(stddev);
7833 
7834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;mean_estimate&#32;=&#32;mean_future.get();
7835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;stddev_estimate&#32;=&#32;stddev_future.get();
7836 <emphasis role="preprocessor">#else</emphasis>
7837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;Estimate&#32;=&#32;[=](double(*f)(std::vector&lt;double&gt;::iterator,&#32;std::vector&lt;double&gt;::iterator))&#32;{
7838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;seed&#32;=&#32;entropy();
7839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::mt19937&#32;<link linkend="_namespace_catch_1a66ea553511cbbc59d99e1720d8da514e">rng</link>(seed);
7840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;resampled&#32;=&#32;resample(rng,&#32;n_resamples,&#32;first,&#32;last,&#32;f);
7841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bootstrap(confidence_level,&#32;first,&#32;last,&#32;resampled,&#32;f);
7842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
7843 
7844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;mean_estimate&#32;=&#32;Estimate(mean);
7845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;stddev_estimate&#32;=&#32;Estimate(stddev);
7846 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_USE_ASYNC</emphasis>
7847 
7848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;outlier_variance&#32;=&#32;Detail::outlier_variance(mean_estimate,&#32;stddev_estimate,&#32;n);
7849 
7850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;mean_estimate,&#32;stddev_estimate,&#32;outlier_variance&#32;};
7851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Detail</emphasis>
7853 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Benchmark</emphasis>
7854 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
7855 
7856 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_ENABLE_BENCHMARKING</emphasis>
7857 <emphasis role="comment">//&#32;end&#32;catch_stats.cpp</emphasis>
7858 <emphasis role="comment">//&#32;start&#32;catch_approx.cpp</emphasis>
7859 
7860 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
7861 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>
7862 
7863 <emphasis role="keyword">namespace&#32;</emphasis>{
7864 
7865 <emphasis role="comment">//&#32;Performs&#32;equivalent&#32;check&#32;of&#32;std::fabs(lhs&#32;-&#32;rhs)&#32;&lt;=&#32;margin</emphasis>
7866 <emphasis role="comment">//&#32;But&#32;without&#32;the&#32;subtraction&#32;to&#32;allow&#32;for&#32;INFINITY&#32;in&#32;comparison</emphasis>
7867 <emphasis role="keywordtype">bool</emphasis>&#32;marginComparison(<emphasis role="keywordtype">double</emphasis>&#32;lhs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;rhs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;margin)&#32;{
7868 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(lhs&#32;+&#32;margin&#32;&gt;=&#32;rhs)&#32;&amp;&amp;&#32;(rhs&#32;+&#32;margin&#32;&gt;=&#32;lhs);
7869 }
7870 
7871 }
7872 
7873 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
7874 <emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
7875 
7876 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_detail_1_1_approx_1a1a8618ea8db08c66bd3d9fe8f74b957a">Approx::Approx</link>&#32;(&#32;<emphasis role="keywordtype">double</emphasis>&#32;value&#32;)
7877 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_epsilon(&#32;std::numeric_limits&lt;float&gt;::epsilon()*100&#32;),
7878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_margin(&#32;0.0&#32;),
7879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_scale(&#32;0.0&#32;),
7880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_value(&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>&#32;)
7881 &#32;&#32;&#32;&#32;{}
7882 
7883 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link>&#32;Approx::custom()&#32;{
7884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1_1_matchers_1a02bf172177011d09780a98635dc5a124">Approx</link>(&#32;0&#32;);
7885 &#32;&#32;&#32;&#32;}
7886 
7887 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link>&#32;Approx::operator-()<emphasis role="keyword">&#32;const&#32;</emphasis>{
7888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;temp(*<emphasis role="keyword">this</emphasis>);
7889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;temp.m_value&#32;=&#32;-temp.m_value;
7890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;temp;
7891 &#32;&#32;&#32;&#32;}
7892 
7893 &#32;&#32;&#32;&#32;std::string&#32;Approx::toString()<emphasis role="keyword">&#32;const&#32;</emphasis>{
7894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReusableStringStream&#32;rss;
7895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Approx(&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">::Catch::Detail::stringify</link>(&#32;m_value&#32;)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;)&quot;</emphasis>;
7896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rss.str();
7897 &#32;&#32;&#32;&#32;}
7898 
7899 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Approx::equalityComparisonImpl(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;other)<emphasis role="keyword">&#32;const&#32;</emphasis>{
7900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;try&#32;with&#32;fixed&#32;margin,&#32;then&#32;compute&#32;margin&#32;based&#32;on&#32;epsilon,&#32;scale&#32;and&#32;Approx&apos;s&#32;value</emphasis>
7901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Thanks&#32;to&#32;Richard&#32;Harris&#32;for&#32;his&#32;help&#32;refining&#32;the&#32;scaled&#32;margin&#32;value</emphasis>
7902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;marginComparison(m_value,&#32;other,&#32;m_margin)
7903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;marginComparison(m_value,&#32;other,&#32;m_epsilon&#32;*&#32;(m_scale&#32;+&#32;std::fabs(std::isinf(m_value)?&#32;0&#32;:&#32;m_value)));
7904 &#32;&#32;&#32;&#32;}
7905 
7906 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Approx::setMargin(<emphasis role="keywordtype">double</emphasis>&#32;newMargin)&#32;{
7907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1aba552c917b9ac8604f50a914a745e974">CATCH_ENFORCE</link>(newMargin&#32;&gt;=&#32;0,
7908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;Approx::margin:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;newMargin&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>
7909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;Approx::Margin&#32;has&#32;to&#32;be&#32;non-negative.&quot;</emphasis>);
7910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_margin&#32;=&#32;newMargin;
7911 &#32;&#32;&#32;&#32;}
7912 
7913 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Approx::setEpsilon(<emphasis role="keywordtype">double</emphasis>&#32;newEpsilon)&#32;{
7914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1aba552c917b9ac8604f50a914a745e974">CATCH_ENFORCE</link>(newEpsilon&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;newEpsilon&#32;&lt;=&#32;1.0,
7915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;Approx::epsilon:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;newEpsilon&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>
7916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;Approx::epsilon&#32;has&#32;to&#32;be&#32;in&#32;[0,&#32;1]&quot;</emphasis>);
7917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_epsilon&#32;=&#32;newEpsilon;
7918 &#32;&#32;&#32;&#32;}
7919 
7920 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Detail</emphasis>
7921 
7922 <emphasis role="keyword">namespace&#32;</emphasis>literals&#32;{
7923 &#32;&#32;&#32;&#32;Detail::Approx&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;_a(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;val)&#32;{
7924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Detail::Approx(val);
7925 &#32;&#32;&#32;&#32;}
7926 &#32;&#32;&#32;&#32;Detail::Approx&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;_a(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;val)&#32;{
7927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Detail::Approx(val);
7928 &#32;&#32;&#32;&#32;}
7929 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;literals</emphasis>
7930 
7931 std::string&#32;StringMaker&lt;Catch::Detail::Approx&gt;::convert(<link linkend="_class_catch_1_1_detail_1_1_approx">Catch::Detail::Approx</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;value)&#32;{
7932 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>.toString();
7933 }
7934 
7935 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
7936 <emphasis role="comment">//&#32;end&#32;catch_approx.cpp</emphasis>
7937 <emphasis role="comment">//&#32;start&#32;catch_assertionhandler.cpp</emphasis>
7938 
7939 <emphasis role="comment">//&#32;start&#32;catch_debugger.h</emphasis>
7940 
7941 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
7942 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isDebuggerActive();
7943 }
7944 
7945 <emphasis role="preprocessor">#ifdef&#32;CATCH_PLATFORM_MAC</emphasis>
7946 
7947 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;defined(__i386__)&#32;||&#32;defined(__x86_64__)</emphasis>
7948 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;CATCH_TRAP()&#32;__asm__(&quot;int&#32;$3\n&quot;&#32;:&#32;:&#32;)&#32;</emphasis><emphasis role="comment">/*&#32;NOLINT&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
7949 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#elif&#32;defined(__aarch64__)</emphasis>
7950 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;CATCH_TRAP()&#32;&#32;__asm__(&quot;.inst&#32;0xd43e0000&quot;)</emphasis>
7951 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
7952 
7953 <emphasis role="preprocessor">#elif&#32;defined(CATCH_PLATFORM_IPHONE)</emphasis>
7954 
7955 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;inline&#32;assembler</emphasis>
7956 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;defined(__i386__)&#32;||&#32;defined(__x86_64__)</emphasis>
7957 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;CATCH_TRAP()&#32;&#32;__asm__(&quot;int&#32;$3&quot;)</emphasis>
7958 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#elif&#32;defined(__aarch64__)</emphasis>
7959 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;CATCH_TRAP()&#32;&#32;__asm__(&quot;.inst&#32;0xd4200000&quot;)</emphasis>
7960 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#elif&#32;defined(__arm__)&#32;&amp;&amp;&#32;!defined(__thumb__)</emphasis>
7961 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;CATCH_TRAP()&#32;&#32;__asm__(&quot;.inst&#32;0xe7f001f0&quot;)</emphasis>
7962 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#elif&#32;defined(__arm__)&#32;&amp;&amp;&#32;&#32;defined(__thumb__)</emphasis>
7963 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;CATCH_TRAP()&#32;&#32;__asm__(&quot;.inst&#32;0xde01&quot;)</emphasis>
7964 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
7965 
7966 <emphasis role="preprocessor">#elif&#32;defined(CATCH_PLATFORM_LINUX)</emphasis>
7967 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;can&#32;use&#32;inline&#32;assembler,&#32;do&#32;it&#32;because&#32;this&#32;allows&#32;us&#32;to&#32;break</emphasis>
7968 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;directly&#32;at&#32;the&#32;location&#32;of&#32;the&#32;failing&#32;check&#32;instead&#32;of&#32;breaking&#32;inside</emphasis>
7969 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;raise()&#32;called&#32;from&#32;it,&#32;i.e.&#32;one&#32;stack&#32;frame&#32;below.</emphasis>
7970 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;defined(__GNUC__)&#32;&amp;&amp;&#32;(defined(__i386)&#32;||&#32;defined(__x86_64))</emphasis>
7971 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;CATCH_TRAP()&#32;asm&#32;volatile&#32;(&quot;int&#32;$3&quot;)&#32;</emphasis><emphasis role="comment">/*&#32;NOLINT&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
7972 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#else&#32;</emphasis><emphasis role="comment">//&#32;Fall&#32;back&#32;to&#32;the&#32;generic&#32;way.</emphasis>
7973 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#include&#32;&lt;signal.h&gt;</emphasis>
7974 
7975 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;CATCH_TRAP()&#32;raise(SIGTRAP)</emphasis>
7976 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
7977 <emphasis role="preprocessor">#elif&#32;defined(_MSC_VER)</emphasis>
7978 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;CATCH_TRAP()&#32;__debugbreak()</emphasis>
7979 <emphasis role="preprocessor">#elif&#32;defined(__MINGW32__)</emphasis>
7980 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;__declspec(dllimport)&#32;<emphasis role="keywordtype">void</emphasis>&#32;__stdcall&#32;DebugBreak();
7981 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;CATCH_TRAP()&#32;DebugBreak()</emphasis>
7982 <emphasis role="preprocessor">#endif</emphasis>
7983 
7984 <emphasis role="preprocessor">#ifndef&#32;CATCH_BREAK_INTO_DEBUGGER</emphasis>
7985 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#ifdef&#32;CATCH_TRAP</emphasis>
7986 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;CATCH_BREAK_INTO_DEBUGGER()&#32;[]{&#32;if(&#32;Catch::isDebuggerActive()&#32;)&#32;{&#32;CATCH_TRAP();&#32;}&#32;}()</emphasis>
7987 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#else</emphasis>
7988 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;CATCH_BREAK_INTO_DEBUGGER()&#32;[]{}()</emphasis>
7989 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
7990 <emphasis role="preprocessor">#endif</emphasis>
7991 
7992 <emphasis role="comment">//&#32;end&#32;catch_debugger.h</emphasis>
7993 <emphasis role="comment">//&#32;start&#32;catch_run_context.h</emphasis>
7994 
7995 <emphasis role="comment">//&#32;start&#32;catch_fatal_condition.h</emphasis>
7996 
7997 <emphasis role="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>
7998 
7999 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
8000 
8001 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Wrapper&#32;for&#32;platform-specific&#32;fatal&#32;error&#32;(signals/SEH)&#32;handlers</emphasis>
8002 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
8003 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Tries&#32;to&#32;be&#32;cooperative&#32;with&#32;other&#32;handlers,&#32;and&#32;not&#32;step&#32;over</emphasis>
8004 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;other&#32;handlers.&#32;This&#32;means&#32;that&#32;unknown&#32;structured&#32;exceptions</emphasis>
8005 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;are&#32;passed&#32;on,&#32;previous&#32;signal&#32;handlers&#32;are&#32;called,&#32;and&#32;so&#32;on.</emphasis>
8006 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
8007 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Can&#32;only&#32;be&#32;instantiated&#32;once,&#32;and&#32;assumes&#32;that&#32;once&#32;a&#32;signal</emphasis>
8008 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;caught,&#32;the&#32;binary&#32;will&#32;end&#32;up&#32;terminating.&#32;Thus,&#32;there</emphasis>
8009 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>FatalConditionHandler&#32;{
8010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;m_started&#32;=&#32;<emphasis role="keyword">false</emphasis>;
8011 
8012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Install/disengage&#32;implementation&#32;for&#32;specific&#32;platform.</emphasis>
8013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Should&#32;be&#32;if-defed&#32;to&#32;work&#32;on&#32;current&#32;platform,&#32;can&#32;assume</emphasis>
8014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;engage-disengage&#32;1:1&#32;pairing.</emphasis>
8015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;engage_platform();
8016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;disengage_platform();
8017 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
8018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Should&#32;also&#32;have&#32;platform-specific&#32;implementations&#32;as&#32;needed</emphasis>
8019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FatalConditionHandler();
8020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~FatalConditionHandler();
8021 
8022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;engage()&#32;{
8023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(!m_started&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Handler&#32;cannot&#32;be&#32;installed&#32;twice.&quot;</emphasis>);
8024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_started&#32;=&#32;<emphasis role="keyword">true</emphasis>;
8025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;engage_platform();
8026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8027 
8028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;disengage()&#32;{
8029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(m_started&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Handler&#32;cannot&#32;be&#32;uninstalled&#32;without&#32;being&#32;installed&#32;first&quot;</emphasis>);
8030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_started&#32;=&#32;<emphasis role="keyword">false</emphasis>;
8031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;disengage_platform();
8032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8033 &#32;&#32;&#32;&#32;};
8034 
8036 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>FatalConditionHandlerGuard&#32;{
8037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FatalConditionHandler*&#32;m_handler;
8038 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
8039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FatalConditionHandlerGuard(FatalConditionHandler*&#32;handler):
8040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_handler(handler)&#32;{
8041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_handler-&gt;engage();
8042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~FatalConditionHandlerGuard()&#32;{
8044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_handler-&gt;disengage();
8045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8046 &#32;&#32;&#32;&#32;};
8047 
8048 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
8049 
8050 <emphasis role="comment">//&#32;end&#32;catch_fatal_condition.h</emphasis>
8051 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
8052 
8053 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
8054 
8055 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>IMutableContext;
8056 
8058 
8059 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>RunContext&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;IResultCapture,&#32;<emphasis role="keyword">public</emphasis>&#32;IRunner&#32;{
8060 
8061 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
8062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RunContext(&#32;RunContext&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
8063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RunContext&amp;&#32;operator&#32;=(&#32;RunContext&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
8064 
8065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;RunContext(&#32;IConfigPtr&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_config,&#32;IStreamingReporterPtr&amp;&amp;&#32;reporter&#32;);
8066 
8067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~RunContext()&#32;<emphasis role="keyword">override</emphasis>;
8068 
8069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testGroupStarting(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testSpec,&#32;std::size_t&#32;groupIndex,&#32;std::size_t&#32;groupsCount&#32;);
8070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testGroupEnded(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testSpec,&#32;Totals&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;totals,&#32;std::size_t&#32;groupIndex,&#32;std::size_t&#32;groupsCount&#32;);
8071 
8072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Totals&#32;runTest(TestCase&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase);
8073 
8074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6">IConfigPtr</link>&#32;config()&#32;<emphasis role="keyword">const</emphasis>;
8075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IStreamingReporter&amp;&#32;reporter()&#32;<emphasis role="keyword">const</emphasis>;
8076 
8077 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:&#32;<emphasis role="comment">//&#32;IResultCapture</emphasis>
8078 
8079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assertion&#32;handlers</emphasis>
8080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;handleExpr
8081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;&#32;&#32;AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;info,
8082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ITransientExpression&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;expr,
8083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionReaction&amp;&#32;reaction&#32;)&#32;<emphasis role="keyword">override</emphasis>;
8084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;handleMessage
8085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;&#32;&#32;AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;info,
8086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultWas::OfType&#32;resultType,
8087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StringRef&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;message,
8088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionReaction&amp;&#32;reaction&#32;)&#32;<emphasis role="keyword">override</emphasis>;
8089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;handleUnexpectedExceptionNotThrown
8090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;&#32;&#32;AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;info,
8091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionReaction&amp;&#32;reaction&#32;)&#32;<emphasis role="keyword">override</emphasis>;
8092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;handleUnexpectedInflightException
8093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;&#32;&#32;AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;info,
8094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;message,
8095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionReaction&amp;&#32;reaction&#32;)&#32;<emphasis role="keyword">override</emphasis>;
8096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;handleIncomplete
8097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;&#32;&#32;AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;info&#32;)&#32;<emphasis role="keyword">override</emphasis>;
8098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;handleNonExpr
8099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;&#32;&#32;AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;info,
8100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultWas::OfType&#32;resultType,
8101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionReaction&#32;&amp;reaction&#32;)&#32;<emphasis role="keyword">override</emphasis>;
8102 
8103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;sectionStarted(&#32;SectionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;sectionInfo,&#32;Counts&amp;&#32;assertions&#32;)&#32;<emphasis role="keyword">override</emphasis>;
8104 
8105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;sectionEnded(&#32;SectionEndInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;endInfo&#32;)&#32;<emphasis role="keyword">override</emphasis>;
8106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;sectionEndedEarly(&#32;SectionEndInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;endInfo&#32;)&#32;<emphasis role="keyword">override</emphasis>;
8107 
8108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1_1_generators_1ac1fe3550c5f97370fc6729e04d7571b8">acquireGeneratorTracker</link>(&#32;StringRef&#32;generatorName,&#32;SourceLineInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lineInfo&#32;)&#32;-&gt;&#32;IGeneratorTracker&amp;&#32;<emphasis role="keyword">override</emphasis>;
8109 
8110 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</emphasis>
8111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;benchmarkPreparing(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name&#32;)&#32;<emphasis role="keyword">override</emphasis>;
8112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;benchmarkStarting(&#32;BenchmarkInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;info&#32;)&#32;<emphasis role="keyword">override</emphasis>;
8113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;benchmarkEnded(&#32;BenchmarkStats&lt;&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;stats&#32;)&#32;<emphasis role="keyword">override</emphasis>;
8114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;benchmarkFailed(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;error&#32;)&#32;<emphasis role="keyword">override</emphasis>;
8115 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_ENABLE_BENCHMARKING</emphasis>
8116 
8117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;pushScopedMessage(&#32;MessageInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;message&#32;)&#32;<emphasis role="keyword">override</emphasis>;
8118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;popScopedMessage(&#32;MessageInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;message&#32;)&#32;<emphasis role="keyword">override</emphasis>;
8119 
8120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;emplaceUnscopedMessage(&#32;MessageBuilder&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;builder&#32;)&#32;<emphasis role="keyword">override</emphasis>;
8121 
8122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;getCurrentTestName()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
8123 
8124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;AssertionResult*&#32;getLastResult()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
8125 
8126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;exceptionEarlyReported()&#32;<emphasis role="keyword">override</emphasis>;
8127 
8128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;handleFatalErrorCondition(&#32;StringRef&#32;message&#32;)&#32;<emphasis role="keyword">override</emphasis>;
8129 
8130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;lastAssertionPassed()&#32;<emphasis role="keyword">override</emphasis>;
8131 
8132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;assertionPassed()&#32;<emphasis role="keyword">override</emphasis>;
8133 
8134 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
8135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;!TBD&#32;We&#32;need&#32;to&#32;do&#32;this&#32;another&#32;way!</emphasis>
8136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;aborting()&#32;const&#32;final;
8137 
8138 &#32;&#32;&#32;&#32;private:
8139 
8140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;runCurrentTest(&#32;std::<emphasis role="keywordtype">string</emphasis>&amp;&#32;redirectedCout,&#32;std::<emphasis role="keywordtype">string</emphasis>&amp;&#32;redirectedCerr&#32;);
8141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;invokeActiveTestCase();
8142 
8143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;resetAssertionInfo();
8144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;testForMissingAssertions(&#32;Counts&amp;&#32;assertions&#32;);
8145 
8146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;assertionEnded(&#32;AssertionResult&#32;const&amp;&#32;result&#32;);
8147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;reportExpr
8148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;&#32;&#32;AssertionInfo&#32;const&#32;&amp;info,
8149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultWas::OfType&#32;resultType,
8150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ITransientExpression&#32;const&#32;*expr,
8151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;negated&#32;);
8152 
8153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;populateReaction(&#32;AssertionReaction&amp;&#32;reaction&#32;);
8154 
8155 &#32;&#32;&#32;&#32;private:
8156 
8157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;handleUnfinishedSections();
8158 
8159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestRunInfo&#32;m_runInfo;
8160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IMutableContext&amp;&#32;m_context;
8161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestCase&#32;const*&#32;m_activeTestCase&#32;=&#32;<emphasis role="keywordtype">nullptr</emphasis>;
8162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ITracker*&#32;m_testCaseTracker&#32;=&#32;<emphasis role="keywordtype">nullptr</emphasis>;
8163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Option&lt;AssertionResult&gt;&#32;m_lastResult;
8164 
8165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IConfigPtr&#32;m_config;
8166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Totals&#32;m_totals;
8167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IStreamingReporterPtr&#32;m_reporter;
8168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;MessageInfo&gt;&#32;m_messages;
8169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;ScopedMessage&gt;&#32;m_messageScopes;&#32;<emphasis role="comment">/*&#32;Keeps&#32;owners&#32;of&#32;so-called&#32;unscoped&#32;messages.&#32;*/</emphasis>
8170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionInfo&#32;m_lastAssertionInfo;
8171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;SectionEndInfo&gt;&#32;m_unfinishedSections;
8172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;ITracker*&gt;&#32;m_activeSections;
8173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TrackerContext&#32;m_trackerContext;
8174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FatalConditionHandler&#32;m_fatalConditionhandler;
8175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;m_lastAssertionPassed&#32;=&#32;false;
8176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;m_shouldReportUnexpected&#32;=&#32;true;
8177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;m_includeSuccessfulResults;
8178 &#32;&#32;&#32;&#32;};
8179 
8180 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;seedRng(IConfig&#32;const&amp;&#32;config);
8181 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;rngSeed();
8182 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
8183 
8184 <emphasis role="comment">//&#32;end&#32;catch_run_context.h</emphasis>
8185 namespace&#32;<link linkend="_namespace_catch">Catch</link>&#32;{
8186 
8187 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>{
8188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_catch_8h_1aae0cdd5d2f0ac242b9ab18b0f66ba26e">operator &lt;&lt;</link>(&#32;std::ostream&amp;&#32;os,&#32;ITransientExpression&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;expr&#32;)&#32;-&gt;&#32;std::ostream&amp;&#32;{
8189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expr.streamReconstructedExpression(&#32;os&#32;);
8190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
8191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8192 &#32;&#32;&#32;&#32;}
8193 
8194 &#32;&#32;&#32;&#32;LazyExpression::LazyExpression(&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isNegated&#32;)
8195 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_isNegated(&#32;isNegated&#32;)
8196 &#32;&#32;&#32;&#32;{}
8197 
8198 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_lazy_expression_1a47186c2487bd4bf871e870ba8048553a">LazyExpression::LazyExpression</link>(&#32;LazyExpression&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other&#32;)&#32;:&#32;m_isNegated(&#32;other.m_isNegated&#32;)&#32;{}
8199 
8200 &#32;&#32;&#32;&#32;LazyExpression::operator&#32;bool()<emphasis role="keyword">&#32;const&#32;</emphasis>{
8201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_transientExpression&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>;
8202 &#32;&#32;&#32;&#32;}
8203 
8204 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1a8c8ea1f66bc1cdc3e1254ed7fa57c06d">operator &lt;&lt; </link>(&#32;std::ostream&amp;&#32;os,&#32;LazyExpression&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lazyExpr&#32;)&#32;-&gt;&#32;std::ostream&amp;&#32;{
8205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;lazyExpr.m_isNegated&#32;)
8206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;!&quot;</emphasis>;
8207 
8208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;lazyExpr&#32;)&#32;{
8209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;lazyExpr.m_isNegated&#32;&amp;&amp;&#32;lazyExpr.m_transientExpression-&gt;isBinaryExpression()&#32;)
8210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;(&quot;</emphasis>&#32;&lt;&lt;&#32;*lazyExpr.m_transientExpression&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>;
8211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
8212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;*lazyExpr.m_transientExpression;
8213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
8215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;{**&#32;error&#32;-&#32;unchecked&#32;empty&#32;expression&#32;requested&#32;**}&quot;</emphasis>;
8216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
8218 &#32;&#32;&#32;&#32;}
8219 
8220 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_assertion_handler_1a32efbb1b56b71d758d4c2094bac1f1a9">AssertionHandler::AssertionHandler</link>
8221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;&#32;&#32;StringRef&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;macroName,
8222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLineInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lineInfo,
8223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StringRef&#32;capturedExpression,
8224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8">ResultDisposition::Flags</link>&#32;resultDisposition&#32;)
8225 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_assertionInfo{&#32;macroName,&#32;lineInfo,&#32;capturedExpression,&#32;resultDisposition&#32;},
8226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_resultCapture(&#32;<link linkend="_namespace_catch_1af718eeab870712f292ed8dc6ee3f6488">getResultCapture</link>()&#32;)
8227 &#32;&#32;&#32;&#32;{}
8228 
8229 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_assertion_handler_1a2ef387e567bad90ec6e4b5bf5c367388">AssertionHandler::handleExpr</link>(&#32;ITransientExpression&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;expr&#32;)&#32;{
8230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_assertion_handler_1aea5283ee36124ce5c51dc2a697b22a39">m_resultCapture</link>.<link linkend="_struct_catch_1_1_i_result_capture_1a59a2b05391e464954575d2afb6d5d607">handleExpr</link>(&#32;<link linkend="_class_catch_1_1_assertion_handler_1ad171e8724bb771d97949b7270f400303">m_assertionInfo</link>,&#32;expr,&#32;<link linkend="_class_catch_1_1_assertion_handler_1a8203c08a43a3761b5f400ee6587fad55">m_reaction</link>&#32;);
8231 &#32;&#32;&#32;&#32;}
8232 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_assertion_handler_1abdb4c180ed83ec2858b2fb87712c516d">AssertionHandler::handleMessage</link>(<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link>&#32;resultType,&#32;StringRef&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;message)&#32;{
8233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_assertion_handler_1aea5283ee36124ce5c51dc2a697b22a39">m_resultCapture</link>.<link linkend="_struct_catch_1_1_i_result_capture_1a21788ebc64571abf322b80c8cc51794d">handleMessage</link>(&#32;<link linkend="_class_catch_1_1_assertion_handler_1ad171e8724bb771d97949b7270f400303">m_assertionInfo</link>,&#32;resultType,&#32;message,&#32;<link linkend="_class_catch_1_1_assertion_handler_1a8203c08a43a3761b5f400ee6587fad55">m_reaction</link>&#32;);
8234 &#32;&#32;&#32;&#32;}
8235 
8236 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_assertion_handler_1a193bb3999494c46457f3059184c6b251">AssertionHandler::allowThrows</link>()&#32;const&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{
8237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1a228a625318bb6183842e394eeba17d50">getCurrentContext</link>().<link linkend="_struct_catch_1_1_i_context_1ad72743ae753feab0a6f5505f26f79ced">getConfig</link>()-&gt;allowThrows();
8238 &#32;&#32;&#32;&#32;}
8239 
8240 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_assertion_handler_1a878a9eb828d8a1863c8dcb6575f6f40e">AssertionHandler::complete</link>()&#32;{
8241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_assertion_handler_1a6756bd5395c0ddd28764a9fb4612d5e4">setCompleted</link>();
8242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_class_catch_1_1_assertion_handler_1a8203c08a43a3761b5f400ee6587fad55">m_reaction</link>.<link linkend="_struct_catch_1_1_assertion_reaction_1adcf30fb90ff20d9789df78d424652497">shouldDebugBreak</link>&#32;)&#32;{
8243 
8244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;you&#32;find&#32;your&#32;debugger&#32;stopping&#32;you&#32;here&#32;then&#32;go&#32;one&#32;level&#32;up&#32;on&#32;the</emphasis>
8245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;call-stack&#32;for&#32;the&#32;code&#32;that&#32;caused&#32;it&#32;(typically&#32;a&#32;failed&#32;assertion)</emphasis>
8246 
8247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(To&#32;go&#32;back&#32;to&#32;the&#32;test&#32;and&#32;change&#32;execution,&#32;jump&#32;over&#32;the&#32;throw,&#32;next)</emphasis>
8248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_BREAK_INTO_DEBUGGER();
8249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_catch_1_1_assertion_handler_1a8203c08a43a3761b5f400ee6587fad55">m_reaction</link>.<link linkend="_struct_catch_1_1_assertion_reaction_1a82c8d95a2c1b6a331bde66982a8e090f">shouldThrow</link>)&#32;{
8251 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</emphasis>
8252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<link linkend="_struct_catch_1_1_test_failure_exception">Catch::TestFailureException</link>();
8253 <emphasis role="preprocessor">#else</emphasis>
8254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1ad9884641eb178d2628cf3ad19c394f47">CATCH_ERROR</link>(&#32;<emphasis role="stringliteral">&quot;Test&#32;failure&#32;requires&#32;aborting&#32;test!&quot;</emphasis>&#32;);
8255 <emphasis role="preprocessor">#endif</emphasis>
8256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8257 &#32;&#32;&#32;&#32;}
8258 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_assertion_handler_1a6756bd5395c0ddd28764a9fb4612d5e4">AssertionHandler::setCompleted</link>()&#32;{
8259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_assertion_handler_1a5a756818dff781c155e8eb970d1d4c68">m_completed</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
8260 &#32;&#32;&#32;&#32;}
8261 
8262 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_assertion_handler_1aa2504dad6a91f3645e5f52c932c11270">AssertionHandler::handleUnexpectedInflightException</link>()&#32;{
8263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_assertion_handler_1aea5283ee36124ce5c51dc2a697b22a39">m_resultCapture</link>.<link linkend="_struct_catch_1_1_i_result_capture_1afc97bc69829185222f955ebeef97adfe">handleUnexpectedInflightException</link>(&#32;<link linkend="_class_catch_1_1_assertion_handler_1ad171e8724bb771d97949b7270f400303">m_assertionInfo</link>,&#32;<link linkend="_namespace_catch_1adafff91485eeeeb9e9333f317cc0e3b1">Catch::translateActiveException</link>(),&#32;<link linkend="_class_catch_1_1_assertion_handler_1a8203c08a43a3761b5f400ee6587fad55">m_reaction</link>&#32;);
8264 &#32;&#32;&#32;&#32;}
8265 
8266 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_assertion_handler_1ab6caf765764a4064e90fce829eec201d">AssertionHandler::handleExceptionThrownAsExpected</link>()&#32;{
8267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_assertion_handler_1aea5283ee36124ce5c51dc2a697b22a39">m_resultCapture</link>.<link linkend="_struct_catch_1_1_i_result_capture_1ab7dbdf8aa28427119583e24dbb302c63">handleNonExpr</link>(<link linkend="_class_catch_1_1_assertion_handler_1ad171e8724bb771d97949b7270f400303">m_assertionInfo</link>,&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efae7cbe89bb9ec7ece9b44d48b63d01b63">ResultWas::Ok</link>,&#32;<link linkend="_class_catch_1_1_assertion_handler_1a8203c08a43a3761b5f400ee6587fad55">m_reaction</link>);
8268 &#32;&#32;&#32;&#32;}
8269 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_assertion_handler_1a51e4936e3af43b74690cedae6d2e297a">AssertionHandler::handleExceptionNotThrownAsExpected</link>()&#32;{
8270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_assertion_handler_1aea5283ee36124ce5c51dc2a697b22a39">m_resultCapture</link>.<link linkend="_struct_catch_1_1_i_result_capture_1ab7dbdf8aa28427119583e24dbb302c63">handleNonExpr</link>(<link linkend="_class_catch_1_1_assertion_handler_1ad171e8724bb771d97949b7270f400303">m_assertionInfo</link>,&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efae7cbe89bb9ec7ece9b44d48b63d01b63">ResultWas::Ok</link>,&#32;<link linkend="_class_catch_1_1_assertion_handler_1a8203c08a43a3761b5f400ee6587fad55">m_reaction</link>);
8271 &#32;&#32;&#32;&#32;}
8272 
8273 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_assertion_handler_1a7764d0adb6ed5eeb10964f6abc02fab1">AssertionHandler::handleUnexpectedExceptionNotThrown</link>()&#32;{
8274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_assertion_handler_1aea5283ee36124ce5c51dc2a697b22a39">m_resultCapture</link>.<link linkend="_struct_catch_1_1_i_result_capture_1a6382ed20486e2d9a020da971c6d5c53d">handleUnexpectedExceptionNotThrown</link>(&#32;<link linkend="_class_catch_1_1_assertion_handler_1ad171e8724bb771d97949b7270f400303">m_assertionInfo</link>,&#32;<link linkend="_class_catch_1_1_assertion_handler_1a8203c08a43a3761b5f400ee6587fad55">m_reaction</link>&#32;);
8275 &#32;&#32;&#32;&#32;}
8276 
8277 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_assertion_handler_1a67a194d5518f307c4a16faa03a7f7442">AssertionHandler::handleThrowingCallSkipped</link>()&#32;{
8278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_assertion_handler_1aea5283ee36124ce5c51dc2a697b22a39">m_resultCapture</link>.<link linkend="_struct_catch_1_1_i_result_capture_1ab7dbdf8aa28427119583e24dbb302c63">handleNonExpr</link>(<link linkend="_class_catch_1_1_assertion_handler_1ad171e8724bb771d97949b7270f400303">m_assertionInfo</link>,&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efae7cbe89bb9ec7ece9b44d48b63d01b63">ResultWas::Ok</link>,&#32;<link linkend="_class_catch_1_1_assertion_handler_1a8203c08a43a3761b5f400ee6587fad55">m_reaction</link>);
8279 &#32;&#32;&#32;&#32;}
8280 
8281 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;the&#32;overload&#32;that&#32;takes&#32;a&#32;string&#32;and&#32;infers&#32;the&#32;Equals&#32;matcher&#32;from&#32;it</emphasis>
8282 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;more&#32;general&#32;overload,&#32;that&#32;takes&#32;any&#32;string&#32;matcher,&#32;is&#32;in&#32;catch_capture_matchers.cpp</emphasis>
8283 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1aea6f8ff3b3838829d4a61694e4bc41ca">handleExceptionMatchExpr</link>(&#32;AssertionHandler&amp;&#32;handler,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str,&#32;StringRef&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;matcherString&#32;&#32;)&#32;{
8284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1aea6f8ff3b3838829d4a61694e4bc41ca">handleExceptionMatchExpr</link>(&#32;handler,&#32;<link linkend="_namespace_catch_1_1_matchers_1af8af7dfc338335ed4c788cb1b37fc59f">Matchers::Equals</link>(&#32;str&#32;),&#32;matcherString&#32;);
8285 &#32;&#32;&#32;&#32;}
8286 
8287 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
8288 <emphasis role="comment">//&#32;end&#32;catch_assertionhandler.cpp</emphasis>
8289 <emphasis role="comment">//&#32;start&#32;catch_assertionresult.cpp</emphasis>
8290 
8291 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
8292 &#32;&#32;&#32;&#32;AssertionResultData::AssertionResultData(<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link>&#32;_resultType,&#32;LazyExpression&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;_lazyExpression):
8293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lazyExpression(_lazyExpression),
8294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resultType(_resultType)&#32;{}
8295 
8296 &#32;&#32;&#32;&#32;std::string&#32;AssertionResultData::reconstructExpression()<emphasis role="keyword">&#32;const&#32;</emphasis>{
8297 
8298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;reconstructedExpression.empty()&#32;)&#32;{
8299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;lazyExpression&#32;)&#32;{
8300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReusableStringStream&#32;rss;
8301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;lazyExpression;
8302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reconstructedExpression&#32;=&#32;rss.str();
8303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;reconstructedExpression;
8306 &#32;&#32;&#32;&#32;}
8307 
8308 &#32;&#32;&#32;&#32;AssertionResult::AssertionResult(&#32;AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;info,&#32;AssertionResultData&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;data&#32;)
8309 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_info(&#32;info&#32;),
8310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_resultData(&#32;data&#32;)
8311 &#32;&#32;&#32;&#32;{}
8312 
8313 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Result&#32;was&#32;a&#32;success</emphasis>
8314 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AssertionResult::succeeded()<emphasis role="keyword">&#32;const&#32;</emphasis>{
8315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1a5205869c81c06d3460759cb86676ae68">Catch::isOk</link>(&#32;m_resultData.resultType&#32;);
8316 &#32;&#32;&#32;&#32;}
8317 
8318 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Result&#32;was&#32;a&#32;success,&#32;or&#32;failure&#32;is&#32;suppressed</emphasis>
8319 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AssertionResult::isOk()<emphasis role="keyword">&#32;const&#32;</emphasis>{
8320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1a5205869c81c06d3460759cb86676ae68">Catch::isOk</link>(&#32;m_resultData.resultType&#32;)&#32;||&#32;<link linkend="_namespace_catch_1ab91eb13081203d634fe48d3d2ab386d7">shouldSuppressFailure</link>(&#32;m_info.resultDisposition&#32;);
8321 &#32;&#32;&#32;&#32;}
8322 
8323 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link>&#32;AssertionResult::getResultType()<emphasis role="keyword">&#32;const&#32;</emphasis>{
8324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_resultData.resultType;
8325 &#32;&#32;&#32;&#32;}
8326 
8327 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AssertionResult::hasExpression()<emphasis role="keyword">&#32;const&#32;</emphasis>{
8328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!m_info.capturedExpression.empty();
8329 &#32;&#32;&#32;&#32;}
8330 
8331 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AssertionResult::hasMessage()<emphasis role="keyword">&#32;const&#32;</emphasis>{
8332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!m_resultData.message.empty();
8333 &#32;&#32;&#32;&#32;}
8334 
8335 &#32;&#32;&#32;&#32;std::string&#32;AssertionResult::getExpression()<emphasis role="keyword">&#32;const&#32;</emphasis>{
8336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Possibly&#32;overallocating&#32;by&#32;3&#32;characters&#32;should&#32;be&#32;basically&#32;free</emphasis>
8337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;expr;&#32;expr.reserve(m_info.capturedExpression.size()&#32;+&#32;3);
8338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespace_catch_1a93ef4e3e307a2021ca0d41b32c0e54b0">isFalseTest</link>(m_info.resultDisposition))&#32;{
8339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expr&#32;+=&#32;&quot;!(&quot;;
8340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expr&#32;+=&#32;m_info.capturedExpression;
8342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespace_catch_1a93ef4e3e307a2021ca0d41b32c0e54b0">isFalseTest</link>(m_info.resultDisposition))&#32;{
8343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expr&#32;+=&#32;&apos;)&apos;;
8344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;expr;
8346 &#32;&#32;&#32;&#32;}
8347 
8348 &#32;&#32;&#32;&#32;std::string&#32;AssertionResult::getExpressionInMacro()<emphasis role="keyword">&#32;const&#32;</emphasis>{
8349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;expr;
8350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_info.macroName.empty()&#32;)
8351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expr&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::string<emphasis role="keyword">&gt;</emphasis>(m_info.capturedExpression);
8352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
8353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expr.reserve(&#32;m_info.macroName.size()&#32;+&#32;m_info.capturedExpression.size()&#32;+&#32;4&#32;);
8354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expr&#32;+=&#32;m_info.macroName;
8355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expr&#32;+=&#32;&quot;(&#32;&quot;;
8356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expr&#32;+=&#32;m_info.capturedExpression;
8357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expr&#32;+=&#32;&quot;&#32;)&quot;;
8358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;expr;
8360 &#32;&#32;&#32;&#32;}
8361 
8362 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AssertionResult::hasExpandedExpression()<emphasis role="keyword">&#32;const&#32;</emphasis>{
8363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;hasExpression()&#32;&amp;&amp;&#32;getExpandedExpression()&#32;!=&#32;getExpression();
8364 &#32;&#32;&#32;&#32;}
8365 
8366 &#32;&#32;&#32;&#32;std::string&#32;AssertionResult::getExpandedExpression()<emphasis role="keyword">&#32;const&#32;</emphasis>{
8367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;expr&#32;=&#32;m_resultData.reconstructExpression();
8368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;expr.empty()
8369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;getExpression()
8370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;expr;
8371 &#32;&#32;&#32;&#32;}
8372 
8373 &#32;&#32;&#32;&#32;std::string&#32;AssertionResult::getMessage()<emphasis role="keyword">&#32;const&#32;</emphasis>{
8374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_resultData.message;
8375 &#32;&#32;&#32;&#32;}
8376 &#32;&#32;&#32;&#32;SourceLineInfo&#32;AssertionResult::getSourceInfo()<emphasis role="keyword">&#32;const&#32;</emphasis>{
8377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_info.lineInfo;
8378 &#32;&#32;&#32;&#32;}
8379 
8380 &#32;&#32;&#32;&#32;StringRef&#32;AssertionResult::getTestMacroName()<emphasis role="keyword">&#32;const&#32;</emphasis>{
8381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_info.macroName;
8382 &#32;&#32;&#32;&#32;}
8383 
8384 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
8385 <emphasis role="comment">//&#32;end&#32;catch_assertionresult.cpp</emphasis>
8386 <emphasis role="comment">//&#32;start&#32;catch_capture_matchers.cpp</emphasis>
8387 
8388 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
8389 
8390 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_catch_1a6c439c538de1e945919d96fb986b42eb">StringMatcher</link>&#32;=&#32;Matchers::Impl::MatcherBase&lt;std::string&gt;;
8391 
8392 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;the&#32;general&#32;overload&#32;that&#32;takes&#32;a&#32;any&#32;string&#32;matcher</emphasis>
8393 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;There&#32;is&#32;another&#32;overload,&#32;in&#32;catch_assertionhandler.h/.cpp,&#32;that&#32;only&#32;takes&#32;a&#32;string&#32;and&#32;infers</emphasis>
8394 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;Equals&#32;matcher&#32;(so&#32;the&#32;header&#32;does&#32;not&#32;mention&#32;matchers)</emphasis>
8395 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1aea6f8ff3b3838829d4a61694e4bc41ca">handleExceptionMatchExpr</link>(&#32;AssertionHandler&amp;&#32;handler,&#32;<link linkend="_namespace_catch_1a6c439c538de1e945919d96fb986b42eb">StringMatcher</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;matcher,&#32;StringRef&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;matcherString&#32;&#32;)&#32;{
8396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;exceptionMessage&#32;=&#32;<link linkend="_namespace_catch_1adafff91485eeeeb9e9333f317cc0e3b1">Catch::translateActiveException</link>();
8397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MatchExpr&lt;std::string,&#32;StringMatcher&#32;const&amp;&gt;&#32;expr(&#32;exceptionMessage,&#32;matcher,&#32;matcherString&#32;);
8398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handler.handleExpr(&#32;expr&#32;);
8399 &#32;&#32;&#32;&#32;}
8400 
8401 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
8402 <emphasis role="comment">//&#32;end&#32;catch_capture_matchers.cpp</emphasis>
8403 <emphasis role="comment">//&#32;start&#32;catch_commandline.cpp</emphasis>
8404 
8405 <emphasis role="comment">//&#32;start&#32;catch_commandline.h</emphasis>
8406 
8407 <emphasis role="comment">//&#32;start&#32;catch_clara.h</emphasis>
8408 
8409 <emphasis role="comment">//&#32;Use&#32;Catch&apos;s&#32;value&#32;for&#32;console&#32;width&#32;(store&#32;Clara&apos;s&#32;off&#32;to&#32;the&#32;side,&#32;if&#32;present)</emphasis>
8410 <emphasis role="preprocessor">#ifdef&#32;CLARA_CONFIG_CONSOLE_WIDTH</emphasis>
8411 <emphasis role="preprocessor">#define&#32;CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH&#32;CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH</emphasis>
8412 <emphasis role="preprocessor">#undef&#32;CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH</emphasis>
8413 <emphasis role="preprocessor">#endif</emphasis>
8414 <emphasis role="preprocessor">#define&#32;CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH&#32;CATCH_CONFIG_CONSOLE_WIDTH-1</emphasis>
8415 
8416 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
8417 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;push</emphasis>
8418 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wweak-vtables&quot;</emphasis>
8419 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wexit-time-destructors&quot;</emphasis>
8420 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wshadow&quot;</emphasis>
8421 <emphasis role="preprocessor">#endif</emphasis>
8422 
8423 <emphasis role="comment">//&#32;start&#32;clara.hpp</emphasis>
8424 <emphasis role="comment">//&#32;Copyright&#32;2017&#32;Two&#32;Blue&#32;Cubes&#32;Ltd.&#32;All&#32;rights&#32;reserved.</emphasis>
8425 <emphasis role="comment">//</emphasis>
8426 <emphasis role="comment">//&#32;Distributed&#32;under&#32;the&#32;Boost&#32;Software&#32;License,&#32;Version&#32;1.0.&#32;(See&#32;accompanying</emphasis>
8427 <emphasis role="comment">//&#32;file&#32;LICENSE_1_0.txt&#32;or&#32;copy&#32;at&#32;http://www.boost.org/LICENSE_1_0.txt)</emphasis>
8428 <emphasis role="comment">//</emphasis>
8429 <emphasis role="comment">//&#32;See&#32;https://github.com/philsquared/Clara&#32;for&#32;more&#32;details</emphasis>
8430 
8431 <emphasis role="comment">//&#32;Clara&#32;v1.1.5</emphasis>
8432 
8433 
8434 <emphasis role="preprocessor">#ifndef&#32;CATCH_CLARA_CONFIG_CONSOLE_WIDTH</emphasis>
8435 <emphasis role="preprocessor">#define&#32;CATCH_CLARA_CONFIG_CONSOLE_WIDTH&#32;80</emphasis>
8436 <emphasis role="preprocessor">#endif</emphasis>
8437 
8438 <emphasis role="preprocessor">#ifndef&#32;CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH</emphasis>
8439 <emphasis role="preprocessor">#define&#32;CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH&#32;CATCH_CLARA_CONFIG_CONSOLE_WIDTH</emphasis>
8440 <emphasis role="preprocessor">#endif</emphasis>
8441 
8442 <emphasis role="preprocessor">#ifndef&#32;CLARA_CONFIG_OPTIONAL_TYPE</emphasis>
8443 <emphasis role="preprocessor">#ifdef&#32;__has_include</emphasis>
8444 <emphasis role="preprocessor">#if&#32;__has_include(&lt;optional&gt;)&#32;&amp;&amp;&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
8445 <emphasis role="preprocessor">#include&#32;&lt;optional&gt;</emphasis>
8446 <emphasis role="preprocessor">#define&#32;CLARA_CONFIG_OPTIONAL_TYPE&#32;std::optional</emphasis>
8447 <emphasis role="preprocessor">#endif</emphasis>
8448 <emphasis role="preprocessor">#endif</emphasis>
8449 <emphasis role="preprocessor">#endif</emphasis>
8450 
8451 <emphasis role="comment">//&#32;-----------&#32;#included&#32;from&#32;clara_textflow.hpp&#32;-----------</emphasis>
8452 
8453 <emphasis role="comment">//&#32;TextFlowCpp</emphasis>
8454 <emphasis role="comment">//</emphasis>
8455 <emphasis role="comment">//&#32;A&#32;single-header&#32;library&#32;for&#32;wrapping&#32;and&#32;laying&#32;out&#32;basic&#32;text,&#32;by&#32;Phil&#32;Nash</emphasis>
8456 <emphasis role="comment">//</emphasis>
8457 <emphasis role="comment">//&#32;Distributed&#32;under&#32;the&#32;Boost&#32;Software&#32;License,&#32;Version&#32;1.0.&#32;(See&#32;accompanying</emphasis>
8458 <emphasis role="comment">//&#32;file&#32;LICENSE.txt&#32;or&#32;copy&#32;at&#32;http://www.boost.org/LICENSE_1_0.txt)</emphasis>
8459 <emphasis role="comment">//</emphasis>
8460 <emphasis role="comment">//&#32;This&#32;project&#32;is&#32;hosted&#32;at&#32;https://github.com/philsquared/textflowcpp</emphasis>
8461 
8462 
8463 <emphasis role="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>
8464 <emphasis role="preprocessor">#include&#32;&lt;ostream&gt;</emphasis>
8465 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
8466 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
8467 
8468 <emphasis role="preprocessor">#ifndef&#32;CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH</emphasis>
8469 <emphasis role="preprocessor">#define&#32;CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH&#32;80</emphasis>
8470 <emphasis role="preprocessor">#endif</emphasis>
8471 
8472 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
8473 <emphasis role="keyword">namespace&#32;</emphasis>clara&#32;{
8474 <emphasis role="keyword">namespace&#32;</emphasis>TextFlow&#32;{
8475 
8476 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;isWhitespace(<emphasis role="keywordtype">char</emphasis>&#32;c)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{
8477 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;chars&#32;=&#32;<emphasis role="stringliteral">&quot;&#32;\t\n\r&quot;</emphasis>;
8478 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;chars.find(c)&#32;!=&#32;std::string::npos;
8479 }
8480 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;isBreakableBefore(<emphasis role="keywordtype">char</emphasis>&#32;c)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{
8481 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;chars&#32;=&#32;<emphasis role="stringliteral">&quot;[({&lt;|&quot;</emphasis>;
8482 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;chars.find(c)&#32;!=&#32;std::string::npos;
8483 }
8484 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;isBreakableAfter(<emphasis role="keywordtype">char</emphasis>&#32;c)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{
8485 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;chars&#32;=&#32;<emphasis role="stringliteral">&quot;])}&gt;.,:;*+-=&amp;/\\&quot;</emphasis>;
8486 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;chars.find(c)&#32;!=&#32;std::string::npos;
8487 }
8488 
8489 <emphasis role="keyword">class&#32;</emphasis>Columns;
8490 
8491 <emphasis role="keyword">class&#32;</emphasis>Column&#32;{
8492 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;m_strings;
8493 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;m_width&#32;=&#32;CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH;
8494 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;m_indent&#32;=&#32;0;
8495 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;m_initialIndent&#32;=&#32;std::string::npos;
8496 
8497 <emphasis role="keyword">public</emphasis>:
8498 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>iterator&#32;{
8499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;Column;
8500 
8501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Column&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;m_column;
8502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;m_stringIndex&#32;=&#32;0;
8503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;m_pos&#32;=&#32;0;
8504 
8505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;m_len&#32;=&#32;0;
8506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;m_end&#32;=&#32;0;
8507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;m_suffix&#32;=&#32;<emphasis role="keyword">false</emphasis>;
8508 
8509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator(Column&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;column,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;stringIndex)
8510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_column(column),
8511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_stringIndex(stringIndex)&#32;{}
8512 
8513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;line()&#32;const&#32;-&gt;&#32;std::<emphasis role="keywordtype">string</emphasis>&#32;const&amp;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_column.m_strings[m_stringIndex];&#32;}
8514 
8515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;isBoundary(<emphasis role="keywordtype">size_t</emphasis>&#32;at)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{
8516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(at&#32;&gt;&#32;0);
8517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(at&#32;&lt;=&#32;line().size());
8518 
8519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;at&#32;==&#32;line().size()&#32;||
8520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(isWhitespace(line()[at])&#32;&amp;&amp;&#32;!isWhitespace(line()[at&#32;-&#32;1]))&#32;||
8521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isBreakableBefore(line()[at])&#32;||
8522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isBreakableAfter(line()[at&#32;-&#32;1]);
8523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8524 
8525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;calcLength()&#32;{
8526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(m_stringIndex&#32;&lt;&#32;m_column.m_strings.size());
8527 
8528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_suffix&#32;=&#32;<emphasis role="keyword">false</emphasis>;
8529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;width&#32;=&#32;m_column.m_width&#32;-&#32;indent();
8530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_end&#32;=&#32;m_pos;
8531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(line()[m_pos]&#32;==&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>)&#32;{
8532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++m_end;
8533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(m_end&#32;&lt;&#32;line().size()&#32;&amp;&amp;&#32;line()[m_end]&#32;!=&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>)
8535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++m_end;
8536 
8537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_end&#32;&lt;&#32;m_pos&#32;+&#32;width)&#32;{
8538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_len&#32;=&#32;m_end&#32;-&#32;m_pos;
8539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
8540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;len&#32;=&#32;width;
8541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(len&#32;&gt;&#32;0&#32;&amp;&amp;&#32;!isBoundary(m_pos&#32;+&#32;len))
8542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--len;
8543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(len&#32;&gt;&#32;0&#32;&amp;&amp;&#32;isWhitespace(line()[m_pos&#32;+&#32;len&#32;-&#32;1]))
8544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--len;
8545 
8546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(len&#32;&gt;&#32;0)&#32;{
8547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_len&#32;=&#32;len;
8548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
8549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_suffix&#32;=&#32;<emphasis role="keyword">true</emphasis>;
8550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_len&#32;=&#32;width&#32;-&#32;1;
8551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8554 
8555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;indent()&#32;const&#32;-&gt;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;{
8556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;initial&#32;=&#32;m_pos&#32;==&#32;0&#32;&amp;&amp;&#32;m_stringIndex&#32;==&#32;0&#32;?&#32;m_column.m_initialIndent&#32;:&#32;std::string::npos;
8557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;initial&#32;==&#32;std::string::npos&#32;?&#32;m_column.m_indent&#32;:&#32;initial;
8558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8559 
8560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;addIndentAndSuffix(std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;plain)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;std::string&#32;{
8561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string(indent(),&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>)&#32;+&#32;(m_suffix&#32;?&#32;plain&#32;+&#32;&quot;-&quot;&#32;:&#32;plain);
8562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8563 
8564 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
8565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;std::ptrdiff_t;
8566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;std::string;
8567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>pointer&#32;=&#32;value_type&#32;*&#32;;
8568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>reference&#32;=&#32;value_type&#32;&amp;&#32;;
8569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_category&#32;=&#32;std::forward_iterator_tag;
8570 
8571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;iterator(Column&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;column)&#32;:&#32;m_column(column)&#32;{
8572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(m_column.m_width&#32;&gt;&#32;m_column.m_indent);
8573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(m_column.m_initialIndent&#32;==&#32;std::string::npos&#32;||&#32;m_column.m_width&#32;&gt;&#32;m_column.m_initialIndent);
8574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;calcLength();
8575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_len&#32;==&#32;0)
8576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_stringIndex++;&#32;<emphasis role="comment">//&#32;Empty&#32;string</emphasis>
8577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8578 
8579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;operator&#32;*()&#32;const&#32;-&gt;&#32;std::<emphasis role="keywordtype">string</emphasis>&#32;{
8580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(m_stringIndex&#32;&lt;&#32;m_column.m_strings.size());
8581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(m_pos&#32;&lt;=&#32;m_end);
8582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;addIndentAndSuffix(line().substr(m_pos,&#32;m_len));
8583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8584 
8585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;operator&#32;++()&#32;-&gt;&#32;iterator&amp;&#32;{
8586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_pos&#32;+=&#32;m_len;
8587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_pos&#32;&lt;&#32;line().size()&#32;&amp;&amp;&#32;line()[m_pos]&#32;==&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>)
8588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_pos&#32;+=&#32;1;
8589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
8590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(m_pos&#32;&lt;&#32;line().size()&#32;&amp;&amp;&#32;isWhitespace(line()[m_pos]))
8591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++m_pos;
8592 
8593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_pos&#32;==&#32;line().size())&#32;{
8594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_pos&#32;=&#32;0;
8595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++m_stringIndex;
8596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_stringIndex&#32;&lt;&#32;m_column.m_strings.size())
8598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;calcLength();
8599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
8600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;operator&#32;++(<emphasis role="keywordtype">int</emphasis>)&#32;-&gt;&#32;iterator&#32;{
8602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;prev(*<emphasis role="keyword">this</emphasis>);
8603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator++();
8604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;prev;
8605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8606 
8607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;operator&#32;==(iterator&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{
8608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
8609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_pos&#32;==&#32;other.m_pos&#32;&amp;&amp;
8610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_stringIndex&#32;==&#32;other.m_stringIndex&#32;&amp;&amp;
8611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;m_column&#32;==&#32;&amp;other.m_column;
8612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;operator&#32;!=(iterator&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{
8614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!operator==(other);
8615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8616 &#32;&#32;&#32;&#32;};
8617 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>const_iterator&#32;=&#32;iterator;
8618 
8619 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;Column(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;text)&#32;{&#32;m_strings.push_back(text);&#32;}
8620 
8621 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;width(<emphasis role="keywordtype">size_t</emphasis>&#32;newWidth)&#32;-&gt;&#32;Column&amp;&#32;{
8622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(newWidth&#32;&gt;&#32;0);
8623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_width&#32;=&#32;newWidth;
8624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
8625 &#32;&#32;&#32;&#32;}
8626 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;indent(<emphasis role="keywordtype">size_t</emphasis>&#32;newIndent)&#32;-&gt;&#32;Column&amp;&#32;{
8627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_indent&#32;=&#32;newIndent;
8628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
8629 &#32;&#32;&#32;&#32;}
8630 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;initialIndent(<emphasis role="keywordtype">size_t</emphasis>&#32;newIndent)&#32;-&gt;&#32;Column&amp;&#32;{
8631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_initialIndent&#32;=&#32;newIndent;
8632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
8633 &#32;&#32;&#32;&#32;}
8634 
8635 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;width()&#32;const&#32;-&gt;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_width;&#32;}
8636 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;begin()&#32;const&#32;-&gt;&#32;iterator&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(*<emphasis role="keyword">this</emphasis>);&#32;}
8637 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;end()&#32;const&#32;-&gt;&#32;iterator&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;*<emphasis role="keyword">this</emphasis>,&#32;m_strings.size()&#32;};&#32;}
8638 
8639 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_catch_8h_1aae0cdd5d2f0ac242b9ab18b0f66ba26e">operator &lt;&lt; </link>(std::ostream&amp;&#32;os,&#32;Column&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;col)&#32;{
8640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;first&#32;=&#32;<emphasis role="keyword">true</emphasis>;
8641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;line&#32;:&#32;col)&#32;{
8642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(first)
8643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first&#32;=&#32;<emphasis role="keyword">false</emphasis>;
8644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
8645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
8646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;line;
8647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
8649 &#32;&#32;&#32;&#32;}
8650 
8651 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;operator&#32;+&#32;(Column&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other)-&gt;Columns;
8652 
8653 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;toString()&#32;const&#32;-&gt;&#32;std::<emphasis role="keywordtype">string</emphasis>&#32;{
8654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostringstream&#32;oss;
8655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oss&#32;&lt;&lt;&#32;*<emphasis role="keyword">this</emphasis>;
8656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;oss.str();
8657 &#32;&#32;&#32;&#32;}
8658 };
8659 
8660 <emphasis role="keyword">class&#32;</emphasis>Spacer&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;Column&#32;{
8661 
8662 <emphasis role="keyword">public</emphasis>:
8663 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;Spacer(<emphasis role="keywordtype">size_t</emphasis>&#32;spaceWidth)&#32;:&#32;Column(<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;{
8664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;width(spaceWidth);
8665 &#32;&#32;&#32;&#32;}
8666 };
8667 
8668 <emphasis role="keyword">class&#32;</emphasis>Columns&#32;{
8669 &#32;&#32;&#32;&#32;std::vector&lt;Column&gt;&#32;m_columns;
8670 
8671 <emphasis role="keyword">public</emphasis>:
8672 
8673 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>iterator&#32;{
8674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;Columns;
8675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>EndTag&#32;{};
8676 
8677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;Column&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;m_columns;
8678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;Column::iterator&gt;&#32;m_iterators;
8679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;m_activeIterators;
8680 
8681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator(Columns&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;columns,&#32;EndTag)
8682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_columns(columns.m_columns),
8683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_activeIterators(0)&#32;{
8684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_iterators.reserve(m_columns.size());
8685 
8686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;col&#32;:&#32;m_columns)
8687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_iterators.push_back(col.end());
8688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8689 
8690 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
8691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;std::ptrdiff_t;
8692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;std::string;
8693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>pointer&#32;=&#32;value_type&#32;*&#32;;
8694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>reference&#32;=&#32;value_type&#32;&amp;&#32;;
8695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_category&#32;=&#32;std::forward_iterator_tag;
8696 
8697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;iterator(Columns&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;columns)
8698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_columns(columns.m_columns),
8699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_activeIterators(m_columns.size())&#32;{
8700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_iterators.reserve(m_columns.size());
8701 
8702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;col&#32;:&#32;m_columns)
8703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_iterators.push_back(col.begin());
8704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8705 
8706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;operator&#32;==(iterator&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{
8707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_iterators&#32;==&#32;other.m_iterators;
8708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;operator&#32;!=(iterator&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{
8710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_iterators&#32;!=&#32;other.m_iterators;
8711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;operator&#32;*()&#32;const&#32;-&gt;&#32;std::<emphasis role="keywordtype">string</emphasis>&#32;{
8713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;row,&#32;padding;
8714 
8715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;m_columns.size();&#32;++i)&#32;{
8716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;width&#32;=&#32;m_columns[i].width();
8717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_iterators[i]&#32;!=&#32;m_columns[i].end())&#32;{
8718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;col&#32;=&#32;*m_iterators[i];
8719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;row&#32;+=&#32;padding&#32;+&#32;col;
8720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(col.size()&#32;&lt;&#32;width)
8721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding&#32;=&#32;std::string(width&#32;-&#32;col.size(),&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>);
8722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
8723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
8724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
8725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding&#32;+=&#32;std::string(width,&#32;&apos;&#32;&apos;);
8726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;row;
8729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;operator&#32;++()&#32;-&gt;&#32;iterator&amp;&#32;{
8731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;m_columns.size();&#32;++i)&#32;{
8732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_iterators[i]&#32;!=&#32;m_columns[i].end())
8733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++m_iterators[i];
8734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
8736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;operator&#32;++(<emphasis role="keywordtype">int</emphasis>)&#32;-&gt;&#32;iterator&#32;{
8738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;prev(*<emphasis role="keyword">this</emphasis>);
8739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator++();
8740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;prev;
8741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8742 &#32;&#32;&#32;&#32;};
8743 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>const_iterator&#32;=&#32;iterator;
8744 
8745 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;begin()&#32;const&#32;-&gt;&#32;iterator&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(*<emphasis role="keyword">this</emphasis>);&#32;}
8746 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;end()&#32;const&#32;-&gt;&#32;iterator&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;*<emphasis role="keyword">this</emphasis>,&#32;iterator::EndTag()&#32;};&#32;}
8747 
8748 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator += </link>(Column&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;col)&#32;-&gt;&#32;Columns&amp;&#32;{
8749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_columns.push_back(col);
8750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
8751 &#32;&#32;&#32;&#32;}
8752 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator + </link>(Column&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;col)&#32;-&gt;&#32;Columns&#32;{
8753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Columns&#32;combined&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
8754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;combined&#32;+=&#32;col;
8755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;combined;
8756 &#32;&#32;&#32;&#32;}
8757 
8758 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_namespace_catch_1a8c8ea1f66bc1cdc3e1254ed7fa57c06d">operator &lt;&lt; </link>(std::ostream&amp;&#32;os,&#32;Columns&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;cols)&#32;{
8759 
8760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;first&#32;=&#32;<emphasis role="keyword">true</emphasis>;
8761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;line&#32;:&#32;cols)&#32;{
8762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(first)
8763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first&#32;=&#32;<emphasis role="keyword">false</emphasis>;
8764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
8765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
8766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;line;
8767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
8769 &#32;&#32;&#32;&#32;}
8770 
8771 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;toString()&#32;const&#32;-&gt;&#32;std::<emphasis role="keywordtype">string</emphasis>&#32;{
8772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostringstream&#32;oss;
8773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oss&#32;&lt;&lt;&#32;*<emphasis role="keyword">this</emphasis>;
8774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;oss.str();
8775 &#32;&#32;&#32;&#32;}
8776 };
8777 
8778 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;Column::operator&#32;+&#32;(Column&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other)&#32;-&gt;&#32;Columns&#32;{
8779 &#32;&#32;&#32;&#32;Columns&#32;cols;
8780 &#32;&#32;&#32;&#32;cols&#32;+=&#32;*this;
8781 &#32;&#32;&#32;&#32;cols&#32;+=&#32;other;
8782 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cols;
8783 }
8784 }
8785 
8786 }
8787 }
8788 
8789 <emphasis role="comment">//&#32;-----------&#32;end&#32;of&#32;#include&#32;from&#32;clara_textflow.hpp&#32;-----------</emphasis>
8790 <emphasis role="comment">//&#32;...........&#32;back&#32;in&#32;clara.hpp</emphasis>
8791 
8792 <emphasis role="preprocessor">#include&#32;&lt;cctype&gt;</emphasis>
8793 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
8794 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
8795 <emphasis role="preprocessor">#include&#32;&lt;set&gt;</emphasis>
8796 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
8797 
8798 <emphasis role="preprocessor">#if&#32;!defined(CATCH_PLATFORM_WINDOWS)&#32;&amp;&amp;&#32;(&#32;defined(WIN32)&#32;||&#32;defined(__WIN32__)&#32;||&#32;defined(_WIN32)&#32;||&#32;defined(_MSC_VER)&#32;)</emphasis>
8799 <emphasis role="preprocessor">#define&#32;CATCH_PLATFORM_WINDOWS</emphasis>
8800 <emphasis role="preprocessor">#endif</emphasis>
8801 
8802 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{&#32;<emphasis role="keyword">namespace&#32;</emphasis>clara&#32;{
8803 <emphasis role="keyword">namespace&#32;</emphasis>detail&#32;{
8804 
8805 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Traits&#32;for&#32;extracting&#32;arg&#32;and&#32;return&#32;type&#32;of&#32;lambdas&#32;(for&#32;single&#32;argument&#32;lambdas)</emphasis>
8806 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;L&gt;
8807 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>UnaryLambdaTraits&#32;:&#32;UnaryLambdaTraits&lt;decltype(&#32;&amp;L::operator()&#32;)&gt;&#32;{};
8808 
8809 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ClassT,&#32;<emphasis role="keyword">typename</emphasis>&#32;ReturnT,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
8810 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>UnaryLambdaTraits&lt;ReturnT(&#32;ClassT::*&#32;)(&#32;Args...&#32;)&#32;const&gt;&#32;{
8811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isValid&#32;=&#32;<emphasis role="keyword">false</emphasis>;
8812 &#32;&#32;&#32;&#32;};
8813 
8814 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ClassT,&#32;<emphasis role="keyword">typename</emphasis>&#32;ReturnT,&#32;<emphasis role="keyword">typename</emphasis>&#32;ArgT&gt;
8815 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>UnaryLambdaTraits&lt;ReturnT(&#32;ClassT::*&#32;)(&#32;ArgT&#32;)&#32;const&gt;&#32;{
8816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isValid&#32;=&#32;<emphasis role="keyword">true</emphasis>;
8817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>ArgType&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::remove_const&lt;typename&#32;std::remove_reference&lt;ArgT&gt;::type&gt;::type;
8818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>ReturnType&#32;=&#32;ReturnT;
8819 &#32;&#32;&#32;&#32;};
8820 
8821 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>TokenStream;
8822 
8823 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Transport&#32;for&#32;raw&#32;args&#32;(copied&#32;from&#32;main&#32;args,&#32;or&#32;supplied&#32;via&#32;init&#32;list&#32;for&#32;testing)</emphasis>
8824 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>Args&#32;{
8825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;TokenStream;
8826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;m_exeName;
8827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;m_args;
8828 
8829 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
8830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args(&#32;<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*&#32;<emphasis role="keyword">const</emphasis>*&#32;argv&#32;)
8831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_exeName(argv[0]),
8832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_args(argv&#32;+&#32;1,&#32;argv&#32;+&#32;argc)&#32;{}
8833 
8834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args(&#32;std::initializer_list&lt;std::string&gt;&#32;args&#32;)
8835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_exeName(&#32;*args.begin()&#32;),
8836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_args(&#32;args.begin()+1,&#32;args.end()&#32;)
8837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
8838 
8839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;exeName()&#32;const&#32;-&gt;&#32;std::<emphasis role="keywordtype">string</emphasis>&#32;{
8840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_exeName;
8841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8842 &#32;&#32;&#32;&#32;};
8843 
8844 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Wraps&#32;a&#32;token&#32;coming&#32;from&#32;a&#32;token&#32;stream.&#32;These&#32;may&#32;not&#32;directly&#32;correspond&#32;to&#32;strings&#32;as&#32;a&#32;single&#32;string</emphasis>
8845 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;may&#32;encode&#32;an&#32;option&#32;+&#32;its&#32;argument&#32;if&#32;the&#32;:&#32;or&#32;=&#32;form&#32;is&#32;used</emphasis>
8846 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;TokenType&#32;{
8847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Option,&#32;Argument
8848 &#32;&#32;&#32;&#32;};
8849 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Token&#32;{
8850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TokenType&#32;type;
8851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;token;
8852 &#32;&#32;&#32;&#32;};
8853 
8854 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;isOptPrefix(&#32;<emphasis role="keywordtype">char</emphasis>&#32;c&#32;)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{
8855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>
8856 <emphasis role="preprocessor">#ifdef&#32;CATCH_PLATFORM_WINDOWS</emphasis>
8857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>
8858 <emphasis role="preprocessor">#endif</emphasis>
8859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;;
8860 &#32;&#32;&#32;&#32;}
8861 
8862 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Abstracts&#32;iterators&#32;into&#32;args&#32;as&#32;a&#32;stream&#32;of&#32;tokens,&#32;with&#32;option&#32;arguments&#32;uniformly&#32;handled</emphasis>
8863 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>TokenStream&#32;{
8864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>Iterator&#32;=&#32;std::vector&lt;std::string&gt;::const_iterator;
8865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Iterator&#32;it;
8866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Iterator&#32;itEnd;
8867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;Token&gt;&#32;m_tokenBuffer;
8868 
8869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;loadBuffer()&#32;{
8870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_tokenBuffer.resize(&#32;0&#32;);
8871 
8872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Skip&#32;any&#32;empty&#32;strings</emphasis>
8873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(&#32;it&#32;!=&#32;itEnd&#32;&amp;&amp;&#32;it-&gt;empty()&#32;)
8874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++it;
8875 
8876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;it&#32;!=&#32;itEnd&#32;)&#32;{
8877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;next&#32;=&#32;*it;
8878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;isOptPrefix(&#32;next[0]&#32;)&#32;)&#32;{
8879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;delimiterPos&#32;=&#32;next.find_first_of(&#32;<emphasis role="stringliteral">&quot;&#32;:=&quot;</emphasis>&#32;);
8880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;delimiterPos&#32;!=&#32;std::string::npos&#32;)&#32;{
8881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_tokenBuffer.push_back(&#32;{&#32;TokenType::Option,&#32;next.substr(&#32;0,&#32;delimiterPos&#32;)&#32;}&#32;);
8882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_tokenBuffer.push_back(&#32;{&#32;TokenType::Argument,&#32;next.substr(&#32;delimiterPos&#32;+&#32;1&#32;)&#32;}&#32;);
8883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
8884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;next[1]&#32;!=&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>&#32;&amp;&amp;&#32;next.size()&#32;&gt;&#32;2&#32;)&#32;{
8885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;opt&#32;=&#32;<emphasis role="stringliteral">&quot;-&#32;&quot;</emphasis>;
8886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;next.size();&#32;++i&#32;)&#32;{
8887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;opt[1]&#32;=&#32;next[i];
8888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_tokenBuffer.push_back(&#32;{&#32;TokenType::Option,&#32;opt&#32;}&#32;);
8889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
8891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_tokenBuffer.push_back(&#32;{&#32;TokenType::Option,&#32;next&#32;}&#32;);
8892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
8895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_tokenBuffer.push_back(&#32;{&#32;TokenType::Argument,&#32;next&#32;}&#32;);
8896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8899 
8900 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
8901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;TokenStream(&#32;Args&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;args&#32;)&#32;:&#32;TokenStream(&#32;args.m_args.begin(),&#32;args.m_args.end()&#32;)&#32;{}
8902 
8903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TokenStream(&#32;Iterator&#32;it,&#32;Iterator&#32;itEnd&#32;)&#32;:&#32;it(&#32;it&#32;),&#32;itEnd(&#32;itEnd&#32;)&#32;{
8904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;loadBuffer();
8905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8906 
8907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;bool()<emphasis role="keyword">&#32;const&#32;</emphasis>{
8908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!m_tokenBuffer.empty()&#32;||&#32;it&#32;!=&#32;itEnd;
8909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8910 
8911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;count()&#32;const&#32;-&gt;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_tokenBuffer.size()&#32;+&#32;(itEnd&#32;-&#32;it);&#32;}
8912 
8913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;operator*()&#32;const&#32;-&gt;&#32;Token&#32;{
8914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(&#32;!m_tokenBuffer.empty()&#32;);
8915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_tokenBuffer.front();
8916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8917 
8918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;operator-&gt;()&#32;const&#32;-&gt;&#32;Token&#32;const&#32;*&#32;{
8919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(&#32;!m_tokenBuffer.empty()&#32;);
8920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;m_tokenBuffer.front();
8921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8922 
8923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;operator++()&#32;-&gt;&#32;TokenStream&#32;&amp;&#32;{
8924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_tokenBuffer.size()&#32;&gt;=&#32;2&#32;)&#32;{
8925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_tokenBuffer.erase(&#32;m_tokenBuffer.begin()&#32;);
8926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
8927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;it&#32;!=&#32;itEnd&#32;)
8928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++it;
8929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;loadBuffer();
8930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
8932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8933 &#32;&#32;&#32;&#32;};
8934 
8935 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ResultBase&#32;{
8936 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
8937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;Type&#32;{
8938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ok,&#32;LogicError,&#32;RuntimeError
8939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
8940 
8941 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
8942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultBase(&#32;Type&#32;type&#32;)&#32;:&#32;m_type(&#32;type&#32;)&#32;{}
8943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~ResultBase()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
8944 
8945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;enforceOk()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
8946 
8947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Type&#32;m_type;
8948 &#32;&#32;&#32;&#32;};
8949 
8950 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
8951 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ResultValueBase&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;ResultBase&#32;{
8952 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
8953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>()&#32;const&#32;-&gt;&#32;T&#32;const&#32;&amp;&#32;{
8954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enforceOk();
8955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_value;
8956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8957 
8958 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
8959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultValueBase(&#32;Type&#32;type&#32;)&#32;:&#32;ResultBase(&#32;type&#32;)&#32;{}
8960 
8961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultValueBase(&#32;ResultValueBase&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;other&#32;)&#32;:&#32;ResultBase(&#32;other&#32;)&#32;{
8962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_type&#32;==&#32;ResultBase::Ok&#32;)
8963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>(&#32;&amp;m_value&#32;)&#32;T(&#32;other.m_value&#32;);
8964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8965 
8966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultValueBase(&#32;Type,&#32;T&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;value&#32;)&#32;:&#32;ResultBase(&#32;Ok&#32;)&#32;{
8967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>(&#32;&amp;m_value&#32;)&#32;T(&#32;value&#32;);
8968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8969 
8970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;operator=(&#32;ResultValueBase&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;other&#32;)&#32;-&gt;&#32;ResultValueBase&#32;&amp;&#32;{
8971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_type&#32;==&#32;ResultBase::Ok&#32;)
8972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_value.~T();
8973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultBase::operator=(other);
8974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_type&#32;==&#32;ResultBase::Ok&#32;)
8975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>(&#32;&amp;m_value&#32;)&#32;T(&#32;other.m_value&#32;);
8976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
8977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8978 
8979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~ResultValueBase()<emphasis role="keyword">&#32;override&#32;</emphasis>{
8980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_type&#32;==&#32;Ok&#32;)
8981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_value.~T();
8982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8983 
8984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">union&#32;</emphasis>{
8985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;m_value;
8986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
8987 &#32;&#32;&#32;&#32;};
8988 
8989 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
8990 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ResultValueBase&lt;void&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;ResultBase&#32;{
8991 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
8992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>ResultBase::ResultBase;
8993 &#32;&#32;&#32;&#32;};
8994 
8995 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
8996 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>BasicResult&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;ResultValueBase&lt;T&gt;&#32;{
8997 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
8998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
8999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;BasicResult(&#32;BasicResult&lt;U&gt;&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;other&#32;)
9000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;ResultValueBase&lt;T&gt;(&#32;other.type()&#32;),
9001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_errorMessage(&#32;other.errorMessage()&#32;)
9002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(&#32;type()&#32;!=&#32;ResultBase::Ok&#32;);
9004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9005 
9006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
9007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;ok(&#32;U&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;value&#32;)&#32;-&gt;&#32;BasicResult&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;ResultBase::Ok,&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>&#32;};&#32;}
9008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;ok()&#32;-&gt;&#32;BasicResult&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;ResultBase::Ok&#32;};&#32;}
9009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;logicError(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;message&#32;)&#32;-&gt;&#32;BasicResult&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;ResultBase::LogicError,&#32;message&#32;};&#32;}
9010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;runtimeError(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;message&#32;)&#32;-&gt;&#32;BasicResult&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;ResultBase::RuntimeError,&#32;message&#32;};&#32;}
9011 
9012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;bool()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_type&#32;==&#32;ResultBase::Ok;&#32;}
9013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;type()&#32;const&#32;-&gt;&#32;ResultBase::Type&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_type;&#32;}
9014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;errorMessage()&#32;const&#32;-&gt;&#32;std::<emphasis role="keywordtype">string</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_errorMessage;&#32;}
9015 
9016 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
9017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;enforceOk()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
9018 
9019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Errors&#32;shouldn&apos;t&#32;reach&#32;this&#32;point,&#32;but&#32;if&#32;they&#32;do</emphasis>
9020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;actual&#32;error&#32;message&#32;will&#32;be&#32;in&#32;m_errorMessage</emphasis>
9021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(&#32;m_type&#32;!=&#32;ResultBase::LogicError&#32;);
9022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(&#32;m_type&#32;!=&#32;ResultBase::RuntimeError&#32;);
9023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_type&#32;!=&#32;ResultBase::Ok&#32;)
9024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::abort();
9025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9026 
9027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;m_errorMessage;&#32;<emphasis role="comment">//&#32;Only&#32;populated&#32;if&#32;resultType&#32;is&#32;an&#32;error</emphasis>
9028 
9029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BasicResult(&#32;ResultBase::Type&#32;type,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;message&#32;)
9030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;ResultValueBase&lt;T&gt;(type),
9031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_errorMessage(message)
9032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(&#32;m_type&#32;!=&#32;ResultBase::Ok&#32;);
9034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9035 
9036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>ResultValueBase&lt;T&gt;::ResultValueBase;
9037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>ResultBase::m_type;
9038 &#32;&#32;&#32;&#32;};
9039 
9040 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;ParseResultType&#32;{
9041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Matched,&#32;NoMatch,&#32;ShortCircuitAll,&#32;ShortCircuitSame
9042 &#32;&#32;&#32;&#32;};
9043 
9044 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ParseState&#32;{
9045 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
9046 
9047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ParseState(&#32;ParseResultType&#32;type,&#32;TokenStream&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;remainingTokens&#32;)
9048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_type(type),
9049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_remainingTokens(&#32;remainingTokens&#32;)
9050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
9051 
9052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;type()&#32;const&#32;-&gt;&#32;ParseResultType&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_type;&#32;}
9053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;remainingTokens()&#32;const&#32;-&gt;&#32;TokenStream&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_remainingTokens;&#32;}
9054 
9055 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
9056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ParseResultType&#32;m_type;
9057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TokenStream&#32;m_remainingTokens;
9058 &#32;&#32;&#32;&#32;};
9059 
9060 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>Result&#32;=&#32;BasicResult&lt;void&gt;;
9061 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>ParserResult&#32;=&#32;BasicResult&lt;ParseResultType&gt;;
9062 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>InternalParseResult&#32;=&#32;BasicResult&lt;ParseState&gt;;
9063 
9064 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>HelpColumns&#32;{
9065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;left;
9066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;right;
9067 &#32;&#32;&#32;&#32;};
9068 
9069 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
9070 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;convertInto(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;source,&#32;T&amp;&#32;target&#32;)&#32;-&gt;&#32;ParserResult&#32;{
9071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::stringstream&#32;ss;
9072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;source;
9073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss&#32;&gt;&gt;&#32;target;
9074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;ss.fail()&#32;)
9075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserResult::runtimeError(&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;convert&#32;&apos;&quot;</emphasis>&#32;+&#32;source&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&#32;to&#32;destination&#32;type&quot;</emphasis>&#32;);
9076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
9077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserResult::ok(&#32;ParseResultType::Matched&#32;);
9078 &#32;&#32;&#32;&#32;}
9079 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;convertInto(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;source,&#32;std::string&amp;&#32;target&#32;)&#32;-&gt;&#32;ParserResult&#32;{
9080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;target&#32;=&#32;source;
9081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserResult::ok(&#32;ParseResultType::Matched&#32;);
9082 &#32;&#32;&#32;&#32;}
9083 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;convertInto(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;source,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&amp;target&#32;)&#32;-&gt;&#32;ParserResult&#32;{
9084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;srcLC&#32;=&#32;source;
9085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::transform(&#32;srcLC.begin(),&#32;srcLC.end(),&#32;srcLC.begin(),&#32;[](&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;c&#32;)&#32;{&#32;return&#32;static_cast&lt;char&gt;(&#32;std::tolower(c)&#32;);&#32;}&#32;);
9086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(srcLC&#32;==&#32;<emphasis role="stringliteral">&quot;y&quot;</emphasis>&#32;||&#32;srcLC&#32;==&#32;<emphasis role="stringliteral">&quot;1&quot;</emphasis>&#32;||&#32;srcLC&#32;==&#32;<emphasis role="stringliteral">&quot;true&quot;</emphasis>&#32;||&#32;srcLC&#32;==&#32;<emphasis role="stringliteral">&quot;yes&quot;</emphasis>&#32;||&#32;srcLC&#32;==&#32;<emphasis role="stringliteral">&quot;on&quot;</emphasis>)
9087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;target&#32;=&#32;<emphasis role="keyword">true</emphasis>;
9088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(srcLC&#32;==&#32;<emphasis role="stringliteral">&quot;n&quot;</emphasis>&#32;||&#32;srcLC&#32;==&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>&#32;||&#32;srcLC&#32;==&#32;<emphasis role="stringliteral">&quot;false&quot;</emphasis>&#32;||&#32;srcLC&#32;==&#32;<emphasis role="stringliteral">&quot;no&quot;</emphasis>&#32;||&#32;srcLC&#32;==&#32;<emphasis role="stringliteral">&quot;off&quot;</emphasis>)
9089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;target&#32;=&#32;<emphasis role="keyword">false</emphasis>;
9090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
9091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserResult::runtimeError(&#32;<emphasis role="stringliteral">&quot;Expected&#32;a&#32;boolean&#32;value&#32;but&#32;did&#32;not&#32;recognise:&#32;&apos;&quot;</emphasis>&#32;+&#32;source&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis>&#32;);
9092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserResult::ok(&#32;ParseResultType::Matched&#32;);
9093 &#32;&#32;&#32;&#32;}
9094 <emphasis role="preprocessor">#ifdef&#32;CLARA_CONFIG_OPTIONAL_TYPE</emphasis>
9095 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
9096 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;convertInto(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;source,&#32;CLARA_CONFIG_OPTIONAL_TYPE&lt;T&gt;&amp;&#32;target&#32;)&#32;-&gt;&#32;ParserResult&#32;{
9097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;temp;
9098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;result&#32;=&#32;convertInto(&#32;source,&#32;temp&#32;);
9099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;result&#32;)
9100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;target&#32;=&#32;std::move(temp);
9101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
9102 &#32;&#32;&#32;&#32;}
9103 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CLARA_CONFIG_OPTIONAL_TYPE</emphasis>
9104 
9105 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>NonCopyable&#32;{
9106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NonCopyable()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
9107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NonCopyable(&#32;NonCopyable&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
9108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NonCopyable(&#32;NonCopyable&#32;&amp;&amp;&#32;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
9109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NonCopyable&#32;&amp;operator=(&#32;NonCopyable&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
9110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NonCopyable&#32;&amp;operator=(&#32;NonCopyable&#32;&amp;&amp;&#32;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
9111 &#32;&#32;&#32;&#32;};
9112 
9113 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>BoundRef&#32;:&#32;NonCopyable&#32;{
9114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~BoundRef()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
9115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;isContainer()&#32;const&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
9116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;isFlag()&#32;const&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
9117 &#32;&#32;&#32;&#32;};
9118 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>BoundValueRefBase&#32;:&#32;BoundRef&#32;{
9119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;setValue(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;arg&#32;)&#32;-&gt;&#32;ParserResult&#32;=&#32;0;
9120 &#32;&#32;&#32;&#32;};
9121 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>BoundFlagRefBase&#32;:&#32;BoundRef&#32;{
9122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;setFlag(&#32;<emphasis role="keywordtype">bool</emphasis>&#32;flag&#32;)&#32;-&gt;&#32;ParserResult&#32;=&#32;0;
9123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;isFlag()&#32;const&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;}
9124 &#32;&#32;&#32;&#32;};
9125 
9126 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
9127 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>BoundValueRef&#32;:&#32;BoundValueRefBase&#32;{
9128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;&amp;m_ref;
9129 
9130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;BoundValueRef(&#32;T&#32;&amp;ref&#32;)&#32;:&#32;m_ref(&#32;ref&#32;)&#32;{}
9131 
9132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;setValue(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;arg&#32;)&#32;-&gt;&#32;ParserResult&#32;<emphasis role="keyword">override</emphasis>&#32;{
9133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;convertInto(&#32;arg,&#32;m_ref&#32;);
9134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9135 &#32;&#32;&#32;&#32;};
9136 
9137 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
9138 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>BoundValueRef&lt;std::vector&lt;T&gt;&gt;&#32;:&#32;BoundValueRefBase&#32;{
9139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;T&gt;&#32;&amp;m_ref;
9140 
9141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;BoundValueRef(&#32;std::vector&lt;T&gt;&#32;&amp;ref&#32;)&#32;:&#32;m_ref(&#32;ref&#32;)&#32;{}
9142 
9143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;isContainer()&#32;const&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&#32;override&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;}
9144 
9145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;setValue(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;arg&#32;)&#32;-&gt;&#32;ParserResult&#32;<emphasis role="keyword">override</emphasis>&#32;{
9146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;temp;
9147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;result&#32;=&#32;convertInto(&#32;arg,&#32;temp&#32;);
9148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;result&#32;)
9149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_ref.push_back(&#32;temp&#32;);
9150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
9151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9152 &#32;&#32;&#32;&#32;};
9153 
9154 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>BoundFlagRef&#32;:&#32;BoundFlagRefBase&#32;{
9155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&amp;m_ref;
9156 
9157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;BoundFlagRef(&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&amp;ref&#32;)&#32;:&#32;m_ref(&#32;ref&#32;)&#32;{}
9158 
9159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;setFlag(&#32;<emphasis role="keywordtype">bool</emphasis>&#32;flag&#32;)&#32;-&gt;&#32;ParserResult&#32;<emphasis role="keyword">override</emphasis>&#32;{
9160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_ref&#32;=&#32;flag;
9161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserResult::ok(&#32;ParseResultType::Matched&#32;);
9162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9163 &#32;&#32;&#32;&#32;};
9164 
9165 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ReturnType&gt;
9166 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>LambdaInvoker&#32;{
9167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(&#32;std::is_same&lt;ReturnType,&#32;ParserResult&gt;::value,&#32;<emphasis role="stringliteral">&quot;Lambda&#32;must&#32;return&#32;void&#32;or&#32;clara::ParserResult&quot;</emphasis>&#32;);
9168 
9169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;ArgType&gt;
9170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;invoke(&#32;L&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;lambda,&#32;ArgType&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;arg&#32;)&#32;-&gt;&#32;ParserResult&#32;{
9171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lambda(&#32;arg&#32;);
9172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9173 &#32;&#32;&#32;&#32;};
9174 
9175 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
9176 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>LambdaInvoker&lt;void&gt;&#32;{
9177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;ArgType&gt;
9178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;invoke(&#32;L&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;lambda,&#32;ArgType&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;arg&#32;)&#32;-&gt;&#32;ParserResult&#32;{
9179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lambda(&#32;arg&#32;);
9180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserResult::ok(&#32;ParseResultType::Matched&#32;);
9181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9182 &#32;&#32;&#32;&#32;};
9183 
9184 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ArgType,&#32;<emphasis role="keyword">typename</emphasis>&#32;L&gt;
9185 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;invokeLambda(&#32;L&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;lambda,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;arg&#32;)&#32;-&gt;&#32;ParserResult&#32;{
9186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ArgType&#32;temp{};
9187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;result&#32;=&#32;convertInto(&#32;arg,&#32;temp&#32;);
9188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!result
9189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;result
9190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;LambdaInvoker&lt;typename&#32;UnaryLambdaTraits&lt;L&gt;::ReturnType&gt;::invoke(&#32;lambda,&#32;temp&#32;);
9191 &#32;&#32;&#32;&#32;}
9192 
9193 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;L&gt;
9194 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>BoundLambda&#32;:&#32;BoundValueRefBase&#32;{
9195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;L&#32;m_lambda;
9196 
9197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(&#32;UnaryLambdaTraits&lt;L&gt;::isValid,&#32;<emphasis role="stringliteral">&quot;Supplied&#32;lambda&#32;must&#32;take&#32;exactly&#32;one&#32;argument&quot;</emphasis>&#32;);
9198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;BoundLambda(&#32;L&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;lambda&#32;)&#32;:&#32;m_lambda(&#32;lambda&#32;)&#32;{}
9199 
9200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;setValue(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;arg&#32;)&#32;-&gt;&#32;ParserResult&#32;<emphasis role="keyword">override</emphasis>&#32;{
9201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;invokeLambda&lt;typename&#32;UnaryLambdaTraits&lt;L&gt;::ArgType&gt;(&#32;m_lambda,&#32;arg&#32;);
9202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9203 &#32;&#32;&#32;&#32;};
9204 
9205 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;L&gt;
9206 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>BoundFlagLambda&#32;:&#32;BoundFlagRefBase&#32;{
9207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;L&#32;m_lambda;
9208 
9209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(&#32;UnaryLambdaTraits&lt;L&gt;::isValid,&#32;<emphasis role="stringliteral">&quot;Supplied&#32;lambda&#32;must&#32;take&#32;exactly&#32;one&#32;argument&quot;</emphasis>&#32;);
9210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(&#32;std::is_same&lt;typename&#32;UnaryLambdaTraits&lt;L&gt;::ArgType,&#32;<emphasis role="keywordtype">bool</emphasis>&gt;::value,&#32;<emphasis role="stringliteral">&quot;flags&#32;must&#32;be&#32;boolean&quot;</emphasis>&#32;);
9211 
9212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;BoundFlagLambda(&#32;L&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;lambda&#32;)&#32;:&#32;m_lambda(&#32;lambda&#32;)&#32;{}
9213 
9214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;setFlag(&#32;<emphasis role="keywordtype">bool</emphasis>&#32;flag&#32;)&#32;-&gt;&#32;ParserResult&#32;<emphasis role="keyword">override</emphasis>&#32;{
9215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;LambdaInvoker&lt;typename&#32;UnaryLambdaTraits&lt;L&gt;::ReturnType&gt;::invoke(&#32;m_lambda,&#32;flag&#32;);
9216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9217 &#32;&#32;&#32;&#32;};
9218 
9219 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;Optionality&#32;{&#32;Optional,&#32;Required&#32;};
9220 
9221 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Parser;
9222 
9223 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ParserBase&#32;{
9224 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
9225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~ParserBase()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
9226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;validate()&#32;const&#32;-&gt;&#32;Result&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result::ok();&#32;}
9227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;parse_expr(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;exeName,&#32;TokenStream&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;tokens)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;InternalParseResult&#32;&#32;=&#32;0;
9228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;cardinality()&#32;const&#32;-&gt;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;&#32;}
9229 
9230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;parse_expr(&#32;Args&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;args&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;InternalParseResult&#32;{
9231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;parse_expr(&#32;args.exeName(),&#32;TokenStream(&#32;args&#32;)&#32;);
9232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9233 &#32;&#32;&#32;&#32;};
9234 
9235 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;DerivedT&gt;
9236 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ComposableParserImpl&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;ParserBase&#32;{
9237 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
9238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
9239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1ab32a083e442cc09f736327d2e2865999">operator|</link>(&#32;T&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;other&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;Parser;
9240 
9241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
9242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>(&#32;T&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;other&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;Parser;
9243 &#32;&#32;&#32;&#32;};
9244 
9245 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Common&#32;code&#32;and&#32;state&#32;for&#32;Args&#32;and&#32;Opts</emphasis>
9246 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;DerivedT&gt;
9247 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ParserRefImpl&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;ComposableParserImpl&lt;DerivedT&gt;&#32;{
9248 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
9249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Optionality&#32;m_optionality&#32;=&#32;Optionality::Optional;
9250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::shared_ptr&lt;BoundRef&gt;&#32;m_ref;
9251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;m_hint;
9252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;m_description;
9253 
9254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;ParserRefImpl(&#32;std::shared_ptr&lt;BoundRef&gt;&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;ref&#32;)&#32;:&#32;m_ref(&#32;ref&#32;)&#32;{}
9255 
9256 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
9257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
9258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ParserRefImpl(&#32;T&#32;&amp;ref,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;hint&#32;)
9259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_ref(&#32;std::make_shared&lt;BoundValueRef&lt;T&gt;&gt;(&#32;ref&#32;)&#32;),
9260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_hint(&#32;hint&#32;)
9261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
9262 
9263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;LambdaT&gt;
9264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ParserRefImpl(&#32;LambdaT&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;ref,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;hint&#32;)
9265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_ref(&#32;std::make_shared&lt;BoundLambda&lt;LambdaT&gt;&gt;(&#32;ref&#32;)&#32;),
9266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_hint(hint)
9267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
9268 
9269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;operator()(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;description&#32;)&#32;-&gt;&#32;DerivedT&#32;&amp;&#32;{
9270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_description&#32;=&#32;description;
9271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>DerivedT&#32;&amp;<emphasis role="keyword">&gt;</emphasis>(&#32;*this&#32;);
9272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9273 
9274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;optional()&#32;-&gt;&#32;DerivedT&#32;&amp;&#32;{
9275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_optionality&#32;=&#32;Optionality::Optional;
9276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>DerivedT&#32;&amp;<emphasis role="keyword">&gt;</emphasis>(&#32;*this&#32;);
9277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
9278 
9279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;required()&#32;-&gt;&#32;DerivedT&#32;&amp;&#32;{
9280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_optionality&#32;=&#32;Optionality::Required;
9281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>DerivedT&#32;&amp;<emphasis role="keyword">&gt;</emphasis>(&#32;*this&#32;);
9282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
9283 
9284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;isOptional()&#32;const&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{
9285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_optionality&#32;==&#32;Optionality::Optional;
9286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9287 
9288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;cardinality()&#32;const&#32;-&gt;&#32;<emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&#32;override&#32;</emphasis>{
9289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_ref-&gt;isContainer()&#32;)
9290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
9291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
9292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
9293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9294 
9295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;hint()&#32;const&#32;-&gt;&#32;std::<emphasis role="keywordtype">string</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_hint;&#32;}
9296 &#32;&#32;&#32;&#32;};
9297 
9298 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ExeName&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;ComposableParserImpl&lt;ExeName&gt;&#32;{
9299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::shared_ptr&lt;std::string&gt;&#32;m_name;
9300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::shared_ptr&lt;BoundValueRefBase&gt;&#32;m_ref;
9301 
9302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;LambdaT&gt;
9303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;makeRef(LambdaT&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;lambda)&#32;-&gt;&#32;std::shared_ptr&lt;BoundValueRefBase&gt;&#32;{
9304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;BoundLambda&lt;LambdaT&gt;&gt;(&#32;lambda)&#32;;
9305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9306 
9307 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
9308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExeName()&#32;:&#32;m_name(&#32;std::make_shared&lt;std::string&gt;(&#32;<emphasis role="stringliteral">&quot;&lt;executable&gt;&quot;</emphasis>&#32;)&#32;)&#32;{}
9309 
9310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;ExeName(&#32;std::string&#32;&amp;ref&#32;)&#32;:&#32;ExeName()&#32;{
9311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_ref&#32;=&#32;std::make_shared&lt;BoundValueRef&lt;std::string&gt;&gt;(&#32;ref&#32;);
9312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9313 
9314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;LambdaT&gt;
9315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;ExeName(&#32;LambdaT&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lambda&#32;)&#32;:&#32;ExeName()&#32;{
9316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_ref&#32;=&#32;std::make_shared&lt;BoundLambda&lt;LambdaT&gt;&gt;(&#32;lambda&#32;);
9317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9318 
9319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;exe&#32;name&#32;is&#32;not&#32;parsed&#32;out&#32;of&#32;the&#32;normal&#32;tokens,&#32;but&#32;is&#32;handled&#32;specially</emphasis>
9320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;parse_expr(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;,&#32;TokenStream&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;tokens&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;InternalParseResult&#32;<emphasis role="keyword">override</emphasis>&#32;{
9321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;InternalParseResult::ok(&#32;ParseState(&#32;ParseResultType::NoMatch,&#32;tokens&#32;)&#32;);
9322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9323 
9324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;name()&#32;const&#32;-&gt;&#32;std::<emphasis role="keywordtype">string</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*m_name;&#32;}
9325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;set(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;newName&#32;)&#32;-&gt;&#32;ParserResult&#32;{
9326 
9327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;lastSlash&#32;=&#32;newName.find_last_of(&#32;<emphasis role="stringliteral">&quot;\\/&quot;</emphasis>&#32;);
9328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;filename&#32;=&#32;(&#32;lastSlash&#32;==&#32;std::string::npos&#32;)
9329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;newName
9330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;newName.substr(&#32;lastSlash+1&#32;);
9331 
9332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*m_name&#32;=&#32;filename;
9333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_ref&#32;)
9334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_ref-&gt;setValue(&#32;filename&#32;);
9335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
9336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserResult::ok(&#32;ParseResultType::Matched&#32;);
9337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9338 &#32;&#32;&#32;&#32;};
9339 
9340 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>Arg&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;ParserRefImpl&lt;Arg&gt;&#32;{
9341 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
9342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>ParserRefImpl::ParserRefImpl;
9343 
9344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;parse_expr(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;,&#32;TokenStream&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;tokens&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;InternalParseResult&#32;<emphasis role="keyword">override</emphasis>&#32;{
9345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;validationResult&#32;=&#32;validate();
9346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!validationResult&#32;)
9347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;InternalParseResult(&#32;validationResult&#32;);
9348 
9349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;remainingTokens&#32;=&#32;tokens;
9350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;token&#32;=&#32;*remainingTokens;
9351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;token.type&#32;!=&#32;TokenType::Argument&#32;)
9352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;InternalParseResult::ok(&#32;ParseState(&#32;ParseResultType::NoMatch,&#32;remainingTokens&#32;)&#32;);
9353 
9354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(&#32;!m_ref-&gt;isFlag()&#32;);
9355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;valueRef&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>detail::BoundValueRefBase*<emphasis role="keyword">&gt;</emphasis>(&#32;m_ref.get()&#32;);
9356 
9357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;result&#32;=&#32;valueRef-&gt;setValue(&#32;remainingTokens-&gt;token&#32;);
9358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!result&#32;)
9359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;InternalParseResult(&#32;result&#32;);
9360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
9361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;InternalParseResult::ok(&#32;ParseState(&#32;ParseResultType::Matched,&#32;++remainingTokens&#32;)&#32;);
9362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9363 &#32;&#32;&#32;&#32;};
9364 
9365 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;normaliseOpt(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;optName&#32;)&#32;-&gt;&#32;std::string&#32;{
9366 <emphasis role="preprocessor">#ifdef&#32;CATCH_PLATFORM_WINDOWS</emphasis>
9367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;optName[0]&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>&#32;)
9368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>&#32;+&#32;optName.substr(&#32;1&#32;);
9369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
9370 <emphasis role="preprocessor">#endif</emphasis>
9371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;optName;
9372 &#32;&#32;&#32;&#32;}
9373 
9374 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>Opt&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;ParserRefImpl&lt;Opt&gt;&#32;{
9375 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
9376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;m_optNames;
9377 
9378 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
9379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;LambdaT&gt;
9380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;Opt(&#32;LambdaT&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;ref&#32;)&#32;:&#32;ParserRefImpl(&#32;std::make_shared&lt;BoundFlagLambda&lt;LambdaT&gt;&gt;(&#32;ref&#32;)&#32;)&#32;{}
9381 
9382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;Opt(&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&amp;ref&#32;)&#32;:&#32;ParserRefImpl(&#32;std::make_shared&lt;BoundFlagRef&gt;(&#32;ref&#32;)&#32;)&#32;{}
9383 
9384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;LambdaT&gt;
9385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Opt(&#32;LambdaT&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;ref,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;hint&#32;)&#32;:&#32;ParserRefImpl(&#32;ref,&#32;hint&#32;)&#32;{}
9386 
9387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
9388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Opt(&#32;T&#32;&amp;ref,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;hint&#32;)&#32;:&#32;ParserRefImpl(&#32;ref,&#32;hint&#32;)&#32;{}
9389 
9390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;operator[](&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;optName&#32;)&#32;-&gt;&#32;Opt&#32;&amp;&#32;{
9391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_optNames.push_back(&#32;optName&#32;);
9392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
9393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9394 
9395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;getHelpColumns()&#32;const&#32;-&gt;&#32;std::vector&lt;HelpColumns&gt;&#32;{
9396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostringstream&#32;oss;
9397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;first&#32;=&#32;<emphasis role="keyword">true</emphasis>;
9398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;opt&#32;:&#32;m_optNames&#32;)&#32;{
9399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(first)
9400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first&#32;=&#32;<emphasis role="keyword">false</emphasis>;
9401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
9402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>;
9403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oss&#32;&lt;&lt;&#32;opt;
9404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!m_hint.empty()&#32;)
9406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&lt;&quot;</emphasis>&#32;&lt;&lt;&#32;m_hint&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>;
9407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;{&#32;oss.str(),&#32;m_description&#32;}&#32;};
9408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9409 
9410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;isMatch(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;optToken&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{
9411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;normalisedToken&#32;=&#32;normaliseOpt(&#32;optToken&#32;);
9412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;name&#32;:&#32;m_optNames&#32;)&#32;{
9413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;normaliseOpt(&#32;name&#32;)&#32;==&#32;normalisedToken&#32;)
9414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
9415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
9417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9418 
9419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>ParserBase::parse_expr;
9420 
9421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;parse_expr(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;,&#32;TokenStream&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;tokens&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;InternalParseResult&#32;<emphasis role="keyword">override</emphasis>&#32;{
9422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;validationResult&#32;=&#32;validate();
9423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!validationResult&#32;)
9424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;InternalParseResult(&#32;validationResult&#32;);
9425 
9426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;remainingTokens&#32;=&#32;tokens;
9427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;remainingTokens&#32;&amp;&amp;&#32;remainingTokens-&gt;type&#32;==&#32;TokenType::Option&#32;)&#32;{
9428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;token&#32;=&#32;*remainingTokens;
9429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;isMatch(token.token&#32;)&#32;)&#32;{
9430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_ref-&gt;isFlag()&#32;)&#32;{
9431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;flagRef&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>detail::BoundFlagRefBase*<emphasis role="keyword">&gt;</emphasis>(&#32;m_ref.get()&#32;);
9432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;result&#32;=&#32;flagRef-&gt;setFlag(&#32;<emphasis role="keyword">true</emphasis>&#32;);
9433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!result&#32;)
9434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;InternalParseResult(&#32;result&#32;);
9435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;result.value()&#32;==&#32;ParseResultType::ShortCircuitAll&#32;)
9436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;InternalParseResult::ok(&#32;ParseState(&#32;result.value(),&#32;remainingTokens&#32;)&#32;);
9437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
9438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;valueRef&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>detail::BoundValueRefBase*<emphasis role="keyword">&gt;</emphasis>(&#32;m_ref.get()&#32;);
9439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++remainingTokens;
9440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!remainingTokens&#32;)
9441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;InternalParseResult::runtimeError(&#32;<emphasis role="stringliteral">&quot;Expected&#32;argument&#32;following&#32;&quot;</emphasis>&#32;+&#32;token.token&#32;);
9442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;argToken&#32;=&#32;*remainingTokens;
9443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;argToken.type&#32;!=&#32;TokenType::Argument&#32;)
9444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;InternalParseResult::runtimeError(&#32;<emphasis role="stringliteral">&quot;Expected&#32;argument&#32;following&#32;&quot;</emphasis>&#32;+&#32;token.token&#32;);
9445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;result&#32;=&#32;valueRef-&gt;setValue(&#32;argToken.token&#32;);
9446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!result&#32;)
9447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;InternalParseResult(&#32;result&#32;);
9448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;result.value()&#32;==&#32;ParseResultType::ShortCircuitAll&#32;)
9449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;InternalParseResult::ok(&#32;ParseState(&#32;result.value(),&#32;remainingTokens&#32;)&#32;);
9450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;InternalParseResult::ok(&#32;ParseState(&#32;ParseResultType::Matched,&#32;++remainingTokens&#32;)&#32;);
9452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;InternalParseResult::ok(&#32;ParseState(&#32;ParseResultType::NoMatch,&#32;remainingTokens&#32;)&#32;);
9455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9456 
9457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;validate()&#32;const&#32;-&gt;&#32;Result<emphasis role="keyword">&#32;override&#32;</emphasis>{
9458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_optNames.empty()&#32;)
9459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result::logicError(&#32;<emphasis role="stringliteral">&quot;No&#32;options&#32;supplied&#32;to&#32;Opt&quot;</emphasis>&#32;);
9460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;name&#32;:&#32;m_optNames&#32;)&#32;{
9461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;name.empty()&#32;)
9462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result::logicError(&#32;<emphasis role="stringliteral">&quot;Option&#32;name&#32;cannot&#32;be&#32;empty&quot;</emphasis>&#32;);
9463 <emphasis role="preprocessor">#ifdef&#32;CATCH_PLATFORM_WINDOWS</emphasis>
9464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;name[0]&#32;!=&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>&#32;&amp;&amp;&#32;name[0]&#32;!=&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>&#32;)
9465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result::logicError(&#32;<emphasis role="stringliteral">&quot;Option&#32;name&#32;must&#32;begin&#32;with&#32;&apos;-&apos;&#32;or&#32;&apos;/&apos;&quot;</emphasis>&#32;);
9466 <emphasis role="preprocessor">#else</emphasis>
9467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;name[0]&#32;!=&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>&#32;)
9468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result::logicError(&#32;<emphasis role="stringliteral">&quot;Option&#32;name&#32;must&#32;begin&#32;with&#32;&apos;-&apos;&quot;</emphasis>&#32;);
9469 <emphasis role="preprocessor">#endif</emphasis>
9470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserRefImpl::validate();
9472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9473 &#32;&#32;&#32;&#32;};
9474 
9475 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Help&#32;:&#32;Opt&#32;{
9476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Help(&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&amp;showHelpFlag&#32;)
9477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;Opt([&amp;](&#32;bool&#32;flag&#32;)&#32;{
9478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;showHelpFlag&#32;=&#32;flag;
9479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserResult::ok(&#32;ParseResultType::ShortCircuitAll&#32;);
9480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;})
9481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Opt&#32;&amp;<emphasis role="keyword">&gt;</emphasis>(&#32;*this&#32;)
9483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="stringliteral">&quot;display&#32;usage&#32;information&quot;</emphasis>)
9484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[<emphasis role="stringliteral">&quot;-?&quot;</emphasis>][<emphasis role="stringliteral">&quot;-h&quot;</emphasis>][<emphasis role="stringliteral">&quot;--help&quot;</emphasis>]
9485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.optional();
9486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9487 &#32;&#32;&#32;&#32;};
9488 
9489 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Parser&#32;:&#32;ParserBase&#32;{
9490 
9491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;ExeName&#32;m_exeName;
9492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;Opt&gt;&#32;m_options;
9493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;Arg&gt;&#32;m_args;
9494 
9495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;operator|=(&#32;ExeName&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;exeName&#32;)&#32;-&gt;&#32;Parser&#32;&amp;&#32;{
9496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_exeName&#32;=&#32;exeName;
9497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
9498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9499 
9500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;operator|=(&#32;Arg&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;arg&#32;)&#32;-&gt;&#32;Parser&#32;&amp;&#32;{
9501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_args.push_back(arg);
9502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
9503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9504 
9505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;operator|=(&#32;Opt&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;opt&#32;)&#32;-&gt;&#32;Parser&#32;&amp;&#32;{
9506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_options.push_back(opt);
9507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
9508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9509 
9510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;operator|=(&#32;Parser&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;other&#32;)&#32;-&gt;&#32;Parser&#32;&amp;&#32;{
9511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_options.insert(m_options.end(),&#32;other.m_options.begin(),&#32;other.m_options.end());
9512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_args.insert(m_args.end(),&#32;other.m_args.begin(),&#32;other.m_args.end());
9513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
9514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9515 
9516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
9517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1ab32a083e442cc09f736327d2e2865999">operator|</link>(&#32;T&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;other&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;Parser&#32;{
9518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Parser(&#32;*<emphasis role="keyword">this</emphasis>&#32;)&#32;|=&#32;other;
9519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9520 
9521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Forward&#32;deprecated&#32;interface&#32;with&#32;&apos;+&apos;&#32;instead&#32;of&#32;&apos;|&apos;</emphasis>
9522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
9523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(&#32;T&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;other&#32;)&#32;-&gt;&#32;Parser&#32;&amp;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;operator|=(&#32;other&#32;);&#32;}
9524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
9525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>(&#32;T&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;other&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;Parser&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1ab32a083e442cc09f736327d2e2865999">operator|</link>(&#32;other&#32;);&#32;}
9526 
9527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;getHelpColumns()&#32;const&#32;-&gt;&#32;std::vector&lt;HelpColumns&gt;&#32;{
9528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;HelpColumns&gt;&#32;cols;
9529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;o&#32;:&#32;m_options)&#32;{
9530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;childCols&#32;=&#32;o.getHelpColumns();
9531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cols.insert(&#32;cols.end(),&#32;childCols.begin(),&#32;childCols.end()&#32;);
9532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cols;
9534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9535 
9536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;writeToStream(&#32;std::ostream&#32;&amp;os&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
9537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!m_exeName.name().empty())&#32;{
9538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;usage:\n&quot;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;m_exeName.name()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
9539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;required&#32;=&#32;<emphasis role="keyword">true</emphasis>,&#32;first&#32;=&#32;<emphasis role="keyword">true</emphasis>;
9540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;arg&#32;:&#32;m_args&#32;)&#32;{
9541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(first)
9542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first&#32;=&#32;<emphasis role="keyword">false</emphasis>;
9543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
9544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
9545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;arg.isOptional()&#32;&amp;&amp;&#32;required&#32;)&#32;{
9546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[&quot;</emphasis>;
9547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;required&#32;=&#32;<emphasis role="keyword">false</emphasis>;
9548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&lt;&quot;</emphasis>&#32;&lt;&lt;&#32;arg.hint()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>;
9550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;arg.cardinality()&#32;==&#32;0&#32;)
9551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;...&#32;&quot;</emphasis>;
9552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!required&#32;)
9554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
9555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!m_options.empty()&#32;)
9556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;options&quot;</emphasis>;
9557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n\nwhere&#32;options&#32;are:&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
9558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9559 
9560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;rows&#32;=&#32;getHelpColumns();
9561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;consoleWidth&#32;=&#32;CATCH_CLARA_CONFIG_CONSOLE_WIDTH;
9562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;optWidth&#32;=&#32;0;
9563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;cols&#32;:&#32;rows&#32;)
9564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;optWidth&#32;=&#32;(std::max)(optWidth,&#32;cols.left.size()&#32;+&#32;2);
9565 
9566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;optWidth&#32;=&#32;(std::min)(optWidth,&#32;consoleWidth/2);
9567 
9568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;cols&#32;:&#32;rows&#32;)&#32;{
9569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;row&#32;=
9570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TextFlow::Column(&#32;cols.left&#32;).width(&#32;optWidth&#32;).indent(&#32;2&#32;)&#32;+
9571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TextFlow::Spacer(4)&#32;+
9572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TextFlow::Column(&#32;cols.right&#32;).width(&#32;consoleWidth&#32;-&#32;7&#32;-&#32;optWidth&#32;);
9573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;row&#32;&lt;&lt;&#32;std::endl;
9574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9576 
9577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_catch_8h_1aae0cdd5d2f0ac242b9ab18b0f66ba26e">operator&lt;&lt;</link>(&#32;std::ostream&#32;&amp;os,&#32;Parser&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;parser&#32;)&#32;-&gt;&#32;std::ostream&amp;&#32;{
9578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parser.writeToStream(&#32;os&#32;);
9579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
9580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9581 
9582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;validate()&#32;const&#32;-&gt;&#32;Result<emphasis role="keyword">&#32;override&#32;</emphasis>{
9583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;opt&#32;:&#32;m_options&#32;)&#32;{
9584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;result&#32;=&#32;opt.validate();
9585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!result&#32;)
9586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
9587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;arg&#32;:&#32;m_args&#32;)&#32;{
9589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;result&#32;=&#32;arg.validate();
9590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!result&#32;)
9591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
9592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result::ok();
9594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9595 
9596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>ParserBase::parse_expr;
9597 
9598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;parse_expr(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;exeName,&#32;TokenStream&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;tokens&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;InternalParseResult&#32;<emphasis role="keyword">override</emphasis>&#32;{
9599 
9600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>ParserInfo&#32;{
9601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ParserBase&#32;<emphasis role="keyword">const</emphasis>*&#32;parser&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
9602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;count&#32;=&#32;0;
9603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
9604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;totalParsers&#32;=&#32;m_options.size()&#32;+&#32;m_args.size();
9605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(&#32;totalParsers&#32;&lt;&#32;512&#32;);
9606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ParserInfo&#32;parseInfos[totalParsers];&#32;//&#32;&lt;--&#32;this&#32;is&#32;what&#32;we&#32;really&#32;want&#32;to&#32;do</emphasis>
9607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ParserInfo&#32;parseInfos[512];
9608 
9609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;
9611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;opt&#32;:&#32;m_options)&#32;parseInfos[i++].parser&#32;=&#32;&amp;opt;
9612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;arg&#32;:&#32;m_args)&#32;parseInfos[i++].parser&#32;=&#32;&amp;arg;
9613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9614 
9615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_exeName.set(&#32;exeName&#32;);
9616 
9617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;result&#32;=&#32;InternalParseResult::ok(&#32;ParseState(&#32;ParseResultType::NoMatch,&#32;tokens&#32;)&#32;);
9618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(&#32;result.value().remainingTokens()&#32;)&#32;{
9619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;tokenParsed&#32;=&#32;<emphasis role="keyword">false</emphasis>;
9620 
9621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;totalParsers;&#32;++i&#32;)&#32;{
9622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;&#32;parseInfo&#32;=&#32;parseInfos[i];
9623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;parseInfo.parser-&gt;cardinality()&#32;==&#32;0&#32;||&#32;parseInfo.count&#32;&lt;&#32;parseInfo.parser-&gt;cardinality()&#32;)&#32;{
9624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;parseInfo.parser-&gt;parse_expr(exeName,&#32;result.value().remainingTokens());
9625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(!result)
9626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;result;
9627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(result.value().type()&#32;!=&#32;ParseResultType::NoMatch)&#32;{
9628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tokenParsed&#32;=&#32;true;
9629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++parseInfo.count;
9630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;break;
9631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9634 
9635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;result.value().type()&#32;==&#32;ParseResultType::ShortCircuitAll&#32;)
9636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
9637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!tokenParsed&#32;)
9638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;InternalParseResult::runtimeError(&#32;<emphasis role="stringliteral">&quot;Unrecognised&#32;token:&#32;&quot;</emphasis>&#32;+&#32;result.value().remainingTokens()-&gt;token&#32;);
9639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;!TBD&#32;Check&#32;missing&#32;required&#32;options</emphasis>
9641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
9642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9643 &#32;&#32;&#32;&#32;};
9644 
9645 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;DerivedT&gt;
9646 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
9647 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ComposableParserImpl&lt;DerivedT&gt;::operator|(&#32;T&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;other&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;Parser&#32;{
9648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Parser()&#32;|&#32;<emphasis role="keyword">static_cast&lt;</emphasis>DerivedT&#32;<emphasis role="keyword">const&#32;</emphasis>&amp;<emphasis role="keyword">&gt;</emphasis>(&#32;*this&#32;)&#32;|&#32;other;
9649 &#32;&#32;&#32;&#32;}
9650 }&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
9651 
9652 <emphasis role="comment">//&#32;A&#32;Combined&#32;parser</emphasis>
9653 <emphasis role="keyword">using&#32;</emphasis>detail::Parser;
9654 
9655 <emphasis role="comment">//&#32;A&#32;parser&#32;for&#32;options</emphasis>
9656 <emphasis role="keyword">using&#32;</emphasis>detail::Opt;
9657 
9658 <emphasis role="comment">//&#32;A&#32;parser&#32;for&#32;arguments</emphasis>
9659 <emphasis role="keyword">using&#32;</emphasis>detail::Arg;
9660 
9661 <emphasis role="comment">//&#32;Wrapper&#32;for&#32;argc,&#32;argv&#32;from&#32;main()</emphasis>
9662 <emphasis role="keyword">using&#32;</emphasis>detail::Args;
9663 
9664 <emphasis role="comment">//&#32;Specifies&#32;the&#32;name&#32;of&#32;the&#32;executable</emphasis>
9665 <emphasis role="keyword">using&#32;</emphasis>detail::ExeName;
9666 
9667 <emphasis role="comment">//&#32;Convenience&#32;wrapper&#32;for&#32;option&#32;parser&#32;that&#32;specifies&#32;the&#32;help&#32;option</emphasis>
9668 <emphasis role="keyword">using&#32;</emphasis>detail::Help;
9669 
9670 <emphasis role="comment">//&#32;enum&#32;of&#32;result&#32;types&#32;from&#32;a&#32;parse_expr</emphasis>
9671 <emphasis role="keyword">using&#32;</emphasis>detail::ParseResultType;
9672 
9673 <emphasis role="comment">//&#32;Result&#32;type&#32;for&#32;parser&#32;operation</emphasis>
9674 <emphasis role="keyword">using&#32;</emphasis>detail::ParserResult;
9675 
9676 }}&#32;<emphasis role="comment">//&#32;namespace&#32;Catch::clara</emphasis>
9677 
9678 <emphasis role="comment">//&#32;end&#32;clara.hpp</emphasis>
9679 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
9680 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;pop</emphasis>
9681 <emphasis role="preprocessor">#endif</emphasis>
9682 
9683 <emphasis role="comment">//&#32;Restore&#32;Clara&apos;s&#32;value&#32;for&#32;console&#32;width,&#32;if&#32;present</emphasis>
9684 <emphasis role="preprocessor">#ifdef&#32;CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH</emphasis>
9685 <emphasis role="preprocessor">#define&#32;CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH&#32;CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH</emphasis>
9686 <emphasis role="preprocessor">#undef&#32;CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH</emphasis>
9687 <emphasis role="preprocessor">#endif</emphasis>
9688 
9689 <emphasis role="comment">//&#32;end&#32;catch_clara.h</emphasis>
9690 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
9691 
9692 &#32;&#32;&#32;&#32;clara::Parser&#32;makeCommandLineParser(&#32;ConfigData&amp;&#32;config&#32;);
9693 
9694 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
9695 
9696 <emphasis role="comment">//&#32;end&#32;catch_commandline.h</emphasis>
9697 <emphasis role="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>
9698 <emphasis role="preprocessor">#include&#32;&lt;ctime&gt;</emphasis>
9699 
9700 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
9701 
9702 &#32;&#32;&#32;&#32;clara::Parser&#32;makeCommandLineParser(&#32;ConfigData&amp;&#32;config&#32;)&#32;{
9703 
9704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>clara;
9705 
9706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;setWarning&#32;=&#32;[&amp;](&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;warning&#32;)&#32;{
9707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;warningSet&#32;=&#32;[&amp;]()&#32;{
9708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;warning&#32;==&#32;<emphasis role="stringliteral">&quot;NoAssertions&quot;</emphasis>&#32;)
9709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_warn_about_1ae3dde70ef78d700ea896eb29314e0fa3a516a40a437d6ff29898e2fa93bca8f82">WarnAbout::NoAssertions</link>;
9710 
9711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;warning&#32;==&#32;<emphasis role="stringliteral">&quot;NoTests&quot;</emphasis>&#32;)
9712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_warn_about_1ae3dde70ef78d700ea896eb29314e0fa3ab449dacc48055ee886a4a7aa283db556">WarnAbout::NoTests</link>;
9713 
9714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_warn_about_1ae3dde70ef78d700ea896eb29314e0fa3a9ac33f9211280cca9082557329706d27">WarnAbout::Nothing</link>;
9715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}();
9716 
9717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(warningSet&#32;==&#32;<link linkend="_struct_catch_1_1_warn_about_1ae3dde70ef78d700ea896eb29314e0fa3a9ac33f9211280cca9082557329706d27">WarnAbout::Nothing</link>)
9718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserResult::runtimeError(&#32;<emphasis role="stringliteral">&quot;Unrecognised&#32;warning:&#32;&apos;&quot;</emphasis>&#32;+&#32;warning&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis>&#32;);
9719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config.warnings&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_catch_1_1_warn_about_1ae3dde70ef78d700ea896eb29314e0fa3">WarnAbout::What</link><emphasis role="keyword">&gt;</emphasis>(&#32;config.warnings&#32;|&#32;warningSet&#32;);
9720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserResult::ok(&#32;ParseResultType::Matched&#32;);
9721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
9722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;loadTestNamesFromFile&#32;=&#32;[&amp;](&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;filename&#32;)&#32;{
9723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ifstream&#32;f(&#32;filename.c_str()&#32;);
9724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!f.is_open()&#32;)
9725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserResult::runtimeError(&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;load&#32;input&#32;file:&#32;&apos;&quot;</emphasis>&#32;+&#32;filename&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis>&#32;);
9726 
9727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;line;
9728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(&#32;std::getline(&#32;f,&#32;line&#32;)&#32;)&#32;{
9729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;line&#32;=&#32;<link linkend="_namespace_catch_1a084108b47f37d8bfd5db51c50c7451b3">trim</link>(line);
9730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!line.empty()&#32;&amp;&amp;&#32;!<link linkend="_namespace_catch_1a695f62327be0676e046291eeaae15110">startsWith</link>(&#32;line,&#32;<emphasis role="charliteral">&apos;#&apos;</emphasis>&#32;)&#32;)&#32;{
9731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!<link linkend="_namespace_catch_1a695f62327be0676e046291eeaae15110">startsWith</link>(&#32;line,&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>&#32;)&#32;)
9732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;line&#32;=&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>&#32;+&#32;line&#32;+&#32;&apos;&quot;&apos;;
9733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config.testsOrTags.push_back(&#32;line&#32;);
9734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config.testsOrTags.emplace_back(&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>&#32;);
9735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Remove&#32;comma&#32;in&#32;the&#32;end</emphasis>
9738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!config.testsOrTags.empty())
9739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config.testsOrTags.erase(&#32;config.testsOrTags.end()-1&#32;);
9740 
9741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserResult::ok(&#32;ParseResultType::Matched&#32;);
9742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
9743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;setTestOrder&#32;=&#32;[&amp;](&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;order&#32;)&#32;{
9744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_namespace_catch_1a695f62327be0676e046291eeaae15110">startsWith</link>(&#32;<emphasis role="stringliteral">&quot;declared&quot;</emphasis>,&#32;order&#32;)&#32;)
9745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config.runOrder&#32;=&#32;<link linkend="_struct_catch_1_1_run_tests_1ab56bd851b1dd085869992d1a9d73dc5da732a98670b4661d80d8c392784a14f09">RunTests::InDeclarationOrder</link>;
9746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_namespace_catch_1a695f62327be0676e046291eeaae15110">startsWith</link>(&#32;<emphasis role="stringliteral">&quot;lexical&quot;</emphasis>,&#32;order&#32;)&#32;)
9747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config.runOrder&#32;=&#32;<link linkend="_struct_catch_1_1_run_tests_1ab56bd851b1dd085869992d1a9d73dc5da8c62a42e94d867c708b421322b1c386f">RunTests::InLexicographicalOrder</link>;
9748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_namespace_catch_1a695f62327be0676e046291eeaae15110">startsWith</link>(&#32;<emphasis role="stringliteral">&quot;random&quot;</emphasis>,&#32;order&#32;)&#32;)
9749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config.runOrder&#32;=&#32;<link linkend="_struct_catch_1_1_run_tests_1ab56bd851b1dd085869992d1a9d73dc5da262441c5b5391b628ca6930c3ba028a5">RunTests::InRandomOrder</link>;
9750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
9751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;clara::ParserResult::runtimeError(&#32;<emphasis role="stringliteral">&quot;Unrecognised&#32;ordering:&#32;&apos;&quot;</emphasis>&#32;+&#32;order&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis>&#32;);
9752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserResult::ok(&#32;ParseResultType::Matched&#32;);
9753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
9754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;setRngSeed&#32;=&#32;[&amp;](&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;seed&#32;)&#32;{
9755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;seed&#32;!=&#32;<emphasis role="stringliteral">&quot;time&quot;</emphasis>&#32;)
9756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;clara::detail::convertInto(&#32;seed,&#32;config.rngSeed&#32;);
9757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config.rngSeed&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(&#32;std::time(<emphasis role="keyword">nullptr</emphasis>)&#32;);
9758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserResult::ok(&#32;ParseResultType::Matched&#32;);
9759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
9760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;setColourUsage&#32;=&#32;[&amp;](&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;useColour&#32;)&#32;{
9761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;mode&#32;=&#32;<link linkend="_namespace_catch_1ac036a17412d318598ffda8e1fe7a1177">toLower</link>(&#32;useColour&#32;);
9762 
9763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;mode&#32;==&#32;<emphasis role="stringliteral">&quot;yes&quot;</emphasis>&#32;)
9764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config.useColour&#32;=&#32;<link linkend="_struct_catch_1_1_use_colour_1a6aa78da0c2de7539bb9e3757e204a3f1ad7bb64e0fe49ba51aafbd3e14f06e98d">UseColour::Yes</link>;
9765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(&#32;mode&#32;==&#32;<emphasis role="stringliteral">&quot;no&quot;</emphasis>&#32;)
9766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config.useColour&#32;=&#32;<link linkend="_struct_catch_1_1_use_colour_1a6aa78da0c2de7539bb9e3757e204a3f1af80533ce38685131ea8d7a6360ce9e57">UseColour::No</link>;
9767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(&#32;mode&#32;==&#32;<emphasis role="stringliteral">&quot;auto&quot;</emphasis>&#32;)
9768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config.useColour&#32;=&#32;<link linkend="_struct_catch_1_1_use_colour_1a6aa78da0c2de7539bb9e3757e204a3f1a5c7fa9f5f5536187e8f47df35b892bb7">UseColour::Auto</link>;
9769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
9770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserResult::runtimeError(&#32;<emphasis role="stringliteral">&quot;colour&#32;mode&#32;must&#32;be&#32;one&#32;of:&#32;auto,&#32;yes&#32;or&#32;no.&#32;&apos;&quot;</emphasis>&#32;+&#32;useColour&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&#32;not&#32;recognised&quot;</emphasis>&#32;);
9771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserResult::ok(&#32;ParseResultType::Matched&#32;);
9772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
9773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;setWaitForKeypress&#32;=&#32;[&amp;](&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;keypress&#32;)&#32;{
9774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;keypressLc&#32;=&#32;<link linkend="_namespace_catch_1ac036a17412d318598ffda8e1fe7a1177">toLower</link>(&#32;keypress&#32;);
9775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(keypressLc&#32;==&#32;<emphasis role="stringliteral">&quot;never&quot;</emphasis>)
9776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config.waitForKeypress&#32;=&#32;<link linkend="_struct_catch_1_1_wait_for_keypress_1a2e8c4369d0a605d64e3e83b5af3399baa3a78e4f64675e7ce54ffd29e6109f1ce">WaitForKeypress::Never</link>;
9777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(&#32;keypressLc&#32;==&#32;<emphasis role="stringliteral">&quot;start&quot;</emphasis>&#32;)
9778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config.waitForKeypress&#32;=&#32;<link linkend="_struct_catch_1_1_wait_for_keypress_1a2e8c4369d0a605d64e3e83b5af3399baaba7f6d9b2377122a118b371ab7ae3185">WaitForKeypress::BeforeStart</link>;
9779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(&#32;keypressLc&#32;==&#32;<emphasis role="stringliteral">&quot;exit&quot;</emphasis>&#32;)
9780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config.waitForKeypress&#32;=&#32;<link linkend="_struct_catch_1_1_wait_for_keypress_1a2e8c4369d0a605d64e3e83b5af3399baad6c3e4a5797b7ee0a812e4fc88128983">WaitForKeypress::BeforeExit</link>;
9781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(&#32;keypressLc&#32;==&#32;<emphasis role="stringliteral">&quot;both&quot;</emphasis>&#32;)
9782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config.waitForKeypress&#32;=&#32;<link linkend="_struct_catch_1_1_wait_for_keypress_1a2e8c4369d0a605d64e3e83b5af3399baae8beb496b712aef908028a7cbfdd0c46">WaitForKeypress::BeforeStartAndExit</link>;
9783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
9784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserResult::runtimeError(&#32;<emphasis role="stringliteral">&quot;keypress&#32;argument&#32;must&#32;be&#32;one&#32;of:&#32;never,&#32;start,&#32;exit&#32;or&#32;both.&#32;&apos;&quot;</emphasis>&#32;+&#32;keypress&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&#32;not&#32;recognised&quot;</emphasis>&#32;);
9785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserResult::ok(&#32;ParseResultType::Matched&#32;);
9786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
9787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;setVerbosity&#32;=&#32;[&amp;](&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;verbosity&#32;)&#32;{
9788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;lcVerbosity&#32;=&#32;<link linkend="_namespace_catch_1ac036a17412d318598ffda8e1fe7a1177">toLower</link>(&#32;verbosity&#32;);
9789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;lcVerbosity&#32;==&#32;<emphasis role="stringliteral">&quot;quiet&quot;</emphasis>&#32;)
9790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config.verbosity&#32;=&#32;<link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737a098753f8980036f4b936e3d4b6997111">Verbosity::Quiet</link>;
9791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(&#32;lcVerbosity&#32;==&#32;<emphasis role="stringliteral">&quot;normal&quot;</emphasis>&#32;)
9792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config.verbosity&#32;=&#32;<link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737a960b44c579bc2f6818d2daaf9e4c16f0">Verbosity::Normal</link>;
9793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(&#32;lcVerbosity&#32;==&#32;<emphasis role="stringliteral">&quot;high&quot;</emphasis>&#32;)
9794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config.verbosity&#32;=&#32;<link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737a655d20c1ca69519ca647684edbb2db35">Verbosity::High</link>;
9795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
9796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserResult::runtimeError(&#32;<emphasis role="stringliteral">&quot;Unrecognised&#32;verbosity,&#32;&apos;&quot;</emphasis>&#32;+&#32;verbosity&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis>&#32;);
9797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserResult::ok(&#32;ParseResultType::Matched&#32;);
9798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
9799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;setReporter&#32;=&#32;[&amp;](&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;reporter&#32;)&#32;{
9800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IReporterRegistry::FactoryMap&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;factories&#32;=&#32;<link linkend="_namespace_catch_1a5d328566cb8da87b48f1fac3f319ac7a">getRegistryHub</link>().<link linkend="_struct_catch_1_1_i_registry_hub_1abbb3aafb58916d633ef959d724d4b82c">getReporterRegistry</link>().getFactories();
9801 
9802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;lcReporter&#32;=&#32;<link linkend="_namespace_catch_1ac036a17412d318598ffda8e1fe7a1177">toLower</link>(&#32;reporter&#32;);
9803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;result&#32;=&#32;factories.find(&#32;lcReporter&#32;);
9804 
9805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;factories.end()&#32;!=&#32;result&#32;)
9806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config.reporterName&#32;=&#32;lcReporter;
9807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
9808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserResult::runtimeError(&#32;<emphasis role="stringliteral">&quot;Unrecognized&#32;reporter,&#32;&apos;&quot;</emphasis>&#32;+&#32;reporter&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;.&#32;Check&#32;available&#32;with&#32;--list-reporters&quot;</emphasis>&#32;);
9809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ParserResult::ok(&#32;ParseResultType::Matched&#32;);
9810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
9811 
9812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;cli
9813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;ExeName(&#32;config.processName&#32;)
9814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Help(&#32;config.showHelp&#32;)
9815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;config.listTests&#32;)
9816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;-l&quot;][&quot;--list-tests&quot;]
9817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;list&#32;all/matching&#32;test&#32;cases&quot;</emphasis>&#32;)
9818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;config.listTags&#32;)
9819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;-t&quot;][&quot;--list-tags&quot;]
9820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;list&#32;all/matching&#32;tags&quot;</emphasis>&#32;)
9821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;config.showSuccessfulTests&#32;)
9822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;-s&quot;][&quot;--success&quot;]
9823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;include&#32;successful&#32;tests&#32;in&#32;output&quot;</emphasis>&#32;)
9824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;config.shouldDebugBreak&#32;)
9825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;-b&quot;][&quot;--break&quot;]
9826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;break&#32;into&#32;debugger&#32;on&#32;failure&quot;</emphasis>&#32;)
9827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;config.noThrow&#32;)
9828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;-e&quot;][&quot;--nothrow&quot;]
9829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;skip&#32;exception&#32;tests&quot;</emphasis>&#32;)
9830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;config.showInvisibles&#32;)
9831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;-i&quot;][&quot;--invisibles&quot;]
9832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;show&#32;invisibles&#32;(tabs,&#32;newlines)&quot;</emphasis>&#32;)
9833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;config.outputFilename,&#32;<emphasis role="stringliteral">&quot;filename&quot;</emphasis>&#32;)
9834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;-o&quot;][&quot;--out&quot;]
9835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;output&#32;filename&quot;</emphasis>&#32;)
9836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;setReporter,&#32;<emphasis role="stringliteral">&quot;name&quot;</emphasis>&#32;)
9837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;-r&quot;][&quot;--reporter&quot;]
9838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;reporter&#32;to&#32;use&#32;(defaults&#32;to&#32;console)&quot;</emphasis>&#32;)
9839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;config.name,&#32;<emphasis role="stringliteral">&quot;name&quot;</emphasis>&#32;)
9840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;-n&quot;][&quot;--name&quot;]
9841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;suite&#32;name&quot;</emphasis>&#32;)
9842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;[&amp;](&#32;<emphasis role="keywordtype">bool</emphasis>&#32;){&#32;config.abortAfter&#32;=&#32;1;&#32;}&#32;)
9843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[<emphasis role="stringliteral">&quot;-a&quot;</emphasis>][<emphasis role="stringliteral">&quot;--abort&quot;</emphasis>]
9844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;abort&#32;at&#32;first&#32;failure&quot;</emphasis>&#32;)
9845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;[&amp;](&#32;<emphasis role="keywordtype">int</emphasis>&#32;x&#32;){&#32;config.abortAfter&#32;=&#32;x;&#32;},&#32;<emphasis role="stringliteral">&quot;no.&#32;failures&quot;</emphasis>&#32;)
9846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[<emphasis role="stringliteral">&quot;-x&quot;</emphasis>][<emphasis role="stringliteral">&quot;--abortx&quot;</emphasis>]
9847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;abort&#32;after&#32;x&#32;failures&quot;</emphasis>&#32;)
9848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;setWarning,&#32;<emphasis role="stringliteral">&quot;warning&#32;name&quot;</emphasis>&#32;)
9849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;-w&quot;][&quot;--warn&quot;]
9850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;enable&#32;warnings&quot;</emphasis>&#32;)
9851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;[&amp;](&#32;<emphasis role="keywordtype">bool</emphasis>&#32;flag&#32;)&#32;{&#32;config.showDurations&#32;=&#32;flag&#32;?&#32;<link linkend="_struct_catch_1_1_show_durations_1a82fa0174554187220c1eda175f122ee1ab49682ccb55f2d6b4dfcdb027c09da9a">ShowDurations::Always</link>&#32;:&#32;<link linkend="_struct_catch_1_1_show_durations_1a82fa0174554187220c1eda175f122ee1af1a716bc46185f561382a12a0dede9f3">ShowDurations::Never</link>;&#32;},&#32;<emphasis role="stringliteral">&quot;yes|no&quot;</emphasis>&#32;)
9852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[<emphasis role="stringliteral">&quot;-d&quot;</emphasis>][<emphasis role="stringliteral">&quot;--durations&quot;</emphasis>]
9853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;show&#32;test&#32;durations&quot;</emphasis>&#32;)
9854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;config.minDuration,&#32;<emphasis role="stringliteral">&quot;seconds&quot;</emphasis>&#32;)
9855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;-D&quot;][&quot;--min-duration&quot;]
9856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;show&#32;test&#32;durations&#32;for&#32;tests&#32;taking&#32;at&#32;least&#32;the&#32;given&#32;number&#32;of&#32;seconds&quot;</emphasis>&#32;)
9857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;loadTestNamesFromFile,&#32;<emphasis role="stringliteral">&quot;filename&quot;</emphasis>&#32;)
9858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;-f&quot;][&quot;--input-file&quot;]
9859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;load&#32;test&#32;names&#32;to&#32;run&#32;from&#32;a&#32;file&quot;</emphasis>&#32;)
9860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;config.filenamesAsTags&#32;)
9861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;-#&quot;][&quot;--filenames-as-tags&quot;]
9862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;adds&#32;a&#32;tag&#32;for&#32;the&#32;filename&quot;</emphasis>&#32;)
9863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;config.sectionsToRun,&#32;<emphasis role="stringliteral">&quot;section&#32;name&quot;</emphasis>&#32;)
9864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;-c&quot;][&quot;--section&quot;]
9865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;specify&#32;section&#32;to&#32;run&quot;</emphasis>&#32;)
9866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;setVerbosity,&#32;<emphasis role="stringliteral">&quot;quiet|normal|high&quot;</emphasis>&#32;)
9867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;-v&quot;][&quot;--verbosity&quot;]
9868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;set&#32;output&#32;verbosity&quot;</emphasis>&#32;)
9869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;config.listTestNamesOnly&#32;)
9870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;--list-test-names-only&quot;]
9871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;list&#32;all/matching&#32;test&#32;cases&#32;names&#32;only&quot;</emphasis>&#32;)
9872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;config.listReporters&#32;)
9873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;--list-reporters&quot;]
9874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;list&#32;all&#32;reporters&quot;</emphasis>&#32;)
9875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;setTestOrder,&#32;<emphasis role="stringliteral">&quot;decl|lex|rand&quot;</emphasis>&#32;)
9876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;--order&quot;]
9877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;test&#32;case&#32;order&#32;(defaults&#32;to&#32;decl)&quot;</emphasis>&#32;)
9878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;setRngSeed,&#32;<emphasis role="stringliteral">&quot;&apos;time&apos;|number&quot;</emphasis>&#32;)
9879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;--rng-seed&quot;]
9880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;set&#32;a&#32;specific&#32;seed&#32;for&#32;random&#32;numbers&quot;</emphasis>&#32;)
9881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;setColourUsage,&#32;<emphasis role="stringliteral">&quot;yes|no&quot;</emphasis>&#32;)
9882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;--use-colour&quot;]
9883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;should&#32;output&#32;be&#32;colourised&quot;</emphasis>&#32;)
9884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;config.libIdentify&#32;)
9885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;--libidentify&quot;]
9886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;report&#32;name&#32;and&#32;version&#32;according&#32;to&#32;libidentify&#32;standard&quot;</emphasis>&#32;)
9887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;setWaitForKeypress,&#32;<emphasis role="stringliteral">&quot;never|start|exit|both&quot;</emphasis>&#32;)
9888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;--wait-for-keypress&quot;]
9889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;waits&#32;for&#32;a&#32;keypress&#32;before&#32;exiting&quot;</emphasis>&#32;)
9890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;config.benchmarkSamples,&#32;<emphasis role="stringliteral">&quot;samples&quot;</emphasis>&#32;)
9891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;--benchmark-samples&quot;]
9892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;number&#32;of&#32;samples&#32;to&#32;collect&#32;(default:&#32;100)&quot;</emphasis>&#32;)
9893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;config.benchmarkResamples,&#32;<emphasis role="stringliteral">&quot;resamples&quot;</emphasis>&#32;)
9894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;--benchmark-resamples&quot;]
9895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;number&#32;of&#32;resamples&#32;for&#32;the&#32;bootstrap&#32;(default:&#32;100000)&quot;</emphasis>&#32;)
9896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;config.benchmarkConfidenceInterval,&#32;<emphasis role="stringliteral">&quot;confidence&#32;interval&quot;</emphasis>&#32;)
9897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;--benchmark-confidence-interval&quot;]
9898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;confidence&#32;interval&#32;for&#32;the&#32;bootstrap&#32;(between&#32;0&#32;and&#32;1,&#32;default:&#32;0.95)&quot;</emphasis>&#32;)
9899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;config.benchmarkNoAnalysis&#32;)
9900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;--benchmark-no-analysis&quot;]
9901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;perform&#32;only&#32;measurements;&#32;do&#32;not&#32;perform&#32;any&#32;analysis&quot;</emphasis>&#32;)
9902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Opt(&#32;config.benchmarkWarmupTime,&#32;<emphasis role="stringliteral">&quot;benchmarkWarmupTime&quot;</emphasis>&#32;)
9903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&quot;--benchmark-warmup-time&quot;]
9904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;amount&#32;of&#32;time&#32;in&#32;milliseconds&#32;spent&#32;on&#32;warming&#32;up&#32;each&#32;test&#32;(default:&#32;100)&quot;</emphasis>&#32;)
9905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Arg(&#32;config.testsOrTags,&#32;<emphasis role="stringliteral">&quot;test&#32;name|pattern|tags&quot;</emphasis>&#32;)
9906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;which&#32;test&#32;or&#32;tests&#32;to&#32;use&quot;</emphasis>&#32;);
9907 
9908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cli;
9909 &#32;&#32;&#32;&#32;}
9910 
9911 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
9912 <emphasis role="comment">//&#32;end&#32;catch_commandline.cpp</emphasis>
9913 <emphasis role="comment">//&#32;start&#32;catch_common.cpp</emphasis>
9914 
9915 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>
9916 <emphasis role="preprocessor">#include&#32;&lt;ostream&gt;</emphasis>
9917 
9918 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
9919 
9920 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_source_line_info_1af07e4fdeddf8409b91e4f842f6264cf8">SourceLineInfo::operator == </link>(&#32;SourceLineInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
9921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;line&#32;==&#32;other.line&#32;&amp;&amp;&#32;(file&#32;==&#32;other.file&#32;||&#32;std::strcmp(file,&#32;other.file)&#32;==&#32;0);
9922 &#32;&#32;&#32;&#32;}
9923 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_source_line_info_1af77415416919d2d6030b4be085b92f7a">SourceLineInfo::operator &lt; </link>(&#32;SourceLineInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
9924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;can&#32;assume&#32;that&#32;the&#32;same&#32;file&#32;will&#32;usually&#32;have&#32;the&#32;same&#32;pointer.</emphasis>
9925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Thus,&#32;if&#32;the&#32;pointers&#32;are&#32;the&#32;same,&#32;there&#32;is&#32;no&#32;point&#32;in&#32;calling&#32;the&#32;strcmp</emphasis>
9926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;line&#32;&lt;&#32;other.line&#32;||&#32;(&#32;line&#32;==&#32;other.line&#32;&amp;&amp;&#32;file&#32;!=&#32;other.file&#32;&amp;&amp;&#32;(std::strcmp(file,&#32;other.file)&#32;&lt;&#32;0));
9927 &#32;&#32;&#32;&#32;}
9928 
9929 &#32;&#32;&#32;&#32;std::ostream&amp;&#32;<link linkend="_namespace_catch_1a8c8ea1f66bc1cdc3e1254ed7fa57c06d">operator &lt;&lt; </link>(&#32;std::ostream&amp;&#32;os,&#32;SourceLineInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;info&#32;)&#32;{
9930 <emphasis role="preprocessor">#ifndef&#32;__GNUG__</emphasis>
9931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;info.file&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;(&apos;</emphasis>&#32;&lt;&lt;&#32;info.line&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;)&apos;</emphasis>;
9932 <emphasis role="preprocessor">#else</emphasis>
9933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;info.file&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>&#32;&lt;&lt;&#32;info.line;
9934 <emphasis role="preprocessor">#endif</emphasis>
9935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
9936 &#32;&#32;&#32;&#32;}
9937 
9938 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_stream_end_stop_1a4a518f0342a381074821d5bda2651401">StreamEndStop::operator+</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
9939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string();
9940 &#32;&#32;&#32;&#32;}
9941 
9942 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_non_copyable_1a4b492dd5753f9952350fb64dc6cb9fe2">NonCopyable::NonCopyable</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
9943 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_non_copyable_1a81254677280fef337eb4a676e91e3293">NonCopyable::~NonCopyable</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
9944 
9945 }
9946 <emphasis role="comment">//&#32;end&#32;catch_common.cpp</emphasis>
9947 <emphasis role="comment">//&#32;start&#32;catch_config.cpp</emphasis>
9948 
9949 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
9950 
9951 &#32;&#32;&#32;&#32;Config::Config(&#32;ConfigData&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;data&#32;)
9952 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_data(&#32;data&#32;),
9953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_stream(&#32;openStream()&#32;)
9954 &#32;&#32;&#32;&#32;{
9955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;need&#32;to&#32;trim&#32;filter&#32;specs&#32;to&#32;avoid&#32;trouble&#32;with&#32;superfluous</emphasis>
9956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;whitespace&#32;(esp.&#32;important&#32;for&#32;bdd&#32;macros,&#32;as&#32;those&#32;are&#32;manually</emphasis>
9957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;aligned&#32;with&#32;whitespace).</emphasis>
9958 
9959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;elem&#32;:&#32;m_data.testsOrTags)&#32;{
9960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem&#32;=&#32;<link linkend="_namespace_catch_1a084108b47f37d8bfd5db51c50c7451b3">trim</link>(elem);
9961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;elem&#32;:&#32;m_data.sectionsToRun)&#32;{
9963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem&#32;=&#32;<link linkend="_namespace_catch_1a084108b47f37d8bfd5db51c50c7451b3">trim</link>(elem);
9964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9965 
9966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestSpecParser&#32;parser(ITagAliasRegistry::get());
9967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!m_data.testsOrTags.empty())&#32;{
9968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_hasTestFilters&#32;=&#32;<emphasis role="keyword">true</emphasis>;
9969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testOrTags&#32;:&#32;m_data.testsOrTags)&#32;{
9970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parser.parse_expr(testOrTags);
9971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_testSpec&#32;=&#32;parser.testSpec();
9974 &#32;&#32;&#32;&#32;}
9975 
9976 &#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Config::getFilename()<emphasis role="keyword">&#32;const&#32;</emphasis>{
9977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.outputFilename&#32;;
9978 &#32;&#32;&#32;&#32;}
9979 
9980 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Config::listTests()<emphasis role="keyword">&#32;const&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.listTests;&#32;}
9981 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Config::listTestNamesOnly()<emphasis role="keyword">&#32;const&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.listTestNamesOnly;&#32;}
9982 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Config::listTags()<emphasis role="keyword">&#32;const&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.listTags;&#32;}
9983 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Config::listReporters()<emphasis role="keyword">&#32;const&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.listReporters;&#32;}
9984 
9985 &#32;&#32;&#32;&#32;std::string&#32;Config::getProcessName()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.processName;&#32;}
9986 &#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Config::getReporterName()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.reporterName;&#32;}
9987 
9988 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Config::getTestsOrTags()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.testsOrTags;&#32;}
9989 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Config::getSectionsToRun()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.sectionsToRun;&#32;}
9990 
9991 &#32;&#32;&#32;&#32;TestSpec&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Config::testSpec()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_testSpec;&#32;}
9992 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Config::hasTestFilters()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_hasTestFilters;&#32;}
9993 
9994 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Config::showHelp()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.showHelp;&#32;}
9995 
9996 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;IConfig&#32;interface</emphasis>
9997 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Config::allowThrows()<emphasis role="keyword">&#32;const&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!m_data.noThrow;&#32;}
9998 &#32;&#32;&#32;&#32;std::ostream&amp;&#32;Config::stream()<emphasis role="keyword">&#32;const&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_stream-&gt;stream();&#32;}
9999 &#32;&#32;&#32;&#32;std::string&#32;Config::name()<emphasis role="keyword">&#32;const&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.name.empty()&#32;?&#32;m_data.processName&#32;:&#32;m_data.name;&#32;}
10000 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Config::includeSuccessfulResults()<emphasis role="keyword">&#32;const&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.showSuccessfulTests;&#32;}
10001 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Config::warnAboutMissingAssertions()<emphasis role="keyword">&#32;const&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!(m_data.warnings&#32;&amp;&#32;<link linkend="_struct_catch_1_1_warn_about_1ae3dde70ef78d700ea896eb29314e0fa3a516a40a437d6ff29898e2fa93bca8f82">WarnAbout::NoAssertions</link>);&#32;}
10002 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Config::warnAboutNoTests()<emphasis role="keyword">&#32;const&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!(m_data.warnings&#32;&amp;&#32;<link linkend="_struct_catch_1_1_warn_about_1ae3dde70ef78d700ea896eb29314e0fa3ab449dacc48055ee886a4a7aa283db556">WarnAbout::NoTests</link>);&#32;}
10003 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_show_durations_1a82fa0174554187220c1eda175f122ee1">ShowDurations::OrNot</link>&#32;Config::showDurations()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.showDurations;&#32;}
10004 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;Config::minDuration()<emphasis role="keyword">&#32;const&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.minDuration;&#32;}
10005 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_run_tests_1ab56bd851b1dd085869992d1a9d73dc5d">RunTests::InWhatOrder</link>&#32;Config::runOrder()<emphasis role="keyword">&#32;const&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.runOrder;&#32;}
10006 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;Config::rngSeed()<emphasis role="keyword">&#32;const&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.rngSeed;&#32;}
10007 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_use_colour_1a6aa78da0c2de7539bb9e3757e204a3f1">UseColour::YesOrNo</link>&#32;Config::useColour()<emphasis role="keyword">&#32;const&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.useColour;&#32;}
10008 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Config::shouldDebugBreak()<emphasis role="keyword">&#32;const&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.shouldDebugBreak;&#32;}
10009 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;Config::abortAfter()<emphasis role="keyword">&#32;const&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.abortAfter;&#32;}
10010 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Config::showInvisibles()<emphasis role="keyword">&#32;const&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.showInvisibles;&#32;}
10011 &#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737">Verbosity</link>&#32;Config::verbosity()<emphasis role="keyword">&#32;const&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.verbosity;&#32;}
10012 
10013 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Config::benchmarkNoAnalysis()<emphasis role="keyword">&#32;const&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.benchmarkNoAnalysis;&#32;}
10014 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;Config::benchmarkSamples()<emphasis role="keyword">&#32;const&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.benchmarkSamples;&#32;}
10015 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;Config::benchmarkConfidenceInterval()<emphasis role="keyword">&#32;const&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.benchmarkConfidenceInterval;&#32;}
10016 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;Config::benchmarkResamples()<emphasis role="keyword">&#32;const&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_data.benchmarkResamples;&#32;}
10017 &#32;&#32;&#32;&#32;std::chrono::milliseconds&#32;Config::benchmarkWarmupTime()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::chrono::milliseconds(m_data.benchmarkWarmupTime);&#32;}
10018 
10019 &#32;&#32;&#32;&#32;IStream&#32;<emphasis role="keyword">const</emphasis>*&#32;Config::openStream()&#32;{
10020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1af6d27462573d60c30c51acf1c980e3ff">Catch::makeStream</link>(m_data.outputFilename);
10021 &#32;&#32;&#32;&#32;}
10022 
10023 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
10024 <emphasis role="comment">//&#32;end&#32;catch_config.cpp</emphasis>
10025 <emphasis role="comment">//&#32;start&#32;catch_console_colour.cpp</emphasis>
10026 
10027 <emphasis role="preprocessor">#if&#32;defined(__clang__)</emphasis>
10028 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;pragma&#32;clang&#32;diagnostic&#32;push</emphasis>
10029 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wexit-time-destructors&quot;</emphasis>
10030 <emphasis role="preprocessor">#endif</emphasis>
10031 
10032 <emphasis role="comment">//&#32;start&#32;catch_errno_guard.h</emphasis>
10033 
10034 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10035 
10036 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ErrnoGuard&#32;{
10037 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
10038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ErrnoGuard();
10039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~ErrnoGuard();
10040 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
10041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;m_oldErrno;
10042 &#32;&#32;&#32;&#32;};
10043 
10044 }
10045 
10046 <emphasis role="comment">//&#32;end&#32;catch_errno_guard.h</emphasis>
10047 <emphasis role="comment">//&#32;start&#32;catch_windows_h_proxy.h</emphasis>
10048 
10049 
10050 <emphasis role="preprocessor">#if&#32;defined(CATCH_PLATFORM_WINDOWS)</emphasis>
10051 
10052 <emphasis role="preprocessor">#if&#32;!defined(NOMINMAX)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_NO_NOMINMAX)</emphasis>
10053 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_DEFINED_NOMINMAX</emphasis>
10054 <emphasis role="preprocessor">#&#32;&#32;define&#32;NOMINMAX</emphasis>
10055 <emphasis role="preprocessor">#endif</emphasis>
10056 <emphasis role="preprocessor">#if&#32;!defined(WIN32_LEAN_AND_MEAN)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_NO_WIN32_LEAN_AND_MEAN)</emphasis>
10057 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_DEFINED_WIN32_LEAN_AND_MEAN</emphasis>
10058 <emphasis role="preprocessor">#&#32;&#32;define&#32;WIN32_LEAN_AND_MEAN</emphasis>
10059 <emphasis role="preprocessor">#endif</emphasis>
10060 
10061 <emphasis role="preprocessor">#ifdef&#32;__AFXDLL</emphasis>
10062 <emphasis role="preprocessor">#include&#32;&lt;AfxWin.h&gt;</emphasis>
10063 <emphasis role="preprocessor">#else</emphasis>
10064 <emphasis role="preprocessor">#include&#32;&lt;windows.h&gt;</emphasis>
10065 <emphasis role="preprocessor">#endif</emphasis>
10066 
10067 <emphasis role="preprocessor">#ifdef&#32;CATCH_DEFINED_NOMINMAX</emphasis>
10068 <emphasis role="preprocessor">#&#32;&#32;undef&#32;NOMINMAX</emphasis>
10069 <emphasis role="preprocessor">#endif</emphasis>
10070 <emphasis role="preprocessor">#ifdef&#32;CATCH_DEFINED_WIN32_LEAN_AND_MEAN</emphasis>
10071 <emphasis role="preprocessor">#&#32;&#32;undef&#32;WIN32_LEAN_AND_MEAN</emphasis>
10072 <emphasis role="preprocessor">#endif</emphasis>
10073 
10074 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;defined(CATCH_PLATFORM_WINDOWS)</emphasis>
10075 
10076 <emphasis role="comment">//&#32;end&#32;catch_windows_h_proxy.h</emphasis>
10077 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
10078 
10079 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10080 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>{
10081 
10082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>IColourImpl&#32;{
10083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~IColourImpl()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
10084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;use(&#32;Colour::Code&#32;_colourCode&#32;)&#32;=&#32;0;
10085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
10086 
10087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>NoColourImpl&#32;:&#32;IColourImpl&#32;{
10088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;use(&#32;Colour::Code&#32;)<emphasis role="keyword">&#32;override&#32;</emphasis>{}
10089 
10090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;IColourImpl*&#32;instance()&#32;{
10091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;NoColourImpl&#32;s_instance;
10092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;s_instance;
10093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
10095 
10096 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;anon&#32;namespace</emphasis>
10097 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
10098 
10099 <emphasis role="preprocessor">#if&#32;!defined(&#32;CATCH_CONFIG_COLOUR_NONE&#32;)&#32;&amp;&amp;&#32;!defined(&#32;CATCH_CONFIG_COLOUR_WINDOWS&#32;)&#32;&amp;&amp;&#32;!defined(&#32;CATCH_CONFIG_COLOUR_ANSI&#32;)</emphasis>
10100 <emphasis role="preprocessor">#&#32;&#32;&#32;ifdef&#32;CATCH_PLATFORM_WINDOWS</emphasis>
10101 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;CATCH_CONFIG_COLOUR_WINDOWS</emphasis>
10102 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
10103 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;CATCH_CONFIG_COLOUR_ANSI</emphasis>
10104 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
10105 <emphasis role="preprocessor">#endif</emphasis>
10106 
10107 <emphasis role="preprocessor">#if&#32;defined&#32;(&#32;CATCH_CONFIG_COLOUR_WINDOWS&#32;)&#32;</emphasis>
10108 
10109 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10110 <emphasis role="keyword">namespace&#32;</emphasis>{
10111 
10112 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>Win32ColourImpl&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;IColourImpl&#32;{
10113 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
10114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Win32ColourImpl()&#32;:&#32;stdoutHandle(&#32;GetStdHandle(STD_OUTPUT_HANDLE)&#32;)
10115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CONSOLE_SCREEN_BUFFER_INFO&#32;csbiInfo;
10117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GetConsoleScreenBufferInfo(&#32;stdoutHandle,&#32;&amp;csbiInfo&#32;);
10118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;originalForegroundAttributes&#32;=&#32;csbiInfo.wAttributes&#32;&amp;&#32;~(&#32;BACKGROUND_GREEN&#32;|&#32;BACKGROUND_RED&#32;|&#32;BACKGROUND_BLUE&#32;|&#32;BACKGROUND_INTENSITY&#32;);
10119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;originalBackgroundAttributes&#32;=&#32;csbiInfo.wAttributes&#32;&amp;&#32;~(&#32;FOREGROUND_GREEN&#32;|&#32;FOREGROUND_RED&#32;|&#32;FOREGROUND_BLUE&#32;|&#32;FOREGROUND_INTENSITY&#32;);
10120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10121 
10122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;use(&#32;Colour::Code&#32;_colourCode&#32;)<emphasis role="keyword">&#32;override&#32;</emphasis>{
10123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(&#32;_colourCode&#32;)&#32;{
10124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::None:&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setTextAttribute(&#32;originalForegroundAttributes&#32;);
10125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::White:&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setTextAttribute(&#32;FOREGROUND_GREEN&#32;|&#32;FOREGROUND_RED&#32;|&#32;FOREGROUND_BLUE&#32;);
10126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::Red:&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setTextAttribute(&#32;FOREGROUND_RED&#32;);
10127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::Green:&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setTextAttribute(&#32;FOREGROUND_GREEN&#32;);
10128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::Blue:&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setTextAttribute(&#32;FOREGROUND_BLUE&#32;);
10129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::Cyan:&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setTextAttribute(&#32;FOREGROUND_BLUE&#32;|&#32;FOREGROUND_GREEN&#32;);
10130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::Yellow:&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setTextAttribute(&#32;FOREGROUND_RED&#32;|&#32;FOREGROUND_GREEN&#32;);
10131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::Grey:&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setTextAttribute(&#32;0&#32;);
10132 
10133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::LightGrey:&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setTextAttribute(&#32;FOREGROUND_INTENSITY&#32;);
10134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::BrightRed:&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setTextAttribute(&#32;FOREGROUND_INTENSITY&#32;|&#32;FOREGROUND_RED&#32;);
10135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::BrightGreen:&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setTextAttribute(&#32;FOREGROUND_INTENSITY&#32;|&#32;FOREGROUND_GREEN&#32;);
10136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::BrightWhite:&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setTextAttribute(&#32;FOREGROUND_INTENSITY&#32;|&#32;FOREGROUND_GREEN&#32;|&#32;FOREGROUND_RED&#32;|&#32;FOREGROUND_BLUE&#32;);
10137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::BrightYellow:&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setTextAttribute(&#32;FOREGROUND_INTENSITY&#32;|&#32;FOREGROUND_RED&#32;|&#32;FOREGROUND_GREEN&#32;);
10138 
10139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::Bright:&#32;<link linkend="_catch_8h_1af445c1e136fadba0e92f3c22d68a7641">CATCH_INTERNAL_ERROR</link>(&#32;<emphasis role="stringliteral">&quot;not&#32;a&#32;colour&quot;</emphasis>&#32;);
10140 
10141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
10142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1ad9884641eb178d2628cf3ad19c394f47">CATCH_ERROR</link>(&#32;<emphasis role="stringliteral">&quot;Unknown&#32;colour&#32;requested&quot;</emphasis>&#32;);
10143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10145 
10146 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
10147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setTextAttribute(&#32;WORD&#32;_textAttribute&#32;)&#32;{
10148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SetConsoleTextAttribute(&#32;stdoutHandle,&#32;_textAttribute&#32;|&#32;originalBackgroundAttributes&#32;);
10149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HANDLE&#32;stdoutHandle;
10151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WORD&#32;originalForegroundAttributes;
10152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WORD&#32;originalBackgroundAttributes;
10153 &#32;&#32;&#32;&#32;};
10154 
10155 &#32;&#32;&#32;&#32;IColourImpl*&#32;platformColourInstance()&#32;{
10156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;Win32ColourImpl&#32;s_instance;
10157 
10158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6">IConfigPtr</link>&#32;config&#32;=&#32;<link linkend="_namespace_catch_1a228a625318bb6183842e394eeba17d50">getCurrentContext</link>().<link linkend="_struct_catch_1_1_i_context_1ad72743ae753feab0a6f5505f26f79ced">getConfig</link>();
10159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_use_colour_1a6aa78da0c2de7539bb9e3757e204a3f1">UseColour::YesOrNo</link>&#32;colourMode&#32;=&#32;config
10160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;config-&gt;useColour()
10161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_struct_catch_1_1_use_colour_1a6aa78da0c2de7539bb9e3757e204a3f1a5c7fa9f5f5536187e8f47df35b892bb7">UseColour::Auto</link>;
10162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;colourMode&#32;==&#32;<link linkend="_struct_catch_1_1_use_colour_1a6aa78da0c2de7539bb9e3757e204a3f1a5c7fa9f5f5536187e8f47df35b892bb7">UseColour::Auto</link>&#32;)
10163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;colourMode&#32;=&#32;<link linkend="_struct_catch_1_1_use_colour_1a6aa78da0c2de7539bb9e3757e204a3f1ad7bb64e0fe49ba51aafbd3e14f06e98d">UseColour::Yes</link>;
10164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;colourMode&#32;==&#32;<link linkend="_struct_catch_1_1_use_colour_1a6aa78da0c2de7539bb9e3757e204a3f1ad7bb64e0fe49ba51aafbd3e14f06e98d">UseColour::Yes</link>
10165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;&amp;s_instance
10166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;NoColourImpl::instance();
10167 &#32;&#32;&#32;&#32;}
10168 
10169 }&#32;<emphasis role="comment">//&#32;end&#32;anon&#32;namespace</emphasis>
10170 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
10171 
10172 <emphasis role="preprocessor">#elif&#32;defined(&#32;CATCH_CONFIG_COLOUR_ANSI&#32;)&#32;</emphasis>
10173 
10174 <emphasis role="preprocessor">#include&#32;&lt;unistd.h&gt;</emphasis>
10175 
10176 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10177 <emphasis role="keyword">namespace&#32;</emphasis>{
10178 
10179 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;POSIX/&#32;ANSI&#32;console&#32;terminal&#32;codes</emphasis>
10180 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Thanks&#32;to&#32;Adam&#32;Strzelecki&#32;for&#32;original&#32;contribution</emphasis>
10181 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(http://github.com/nanoant)</emphasis>
10182 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;https://github.com/philsquared/Catch/pull/131</emphasis>
10183 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>PosixColourImpl&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;IColourImpl&#32;{
10184 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
10185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;use(&#32;Colour::Code&#32;_colourCode&#32;)<emphasis role="keyword">&#32;override&#32;</emphasis>{
10186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(&#32;_colourCode&#32;)&#32;{
10187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::None:
10188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::White:&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setColour(&#32;<emphasis role="stringliteral">&quot;[0m&quot;</emphasis>&#32;);
10189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::Red:&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setColour(&#32;<emphasis role="stringliteral">&quot;[0;31m&quot;</emphasis>&#32;);
10190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::Green:&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setColour(&#32;<emphasis role="stringliteral">&quot;[0;32m&quot;</emphasis>&#32;);
10191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::Blue:&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setColour(&#32;<emphasis role="stringliteral">&quot;[0;34m&quot;</emphasis>&#32;);
10192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::Cyan:&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setColour(&#32;<emphasis role="stringliteral">&quot;[0;36m&quot;</emphasis>&#32;);
10193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::Yellow:&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setColour(&#32;<emphasis role="stringliteral">&quot;[0;33m&quot;</emphasis>&#32;);
10194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::Grey:&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setColour(&#32;<emphasis role="stringliteral">&quot;[1;30m&quot;</emphasis>&#32;);
10195 
10196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::LightGrey:&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setColour(&#32;<emphasis role="stringliteral">&quot;[0;37m&quot;</emphasis>&#32;);
10197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::BrightRed:&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setColour(&#32;<emphasis role="stringliteral">&quot;[1;31m&quot;</emphasis>&#32;);
10198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::BrightGreen:&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setColour(&#32;<emphasis role="stringliteral">&quot;[1;32m&quot;</emphasis>&#32;);
10199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::BrightWhite:&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setColour(&#32;<emphasis role="stringliteral">&quot;[1;37m&quot;</emphasis>&#32;);
10200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::BrightYellow:&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setColour(&#32;<emphasis role="stringliteral">&quot;[1;33m&quot;</emphasis>&#32;);
10201 
10202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Colour::Bright:&#32;<link linkend="_catch_8h_1af445c1e136fadba0e92f3c22d68a7641">CATCH_INTERNAL_ERROR</link>(&#32;<emphasis role="stringliteral">&quot;not&#32;a&#32;colour&quot;</emphasis>&#32;);
10203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_catch_8h_1af445c1e136fadba0e92f3c22d68a7641">CATCH_INTERNAL_ERROR</link>(&#32;<emphasis role="stringliteral">&quot;Unknown&#32;colour&#32;requested&quot;</emphasis>&#32;);
10204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;IColourImpl*&#32;instance()&#32;{
10207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;PosixColourImpl&#32;s_instance;
10208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;s_instance;
10209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10210 
10211 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
10212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setColour(&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;_escapeCode&#32;)&#32;{
10213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a228a625318bb6183842e394eeba17d50">getCurrentContext</link>().<link linkend="_struct_catch_1_1_i_context_1ad72743ae753feab0a6f5505f26f79ced">getConfig</link>()-&gt;stream()
10214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\033&apos;</emphasis>&#32;&lt;&lt;&#32;_escapeCode;
10215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10216 &#32;&#32;&#32;&#32;};
10217 
10218 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;useColourOnPlatform()&#32;{
10219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
10220 <emphasis role="preprocessor">#if&#32;defined(CATCH_PLATFORM_MAC)&#32;||&#32;defined(CATCH_PLATFORM_IPHONE)</emphasis>
10221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!isDebuggerActive()&#32;&amp;&amp;
10222 <emphasis role="preprocessor">#endif</emphasis>
10223 <emphasis role="preprocessor">#if&#32;!(defined(__DJGPP__)&#32;&amp;&amp;&#32;defined(__STRICT_ANSI__))</emphasis>
10224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isatty(STDOUT_FILENO)
10225 <emphasis role="preprocessor">#else</emphasis>
10226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">false</emphasis>
10227 <emphasis role="preprocessor">#endif</emphasis>
10228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;;
10229 &#32;&#32;&#32;&#32;}
10230 &#32;&#32;&#32;&#32;IColourImpl*&#32;platformColourInstance()&#32;{
10231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ErrnoGuard&#32;guard;
10232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6">IConfigPtr</link>&#32;config&#32;=&#32;<link linkend="_namespace_catch_1a228a625318bb6183842e394eeba17d50">getCurrentContext</link>().<link linkend="_struct_catch_1_1_i_context_1ad72743ae753feab0a6f5505f26f79ced">getConfig</link>();
10233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_use_colour_1a6aa78da0c2de7539bb9e3757e204a3f1">UseColour::YesOrNo</link>&#32;colourMode&#32;=&#32;config
10234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;config-&gt;useColour()
10235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_struct_catch_1_1_use_colour_1a6aa78da0c2de7539bb9e3757e204a3f1a5c7fa9f5f5536187e8f47df35b892bb7">UseColour::Auto</link>;
10236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;colourMode&#32;==&#32;<link linkend="_struct_catch_1_1_use_colour_1a6aa78da0c2de7539bb9e3757e204a3f1a5c7fa9f5f5536187e8f47df35b892bb7">UseColour::Auto</link>&#32;)
10237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;colourMode&#32;=&#32;useColourOnPlatform()
10238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;<link linkend="_struct_catch_1_1_use_colour_1a6aa78da0c2de7539bb9e3757e204a3f1ad7bb64e0fe49ba51aafbd3e14f06e98d">UseColour::Yes</link>
10239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_struct_catch_1_1_use_colour_1a6aa78da0c2de7539bb9e3757e204a3f1af80533ce38685131ea8d7a6360ce9e57">UseColour::No</link>;
10240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;colourMode&#32;==&#32;<link linkend="_struct_catch_1_1_use_colour_1a6aa78da0c2de7539bb9e3757e204a3f1ad7bb64e0fe49ba51aafbd3e14f06e98d">UseColour::Yes</link>
10241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;PosixColourImpl::instance()
10242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;NoColourImpl::instance();
10243 &#32;&#32;&#32;&#32;}
10244 
10245 }&#32;<emphasis role="comment">//&#32;end&#32;anon&#32;namespace</emphasis>
10246 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
10247 
10248 <emphasis role="preprocessor">#else&#32;&#32;</emphasis><emphasis role="comment">//&#32;not&#32;Windows&#32;or&#32;ANSI&#32;///////////////////////////////////////////////</emphasis>
10249 
10250 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10251 
10252 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;IColourImpl*&#32;platformColourInstance()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;NoColourImpl::instance();&#32;}
10253 
10254 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
10255 
10256 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;Windows/&#32;ANSI/&#32;None</emphasis>
10257 
10258 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10259 
10260 &#32;&#32;&#32;&#32;Colour::Colour(&#32;Code&#32;_colourCode&#32;)&#32;{&#32;use(&#32;_colourCode&#32;);&#32;}
10261 &#32;&#32;&#32;&#32;Colour::Colour(&#32;Colour&amp;&amp;&#32;other&#32;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
10262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_moved&#32;=&#32;other.m_moved;
10263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other.m_moved&#32;=&#32;<emphasis role="keyword">true</emphasis>;
10264 &#32;&#32;&#32;&#32;}
10265 &#32;&#32;&#32;&#32;Colour&amp;&#32;Colour::operator=(&#32;Colour&amp;&amp;&#32;other&#32;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
10266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_moved&#32;=&#32;other.m_moved;
10267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other.m_moved&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
10268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
10269 &#32;&#32;&#32;&#32;}
10270 
10271 &#32;&#32;&#32;&#32;Colour::~Colour(){&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!m_moved&#32;)&#32;use(&#32;None&#32;);&#32;}
10272 
10273 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Colour::use(&#32;Code&#32;_colourCode&#32;)&#32;{
10274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;IColourImpl*&#32;impl&#32;=&#32;platformColourInstance();
10275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Strictly&#32;speaking,&#32;this&#32;cannot&#32;possibly&#32;happen.</emphasis>
10276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;However,&#32;under&#32;some&#32;conditions&#32;it&#32;does&#32;happen&#32;(see&#32;#1626),</emphasis>
10277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;this&#32;change&#32;is&#32;small&#32;enough&#32;that&#32;we&#32;can&#32;let&#32;practicality</emphasis>
10278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;triumph&#32;over&#32;purity&#32;in&#32;this&#32;case.</emphasis>
10279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(impl&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{
10280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl-&gt;use(&#32;_colourCode&#32;);
10281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10282 &#32;&#32;&#32;&#32;}
10283 
10284 &#32;&#32;&#32;&#32;std::ostream&amp;&#32;<link linkend="_namespace_catch_1a8c8ea1f66bc1cdc3e1254ed7fa57c06d">operator &lt;&lt; </link>(&#32;std::ostream&amp;&#32;os,&#32;Colour&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;{
10285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
10286 &#32;&#32;&#32;&#32;}
10287 
10288 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
10289 
10290 <emphasis role="preprocessor">#if&#32;defined(__clang__)</emphasis>
10291 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;pragma&#32;clang&#32;diagnostic&#32;pop</emphasis>
10292 <emphasis role="preprocessor">#endif</emphasis>
10293 
10294 <emphasis role="comment">//&#32;end&#32;catch_console_colour.cpp</emphasis>
10295 <emphasis role="comment">//&#32;start&#32;catch_context.cpp</emphasis>
10296 
10297 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10298 
10299 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>Context&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;IMutableContext,&#32;NonCopyable&#32;{
10300 
10301 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:&#32;<emphasis role="comment">//&#32;IContext</emphasis>
10302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IResultCapture*&#32;<link linkend="_namespace_catch_1af718eeab870712f292ed8dc6ee3f6488">getResultCapture</link>()<emphasis role="keyword">&#32;override&#32;</emphasis>{
10303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_resultCapture;
10304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IRunner*&#32;getRunner()<emphasis role="keyword">&#32;override&#32;</emphasis>{
10306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_runner;
10307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10308 
10309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6">IConfigPtr</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;getConfig()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
10310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_config;
10311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10312 
10313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~Context()&#32;<emphasis role="keyword">override</emphasis>;
10314 
10315 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:&#32;<emphasis role="comment">//&#32;IMutableContext</emphasis>
10316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setResultCapture(&#32;IResultCapture*&#32;resultCapture&#32;)<emphasis role="keyword">&#32;override&#32;</emphasis>{
10317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_resultCapture&#32;=&#32;resultCapture;
10318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setRunner(&#32;IRunner*&#32;runner&#32;)<emphasis role="keyword">&#32;override&#32;</emphasis>{
10320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_runner&#32;=&#32;runner;
10321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setConfig(&#32;<link linkend="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6">IConfigPtr</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;)<emphasis role="keyword">&#32;override&#32;</emphasis>{
10323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_config&#32;=&#32;config;
10324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10325 
10326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;IMutableContext&amp;&#32;<link linkend="_namespace_catch_1a710841d4732b86c06f816bd4822bd425">getCurrentMutableContext</link>();
10327 
10328 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
10329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6">IConfigPtr</link>&#32;m_config;
10330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IRunner*&#32;m_runner&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
10331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IResultCapture*&#32;m_resultCapture&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
10332 &#32;&#32;&#32;&#32;};
10333 
10334 &#32;&#32;&#32;&#32;IMutableContext&#32;*<link linkend="_struct_catch_1_1_i_mutable_context_1aca4de034d0deed74dba34f143e4e273e">IMutableContext::currentContext</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
10335 
10336 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_catch_1_1_i_mutable_context_1a17e4b3f9a9674af7e2c4f081c692a628">IMutableContext::createContext</link>()
10337 &#32;&#32;&#32;&#32;{
10338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_mutable_context_1aca4de034d0deed74dba34f143e4e273e">currentContext</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Context();
10339 &#32;&#32;&#32;&#32;}
10340 
10341 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1ae50508f10ffc4ed873a31a4db4caea16">cleanUpContext</link>()&#32;{
10342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;<link linkend="_struct_catch_1_1_i_mutable_context_1aca4de034d0deed74dba34f143e4e273e">IMutableContext::currentContext</link>;
10343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_mutable_context_1aca4de034d0deed74dba34f143e4e273e">IMutableContext::currentContext</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
10344 &#32;&#32;&#32;&#32;}
10345 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_context_1aeb17355c1be6c2ced5407cad7202628d">IContext::~IContext</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
10346 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_mutable_context_1a93f32b2ab6d0fb83637059240be799ab">IMutableContext::~IMutableContext</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
10347 &#32;&#32;&#32;&#32;Context::~Context()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
10348 
10349 &#32;&#32;&#32;&#32;SimplePcg32&amp;&#32;<link linkend="_namespace_catch_1a66ea553511cbbc59d99e1720d8da514e">rng</link>()&#32;{
10350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;SimplePcg32&#32;s_rng;
10351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s_rng;
10352 &#32;&#32;&#32;&#32;}
10353 
10354 }
10355 <emphasis role="comment">//&#32;end&#32;catch_context.cpp</emphasis>
10356 <emphasis role="comment">//&#32;start&#32;catch_debug_console.cpp</emphasis>
10357 
10358 <emphasis role="comment">//&#32;start&#32;catch_debug_console.h</emphasis>
10359 
10360 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
10361 
10362 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10363 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;writeToDebugConsole(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;text&#32;);
10364 }
10365 
10366 <emphasis role="comment">//&#32;end&#32;catch_debug_console.h</emphasis>
10367 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ANDROID_LOGWRITE)</emphasis>
10368 <emphasis role="preprocessor">#include&#32;&lt;android/log.h&gt;</emphasis>
10369 
10370 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;writeToDebugConsole(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;text&#32;)&#32;{
10372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__android_log_write(&#32;ANDROID_LOG_DEBUG,&#32;<emphasis role="stringliteral">&quot;Catch&quot;</emphasis>,&#32;text.c_str()&#32;);
10373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10374 &#32;&#32;&#32;&#32;}
10375 
10376 <emphasis role="preprocessor">#elif&#32;defined(CATCH_PLATFORM_WINDOWS)</emphasis>
10377 
10378 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;writeToDebugConsole(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;text&#32;)&#32;{
10380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::OutputDebugStringA(&#32;text.c_str()&#32;);
10381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10382 &#32;&#32;&#32;&#32;}
10383 
10384 <emphasis role="preprocessor">#else</emphasis>
10385 
10386 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;writeToDebugConsole(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;text&#32;)&#32;{
10388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;!TBD:&#32;Need&#32;a&#32;version&#32;for&#32;Mac/&#32;XCode&#32;and&#32;other&#32;IDEs</emphasis>
10389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()&#32;&lt;&lt;&#32;text;
10390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10391 &#32;&#32;&#32;&#32;}
10392 
10393 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;Platform</emphasis>
10394 <emphasis role="comment">//&#32;end&#32;catch_debug_console.cpp</emphasis>
10395 <emphasis role="comment">//&#32;start&#32;catch_debugger.cpp</emphasis>
10396 
10397 <emphasis role="preprocessor">#if&#32;defined(CATCH_PLATFORM_MAC)&#32;||&#32;defined(CATCH_PLATFORM_IPHONE)</emphasis>
10398 
10399 <emphasis role="preprocessor">#&#32;&#32;include&#32;&lt;cassert&gt;</emphasis>
10400 <emphasis role="preprocessor">#&#32;&#32;include&#32;&lt;sys/types.h&gt;</emphasis>
10401 <emphasis role="preprocessor">#&#32;&#32;include&#32;&lt;unistd.h&gt;</emphasis>
10402 <emphasis role="preprocessor">#&#32;&#32;include&#32;&lt;cstddef&gt;</emphasis>
10403 <emphasis role="preprocessor">#&#32;&#32;include&#32;&lt;ostream&gt;</emphasis>
10404 
10405 <emphasis role="preprocessor">#ifdef&#32;__apple_build_version__</emphasis>
10406 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;These&#32;headers&#32;will&#32;only&#32;compile&#32;with&#32;AppleClang&#32;(XCode)</emphasis>
10407 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;other&#32;compilers&#32;(Clang,&#32;GCC,&#32;...&#32;)&#32;we&#32;need&#32;to&#32;exclude&#32;them</emphasis>
10408 <emphasis role="preprocessor">#&#32;&#32;include&#32;&lt;sys/sysctl.h&gt;</emphasis>
10409 <emphasis role="preprocessor">#endif</emphasis>
10410 
10411 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10412 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifdef&#32;__apple_build_version__</emphasis>
10413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;following&#32;function&#32;is&#32;taken&#32;directly&#32;from&#32;the&#32;following&#32;technical&#32;note:</emphasis>
10414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;https://developer.apple.com/library/archive/qa/qa1361/_index.html</emphasis>
10415 
10416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;true&#32;if&#32;the&#32;current&#32;process&#32;is&#32;being&#32;debugged&#32;(either</emphasis>
10417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;running&#32;under&#32;the&#32;debugger&#32;or&#32;has&#32;a&#32;debugger&#32;attached&#32;post&#32;facto).</emphasis>
10418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isDebuggerActive(){
10419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mib[4];
10420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>kinfo_proc&#32;&#32;&#32;info;
10421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size;
10422 
10423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;the&#32;flags&#32;so&#32;that,&#32;if&#32;sysctl&#32;fails&#32;for&#32;some&#32;bizarre</emphasis>
10424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reason,&#32;we&#32;get&#32;a&#32;predictable&#32;result.</emphasis>
10425 
10426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info.kp_proc.p_flag&#32;=&#32;0;
10427 
10428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;mib,&#32;which&#32;tells&#32;sysctl&#32;the&#32;info&#32;we&#32;want,&#32;in&#32;this&#32;case</emphasis>
10429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&apos;re&#32;looking&#32;for&#32;information&#32;about&#32;a&#32;specific&#32;process&#32;ID.</emphasis>
10430 
10431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mib[0]&#32;=&#32;CTL_KERN;
10432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mib[1]&#32;=&#32;KERN_PROC;
10433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mib[2]&#32;=&#32;KERN_PROC_PID;
10434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mib[3]&#32;=&#32;getpid();
10435 
10436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Call&#32;sysctl.</emphasis>
10437 
10438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(info);
10439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;sysctl(mib,&#32;<emphasis role="keyword">sizeof</emphasis>(mib)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(*mib),&#32;&amp;info,&#32;&amp;size,&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;0)&#32;!=&#32;0&#32;)&#32;{
10440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a54c1ce08041448d684ae8edc14162cd2">Catch::cerr</link>()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n**&#32;Call&#32;to&#32;sysctl&#32;failed&#32;-&#32;unable&#32;to&#32;determine&#32;if&#32;debugger&#32;is&#32;active&#32;**\n&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
10441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10443 
10444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&apos;re&#32;being&#32;debugged&#32;if&#32;the&#32;P_TRACED&#32;flag&#32;is&#32;set.</emphasis>
10445 
10446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(&#32;(info.kp_proc.p_flag&#32;&amp;&#32;P_TRACED)&#32;!=&#32;0&#32;);
10447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10448 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#else</emphasis>
10449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isDebuggerActive()&#32;{
10450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;need&#32;to&#32;find&#32;another&#32;way&#32;to&#32;determine&#32;this&#32;for&#32;non-appleclang&#32;compilers&#32;on&#32;macOS</emphasis>
10451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10453 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
10454 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
10455 
10456 <emphasis role="preprocessor">#elif&#32;defined(CATCH_PLATFORM_LINUX)</emphasis>
10457 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;fstream&gt;</emphasis>
10458 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;string&gt;</emphasis>
10459 
10460 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>{
10461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;standard&#32;POSIX&#32;way&#32;of&#32;detecting&#32;a&#32;debugger&#32;is&#32;to&#32;attempt&#32;to</emphasis>
10462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ptrace()&#32;the&#32;process,&#32;but&#32;this&#32;needs&#32;to&#32;be&#32;done&#32;from&#32;a&#32;child&#32;and&#32;not</emphasis>
10463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;this&#32;process&#32;itself&#32;to&#32;still&#32;allow&#32;attaching&#32;to&#32;this&#32;process&#32;later</emphasis>
10464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;wanted,&#32;so&#32;is&#32;rather&#32;heavy.&#32;Under&#32;Linux&#32;we&#32;have&#32;the&#32;PID&#32;of&#32;the</emphasis>
10465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;debugger&quot;&#32;(which&#32;doesn&apos;t&#32;need&#32;to&#32;be&#32;gdb,&#32;of&#32;course,&#32;it&#32;could&#32;also</emphasis>
10466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;be&#32;strace,&#32;for&#32;example)&#32;in&#32;/proc/$PID/status,&#32;so&#32;just&#32;get&#32;it&#32;from</emphasis>
10467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;there&#32;instead.</emphasis>
10468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isDebuggerActive(){
10469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Libstdc++&#32;has&#32;a&#32;bug,&#32;where&#32;std::ifstream&#32;sets&#32;errno&#32;to&#32;0</emphasis>
10470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;way&#32;our&#32;users&#32;can&#32;properly&#32;assert&#32;over&#32;errno&#32;values</emphasis>
10471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ErrnoGuard&#32;guard;
10472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ifstream&#32;in(<emphasis role="stringliteral">&quot;/proc/self/status&quot;</emphasis>);
10473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;std::string&#32;line;&#32;std::getline(in,&#32;line);&#32;)&#32;{
10474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;PREFIX_LEN&#32;=&#32;11;
10475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;line.compare(0,&#32;PREFIX_LEN,&#32;<emphasis role="stringliteral">&quot;TracerPid:\t&quot;</emphasis>)&#32;==&#32;0&#32;)&#32;{
10476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&apos;re&#32;traced&#32;if&#32;the&#32;PID&#32;is&#32;not&#32;0&#32;and&#32;no&#32;other&#32;PID&#32;starts</emphasis>
10477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;with&#32;0&#32;digit,&#32;so&#32;it&apos;s&#32;enough&#32;to&#32;check&#32;for&#32;just&#32;a&#32;single</emphasis>
10478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;character.</emphasis>
10479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;line.length()&#32;&gt;&#32;PREFIX_LEN&#32;&amp;&amp;&#32;line[PREFIX_LEN]&#32;!=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>;
10480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10482 
10483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10485 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
10486 <emphasis role="preprocessor">#elif&#32;defined(_MSC_VER)</emphasis>
10487 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;__declspec(dllimport)&#32;<emphasis role="keywordtype">int</emphasis>&#32;__stdcall&#32;IsDebuggerPresent();
10488 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isDebuggerActive()&#32;{
10490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;IsDebuggerPresent()&#32;!=&#32;0;
10491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10492 &#32;&#32;&#32;&#32;}
10493 <emphasis role="preprocessor">#elif&#32;defined(__MINGW32__)</emphasis>
10494 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;__declspec(dllimport)&#32;<emphasis role="keywordtype">int</emphasis>&#32;__stdcall&#32;IsDebuggerPresent();
10495 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isDebuggerActive()&#32;{
10497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;IsDebuggerPresent()&#32;!=&#32;0;
10498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10499 &#32;&#32;&#32;&#32;}
10500 <emphasis role="preprocessor">#else</emphasis>
10501 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isDebuggerActive()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
10503 &#32;&#32;&#32;&#32;}
10504 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;Platform</emphasis>
10505 <emphasis role="comment">//&#32;end&#32;catch_debugger.cpp</emphasis>
10506 <emphasis role="comment">//&#32;start&#32;catch_decomposer.cpp</emphasis>
10507 
10508 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10509 
10510 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_transient_expression_1aeadf426de589938c4964fe4068eeee77">ITransientExpression::~ITransientExpression</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
10511 
10512 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1a520110c31f26cf9892595772ab814fc0">formatReconstructedExpression</link>(&#32;std::ostream&#32;&amp;os,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lhs,&#32;StringRef&#32;op,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;rhs&#32;)&#32;{
10513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;lhs.size()&#32;+&#32;rhs.size()&#32;&lt;&#32;40&#32;&amp;&amp;
10514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lhs.find(<emphasis role="charliteral">&apos;\n&apos;</emphasis>)&#32;==&#32;std::string::npos&#32;&amp;&amp;
10515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs.find(<emphasis role="charliteral">&apos;\n&apos;</emphasis>)&#32;==&#32;std::string::npos&#32;)
10516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;lhs&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;op&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;rhs;
10517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
10518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;lhs&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>&#32;&lt;&lt;&#32;op&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>&#32;&lt;&lt;&#32;rhs;
10519 &#32;&#32;&#32;&#32;}
10520 }
10521 <emphasis role="comment">//&#32;end&#32;catch_decomposer.cpp</emphasis>
10522 <emphasis role="comment">//&#32;start&#32;catch_enforce.cpp</emphasis>
10523 
10524 <emphasis role="preprocessor">#include&#32;&lt;stdexcept&gt;</emphasis>
10525 
10526 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10527 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_DISABLE_EXCEPTIONS_CUSTOM_HANDLER)</emphasis>
10528 &#32;&#32;&#32;&#32;[[noreturn]]
10529 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1a3cbceeab9252d1b752f66a2826e92548">throw_exception</link>(std::exception&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;e)&#32;{
10530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a54c1ce08041448d684ae8edc14162cd2">Catch::cerr</link>()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Catch&#32;will&#32;terminate&#32;because&#32;it&#32;needed&#32;to&#32;throw&#32;an&#32;exception.\n&quot;</emphasis>
10531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;The&#32;message&#32;was:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;e.what()&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
10532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::terminate();
10533 &#32;&#32;&#32;&#32;}
10534 <emphasis role="preprocessor">#endif</emphasis>
10535 
10536 &#32;&#32;&#32;&#32;[[noreturn]]
10537 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1a707884e681203fef6bf7dbf752532fa5">throw_logic_error</link>(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;msg)&#32;{
10538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a3cbceeab9252d1b752f66a2826e92548">throw_exception</link>(std::logic_error(msg));
10539 &#32;&#32;&#32;&#32;}
10540 
10541 &#32;&#32;&#32;&#32;[[noreturn]]
10542 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1ae67297c3e265b0fcd55de371bf408e4e">throw_domain_error</link>(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;msg)&#32;{
10543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a3cbceeab9252d1b752f66a2826e92548">throw_exception</link>(std::domain_error(msg));
10544 &#32;&#32;&#32;&#32;}
10545 
10546 &#32;&#32;&#32;&#32;[[noreturn]]
10547 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1a48d2c35022dd9d56a1b7ee78ad581eea">throw_runtime_error</link>(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;msg)&#32;{
10548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a3cbceeab9252d1b752f66a2826e92548">throw_exception</link>(std::runtime_error(msg));
10549 &#32;&#32;&#32;&#32;}
10550 
10551 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch;</emphasis>
10552 <emphasis role="comment">//&#32;end&#32;catch_enforce.cpp</emphasis>
10553 <emphasis role="comment">//&#32;start&#32;catch_enum_values_registry.cpp</emphasis>
10554 <emphasis role="comment">//&#32;start&#32;catch_enum_values_registry.h</emphasis>
10555 
10556 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
10557 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
10558 
10559 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10560 
10561 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
10562 
10563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::unique_ptr&lt;EnumInfo&gt;&#32;makeEnumInfo(&#32;StringRef&#32;enumName,&#32;StringRef&#32;allValueNames,&#32;std::vector&lt;int&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;values&#32;);
10564 
10565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>EnumValuesRegistry&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;IMutableEnumValuesRegistry&#32;{
10566 
10567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::unique_ptr&lt;EnumInfo&gt;&gt;&#32;m_enumInfos;
10568 
10569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EnumInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;registerEnum(&#32;StringRef&#32;enumName,&#32;StringRef&#32;allEnums,&#32;std::vector&lt;int&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;values)&#32;<emphasis role="keyword">override</emphasis>;
10570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
10571 
10572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;StringRef&gt;&#32;parseEnums(&#32;StringRef&#32;enums&#32;);
10573 
10574 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;Detail</emphasis>
10575 
10576 }&#32;<emphasis role="comment">//&#32;Catch</emphasis>
10577 
10578 <emphasis role="comment">//&#32;end&#32;catch_enum_values_registry.h</emphasis>
10579 
10580 <emphasis role="preprocessor">#include&#32;&lt;map&gt;</emphasis>
10581 <emphasis role="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>
10582 
10583 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10584 
10585 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_mutable_enum_values_registry_1aebd423693128987c89ac732478d74673">IMutableEnumValuesRegistry::~IMutableEnumValuesRegistry</link>()&#32;{}
10586 
10587 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
10588 
10589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>{
10590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Extracts&#32;the&#32;actual&#32;name&#32;part&#32;of&#32;an&#32;enum&#32;instance</emphasis>
10591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;In&#32;other&#32;words,&#32;it&#32;returns&#32;the&#32;Blue&#32;part&#32;of&#32;Bikeshed::Colour::Blue</emphasis>
10592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StringRef&#32;extractInstanceName(StringRef&#32;enumInstance)&#32;{
10593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Find&#32;last&#32;occurrence&#32;of&#32;&quot;:&quot;</emphasis>
10594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;name_start&#32;=&#32;enumInstance.size();
10595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(name_start&#32;&gt;&#32;0&#32;&amp;&amp;&#32;enumInstance[name_start&#32;-&#32;1]&#32;!=&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>)&#32;{
10596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--name_start;
10597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;enumInstance.substr(name_start,&#32;enumInstance.size()&#32;-&#32;name_start);
10599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10601 
10602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;StringRef&gt;&#32;parseEnums(&#32;StringRef&#32;enums&#32;)&#32;{
10603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;enumValues&#32;=&#32;<link linkend="_namespace_catch_1a678e3c779388970bb3ec5802245f93d7">splitStringRef</link>(&#32;enums,&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>&#32;);
10604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;StringRef&gt;&#32;parsed;
10605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parsed.reserve(&#32;enumValues.size()&#32;);
10606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;enumValue&#32;:&#32;enumValues&#32;)&#32;{
10607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parsed.push_back(<link linkend="_namespace_catch_1a084108b47f37d8bfd5db51c50c7451b3">trim</link>(extractInstanceName(enumValue)));
10608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;parsed;
10610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10611 
10612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_detail_1_1_enum_info_1ab6608593c00614a688045fe8d911258d">EnumInfo::~EnumInfo</link>()&#32;{}
10613 
10614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StringRef&#32;<link linkend="_struct_catch_1_1_detail_1_1_enum_info_1a2fdfacc411d7afb1cb690366e5e49cb3">EnumInfo::lookup</link>(&#32;<emphasis role="keywordtype">int</emphasis>&#32;value&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
10615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;valueToName&#32;:&#32;<link linkend="_struct_catch_1_1_detail_1_1_enum_info_1ad65c0537a50d375859295a2c18ade489">m_values</link>&#32;)&#32;{
10616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;valueToName.first&#32;==&#32;value&#32;)
10617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;valueToName.second;
10618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;{**&#32;unexpected&#32;enum&#32;value&#32;**}&quot;</emphasis>_sr;
10620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10621 
10622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::unique_ptr&lt;EnumInfo&gt;&#32;makeEnumInfo(&#32;StringRef&#32;enumName,&#32;StringRef&#32;allValueNames,&#32;std::vector&lt;int&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;values&#32;)&#32;{
10623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::unique_ptr&lt;EnumInfo&gt;&#32;enumInfo(&#32;<emphasis role="keyword">new</emphasis>&#32;EnumInfo&#32;);
10624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enumInfo-&gt;m_name&#32;=&#32;enumName;
10625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enumInfo-&gt;m_values.reserve(&#32;<link linkend="_namespace_catch_1_1_generators_1aff55717239311a0e8352a4de5d29967f">values</link>.size()&#32;);
10626 
10627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;valueNames&#32;=&#32;Catch::Detail::parseEnums(&#32;allValueNames&#32;);
10628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(&#32;valueNames.size()&#32;==&#32;<link linkend="_namespace_catch_1_1_generators_1aff55717239311a0e8352a4de5d29967f">values</link>.size()&#32;);
10629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;i&#32;=&#32;0;
10630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;value&#32;:&#32;<link linkend="_namespace_catch_1_1_generators_1aff55717239311a0e8352a4de5d29967f">values</link>&#32;)
10631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enumInfo-&gt;m_values.emplace_back(<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>,&#32;valueNames[i++]);
10632 
10633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;enumInfo;
10634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10635 
10636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EnumInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;EnumValuesRegistry::registerEnum(&#32;StringRef&#32;enumName,&#32;StringRef&#32;allValueNames,&#32;std::vector&lt;int&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;values&#32;)&#32;{
10637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_enumInfos.push_back(makeEnumInfo(enumName,&#32;allValueNames,&#32;values));
10638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*m_enumInfos.back();
10639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10640 
10641 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;Detail</emphasis>
10642 }&#32;<emphasis role="comment">//&#32;Catch</emphasis>
10643 
10644 <emphasis role="comment">//&#32;end&#32;catch_enum_values_registry.cpp</emphasis>
10645 <emphasis role="comment">//&#32;start&#32;catch_errno_guard.cpp</emphasis>
10646 
10647 <emphasis role="preprocessor">#include&#32;&lt;cerrno&gt;</emphasis>
10648 
10649 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ErrnoGuard::ErrnoGuard():m_oldErrno(errno){}
10651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ErrnoGuard::~ErrnoGuard()&#32;{&#32;errno&#32;=&#32;m_oldErrno;&#32;}
10652 }
10653 <emphasis role="comment">//&#32;end&#32;catch_errno_guard.cpp</emphasis>
10654 <emphasis role="comment">//&#32;start&#32;catch_exception_translator_registry.cpp</emphasis>
10655 
10656 <emphasis role="comment">//&#32;start&#32;catch_exception_translator_registry.h</emphasis>
10657 
10658 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
10659 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
10660 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
10661 
10662 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10663 
10664 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ExceptionTranslatorRegistry&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;IExceptionTranslatorRegistry&#32;{
10665 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
10666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~ExceptionTranslatorRegistry();
10667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;registerTranslator(&#32;<emphasis role="keyword">const</emphasis>&#32;IExceptionTranslator*&#32;translator&#32;);
10668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_namespace_catch_1adafff91485eeeeb9e9333f317cc0e3b1">translateActiveException</link>()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
10669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;tryTranslators()&#32;<emphasis role="keyword">const</emphasis>;
10670 
10671 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
10672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::unique_ptr&lt;IExceptionTranslator&#32;const&gt;&gt;&#32;m_translators;
10673 &#32;&#32;&#32;&#32;};
10674 }
10675 
10676 <emphasis role="comment">//&#32;end&#32;catch_exception_translator_registry.h</emphasis>
10677 <emphasis role="preprocessor">#ifdef&#32;__OBJC__</emphasis>
10678 <emphasis role="preprocessor">#import&#32;&quot;Foundation/Foundation.h&quot;</emphasis>
10679 <emphasis role="preprocessor">#endif</emphasis>
10680 
10681 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10682 
10683 &#32;&#32;&#32;&#32;ExceptionTranslatorRegistry::~ExceptionTranslatorRegistry()&#32;{
10684 &#32;&#32;&#32;&#32;}
10685 
10686 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ExceptionTranslatorRegistry::registerTranslator(&#32;<emphasis role="keyword">const</emphasis>&#32;IExceptionTranslator*&#32;translator&#32;)&#32;{
10687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_translators.push_back(&#32;std::unique_ptr&lt;const&#32;IExceptionTranslator&gt;(&#32;translator&#32;)&#32;);
10688 &#32;&#32;&#32;&#32;}
10689 
10690 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</emphasis>
10691 &#32;&#32;&#32;&#32;std::string&#32;ExceptionTranslatorRegistry::translateActiveException()<emphasis role="keyword">&#32;const&#32;</emphasis>{
10692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
10693 <emphasis role="preprocessor">#ifdef&#32;__OBJC__</emphasis>
10694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;In&#32;Objective-C&#32;try&#32;objective-c&#32;exceptions&#32;first</emphasis>
10695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">@try</emphasis>&#32;{
10696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tryTranslators();
10697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">@catch</emphasis>&#32;(NSException&#32;*exception)&#32;{
10699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">Catch::Detail::stringify</link>(&#32;[exception&#32;description]&#32;);
10700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10701 <emphasis role="preprocessor">#else</emphasis>
10702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compiling&#32;a&#32;mixed&#32;mode&#32;project&#32;with&#32;MSVC&#32;means&#32;that&#32;CLR</emphasis>
10703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;exceptions&#32;will&#32;be&#32;caught&#32;in&#32;(...)&#32;as&#32;well.&#32;However,&#32;these</emphasis>
10704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;do&#32;not&#32;fill-in&#32;std::current_exception&#32;and&#32;thus&#32;lead&#32;to&#32;crash</emphasis>
10705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;when&#32;attempting&#32;rethrow.</emphasis>
10706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;/EHa&#32;switch&#32;also&#32;causes&#32;structured&#32;exceptions&#32;to&#32;be&#32;caught</emphasis>
10707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;here,&#32;but&#32;they&#32;fill-in&#32;current_exception&#32;properly,&#32;so</emphasis>
10708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;at&#32;worst&#32;the&#32;output&#32;should&#32;be&#32;a&#32;little&#32;weird,&#32;instead&#32;of</emphasis>
10709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;causing&#32;a&#32;crash.</emphasis>
10710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::current_exception()&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{
10711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Non&#32;C++&#32;exception.&#32;Possibly&#32;a&#32;CLR&#32;exception.&quot;</emphasis>;
10712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tryTranslators();
10714 <emphasis role="preprocessor">#endif</emphasis>
10715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>(&#32;TestFailureException&amp;&#32;)&#32;{
10717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::rethrow_exception(std::current_exception());
10718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>(&#32;std::exception&amp;&#32;ex&#32;)&#32;{
10720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ex.what();
10721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>(&#32;std::string&amp;&#32;msg&#32;)&#32;{
10723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;msg;
10724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>(&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;msg&#32;)&#32;{
10726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;msg;
10727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>(...)&#32;{
10729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Unknown&#32;exception&quot;</emphasis>;
10730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10731 &#32;&#32;&#32;&#32;}
10732 
10733 &#32;&#32;&#32;&#32;std::string&#32;ExceptionTranslatorRegistry::tryTranslators()<emphasis role="keyword">&#32;const&#32;</emphasis>{
10734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_translators.empty())&#32;{
10735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::rethrow_exception(std::current_exception());
10736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
10737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_translators[0]-&gt;translate(m_translators.begin()&#32;+&#32;1,&#32;m_translators.end());
10738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10739 &#32;&#32;&#32;&#32;}
10740 
10741 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;^^&#32;Exceptions&#32;are&#32;enabled&#32;//&#32;Exceptions&#32;are&#32;disabled&#32;vv</emphasis>
10742 &#32;&#32;&#32;&#32;std::string&#32;ExceptionTranslatorRegistry::translateActiveException()<emphasis role="keyword">&#32;const&#32;</emphasis>{
10743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1af445c1e136fadba0e92f3c22d68a7641">CATCH_INTERNAL_ERROR</link>(<emphasis role="stringliteral">&quot;Attempted&#32;to&#32;translate&#32;active&#32;exception&#32;under&#32;CATCH_CONFIG_DISABLE_EXCEPTIONS!&quot;</emphasis>);
10744 &#32;&#32;&#32;&#32;}
10745 
10746 &#32;&#32;&#32;&#32;std::string&#32;ExceptionTranslatorRegistry::tryTranslators()<emphasis role="keyword">&#32;const&#32;</emphasis>{
10747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1af445c1e136fadba0e92f3c22d68a7641">CATCH_INTERNAL_ERROR</link>(<emphasis role="stringliteral">&quot;Attempted&#32;to&#32;use&#32;exception&#32;translators&#32;under&#32;CATCH_CONFIG_DISABLE_EXCEPTIONS!&quot;</emphasis>);
10748 &#32;&#32;&#32;&#32;}
10749 <emphasis role="preprocessor">#endif</emphasis>
10750 
10751 }
10752 <emphasis role="comment">//&#32;end&#32;catch_exception_translator_registry.cpp</emphasis>
10753 <emphasis role="comment">//&#32;start&#32;catch_fatal_condition.cpp</emphasis>
10754 
10755 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
10756 
10757 <emphasis role="preprocessor">#if&#32;!defined(&#32;CATCH_CONFIG_WINDOWS_SEH&#32;)&#32;&amp;&amp;&#32;!defined(&#32;CATCH_CONFIG_POSIX_SIGNALS&#32;)</emphasis>
10758 
10759 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10760 
10761 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;neither&#32;SEH&#32;nor&#32;signal&#32;handling&#32;is&#32;required,&#32;the&#32;handler&#32;impls</emphasis>
10762 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;do&#32;not&#32;have&#32;to&#32;do&#32;anything,&#32;and&#32;can&#32;be&#32;empty.</emphasis>
10763 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;FatalConditionHandler::engage_platform()&#32;{}
10764 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;FatalConditionHandler::disengage_platform()&#32;{}
10765 &#32;&#32;&#32;&#32;FatalConditionHandler::FatalConditionHandler()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
10766 &#32;&#32;&#32;&#32;FatalConditionHandler::~FatalConditionHandler()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
10767 
10768 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
10769 
10770 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;!CATCH_CONFIG_WINDOWS_SEH&#32;&amp;&amp;&#32;!CATCH_CONFIG_POSIX_SIGNALS</emphasis>
10771 
10772 <emphasis role="preprocessor">#if&#32;defined(&#32;CATCH_CONFIG_WINDOWS_SEH&#32;)&#32;&amp;&amp;&#32;defined(&#32;CATCH_CONFIG_POSIX_SIGNALS&#32;)</emphasis>
10773 <emphasis role="preprocessor">#error&#32;&quot;Inconsistent&#32;configuration:&#32;Windows&apos;&#32;SEH&#32;handling&#32;and&#32;POSIX&#32;signals&#32;cannot&#32;be&#32;enabled&#32;at&#32;the&#32;same&#32;time&quot;</emphasis>
10774 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_WINDOWS_SEH&#32;&amp;&amp;&#32;CATCH_CONFIG_POSIX_SIGNALS</emphasis>
10775 
10776 <emphasis role="preprocessor">#if&#32;defined(&#32;CATCH_CONFIG_WINDOWS_SEH&#32;)&#32;||&#32;defined(&#32;CATCH_CONFIG_POSIX_SIGNALS&#32;)</emphasis>
10777 
10778 <emphasis role="keyword">namespace&#32;</emphasis>{
10780 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;reportFatal(&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<emphasis role="keyword">const</emphasis>&#32;message&#32;)&#32;{
10781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a228a625318bb6183842e394eeba17d50">Catch::getCurrentContext</link>().<link linkend="_struct_catch_1_1_i_context_1a950f10a5f6d3c9385f9493ba6298b174">getResultCapture</link>()-&gt;handleFatalErrorCondition(&#32;message&#32;);
10782 &#32;&#32;&#32;&#32;}
10783 
10787 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::size_t&#32;minStackSizeForErrors&#32;=&#32;32&#32;*&#32;1024;
10788 }&#32;<emphasis role="comment">//&#32;end&#32;unnamed&#32;namespace</emphasis>
10789 
10790 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_WINDOWS_SEH&#32;||&#32;CATCH_CONFIG_POSIX_SIGNALS</emphasis>
10791 
10792 <emphasis role="preprocessor">#if&#32;defined(&#32;CATCH_CONFIG_WINDOWS_SEH&#32;)</emphasis>
10793 
10794 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10795 
10796 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>SignalDefs&#32;{&#32;DWORD&#32;id;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;name;&#32;};
10797 
10798 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;There&#32;is&#32;no&#32;1-1&#32;mapping&#32;between&#32;signals&#32;and&#32;windows&#32;exceptions.</emphasis>
10799 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Windows&#32;can&#32;easily&#32;distinguish&#32;between&#32;SO&#32;and&#32;SigSegV,</emphasis>
10800 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;but&#32;SigInt,&#32;SigTerm,&#32;etc&#32;are&#32;handled&#32;differently.</emphasis>
10801 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;SignalDefs&#32;signalDefs[]&#32;=&#32;{
10802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>DWORD<emphasis role="keyword">&gt;</emphasis>(EXCEPTION_ILLEGAL_INSTRUCTION),&#32;&#32;<emphasis role="stringliteral">&quot;SIGILL&#32;-&#32;Illegal&#32;instruction&#32;signal&quot;</emphasis>&#32;},
10803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>DWORD<emphasis role="keyword">&gt;</emphasis>(EXCEPTION_STACK_OVERFLOW),&#32;<emphasis role="stringliteral">&quot;SIGSEGV&#32;-&#32;Stack&#32;overflow&quot;</emphasis>&#32;},
10804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>DWORD<emphasis role="keyword">&gt;</emphasis>(EXCEPTION_ACCESS_VIOLATION),&#32;<emphasis role="stringliteral">&quot;SIGSEGV&#32;-&#32;Segmentation&#32;violation&#32;signal&quot;</emphasis>&#32;},
10805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>DWORD<emphasis role="keyword">&gt;</emphasis>(EXCEPTION_INT_DIVIDE_BY_ZERO),&#32;<emphasis role="stringliteral">&quot;Divide&#32;by&#32;zero&#32;error&quot;</emphasis>&#32;},
10806 &#32;&#32;&#32;&#32;};
10807 
10808 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;LONG&#32;CALLBACK&#32;handleVectoredException(PEXCEPTION_POINTERS&#32;ExceptionInfo)&#32;{
10809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;def&#32;:&#32;signalDefs)&#32;{
10810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionCode&#32;==&#32;def.id)&#32;{
10811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reportFatal(def.name);
10812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;its&#32;not&#32;an&#32;exception&#32;we&#32;care&#32;about,&#32;pass&#32;it&#32;along.</emphasis>
10815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;stops&#32;us&#32;from&#32;eating&#32;debugger&#32;breaks&#32;etc.</emphasis>
10816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;EXCEPTION_CONTINUE_SEARCH;
10817 &#32;&#32;&#32;&#32;}
10818 
10819 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Since&#32;we&#32;do&#32;not&#32;support&#32;multiple&#32;instantiations,&#32;we&#32;put&#32;these</emphasis>
10820 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;into&#32;global&#32;variables&#32;and&#32;rely&#32;on&#32;cleaning&#32;them&#32;up&#32;in&#32;outlined</emphasis>
10821 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructors/destructors</emphasis>
10822 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;PVOID&#32;exceptionHandlerHandle&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
10823 
10824 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;MSVC,&#32;we&#32;reserve&#32;part&#32;of&#32;the&#32;stack&#32;memory&#32;for&#32;handling</emphasis>
10825 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;memory&#32;overflow&#32;structured&#32;exception.</emphasis>
10826 &#32;&#32;&#32;&#32;FatalConditionHandler::FatalConditionHandler()&#32;{
10827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ULONG&#32;guaranteeSize&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ULONG<emphasis role="keyword">&gt;</emphasis>(minStackSizeForErrors);
10828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!SetThreadStackGuarantee(&amp;guaranteeSize))&#32;{
10829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;do&#32;not&#32;want&#32;to&#32;fully&#32;error&#32;out,&#32;because&#32;needing</emphasis>
10830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;stack&#32;reserve&#32;should&#32;be&#32;rare&#32;enough&#32;anyway.</emphasis>
10831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a54c1ce08041448d684ae8edc14162cd2">Catch::cerr</link>()
10832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Failed&#32;to&#32;reserve&#32;piece&#32;of&#32;stack.&quot;</emphasis>
10833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;Stack&#32;overflows&#32;will&#32;not&#32;be&#32;reported&#32;successfully.&quot;</emphasis>;
10834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10835 &#32;&#32;&#32;&#32;}
10836 
10837 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;do&#32;not&#32;attempt&#32;to&#32;unset&#32;the&#32;stack&#32;guarantee,&#32;because</emphasis>
10838 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Windows&#32;does&#32;not&#32;support&#32;lowering&#32;the&#32;stack&#32;size&#32;guarantee.</emphasis>
10839 &#32;&#32;&#32;&#32;FatalConditionHandler::~FatalConditionHandler()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
10840 
10841 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;FatalConditionHandler::engage_platform()&#32;{
10842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Register&#32;as&#32;first&#32;handler&#32;in&#32;current&#32;chain</emphasis>
10843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exceptionHandlerHandle&#32;=&#32;AddVectoredExceptionHandler(1,&#32;handleVectoredException);
10844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!exceptionHandlerHandle)&#32;{
10845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1a834a24a39cf448d5a0f812e716be1c76">CATCH_RUNTIME_ERROR</link>(<emphasis role="stringliteral">&quot;Could&#32;not&#32;register&#32;vectored&#32;exception&#32;handler&quot;</emphasis>);
10846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10847 &#32;&#32;&#32;&#32;}
10848 
10849 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;FatalConditionHandler::disengage_platform()&#32;{
10850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!RemoveVectoredExceptionHandler(exceptionHandlerHandle))&#32;{
10851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1a834a24a39cf448d5a0f812e716be1c76">CATCH_RUNTIME_ERROR</link>(<emphasis role="stringliteral">&quot;Could&#32;not&#32;unregister&#32;vectored&#32;exception&#32;handler&quot;</emphasis>);
10852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exceptionHandlerHandle&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
10854 &#32;&#32;&#32;&#32;}
10855 
10856 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
10857 
10858 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_WINDOWS_SEH</emphasis>
10859 
10860 <emphasis role="preprocessor">#if&#32;defined(&#32;CATCH_CONFIG_POSIX_SIGNALS&#32;)</emphasis>
10861 
10862 <emphasis role="preprocessor">#include&#32;&lt;signal.h&gt;</emphasis>
10863 
10864 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10865 
10866 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>SignalDefs&#32;{
10867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;id;
10868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;name;
10869 &#32;&#32;&#32;&#32;};
10870 
10871 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;SignalDefs&#32;signalDefs[]&#32;=&#32;{
10872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;SIGINT,&#32;&#32;<emphasis role="stringliteral">&quot;SIGINT&#32;-&#32;Terminal&#32;interrupt&#32;signal&quot;</emphasis>&#32;},
10873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;SIGILL,&#32;&#32;<emphasis role="stringliteral">&quot;SIGILL&#32;-&#32;Illegal&#32;instruction&#32;signal&quot;</emphasis>&#32;},
10874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;SIGFPE,&#32;&#32;<emphasis role="stringliteral">&quot;SIGFPE&#32;-&#32;Floating&#32;point&#32;error&#32;signal&quot;</emphasis>&#32;},
10875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;SIGSEGV,&#32;<emphasis role="stringliteral">&quot;SIGSEGV&#32;-&#32;Segmentation&#32;violation&#32;signal&quot;</emphasis>&#32;},
10876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;SIGTERM,&#32;<emphasis role="stringliteral">&quot;SIGTERM&#32;-&#32;Termination&#32;request&#32;signal&quot;</emphasis>&#32;},
10877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;SIGABRT,&#32;<emphasis role="stringliteral">&quot;SIGABRT&#32;-&#32;Abort&#32;(abnormal&#32;termination)&#32;signal&quot;</emphasis>&#32;}
10878 &#32;&#32;&#32;&#32;};
10879 
10880 <emphasis role="comment">//&#32;Older&#32;GCCs&#32;trigger&#32;-Wmissing-field-initializers&#32;for&#32;T&#32;foo&#32;=&#32;{}</emphasis>
10881 <emphasis role="comment">//&#32;which&#32;is&#32;zero&#32;initialization,&#32;but&#32;not&#32;explicit.&#32;We&#32;want&#32;to&#32;avoid</emphasis>
10882 <emphasis role="comment">//&#32;that.</emphasis>
10883 <emphasis role="preprocessor">#if&#32;defined(__GNUC__)</emphasis>
10884 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
10885 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wmissing-field-initializers&quot;</emphasis>
10886 <emphasis role="preprocessor">#endif</emphasis>
10887 
10888 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;altStackMem&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
10889 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::size_t&#32;altStackSize&#32;=&#32;0;
10890 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;stack_t&#32;oldSigStack{};
10891 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>sigaction&#32;oldSigActions[sizeof(signalDefs)&#32;/&#32;sizeof(SignalDefs)]{};
10892 
10893 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;restorePreviousSignalHandlers()&#32;{
10894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;set&#32;signal&#32;handlers&#32;back&#32;to&#32;the&#32;previous&#32;ones.&#32;Hopefully</emphasis>
10895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;nobody&#32;overwrote&#32;them&#32;in&#32;the&#32;meantime,&#32;and&#32;doesn&apos;t&#32;expect</emphasis>
10896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;their&#32;signal&#32;handlers&#32;to&#32;live&#32;past&#32;ours&#32;given&#32;that&#32;they</emphasis>
10897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;installed&#32;them&#32;after&#32;ours..</emphasis>
10898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<emphasis role="keyword">sizeof</emphasis>(signalDefs)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(SignalDefs);&#32;++i)&#32;{
10899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sigaction(signalDefs[i].<emphasis role="keywordtype">id</emphasis>,&#32;&amp;oldSigActions[i],&#32;<emphasis role="keyword">nullptr</emphasis>);
10900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Return&#32;the&#32;old&#32;stack</emphasis>
10902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sigaltstack(&amp;oldSigStack,&#32;<emphasis role="keyword">nullptr</emphasis>);
10903 &#32;&#32;&#32;&#32;}
10904 
10905 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;handleSignal(&#32;<emphasis role="keywordtype">int</emphasis>&#32;sig&#32;)&#32;{
10906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;name&#32;=&#32;<emphasis role="stringliteral">&quot;&lt;unknown&#32;signal&gt;&quot;</emphasis>;
10907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;def&#32;:&#32;signalDefs)&#32;{
10908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sig&#32;==&#32;def.id)&#32;{
10909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;name&#32;=&#32;def.name;
10910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
10911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;need&#32;to&#32;restore&#32;previous&#32;signal&#32;handlers&#32;and&#32;let&#32;them&#32;do</emphasis>
10914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;their&#32;thing,&#32;so&#32;that&#32;the&#32;users&#32;can&#32;have&#32;the&#32;debugger&#32;break</emphasis>
10915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;when&#32;a&#32;signal&#32;is&#32;raised,&#32;and&#32;so&#32;on.</emphasis>
10916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;restorePreviousSignalHandlers();
10917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reportFatal(&#32;name&#32;);
10918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;raise(&#32;sig&#32;);
10919 &#32;&#32;&#32;&#32;}
10920 
10921 &#32;&#32;&#32;&#32;FatalConditionHandler::FatalConditionHandler()&#32;{
10922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(!altStackMem&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Cannot&#32;initialize&#32;POSIX&#32;signal&#32;handler&#32;when&#32;one&#32;already&#32;exists&quot;</emphasis>);
10923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(altStackSize&#32;==&#32;0)&#32;{
10924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;altStackSize&#32;=&#32;std::max(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(SIGSTKSZ),&#32;minStackSizeForErrors);
10925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;altStackMem&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[altStackSize]();
10927 &#32;&#32;&#32;&#32;}
10928 
10929 &#32;&#32;&#32;&#32;FatalConditionHandler::~FatalConditionHandler()&#32;{
10930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;altStackMem;
10931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;signal&#32;that&#32;another&#32;instance&#32;can&#32;be&#32;constructed&#32;by&#32;zeroing</emphasis>
10932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;out&#32;the&#32;pointer.</emphasis>
10933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;altStackMem&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
10934 &#32;&#32;&#32;&#32;}
10935 
10936 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;FatalConditionHandler::engage_platform()&#32;{
10937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stack_t&#32;sigStack;
10938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sigStack.ss_sp&#32;=&#32;altStackMem;
10939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sigStack.ss_size&#32;=&#32;altStackSize;
10940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sigStack.ss_flags&#32;=&#32;0;
10941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sigaltstack(&amp;sigStack,&#32;&amp;oldSigStack);
10942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sigaction&#32;sa&#32;=&#32;{&#32;};
10943 
10944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sa.sa_handler&#32;=&#32;handleSignal;
10945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sa.sa_flags&#32;=&#32;SA_ONSTACK;
10946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<emphasis role="keyword">sizeof</emphasis>(signalDefs)/<emphasis role="keyword">sizeof</emphasis>(SignalDefs);&#32;++i)&#32;{
10947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sigaction(signalDefs[i].<emphasis role="keywordtype">id</emphasis>,&#32;&amp;sa,&#32;&amp;oldSigActions[i]);
10948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10949 &#32;&#32;&#32;&#32;}
10950 
10951 <emphasis role="preprocessor">#if&#32;defined(__GNUC__)</emphasis>
10952 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
10953 <emphasis role="preprocessor">#endif</emphasis>
10954 
10955 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;FatalConditionHandler::disengage_platform()&#32;{
10956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;restorePreviousSignalHandlers();
10957 &#32;&#32;&#32;&#32;}
10958 
10959 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
10960 
10961 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_POSIX_SIGNALS</emphasis>
10962 <emphasis role="comment">//&#32;end&#32;catch_fatal_condition.cpp</emphasis>
10963 <emphasis role="comment">//&#32;start&#32;catch_generators.cpp</emphasis>
10964 
10965 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>
10966 <emphasis role="preprocessor">#include&#32;&lt;set&gt;</emphasis>
10967 
10968 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10969 
10970 <link linkend="_struct_catch_1_1_i_generator_tracker_1a20b3c82baa68f821c180d6dac1234eb1">IGeneratorTracker::~IGeneratorTracker</link>()&#32;{}
10971 
10972 <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_class_catch_1_1_generator_exception_1ac40705ff5da208ce3a7d3023d0d3f4c6">GeneratorException::what</link>()&#32;const&#32;noexcept&#32;{
10973 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_catch_1_1_generator_exception_1a493b6ec9e3be0e3852de73c87dba6e5e">m_msg</link>;
10974 }
10975 
10976 <emphasis role="keyword">namespace&#32;</emphasis>Generators&#32;{
10977 
10978 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_generators_1_1_generator_untyped_base_1a6f05f8099fdc5744a7aff68aa8c09c7f">GeneratorUntypedBase::~GeneratorUntypedBase</link>()&#32;{}
10979 
10980 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1_1_generators_1ac1fe3550c5f97370fc6729e04d7571b8">acquireGeneratorTracker</link>(&#32;StringRef&#32;generatorName,&#32;SourceLineInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lineInfo&#32;)&#32;-&gt;&#32;IGeneratorTracker&amp;&#32;{
10981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1af718eeab870712f292ed8dc6ee3f6488">getResultCapture</link>().<link linkend="_struct_catch_1_1_i_result_capture_1a8f93a848e0a48b630ca9ecbf225e4817">acquireGeneratorTracker</link>(&#32;generatorName,&#32;lineInfo&#32;);
10982 &#32;&#32;&#32;&#32;}
10983 
10984 }&#32;<emphasis role="comment">//&#32;namespace&#32;Generators</emphasis>
10985 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
10986 <emphasis role="comment">//&#32;end&#32;catch_generators.cpp</emphasis>
10987 <emphasis role="comment">//&#32;start&#32;catch_interfaces_capture.cpp</emphasis>
10988 
10989 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10990 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_result_capture_1a3bd16719d6772b7470887fc36c6d0808">IResultCapture::~IResultCapture</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
10991 }
10992 <emphasis role="comment">//&#32;end&#32;catch_interfaces_capture.cpp</emphasis>
10993 <emphasis role="comment">//&#32;start&#32;catch_interfaces_config.cpp</emphasis>
10994 
10995 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
10996 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_config_1adadf7c57478e4b0c83bea5b38d2dbc87">IConfig::~IConfig</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
10997 }
10998 <emphasis role="comment">//&#32;end&#32;catch_interfaces_config.cpp</emphasis>
10999 <emphasis role="comment">//&#32;start&#32;catch_interfaces_exception.cpp</emphasis>
11000 
11001 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
11002 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_exception_translator_1afa00bb6258c07591df472aadae05783f">IExceptionTranslator::~IExceptionTranslator</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
11003 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_exception_translator_registry_1acf7402e18789ea46d54ea8564ac358d3">IExceptionTranslatorRegistry::~IExceptionTranslatorRegistry</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
11004 }
11005 <emphasis role="comment">//&#32;end&#32;catch_interfaces_exception.cpp</emphasis>
11006 <emphasis role="comment">//&#32;start&#32;catch_interfaces_registry_hub.cpp</emphasis>
11007 
11008 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
11009 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_registry_hub_1a050de0f27f96888c8b410992146c9a09">IRegistryHub::~IRegistryHub</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
11010 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_mutable_registry_hub_1a759ca1e044e19f905fb4d306f1367193">IMutableRegistryHub::~IMutableRegistryHub</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
11011 }
11012 <emphasis role="comment">//&#32;end&#32;catch_interfaces_registry_hub.cpp</emphasis>
11013 <emphasis role="comment">//&#32;start&#32;catch_interfaces_reporter.cpp</emphasis>
11014 
11015 <emphasis role="comment">//&#32;start&#32;catch_reporter_listening.h</emphasis>
11016 
11017 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
11018 
11019 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ListeningReporter&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;IStreamingReporter&#32;{
11020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>Reporters&#32;=&#32;std::vector&lt;IStreamingReporterPtr&gt;;
11021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Reporters&#32;m_listeners;
11022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IStreamingReporterPtr&#32;m_reporter&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
11023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReporterPreferences&#32;m_preferences;
11024 
11025 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
11026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ListeningReporter();
11027 
11028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;addListener(&#32;IStreamingReporterPtr&amp;&amp;&#32;listener&#32;);
11029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;addReporter(&#32;IStreamingReporterPtr&amp;&amp;&#32;reporter&#32;);
11030 
11031 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:&#32;<emphasis role="comment">//&#32;IStreamingReporter</emphasis>
11032 
11033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReporterPreferences&#32;getPreferences()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
11034 
11035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;noMatchingTestCases(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;spec&#32;)&#32;<emphasis role="keyword">override</emphasis>;
11036 
11037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;reportInvalidArguments(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;arg)&#32;<emphasis role="keyword">override</emphasis>;
11038 
11039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::set&lt;Verbosity&gt;&#32;getSupportedVerbosities();
11040 
11041 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</emphasis>
11042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;benchmarkPreparing(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name)&#32;<emphasis role="keyword">override</emphasis>;
11043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;benchmarkStarting(&#32;BenchmarkInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;benchmarkInfo&#32;)&#32;<emphasis role="keyword">override</emphasis>;
11044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;benchmarkEnded(&#32;BenchmarkStats&lt;&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;benchmarkStats&#32;)&#32;<emphasis role="keyword">override</emphasis>;
11045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;benchmarkFailed(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;<emphasis role="keyword">override</emphasis>;
11046 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_ENABLE_BENCHMARKING</emphasis>
11047 
11048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testRunStarting(&#32;TestRunInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testRunInfo&#32;)&#32;<emphasis role="keyword">override</emphasis>;
11049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testGroupStarting(&#32;GroupInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;groupInfo&#32;)&#32;<emphasis role="keyword">override</emphasis>;
11050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testCaseStarting(&#32;TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testInfo&#32;)&#32;<emphasis role="keyword">override</emphasis>;
11051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;sectionStarting(&#32;SectionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;sectionInfo&#32;)&#32;<emphasis role="keyword">override</emphasis>;
11052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;assertionStarting(&#32;AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;assertionInfo&#32;)&#32;<emphasis role="keyword">override</emphasis>;
11053 
11054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;return&#32;value&#32;indicates&#32;if&#32;the&#32;messages&#32;buffer&#32;should&#32;be&#32;cleared:</emphasis>
11055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;assertionEnded(&#32;AssertionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;assertionStats&#32;)&#32;<emphasis role="keyword">override</emphasis>;
11056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;sectionEnded(&#32;SectionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;sectionStats&#32;)&#32;<emphasis role="keyword">override</emphasis>;
11057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testCaseEnded(&#32;TestCaseStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCaseStats&#32;)&#32;<emphasis role="keyword">override</emphasis>;
11058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testGroupEnded(&#32;TestGroupStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testGroupStats&#32;)&#32;<emphasis role="keyword">override</emphasis>;
11059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;testRunEnded(&#32;TestRunStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testRunStats&#32;)&#32;<emphasis role="keyword">override</emphasis>;
11060 
11061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;skipTest(&#32;TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testInfo&#32;)&#32;<emphasis role="keyword">override</emphasis>;
11062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isMulti()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
11063 
11064 &#32;&#32;&#32;&#32;};
11065 
11066 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
11067 
11068 <emphasis role="comment">//&#32;end&#32;catch_reporter_listening.h</emphasis>
11069 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
11070 
11071 &#32;&#32;&#32;&#32;ReporterConfig::ReporterConfig(&#32;<link linkend="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6">IConfigPtr</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_fullConfig&#32;)
11072 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_stream(&#32;&amp;_fullConfig-&gt;stream()&#32;),&#32;m_fullConfig(&#32;_fullConfig&#32;)&#32;{}
11073 
11074 &#32;&#32;&#32;&#32;ReporterConfig::ReporterConfig(&#32;<link linkend="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6">IConfigPtr</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_fullConfig,&#32;std::ostream&amp;&#32;_stream&#32;)
11075 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_stream(&#32;&amp;_stream&#32;),&#32;m_fullConfig(&#32;_fullConfig&#32;)&#32;{}
11076 
11077 &#32;&#32;&#32;&#32;std::ostream&amp;&#32;ReporterConfig::stream()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*m_stream;&#32;}
11078 &#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6">IConfigPtr</link>&#32;ReporterConfig::fullConfig()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_fullConfig;&#32;}
11079 
11080 &#32;&#32;&#32;&#32;TestRunInfo::TestRunInfo(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_name&#32;)&#32;:&#32;name(&#32;_name&#32;)&#32;{}
11081 
11082 &#32;&#32;&#32;&#32;GroupInfo::GroupInfo(&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_name,
11083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;_groupIndex,
11084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;_groupsCount&#32;)
11085 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;name(&#32;_name&#32;),
11086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;groupIndex(&#32;_groupIndex&#32;),
11087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;groupsCounts(&#32;_groupsCount&#32;)
11088 &#32;&#32;&#32;&#32;{}
11089 
11090 &#32;&#32;&#32;&#32;&#32;AssertionStats::AssertionStats(&#32;AssertionResult&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_assertionResult,
11091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;MessageInfo&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_infoMessages,
11092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Totals&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_totals&#32;)
11093 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;assertionResult(&#32;_assertionResult&#32;),
11094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;infoMessages(&#32;_infoMessages&#32;),
11095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;totals(&#32;_totals&#32;)
11096 &#32;&#32;&#32;&#32;{
11097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertionResult.m_resultData.lazyExpression.m_transientExpression&#32;=&#32;_assertionResult.m_resultData.lazyExpression.m_transientExpression;
11098 
11099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;assertionResult.hasMessage()&#32;)&#32;{
11100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copy&#32;message&#32;into&#32;messages&#32;list.</emphasis>
11101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;!TBD&#32;This&#32;should&#32;have&#32;been&#32;done&#32;earlier,&#32;somewhere</emphasis>
11102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MessageBuilder&#32;builder(&#32;assertionResult.getTestMacroName(),&#32;assertionResult.getSourceInfo(),&#32;assertionResult.getResultType()&#32;);
11103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;builder&#32;&lt;&lt;&#32;assertionResult.getMessage();
11104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;builder.m_info.message&#32;=&#32;builder.m_stream.str();
11105 
11106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;infoMessages.push_back(&#32;builder.m_info&#32;);
11107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11108 &#32;&#32;&#32;&#32;}
11109 
11110 &#32;&#32;&#32;&#32;&#32;AssertionStats::~AssertionStats()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
11111 
11112 &#32;&#32;&#32;&#32;SectionStats::SectionStats(&#32;&#32;SectionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_sectionInfo,
11113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Counts&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_assertions,
11114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;_durationInSeconds,
11115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_missingAssertions&#32;)
11116 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;sectionInfo(&#32;_sectionInfo&#32;),
11117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertions(&#32;_assertions&#32;),
11118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;durationInSeconds(&#32;_durationInSeconds&#32;),
11119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;missingAssertions(&#32;_missingAssertions&#32;)
11120 &#32;&#32;&#32;&#32;{}
11121 
11122 &#32;&#32;&#32;&#32;SectionStats::~SectionStats()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
11123 
11124 &#32;&#32;&#32;&#32;TestCaseStats::TestCaseStats(&#32;&#32;TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_testInfo,
11125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Totals&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_totals,
11126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_stdOut,
11127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_stdErr,
11128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_aborting&#32;)
11129 &#32;&#32;&#32;&#32;:&#32;testInfo(&#32;_testInfo&#32;),
11130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;totals(&#32;_totals&#32;),
11131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stdOut(&#32;_stdOut&#32;),
11132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stdErr(&#32;_stdErr&#32;),
11133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;aborting(&#32;_aborting&#32;)
11134 &#32;&#32;&#32;&#32;{}
11135 
11136 &#32;&#32;&#32;&#32;TestCaseStats::~TestCaseStats()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
11137 
11138 &#32;&#32;&#32;&#32;TestGroupStats::TestGroupStats(&#32;GroupInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_groupInfo,
11139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Totals&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_totals,
11140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_aborting&#32;)
11141 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;groupInfo(&#32;_groupInfo&#32;),
11142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;totals(&#32;_totals&#32;),
11143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;aborting(&#32;_aborting&#32;)
11144 &#32;&#32;&#32;&#32;{}
11145 
11146 &#32;&#32;&#32;&#32;TestGroupStats::TestGroupStats(&#32;GroupInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_groupInfo&#32;)
11147 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;groupInfo(&#32;_groupInfo&#32;),
11148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;aborting(&#32;false&#32;)
11149 &#32;&#32;&#32;&#32;{}
11150 
11151 &#32;&#32;&#32;&#32;TestGroupStats::~TestGroupStats()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
11152 
11153 &#32;&#32;&#32;&#32;TestRunStats::TestRunStats(&#32;&#32;&#32;TestRunInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_runInfo,
11154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Totals&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_totals,
11155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_aborting&#32;)
11156 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;runInfo(&#32;_runInfo&#32;),
11157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;totals(&#32;_totals&#32;),
11158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;aborting(&#32;_aborting&#32;)
11159 &#32;&#32;&#32;&#32;{}
11160 
11161 &#32;&#32;&#32;&#32;TestRunStats::~TestRunStats()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
11162 
11163 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;IStreamingReporter::fatalErrorEncountered(&#32;StringRef&#32;)&#32;{}
11164 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IStreamingReporter::isMulti()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
11165 
11166 &#32;&#32;&#32;&#32;IReporterFactory::~IReporterFactory()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
11167 &#32;&#32;&#32;&#32;IReporterRegistry::~IReporterRegistry()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
11168 
11169 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
11170 <emphasis role="comment">//&#32;end&#32;catch_interfaces_reporter.cpp</emphasis>
11171 <emphasis role="comment">//&#32;start&#32;catch_interfaces_runner.cpp</emphasis>
11172 
11173 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
11174 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_runner_1a5f539a88a7772d68de8a2e4028774209">IRunner::~IRunner</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
11175 }
11176 <emphasis role="comment">//&#32;end&#32;catch_interfaces_runner.cpp</emphasis>
11177 <emphasis role="comment">//&#32;start&#32;catch_interfaces_testcase.cpp</emphasis>
11178 
11179 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
11180 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_test_invoker_1a2c89f3eece5b1b677243766e409bd831">ITestInvoker::~ITestInvoker</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
11181 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_test_case_registry_1ae14798f05ac8e2b18cff532849a4da81">ITestCaseRegistry::~ITestCaseRegistry</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
11182 }
11183 <emphasis role="comment">//&#32;end&#32;catch_interfaces_testcase.cpp</emphasis>
11184 <emphasis role="comment">//&#32;start&#32;catch_leak_detector.cpp</emphasis>
11185 
11186 <emphasis role="preprocessor">#ifdef&#32;CATCH_CONFIG_WINDOWS_CRTDBG</emphasis>
11187 <emphasis role="preprocessor">#include&#32;&lt;crtdbg.h&gt;</emphasis>
11188 
11189 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
11190 
11191 &#32;&#32;&#32;&#32;LeakDetector::LeakDetector()&#32;{
11192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;flag&#32;=&#32;_CrtSetDbgFlag(_CRTDBG_REPORT_FLAG);
11193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flag&#32;|=&#32;_CRTDBG_LEAK_CHECK_DF;
11194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flag&#32;|=&#32;_CRTDBG_ALLOC_MEM_DF;
11195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CrtSetDbgFlag(flag);
11196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CrtSetReportMode(_CRT_WARN,&#32;_CRTDBG_MODE_FILE&#32;|&#32;_CRTDBG_MODE_DEBUG);
11197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CrtSetReportFile(_CRT_WARN,&#32;_CRTDBG_FILE_STDERR);
11198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Change&#32;this&#32;to&#32;leaking&#32;allocation&apos;s&#32;number&#32;to&#32;break&#32;there</emphasis>
11199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CrtSetBreakAlloc(-1);
11200 &#32;&#32;&#32;&#32;}
11201 }
11202 
11203 <emphasis role="preprocessor">#else</emphasis>
11204 
11205 &#32;&#32;&#32;&#32;Catch::LeakDetector::LeakDetector()&#32;{}
11206 
11207 <emphasis role="preprocessor">#endif</emphasis>
11208 
11209 Catch::LeakDetector::~LeakDetector()&#32;{
11210 &#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0f78e9afdebc6d4512d18e76fbf54b8c">Catch::cleanUp</link>();
11211 }
11212 <emphasis role="comment">//&#32;end&#32;catch_leak_detector.cpp</emphasis>
11213 <emphasis role="comment">//&#32;start&#32;catch_list.cpp</emphasis>
11214 
11215 <emphasis role="comment">//&#32;start&#32;catch_list.h</emphasis>
11216 
11217 <emphasis role="preprocessor">#include&#32;&lt;set&gt;</emphasis>
11218 
11219 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
11220 
11221 &#32;&#32;&#32;&#32;std::size_t&#32;listTests(&#32;Config&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;);
11222 
11223 &#32;&#32;&#32;&#32;std::size_t&#32;listTestsNamesOnly(&#32;Config&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;);
11224 
11225 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>TagInfo&#32;{
11226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;add(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;spelling&#32;);
11227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;all()&#32;<emphasis role="keyword">const</emphasis>;
11228 
11229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::set&lt;std::string&gt;&#32;spellings;
11230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;count&#32;=&#32;0;
11231 &#32;&#32;&#32;&#32;};
11232 
11233 &#32;&#32;&#32;&#32;std::size_t&#32;listTags(&#32;Config&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;);
11234 
11235 &#32;&#32;&#32;&#32;std::size_t&#32;listReporters();
11236 
11237 &#32;&#32;&#32;&#32;Option&lt;std::size_t&gt;&#32;list(&#32;std::shared_ptr&lt;Config&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;);
11238 
11239 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
11240 
11241 <emphasis role="comment">//&#32;end&#32;catch_list.h</emphasis>
11242 <emphasis role="comment">//&#32;start&#32;catch_text.h</emphasis>
11243 
11244 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
11245 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>clara::TextFlow;
11246 }
11247 
11248 <emphasis role="comment">//&#32;end&#32;catch_text.h</emphasis>
11249 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>
11250 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
11251 <emphasis role="preprocessor">#include&#32;&lt;iomanip&gt;</emphasis>
11252 
11253 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
11254 
11255 &#32;&#32;&#32;&#32;std::size_t&#32;listTests(&#32;Config&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;)&#32;{
11256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestSpec&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testSpec&#32;=&#32;config.testSpec();
11257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;config.hasTestFilters()&#32;)
11258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Matching&#32;test&#32;cases:\n&quot;</emphasis>;
11259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
11260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;All&#32;available&#32;test&#32;cases:\n&quot;</emphasis>;
11261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11262 
11263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;matchedTestCases&#32;=&#32;<link linkend="_namespace_catch_1a105d5acdec8a6b401e12a592557c9dd1">filterTests</link>(&#32;<link linkend="_namespace_catch_1a97039bab95e97f059410f67425f1f2da">getAllTestCasesSorted</link>(&#32;config&#32;),&#32;testSpec,&#32;config&#32;);
11264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCaseInfo&#32;:&#32;matchedTestCases&#32;)&#32;{
11265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Colour::Code&#32;colour&#32;=&#32;testCaseInfo.isHidden()
11266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;Colour::SecondaryText
11267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;Colour::None;
11268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Colour&#32;colourGuard(&#32;colour&#32;);
11269 
11270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()&#32;&lt;&lt;&#32;Column(&#32;testCaseInfo.name&#32;).initialIndent(&#32;2&#32;).indent(&#32;4&#32;)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
11271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;config.verbosity()&#32;&gt;=&#32;<link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737a655d20c1ca69519ca647684edbb2db35">Verbosity::High</link>&#32;)&#32;{
11272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()&#32;&lt;&lt;&#32;Column(&#32;<link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">Catch::Detail::stringify</link>(&#32;testCaseInfo.lineInfo&#32;)&#32;).indent(4)&#32;&lt;&lt;&#32;std::endl;
11273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;description&#32;=&#32;testCaseInfo.description;
11274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;description.empty()&#32;)
11275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;description&#32;=&#32;<emphasis role="stringliteral">&quot;(NO&#32;DESCRIPTION)&quot;</emphasis>;
11276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()&#32;&lt;&lt;&#32;Column(&#32;description&#32;).indent(4)&#32;&lt;&lt;&#32;std::endl;
11277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!testCaseInfo.tags.empty()&#32;)
11279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()&#32;&lt;&lt;&#32;Column(&#32;testCaseInfo.tagsAsString()&#32;).indent(&#32;6&#32;)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
11280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11281 
11282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!config.hasTestFilters()&#32;)
11283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()&#32;&lt;&lt;&#32;pluralise(&#32;matchedTestCases.size(),&#32;<emphasis role="stringliteral">&quot;test&#32;case&quot;</emphasis>&#32;)&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;std::endl;
11284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
11285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()&#32;&lt;&lt;&#32;pluralise(&#32;matchedTestCases.size(),&#32;<emphasis role="stringliteral">&quot;matching&#32;test&#32;case&quot;</emphasis>&#32;)&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;std::endl;
11286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;matchedTestCases.size();
11287 &#32;&#32;&#32;&#32;}
11288 
11289 &#32;&#32;&#32;&#32;std::size_t&#32;listTestsNamesOnly(&#32;Config&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;)&#32;{
11290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestSpec&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testSpec&#32;=&#32;config.testSpec();
11291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;matchedTests&#32;=&#32;0;
11292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;TestCase&gt;&#32;matchedTestCases&#32;=&#32;<link linkend="_namespace_catch_1a105d5acdec8a6b401e12a592557c9dd1">filterTests</link>(&#32;<link linkend="_namespace_catch_1a97039bab95e97f059410f67425f1f2da">getAllTestCasesSorted</link>(&#32;config&#32;),&#32;testSpec,&#32;config&#32;);
11293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCaseInfo&#32;:&#32;matchedTestCases&#32;)&#32;{
11294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;matchedTests++;
11295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_namespace_catch_1a695f62327be0676e046291eeaae15110">startsWith</link>(&#32;testCaseInfo.name,&#32;<emphasis role="charliteral">&apos;#&apos;</emphasis>&#32;)&#32;)
11296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>&#32;&lt;&lt;&#32;testCaseInfo.name&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>;
11297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
11298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()&#32;&lt;&lt;&#32;testCaseInfo.name;
11299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;config.verbosity()&#32;&gt;=&#32;<link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737a655d20c1ca69519ca647684edbb2db35">Verbosity::High</link>&#32;)
11300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t@&quot;</emphasis>&#32;&lt;&lt;&#32;testCaseInfo.lineInfo;
11301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()&#32;&lt;&lt;&#32;std::endl;
11302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;matchedTests;
11304 &#32;&#32;&#32;&#32;}
11305 
11306 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TagInfo::add(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;spelling&#32;)&#32;{
11307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++count;
11308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;spellings.insert(&#32;spelling&#32;);
11309 &#32;&#32;&#32;&#32;}
11310 
11311 &#32;&#32;&#32;&#32;std::string&#32;TagInfo::all()<emphasis role="keyword">&#32;const&#32;</emphasis>{
11312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size&#32;=&#32;0;
11313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;spelling&#32;:&#32;spellings)&#32;{
11314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Add&#32;2&#32;for&#32;the&#32;brackes</emphasis>
11315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;spelling.size()&#32;+&#32;2;
11316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11317 
11318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;out;&#32;out.reserve(size);
11319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;spelling&#32;:&#32;spellings)&#32;{
11320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;+=&#32;&apos;[&apos;;
11321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;+=&#32;spelling;
11322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;+=&#32;&apos;]&apos;;
11323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;out;
11325 &#32;&#32;&#32;&#32;}
11326 
11327 &#32;&#32;&#32;&#32;std::size_t&#32;listTags(&#32;Config&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;)&#32;{
11328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestSpec&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testSpec&#32;=&#32;config.testSpec();
11329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;config.hasTestFilters()&#32;)
11330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Tags&#32;for&#32;matching&#32;test&#32;cases:\n&quot;</emphasis>;
11331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
11332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;All&#32;available&#32;tags:\n&quot;</emphasis>;
11333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11334 
11335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::map&lt;std::string,&#32;TagInfo&gt;&#32;tagCounts;
11336 
11337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;TestCase&gt;&#32;matchedTestCases&#32;=&#32;<link linkend="_namespace_catch_1a105d5acdec8a6b401e12a592557c9dd1">filterTests</link>(&#32;<link linkend="_namespace_catch_1a97039bab95e97f059410f67425f1f2da">getAllTestCasesSorted</link>(&#32;config&#32;),&#32;testSpec,&#32;config&#32;);
11338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase&#32;:&#32;matchedTestCases&#32;)&#32;{
11339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;tagName&#32;:&#32;testCase.getTestCaseInfo().tags&#32;)&#32;{
11340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;lcaseTagName&#32;=&#32;<link linkend="_namespace_catch_1ac036a17412d318598ffda8e1fe7a1177">toLower</link>(&#32;tagName&#32;);
11341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;countIt&#32;=&#32;tagCounts.find(&#32;lcaseTagName&#32;);
11342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;countIt&#32;==&#32;tagCounts.end()&#32;)
11343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;countIt&#32;=&#32;tagCounts.insert(&#32;std::make_pair(&#32;lcaseTagName,&#32;TagInfo()&#32;)&#32;).first;
11344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;countIt-&gt;second.add(&#32;tagName&#32;);
11345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11347 
11348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;tagCount&#32;:&#32;tagCounts&#32;)&#32;{
11349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReusableStringStream&#32;rss;
11350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;std::setw(2)&#32;&lt;&lt;&#32;tagCount.second.count&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&quot;</emphasis>;
11351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;str&#32;=&#32;rss.str();
11352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;wrapper&#32;=&#32;Column(&#32;tagCount.second.all()&#32;)
11353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.initialIndent(&#32;0&#32;)
11354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.indent(&#32;str.size()&#32;)
11355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.width(&#32;CATCH_CONFIG_CONSOLE_WIDTH-10&#32;);
11356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()&#32;&lt;&lt;&#32;str&#32;&lt;&lt;&#32;wrapper&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
11357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()&#32;&lt;&lt;&#32;pluralise(&#32;tagCounts.size(),&#32;<emphasis role="stringliteral">&quot;tag&quot;</emphasis>&#32;)&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;std::endl;
11359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tagCounts.size();
11360 &#32;&#32;&#32;&#32;}
11361 
11362 &#32;&#32;&#32;&#32;std::size_t&#32;listReporters()&#32;{
11363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Available&#32;reporters:\n&quot;</emphasis>;
11364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IReporterRegistry::FactoryMap&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;factories&#32;=&#32;<link linkend="_namespace_catch_1a5d328566cb8da87b48f1fac3f319ac7a">getRegistryHub</link>().<link linkend="_struct_catch_1_1_i_registry_hub_1abbb3aafb58916d633ef959d724d4b82c">getReporterRegistry</link>().getFactories();
11365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;maxNameLen&#32;=&#32;0;
11366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;factoryKvp&#32;:&#32;factories&#32;)
11367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxNameLen&#32;=&#32;(std::max)(&#32;maxNameLen,&#32;factoryKvp.first.size()&#32;);
11368 
11369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;factoryKvp&#32;:&#32;factories&#32;)&#32;{
11370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()
11371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Column(&#32;factoryKvp.first&#32;+&#32;<emphasis role="stringliteral">&quot;:&quot;</emphasis>&#32;)
11372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.indent(2)
11373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.width(&#32;5+maxNameLen&#32;)
11374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;&#32;Column(&#32;factoryKvp.second-&gt;getDescription()&#32;)
11375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.initialIndent(0)
11376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.indent(2)
11377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.width(&#32;CATCH_CONFIG_CONSOLE_WIDTH&#32;-&#32;maxNameLen-8&#32;)
11378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;&quot;\n&quot;;
11379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()&#32;&lt;&lt;&#32;std::endl;
11381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;factories.size();
11382 &#32;&#32;&#32;&#32;}
11383 
11384 &#32;&#32;&#32;&#32;Option&lt;std::size_t&gt;&#32;list(&#32;std::shared_ptr&lt;Config&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;)&#32;{
11385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Option&lt;std::size_t&gt;&#32;listedCount;
11386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a710841d4732b86c06f816bd4822bd425">getCurrentMutableContext</link>().<link linkend="_struct_catch_1_1_i_mutable_context_1aa81ba080fce084e9482f20338bc88531">setConfig</link>(&#32;config&#32;);
11387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;config-&gt;listTests()&#32;)
11388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;listedCount&#32;=&#32;listedCount.valueOr(0)&#32;+&#32;listTests(&#32;*config&#32;);
11389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;config-&gt;listTestNamesOnly()&#32;)
11390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;listedCount&#32;=&#32;listedCount.valueOr(0)&#32;+&#32;listTestsNamesOnly(&#32;*config&#32;);
11391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;config-&gt;listTags()&#32;)
11392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;listedCount&#32;=&#32;listedCount.valueOr(0)&#32;+&#32;listTags(&#32;*config&#32;);
11393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;config-&gt;listReporters()&#32;)
11394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;listedCount&#32;=&#32;listedCount.valueOr(0)&#32;+&#32;listReporters();
11395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;listedCount;
11396 &#32;&#32;&#32;&#32;}
11397 
11398 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
11399 <emphasis role="comment">//&#32;end&#32;catch_list.cpp</emphasis>
11400 <emphasis role="comment">//&#32;start&#32;catch_matchers.cpp</emphasis>
11401 
11402 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
11403 <emphasis role="keyword">namespace&#32;</emphasis>Matchers&#32;{
11404 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Impl&#32;{
11405 
11406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base_1a5982c7c80ca71dfe2298babadad7a453">MatcherUntypedBase::toString</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
11407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base_1a951095c462657e7097a9a6dc4dde813f">m_cachedToString</link>.empty()&#32;)
11408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base_1a951095c462657e7097a9a6dc4dde813f">m_cachedToString</link>&#32;=&#32;<link linkend="_class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base_1a91d3a907dbfcbb596077df24f6e11fe2">describe</link>();
11409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base_1a951095c462657e7097a9a6dc4dde813f">m_cachedToString</link>;
11410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11411 
11412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base_1a853be93ce33f71b5abede38081c79e9d">MatcherUntypedBase::~MatcherUntypedBase</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
11413 
11414 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;Impl</emphasis>
11415 }&#32;<emphasis role="comment">//&#32;namespace&#32;Matchers</emphasis>
11416 
11417 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>Matchers;
11418 <emphasis role="keyword">using&#32;</emphasis>Matchers::Impl::MatcherBase;
11419 
11420 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
11421 <emphasis role="comment">//&#32;end&#32;catch_matchers.cpp</emphasis>
11422 <emphasis role="comment">//&#32;start&#32;catch_matchers_exception.cpp</emphasis>
11423 
11424 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
11425 <emphasis role="keyword">namespace&#32;</emphasis>Matchers&#32;{
11426 <emphasis role="keyword">namespace&#32;</emphasis>Exception&#32;{
11427 
11428 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_matchers_1_1_exception_1_1_exception_message_matcher_1aa0566d24990d69e96495360b8f79593d">ExceptionMessageMatcher::match</link>(std::exception&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;ex)<emphasis role="keyword">&#32;const&#32;</emphasis>{
11429 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ex.what()&#32;==&#32;<link linkend="_class_catch_1_1_matchers_1_1_exception_1_1_exception_message_matcher_1a1cf4836834c357febac9180ab74a178a">m_message</link>;
11430 }
11431 
11432 std::string&#32;<link linkend="_class_catch_1_1_matchers_1_1_exception_1_1_exception_message_matcher_1a3543441985ec877a781e660a403b1bae">ExceptionMessageMatcher::describe</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
11433 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;exception&#32;message&#32;matches&#32;\&quot;&quot;</emphasis>&#32;+&#32;<link linkend="_class_catch_1_1_matchers_1_1_exception_1_1_exception_message_matcher_1a1cf4836834c357febac9180ab74a178a">m_message</link>&#32;+&#32;&quot;\&quot;&quot;;
11434 }
11435 
11436 }
11437 Exception::ExceptionMessageMatcher&#32;<link linkend="_namespace_catch_1_1_matchers_1a0fcd8bd126bb510a6bb99e6360aa270a">Message</link>(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;message)&#32;{
11438 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Exception::ExceptionMessageMatcher(message);
11439 }
11440 
11441 <emphasis role="comment">//&#32;namespace&#32;Exception</emphasis>
11442 }&#32;<emphasis role="comment">//&#32;namespace&#32;Matchers</emphasis>
11443 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
11444 <emphasis role="comment">//&#32;end&#32;catch_matchers_exception.cpp</emphasis>
11445 <emphasis role="comment">//&#32;start&#32;catch_matchers_floating.cpp</emphasis>
11446 
11447 <emphasis role="comment">//&#32;start&#32;catch_polyfills.hpp</emphasis>
11448 
11449 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
11450 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isnan(<emphasis role="keywordtype">float</emphasis>&#32;f);
11451 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isnan(<emphasis role="keywordtype">double</emphasis>&#32;d);
11452 }
11453 
11454 <emphasis role="comment">//&#32;end&#32;catch_polyfills.hpp</emphasis>
11455 <emphasis role="comment">//&#32;start&#32;catch_to_string.hpp</emphasis>
11456 
11457 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
11458 
11459 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
11460 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
11461 &#32;&#32;&#32;&#32;std::string&#32;to_string(T&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;t)&#32;{
11462 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_CPP11_TO_STRING)</emphasis>
11463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::to_string(t);
11464 <emphasis role="preprocessor">#else</emphasis>
11465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReusableStringStream&#32;rss;
11466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;t;
11467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rss.str();
11468 <emphasis role="preprocessor">#endif</emphasis>
11469 &#32;&#32;&#32;&#32;}
11470 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
11471 
11472 <emphasis role="comment">//&#32;end&#32;catch_to_string.hpp</emphasis>
11473 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
11474 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
11475 <emphasis role="preprocessor">#include&#32;&lt;cstdlib&gt;</emphasis>
11476 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>
11477 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>
11478 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
11479 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
11480 <emphasis role="preprocessor">#include&#32;&lt;iomanip&gt;</emphasis>
11481 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>
11482 
11483 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
11484 <emphasis role="keyword">namespace&#32;</emphasis>{
11485 
11486 &#32;&#32;&#32;&#32;int32_t&#32;convert(<emphasis role="keywordtype">float</emphasis>&#32;f)&#32;{
11487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(float)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(int32_t),&#32;<emphasis role="stringliteral">&quot;Important&#32;ULP&#32;matcher&#32;assumption&#32;violated&quot;</emphasis>);
11488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int32_t&#32;i;
11489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(&amp;i,&#32;&amp;f,&#32;<emphasis role="keyword">sizeof</emphasis>(f));
11490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i;
11491 &#32;&#32;&#32;&#32;}
11492 
11493 &#32;&#32;&#32;&#32;int64_t&#32;convert(<emphasis role="keywordtype">double</emphasis>&#32;d)&#32;{
11494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(double)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(int64_t),&#32;<emphasis role="stringliteral">&quot;Important&#32;ULP&#32;matcher&#32;assumption&#32;violated&quot;</emphasis>);
11495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int64_t&#32;i;
11496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(&amp;i,&#32;&amp;d,&#32;<emphasis role="keyword">sizeof</emphasis>(d));
11497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i;
11498 &#32;&#32;&#32;&#32;}
11499 
11500 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;FP&gt;
11501 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;almostEqualUlps(FP&#32;lhs,&#32;FP&#32;rhs,&#32;uint64_t&#32;maxUlpDiff)&#32;{
11502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Comparison&#32;with&#32;NaN&#32;should&#32;always&#32;be&#32;false.</emphasis>
11503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;way&#32;we&#32;can&#32;rule&#32;it&#32;out&#32;before&#32;getting&#32;into&#32;the&#32;ugly&#32;details</emphasis>
11504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_catch_1_1true__given">Catch::isnan</link>(lhs)&#32;||&#32;<link linkend="_struct_catch_1_1true__given">Catch::isnan</link>(rhs))&#32;{
11505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11507 
11508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;lc&#32;=&#32;convert(lhs);
11509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;rc&#32;=&#32;convert(rhs);
11510 
11511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((lc&#32;&lt;&#32;0)&#32;!=&#32;(rc&#32;&lt;&#32;0))&#32;{
11512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Potentially&#32;we&#32;can&#32;have&#32;+0&#32;and&#32;-0</emphasis>
11513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;==&#32;rhs;
11514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11515 
11516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;static&#32;cast&#32;as&#32;a&#32;workaround&#32;for&#32;IBM&#32;XLC</emphasis>
11517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ulpDiff&#32;=&#32;std::abs(<emphasis role="keyword">static_cast&lt;</emphasis>FP<emphasis role="keyword">&gt;</emphasis>(lc&#32;-&#32;rc));
11518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint64_t<emphasis role="keyword">&gt;</emphasis>(ulpDiff)&#32;&lt;=&#32;maxUlpDiff;
11519 &#32;&#32;&#32;&#32;}
11520 
11521 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_GLOBAL_NEXTAFTER)</emphasis>
11522 
11523 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;nextafter(<emphasis role="keywordtype">float</emphasis>&#32;x,&#32;<emphasis role="keywordtype">float</emphasis>&#32;y)&#32;{
11524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;::nextafterf(x,&#32;y);
11525 &#32;&#32;&#32;&#32;}
11526 
11527 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;nextafter(<emphasis role="keywordtype">double</emphasis>&#32;x,&#32;<emphasis role="keywordtype">double</emphasis>&#32;y)&#32;{
11528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;::nextafter(x,&#32;y);
11529 &#32;&#32;&#32;&#32;}
11530 
11531 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;^^^&#32;CATCH_CONFIG_GLOBAL_NEXTAFTER&#32;^^^</emphasis>
11532 
11533 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;FP&gt;
11534 FP&#32;step(FP&#32;start,&#32;FP&#32;direction,&#32;uint64_t&#32;steps)&#32;{
11535 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint64_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;steps;&#32;++i)&#32;{
11536 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_GLOBAL_NEXTAFTER)</emphasis>
11537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;start&#32;=&#32;<link linkend="_struct_catch_1_1true__given">Catch::nextafter</link>(start,&#32;direction);
11538 <emphasis role="preprocessor">#else</emphasis>
11539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;start&#32;=&#32;std::nextafter(start,&#32;direction);
11540 <emphasis role="preprocessor">#endif</emphasis>
11541 &#32;&#32;&#32;&#32;}
11542 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;start;
11543 }
11544 
11545 <emphasis role="comment">//&#32;Performs&#32;equivalent&#32;check&#32;of&#32;std::fabs(lhs&#32;-&#32;rhs)&#32;&lt;=&#32;margin</emphasis>
11546 <emphasis role="comment">//&#32;But&#32;without&#32;the&#32;subtraction&#32;to&#32;allow&#32;for&#32;INFINITY&#32;in&#32;comparison</emphasis>
11547 <emphasis role="keywordtype">bool</emphasis>&#32;marginComparison(<emphasis role="keywordtype">double</emphasis>&#32;lhs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;rhs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;margin)&#32;{
11548 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(lhs&#32;+&#32;margin&#32;&gt;=&#32;rhs)&#32;&amp;&amp;&#32;(rhs&#32;+&#32;margin&#32;&gt;=&#32;lhs);
11549 }
11550 
11551 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;FloatingPo<emphasis role="keywordtype">int</emphasis>&gt;
11552 <emphasis role="keywordtype">void</emphasis>&#32;write(std::ostream&amp;&#32;out,&#32;FloatingPoint&#32;num)&#32;{
11553 &#32;&#32;&#32;&#32;out&#32;&lt;&lt;&#32;std::scientific
11554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setprecision(std::numeric_limits&lt;FloatingPoint&gt;::max_digits10&#32;-&#32;1)
11555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;num;
11556 }
11557 
11558 }&#32;<emphasis role="comment">//&#32;end&#32;anonymous&#32;namespace</emphasis>
11559 
11560 <emphasis role="keyword">namespace&#32;</emphasis>Matchers&#32;{
11561 <emphasis role="keyword">namespace&#32;</emphasis>Floating&#32;{
11562 
11563 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;FloatingPointKind&#32;:&#32;uint8_t&#32;{
11564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Float,
11565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Double
11566 &#32;&#32;&#32;&#32;};
11567 
11568 &#32;&#32;&#32;&#32;WithinAbsMatcher::WithinAbsMatcher(<emphasis role="keywordtype">double</emphasis>&#32;target,&#32;<emphasis role="keywordtype">double</emphasis>&#32;margin)
11569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:m_target{&#32;target&#32;},&#32;m_margin{&#32;margin&#32;}&#32;{
11570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1aba552c917b9ac8604f50a914a745e974">CATCH_ENFORCE</link>(margin&#32;&gt;=&#32;0,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;margin:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;margin&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>
11571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;Margin&#32;has&#32;to&#32;be&#32;non-negative.&quot;</emphasis>);
11572 &#32;&#32;&#32;&#32;}
11573 
11574 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Performs&#32;equivalent&#32;check&#32;of&#32;std::fabs(lhs&#32;-&#32;rhs)&#32;&lt;=&#32;margin</emphasis>
11575 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;But&#32;without&#32;the&#32;subtraction&#32;to&#32;allow&#32;for&#32;INFINITY&#32;in&#32;comparison</emphasis>
11576 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;WithinAbsMatcher::match(<emphasis role="keywordtype">double</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;matchee)<emphasis role="keyword">&#32;const&#32;</emphasis>{
11577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(matchee&#32;+&#32;m_margin&#32;&gt;=&#32;m_target)&#32;&amp;&amp;&#32;(m_target&#32;+&#32;m_margin&#32;&gt;=&#32;matchee);
11578 &#32;&#32;&#32;&#32;}
11579 
11580 &#32;&#32;&#32;&#32;std::string&#32;WithinAbsMatcher::describe()<emphasis role="keyword">&#32;const&#32;</emphasis>{
11581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;is&#32;within&#32;&quot;</emphasis>&#32;+&#32;::Catch::Detail::stringify(m_margin)&#32;+&#32;&quot;&#32;of&#32;&quot;&#32;+&#32;::Catch::Detail::stringify(m_target);
11582 &#32;&#32;&#32;&#32;}
11583 
11584 &#32;&#32;&#32;&#32;WithinUlpsMatcher::WithinUlpsMatcher(<emphasis role="keywordtype">double</emphasis>&#32;target,&#32;uint64_t&#32;ulps,&#32;FloatingPointKind&#32;baseType)
11585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:m_target{&#32;target&#32;},&#32;m_ulps{&#32;ulps&#32;},&#32;m_type{&#32;baseType&#32;}&#32;{
11586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1aba552c917b9ac8604f50a914a745e974">CATCH_ENFORCE</link>(m_type&#32;==&#32;FloatingPointKind::Double
11587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;m_ulps&#32;&lt;&#32;(std::numeric_limits&lt;uint32_t&gt;::max)(),
11588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Provided&#32;ULP&#32;is&#32;impossibly&#32;large&#32;for&#32;a&#32;float&#32;comparison.&quot;</emphasis>);
11589 &#32;&#32;&#32;&#32;}
11590 
11591 <emphasis role="preprocessor">#if&#32;defined(__clang__)</emphasis>
11592 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;push</emphasis>
11593 <emphasis role="comment">//&#32;Clang&#32;&lt;3.5&#32;reports&#32;on&#32;the&#32;default&#32;branch&#32;in&#32;the&#32;switch&#32;below</emphasis>
11594 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wunreachable-code&quot;</emphasis>
11595 <emphasis role="preprocessor">#endif</emphasis>
11596 
11597 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;WithinUlpsMatcher::match(<emphasis role="keywordtype">double</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;matchee)<emphasis role="keyword">&#32;const&#32;</emphasis>{
11598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_type)&#32;{
11599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;FloatingPointKind::Float:
11600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;almostEqualUlps&lt;float&gt;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(matchee),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(m_target),&#32;m_ulps);
11601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;FloatingPointKind::Double:
11602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;almostEqualUlps&lt;double&gt;(matchee,&#32;m_target,&#32;m_ulps);
11603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
11604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1af445c1e136fadba0e92f3c22d68a7641">CATCH_INTERNAL_ERROR</link>(&#32;<emphasis role="stringliteral">&quot;Unknown&#32;FloatingPointKind&#32;value&quot;</emphasis>&#32;);
11605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11606 &#32;&#32;&#32;&#32;}
11607 
11608 <emphasis role="preprocessor">#if&#32;defined(__clang__)</emphasis>
11609 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;pop</emphasis>
11610 <emphasis role="preprocessor">#endif</emphasis>
11611 
11612 &#32;&#32;&#32;&#32;std::string&#32;WithinUlpsMatcher::describe()<emphasis role="keyword">&#32;const&#32;</emphasis>{
11613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::stringstream&#32;ret;
11614 
11615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;is&#32;within&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;m_ulps&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;ULPs&#32;of&#32;&quot;</emphasis>;
11616 
11617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_type&#32;==&#32;FloatingPointKind::Float)&#32;{
11618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write(ret,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(m_target));
11619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;f&apos;</emphasis>;
11620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
11621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write(ret,&#32;m_target);
11622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11623 
11624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;([&quot;</emphasis>;
11625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_type&#32;==&#32;FloatingPointKind::Double)&#32;{
11626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write(ret,&#32;step(m_target,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(-INFINITY),&#32;m_ulps));
11627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>;
11628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write(ret,&#32;step(m_target,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(&#32;INFINITY),&#32;m_ulps));
11629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
11630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;have&#32;to&#32;cast&#32;INFINITY&#32;to&#32;float&#32;because&#32;of&#32;MinGW,&#32;see&#32;#1782</emphasis>
11631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write(ret,&#32;step(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(m_target),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(-INFINITY),&#32;m_ulps));
11632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>;
11633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write(ret,&#32;step(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(m_target),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(&#32;INFINITY),&#32;m_ulps));
11634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;])&quot;</emphasis>;
11636 
11637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret.str();
11638 &#32;&#32;&#32;&#32;}
11639 
11640 &#32;&#32;&#32;&#32;WithinRelMatcher::WithinRelMatcher(<emphasis role="keywordtype">double</emphasis>&#32;target,&#32;<emphasis role="keywordtype">double</emphasis>&#32;epsilon):
11641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_target(target),
11642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_epsilon(epsilon){
11643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1aba552c917b9ac8604f50a914a745e974">CATCH_ENFORCE</link>(m_epsilon&#32;&gt;=&#32;0.,&#32;<emphasis role="stringliteral">&quot;Relative&#32;comparison&#32;with&#32;epsilon&#32;&lt;&#32;&#32;0&#32;does&#32;not&#32;make&#32;sense.&quot;</emphasis>);
11644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1aba552c917b9ac8604f50a914a745e974">CATCH_ENFORCE</link>(m_epsilon&#32;&#32;&lt;&#32;1.,&#32;&quot;Relative&#32;comparison&#32;with&#32;epsilon&#32;&gt;=&#32;1&#32;does&#32;not&#32;make&#32;sense.<emphasis role="stringliteral">&quot;);</emphasis>
11645 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;}</emphasis>
11646 <emphasis role="stringliteral"></emphasis>
11647 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;bool&#32;WithinRelMatcher::match(double&#32;const&amp;&#32;matchee)&#32;const&#32;{</emphasis>
11648 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;auto&#32;relMargin&#32;=&#32;m_epsilon&#32;*&#32;(std::max)(std::fabs(matchee),&#32;std::fabs(m_target));</emphasis>
11649 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;marginComparison(matchee,&#32;m_target,</emphasis>
11650 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::isinf(relMargin)?&#32;0&#32;:&#32;relMargin);</emphasis>
11651 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;}</emphasis>
11652 <emphasis role="stringliteral"></emphasis>
11653 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;std::string&#32;WithinRelMatcher::describe()&#32;const&#32;{</emphasis>
11654 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Catch::ReusableStringStream&#32;sstr;</emphasis>
11655 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sstr&#32;&lt;&lt;&#32;&quot;</emphasis>and&#32;<emphasis role="stringliteral">&quot;&#32;&lt;&lt;&#32;m_target&#32;&lt;&lt;&#32;&quot;</emphasis>&#32;are&#32;within&#32;<emphasis role="stringliteral">&quot;&#32;&lt;&lt;&#32;m_epsilon&#32;*&#32;100.&#32;&lt;&lt;&#32;&quot;</emphasis>%&#32;of&#32;each&#32;other<emphasis role="stringliteral">&quot;;</emphasis>
11656 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;sstr.str();</emphasis>
11657 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;}</emphasis>
11658 <emphasis role="stringliteral"></emphasis>
11659 <emphasis role="stringliteral">}//&#32;namespace&#32;Floating</emphasis>
11660 <emphasis role="stringliteral"></emphasis>
11661 <emphasis role="stringliteral">Floating::WithinUlpsMatcher&#32;WithinULP(double&#32;target,&#32;uint64_t&#32;maxUlpDiff)&#32;{</emphasis>
11662 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;return&#32;Floating::WithinUlpsMatcher(target,&#32;maxUlpDiff,&#32;Floating::FloatingPointKind::Double);</emphasis>
11663 <emphasis role="stringliteral">}</emphasis>
11664 <emphasis role="stringliteral"></emphasis>
11665 <emphasis role="stringliteral">Floating::WithinUlpsMatcher&#32;WithinULP(float&#32;target,&#32;uint64_t&#32;maxUlpDiff)&#32;{</emphasis>
11666 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;return&#32;Floating::WithinUlpsMatcher(target,&#32;maxUlpDiff,&#32;Floating::FloatingPointKind::Float);</emphasis>
11667 <emphasis role="stringliteral">}</emphasis>
11668 <emphasis role="stringliteral"></emphasis>
11669 <emphasis role="stringliteral">Floating::WithinAbsMatcher&#32;WithinAbs(double&#32;target,&#32;double&#32;margin)&#32;{</emphasis>
11670 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;return&#32;Floating::WithinAbsMatcher(target,&#32;margin);</emphasis>
11671 <emphasis role="stringliteral">}</emphasis>
11672 <emphasis role="stringliteral"></emphasis>
11673 <emphasis role="stringliteral">Floating::WithinRelMatcher&#32;WithinRel(double&#32;target,&#32;double&#32;eps)&#32;{</emphasis>
11674 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;return&#32;Floating::WithinRelMatcher(target,&#32;eps);</emphasis>
11675 <emphasis role="stringliteral">}</emphasis>
11676 <emphasis role="stringliteral"></emphasis>
11677 <emphasis role="stringliteral">Floating::WithinRelMatcher&#32;WithinRel(double&#32;target)&#32;{</emphasis>
11678 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;return&#32;Floating::WithinRelMatcher(target,&#32;std::numeric_limits&lt;double&gt;::epsilon()&#32;*&#32;100);</emphasis>
11679 <emphasis role="stringliteral">}</emphasis>
11680 <emphasis role="stringliteral"></emphasis>
11681 <emphasis role="stringliteral">Floating::WithinRelMatcher&#32;WithinRel(float&#32;target,&#32;float&#32;eps)&#32;{</emphasis>
11682 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;return&#32;Floating::WithinRelMatcher(target,&#32;eps);</emphasis>
11683 <emphasis role="stringliteral">}</emphasis>
11684 <emphasis role="stringliteral"></emphasis>
11685 <emphasis role="stringliteral">Floating::WithinRelMatcher&#32;WithinRel(float&#32;target)&#32;{</emphasis>
11686 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;return&#32;Floating::WithinRelMatcher(target,&#32;std::numeric_limits&lt;float&gt;::epsilon()&#32;*&#32;100);</emphasis>
11687 <emphasis role="stringliteral">}</emphasis>
11688 <emphasis role="stringliteral"></emphasis>
11689 <emphasis role="stringliteral">}&#32;//&#32;namespace&#32;Matchers</emphasis>
11690 <emphasis role="stringliteral">}&#32;//&#32;namespace&#32;Catch</emphasis>
11691 <emphasis role="stringliteral">//&#32;end&#32;catch_matchers_floating.cpp</emphasis>
11692 <emphasis role="stringliteral">//&#32;start&#32;catch_matchers_generic.cpp</emphasis>
11693 <emphasis role="stringliteral"></emphasis>
11694 <emphasis role="stringliteral">std::string&#32;Catch::Matchers::Generic::Detail::finalizeDescription(const&#32;std::string&amp;&#32;desc)&#32;{</emphasis>
11695 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;if&#32;(desc.empty())&#32;{</emphasis>
11696 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;&quot;</emphasis>matches&#32;undescribed&#32;predicate<emphasis role="stringliteral">&quot;;</emphasis>
11697 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;}&#32;else&#32;{</emphasis>
11698 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;&quot;</emphasis>matches&#32;predicate:&#32;\<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;+&#32;desc&#32;+&#32;<emphasis role="stringliteral">&apos;&quot;&apos;</emphasis>;
11699 &#32;&#32;&#32;&#32;}
11700 }
11701 <emphasis role="comment">//&#32;end&#32;catch_matchers_generic.cpp</emphasis>
11702 <emphasis role="comment">//&#32;start&#32;catch_matchers_string.cpp</emphasis>
11703 
11704 <emphasis role="preprocessor">#include&#32;&lt;regex&gt;</emphasis>
11705 
11706 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
11707 <emphasis role="keyword">namespace&#32;</emphasis>Matchers&#32;{
11708 
11709 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>StdString&#32;{
11710 
11711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string_1aa88bbc5acd2bff22351d8d4b1816b561">CasedString::CasedString</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str,&#32;<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6a">CaseSensitive::Choice</link>&#32;caseSensitivity&#32;)
11712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_caseSensitivity(&#32;caseSensitivity&#32;),
11713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_str(&#32;adjustString(&#32;str&#32;)&#32;)
11714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
11715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;CasedString::adjustString(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
11716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_caseSensitivity&#32;==&#32;<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6aa4ffff8d29b481f0116abc37228cd53f6">CaseSensitive::No</link>
11717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;<link linkend="_namespace_catch_1ac036a17412d318598ffda8e1fe7a1177">toLower</link>(&#32;str&#32;)
11718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;str;
11719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;CasedString::caseSensitivitySuffix()<emphasis role="keyword">&#32;const&#32;</emphasis>{
11721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_caseSensitivity&#32;==&#32;<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6aa4ffff8d29b481f0116abc37228cd53f6">CaseSensitive::No</link>
11722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;<emphasis role="stringliteral">&quot;&#32;(case&#32;insensitive)&quot;</emphasis>
11723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;std::string();
11724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11725 
11726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StringMatcherBase::StringMatcherBase(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;operation,&#32;CasedString&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;comparator&#32;)
11727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_comparator(&#32;comparator&#32;),
11728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_operation(&#32;operation&#32;)&#32;{
11729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11730 
11731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;StringMatcherBase::describe()<emphasis role="keyword">&#32;const&#32;</emphasis>{
11732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;description;
11733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;description.reserve(5&#32;+&#32;m_operation.size()&#32;+&#32;m_comparator.m_str.size()&#32;+
11734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_comparator.caseSensitivitySuffix().size());
11735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;description&#32;+=&#32;m_operation;
11736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;description&#32;+=&#32;&quot;:&#32;\&quot;&quot;;
11737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;description&#32;+=&#32;m_comparator.m_str;
11738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;description&#32;+=&#32;&quot;\&quot;&quot;;
11739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;description&#32;+=&#32;m_comparator.caseSensitivitySuffix();
11740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;description;
11741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11742 
11743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EqualsMatcher::EqualsMatcher(&#32;CasedString&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;comparator&#32;)&#32;:&#32;StringMatcherBase(&#32;<emphasis role="stringliteral">&quot;equals&quot;</emphasis>,&#32;comparator&#32;)&#32;{}
11744 
11745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;EqualsMatcher::match(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;source&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
11746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_comparator.adjustString(&#32;source&#32;)&#32;==&#32;m_comparator.m_str;
11747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11748 
11749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ContainsMatcher::ContainsMatcher(&#32;CasedString&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;comparator&#32;)&#32;:&#32;StringMatcherBase(&#32;<emphasis role="stringliteral">&quot;contains&quot;</emphasis>,&#32;comparator&#32;)&#32;{}
11750 
11751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ContainsMatcher::match(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;source&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
11752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1aa52974b0e426e7e2fbd725a900e9c36e">contains</link>(&#32;m_comparator.adjustString(&#32;source&#32;),&#32;m_comparator.m_str&#32;);
11753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11754 
11755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StartsWithMatcher::StartsWithMatcher(&#32;CasedString&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;comparator&#32;)&#32;:&#32;StringMatcherBase(&#32;<emphasis role="stringliteral">&quot;starts&#32;with&quot;</emphasis>,&#32;comparator&#32;)&#32;{}
11756 
11757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;StartsWithMatcher::match(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;source&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
11758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1a695f62327be0676e046291eeaae15110">startsWith</link>(&#32;m_comparator.adjustString(&#32;source&#32;),&#32;m_comparator.m_str&#32;);
11759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11760 
11761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EndsWithMatcher::EndsWithMatcher(&#32;CasedString&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;comparator&#32;)&#32;:&#32;StringMatcherBase(&#32;<emphasis role="stringliteral">&quot;ends&#32;with&quot;</emphasis>,&#32;comparator&#32;)&#32;{}
11762 
11763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;EndsWithMatcher::match(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;source&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
11764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1ada025504f627feaf9ac68ca391515dff">endsWith</link>(&#32;m_comparator.adjustString(&#32;source&#32;),&#32;m_comparator.m_str&#32;);
11765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11766 
11767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RegexMatcher::RegexMatcher(std::string&#32;regex,&#32;<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6a">CaseSensitive::Choice</link>&#32;caseSensitivity):&#32;m_regex(std::move(regex)),&#32;m_caseSensitivity(caseSensitivity)&#32;{}
11768 
11769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;RegexMatcher::match(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;matchee)<emphasis role="keyword">&#32;const&#32;</emphasis>{
11770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;flags&#32;=&#32;std::regex::ECMAScript;&#32;<emphasis role="comment">//&#32;ECMAScript&#32;is&#32;the&#32;default&#32;syntax&#32;option&#32;anyway</emphasis>
11771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_caseSensitivity&#32;==&#32;<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6aa4ffff8d29b481f0116abc37228cd53f6">CaseSensitive::Choice::No</link>)&#32;{
11772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flags&#32;|=&#32;std::regex::icase;
11773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;reg&#32;=&#32;std::regex(m_regex,&#32;flags);
11775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::regex_match(matchee,&#32;reg);
11776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11777 
11778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;RegexMatcher::describe()<emphasis role="keyword">&#32;const&#32;</emphasis>{
11779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;matches&#32;&quot;</emphasis>&#32;+&#32;::Catch::Detail::stringify(m_regex)&#32;+&#32;((m_caseSensitivity&#32;==&#32;CaseSensitive::Choice::Yes)?&#32;&quot;&#32;case&#32;sensitively&quot;&#32;:&#32;&quot;&#32;case&#32;insensitively&quot;);
11780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11781 
11782 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;StdString</emphasis>
11783 
11784 &#32;&#32;&#32;&#32;StdString::EqualsMatcher&#32;<link linkend="_namespace_catch_1_1_matchers_1af8af7dfc338335ed4c788cb1b37fc59f">Equals</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str,&#32;CaseSensitive::Choice&#32;caseSensitivity&#32;)&#32;{
11785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;StdString::EqualsMatcher(&#32;StdString::CasedString(&#32;str,&#32;caseSensitivity)&#32;);
11786 &#32;&#32;&#32;&#32;}
11787 &#32;&#32;&#32;&#32;StdString::ContainsMatcher&#32;<link linkend="_namespace_catch_1_1_matchers_1a1f6c2accdc6cd75a84d7112dcad647b4">Contains</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str,&#32;CaseSensitive::Choice&#32;caseSensitivity&#32;)&#32;{
11788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;StdString::ContainsMatcher(&#32;StdString::CasedString(&#32;str,&#32;caseSensitivity)&#32;);
11789 &#32;&#32;&#32;&#32;}
11790 &#32;&#32;&#32;&#32;StdString::EndsWithMatcher&#32;<link linkend="_namespace_catch_1_1_matchers_1ae5a45efb4538c57c43e04f3f9043ad6e">EndsWith</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str,&#32;CaseSensitive::Choice&#32;caseSensitivity&#32;)&#32;{
11791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;StdString::EndsWithMatcher(&#32;StdString::CasedString(&#32;str,&#32;caseSensitivity)&#32;);
11792 &#32;&#32;&#32;&#32;}
11793 &#32;&#32;&#32;&#32;StdString::StartsWithMatcher&#32;<link linkend="_namespace_catch_1_1_matchers_1a97c9ee09a70378ca7e8c6f9f01b0d6d1">StartsWith</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str,&#32;CaseSensitive::Choice&#32;caseSensitivity&#32;)&#32;{
11794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;StdString::StartsWithMatcher(&#32;StdString::CasedString(&#32;str,&#32;caseSensitivity)&#32;);
11795 &#32;&#32;&#32;&#32;}
11796 
11797 &#32;&#32;&#32;&#32;StdString::RegexMatcher&#32;<link linkend="_namespace_catch_1_1_matchers_1a82f1893cf50ae4c14b9b3e0980bf22b8">Matches</link>(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;regex,&#32;CaseSensitive::Choice&#32;caseSensitivity)&#32;{
11798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;StdString::RegexMatcher(regex,&#32;caseSensitivity);
11799 &#32;&#32;&#32;&#32;}
11800 
11801 }&#32;<emphasis role="comment">//&#32;namespace&#32;Matchers</emphasis>
11802 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
11803 <emphasis role="comment">//&#32;end&#32;catch_matchers_string.cpp</emphasis>
11804 <emphasis role="comment">//&#32;start&#32;catch_message.cpp</emphasis>
11805 
11806 <emphasis role="comment">//&#32;start&#32;catch_uncaught_exceptions.h</emphasis>
11807 
11808 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
11809 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;uncaught_exceptions();
11810 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
11811 
11812 <emphasis role="comment">//&#32;end&#32;catch_uncaught_exceptions.h</emphasis>
11813 <emphasis role="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>
11814 <emphasis role="preprocessor">#include&#32;&lt;stack&gt;</emphasis>
11815 
11816 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
11817 
11818 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_message_info_1afac7a84a9e8655428035a3c5418044f0">MessageInfo::MessageInfo</link>(&#32;&#32;&#32;StringRef&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_macroName,
11819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLineInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_lineInfo,
11820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link>&#32;_type&#32;)
11821 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;macroName(&#32;_macroName&#32;),
11822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lineInfo(&#32;_lineInfo&#32;),
11823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type(&#32;_type&#32;),
11824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sequence(&#32;++globalCount&#32;)
11825 &#32;&#32;&#32;&#32;{}
11826 
11827 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_message_info_1af4b37f2172ba55395813b4bb6bbbde1a">MessageInfo::operator==</link>(&#32;MessageInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
11828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_message_info_1a7f4f57ea21e50160adefce7b68a781d6">sequence</link>&#32;==&#32;other.sequence;
11829 &#32;&#32;&#32;&#32;}
11830 
11831 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_message_info_1a8254cb8fca2da02a29a9843cdcb79df1">MessageInfo::operator&lt;</link>(&#32;MessageInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
11832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_message_info_1a7f4f57ea21e50160adefce7b68a781d6">sequence</link>&#32;&lt;&#32;other.sequence;
11833 &#32;&#32;&#32;&#32;}
11834 
11835 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;may&#32;need&#32;protecting&#32;if&#32;threading&#32;support&#32;is&#32;added</emphasis>
11836 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_catch_1_1_message_info_1a250459555d236f9510a5afd78a6c1979">MessageInfo::globalCount</link>&#32;=&#32;0;
11837 
11839 
11840 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_message_builder_1ac34832ca527a758f000ac233d32dd068">Catch::MessageBuilder::MessageBuilder</link>(&#32;StringRef&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;macroName,
11841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLineInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lineInfo,
11842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link>&#32;type&#32;)
11843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:m_info(macroName,&#32;lineInfo,&#32;type)&#32;{}
11844 
11846 
11847 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_scoped_message_1a5cc59f0f2ebe840e6607f83004d49a17">ScopedMessage::ScopedMessage</link>(&#32;MessageBuilder&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;builder&#32;)
11848 &#32;&#32;&#32;&#32;:&#32;m_info(&#32;builder.m_info&#32;),&#32;m_moved()
11849 &#32;&#32;&#32;&#32;{
11850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_info.message&#32;=&#32;builder.m_stream.str();
11851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1af718eeab870712f292ed8dc6ee3f6488">getResultCapture</link>().<link linkend="_struct_catch_1_1_i_result_capture_1a91d154c1e087e383dcde5aad95cb6a05">pushScopedMessage</link>(&#32;m_info&#32;);
11852 &#32;&#32;&#32;&#32;}
11853 
11854 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_scoped_message_1a5cc59f0f2ebe840e6607f83004d49a17">ScopedMessage::ScopedMessage</link>(&#32;ScopedMessage&amp;&amp;&#32;old&#32;)
11855 &#32;&#32;&#32;&#32;:&#32;m_info(&#32;old.m_info&#32;),&#32;m_moved()
11856 &#32;&#32;&#32;&#32;{
11857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;old.m_moved&#32;=&#32;<emphasis role="keyword">true</emphasis>;
11858 &#32;&#32;&#32;&#32;}
11859 
11860 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_scoped_message_1a43190843f9eeb84a0b42b0bc95fdf93a">ScopedMessage::~ScopedMessage</link>()&#32;{
11861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;!uncaught_exceptions()&#32;&amp;&amp;&#32;!<link linkend="_class_catch_1_1_scoped_message_1a4fe5607c1f7407240a0da8405b1c12e7">m_moved</link>&#32;){
11862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1af718eeab870712f292ed8dc6ee3f6488">getResultCapture</link>().<link linkend="_struct_catch_1_1_i_result_capture_1a42bcb13276706bf8c3ce081ce16d37fd">popScopedMessage</link>(<link linkend="_class_catch_1_1_scoped_message_1ae6e1476f389cc6e1586f033b3747b27b">m_info</link>);
11863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11864 &#32;&#32;&#32;&#32;}
11865 
11866 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_capturer_1a86b0b27acc803a4e1310c10820f3038f">Capturer::Capturer</link>(&#32;StringRef&#32;macroName,&#32;SourceLineInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lineInfo,&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link>&#32;resultType,&#32;StringRef&#32;names&#32;)&#32;{
11867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;trimmed&#32;=&#32;[&amp;]&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;start,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;end)&#32;{
11868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(names[start]&#32;==&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>&#32;||&#32;isspace(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(names[start])))&#32;{
11869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++start;
11870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(names[end]&#32;==&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>&#32;||&#32;isspace(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(names[end])))&#32;{
11872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--end;
11873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;names.substr(start,&#32;end&#32;-&#32;start&#32;+&#32;1);
11875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
11876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;skipq&#32;=&#32;[&amp;]&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;start,&#32;<emphasis role="keywordtype">char</emphasis>&#32;quote)&#32;{
11877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;i&#32;=&#32;start&#32;+&#32;1;&#32;i&#32;&lt;&#32;names.size()&#32;;&#32;++i)&#32;{
11878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(names[i]&#32;==&#32;quote)
11879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i;
11880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(names[i]&#32;==&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>)
11881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++i;
11882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1af445c1e136fadba0e92f3c22d68a7641">CATCH_INTERNAL_ERROR</link>(<emphasis role="stringliteral">&quot;CAPTURE&#32;parsing&#32;encountered&#32;unmatched&#32;quote&quot;</emphasis>);
11884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
11885 
11886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;start&#32;=&#32;0;
11887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::stack&lt;char&gt;&#32;openings;
11888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;0;&#32;pos&#32;&lt;&#32;names.size();&#32;++pos)&#32;{
11889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;c&#32;=&#32;names[pos];
11890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(c)&#32;{
11891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;[&apos;</emphasis>:
11892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;{&apos;</emphasis>:
11893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;(&apos;</emphasis>:
11894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;It&#32;is&#32;basically&#32;impossible&#32;to&#32;disambiguate&#32;between</emphasis>
11895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;comparison&#32;and&#32;start&#32;of&#32;template&#32;args&#32;in&#32;this&#32;context</emphasis>
11896 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;case&#32;&apos;&lt;&apos;:</emphasis>
11897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;openings.push(c);
11898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
11899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;]&apos;</emphasis>:
11900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;}&apos;</emphasis>:
11901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;)&apos;</emphasis>:
11902 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;case&#32;&apos;&gt;&apos;:</emphasis>
11903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;openings.pop();
11904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
11905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>:
11906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>:
11907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;skipq(pos,&#32;c);
11908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
11909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>:
11910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(start&#32;!=&#32;pos&#32;&amp;&amp;&#32;openings.empty())&#32;{
11911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_messages.emplace_back(macroName,&#32;lineInfo,&#32;resultType);
11912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_messages.back().message&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::string<emphasis role="keyword">&gt;</emphasis>(trimmed(start,&#32;pos));
11913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_messages.back().message&#32;+=&#32;&quot;&#32;:=&#32;&quot;;
11914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;start&#32;=&#32;pos;
11915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(openings.empty()&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Mismatched&#32;openings&quot;</emphasis>);
11919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_messages.emplace_back(macroName,&#32;lineInfo,&#32;resultType);
11920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_messages.back().message&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::string<emphasis role="keyword">&gt;</emphasis>(trimmed(start,&#32;names.size()&#32;-&#32;1));
11921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_messages.back().message&#32;+=&#32;&quot;&#32;:=&#32;&quot;;
11922 &#32;&#32;&#32;&#32;}
11923 &#32;&#32;&#32;&#32;Capturer::~Capturer()&#32;{
11924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;!uncaught_exceptions()&#32;){
11925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(&#32;m_captured&#32;==&#32;m_messages.size()&#32;);
11926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;m_captured;&#32;++i&#32;&#32;)
11927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_resultCapture.popScopedMessage(&#32;m_messages[i]&#32;);
11928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11929 &#32;&#32;&#32;&#32;}
11930 
11931 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Capturer::captureValue(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;index,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;value&#32;)&#32;{
11932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(&#32;index&#32;&lt;&#32;m_messages.size()&#32;);
11933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_messages[index].message&#32;+=&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>;
11934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_resultCapture.<link linkend="_struct_catch_1_1_i_result_capture_1a91d154c1e087e383dcde5aad95cb6a05">pushScopedMessage</link>(&#32;m_messages[index]&#32;);
11935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_captured++;
11936 &#32;&#32;&#32;&#32;}
11937 
11938 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
11939 <emphasis role="comment">//&#32;end&#32;catch_message.cpp</emphasis>
11940 <emphasis role="comment">//&#32;start&#32;catch_output_redirect.cpp</emphasis>
11941 
11942 <emphasis role="comment">//&#32;start&#32;catch_output_redirect.h</emphasis>
11943 <emphasis role="preprocessor">#ifndef&#32;TWOBLUECUBES_CATCH_OUTPUT_REDIRECT_H</emphasis>
11944 <emphasis role="preprocessor">#define&#32;TWOBLUECUBES_CATCH_OUTPUT_REDIRECT_H</emphasis>
11945 
11946 <emphasis role="preprocessor">#include&#32;&lt;cstdio&gt;</emphasis>
11947 <emphasis role="preprocessor">#include&#32;&lt;iosfwd&gt;</emphasis>
11948 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
11949 
11950 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
11951 
11952 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>RedirectedStream&#32;{
11953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostream&amp;&#32;m_originalStream;
11954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostream&amp;&#32;m_redirectionStream;
11955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::streambuf*&#32;m_prevBuf;
11956 
11957 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
11958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RedirectedStream(&#32;std::ostream&amp;&#32;originalStream,&#32;std::ostream&amp;&#32;redirectionStream&#32;);
11959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~RedirectedStream();
11960 &#32;&#32;&#32;&#32;};
11961 
11962 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>RedirectedStdOut&#32;{
11963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReusableStringStream&#32;m_rss;
11964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RedirectedStream&#32;m_cout;
11965 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
11966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RedirectedStdOut();
11967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;str()&#32;const&#32;-&gt;&#32;std::<emphasis role="keywordtype">string</emphasis>;
11968 &#32;&#32;&#32;&#32;};
11969 
11970 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;StdErr&#32;has&#32;two&#32;constituent&#32;streams&#32;in&#32;C++,&#32;std::cerr&#32;and&#32;std::clog</emphasis>
11971 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;means&#32;that&#32;we&#32;need&#32;to&#32;redirect&#32;2&#32;streams&#32;into&#32;1&#32;to&#32;keep&#32;proper</emphasis>
11972 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;order&#32;of&#32;writes</emphasis>
11973 &#32;&#32;&#32;&#32;class&#32;RedirectedStdErr&#32;{
11974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReusableStringStream&#32;m_rss;
11975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RedirectedStream&#32;m_cerr;
11976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RedirectedStream&#32;m_clog;
11977 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
11978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RedirectedStdErr();
11979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;str()&#32;const&#32;-&gt;&#32;std::<emphasis role="keywordtype">string</emphasis>;
11980 &#32;&#32;&#32;&#32;};
11981 
11982 &#32;&#32;&#32;&#32;class&#32;RedirectedStreams&#32;{
11983 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
11984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RedirectedStreams(RedirectedStreams&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
11985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RedirectedStreams&amp;&#32;operator=(RedirectedStreams&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
11986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RedirectedStreams(RedirectedStreams&amp;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
11987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RedirectedStreams&amp;&#32;operator=(RedirectedStreams&amp;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
11988 
11989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RedirectedStreams(std::string&amp;&#32;redirectedCout,&#32;std::string&amp;&#32;redirectedCerr);
11990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~RedirectedStreams();
11991 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
11992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&amp;&#32;m_redirectedCout;
11993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&amp;&#32;m_redirectedCerr;
11994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RedirectedStdOut&#32;m_redirectedStdOut;
11995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RedirectedStdErr&#32;m_redirectedStdErr;
11996 &#32;&#32;&#32;&#32;};
11997 
11998 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_NEW_CAPTURE)</emphasis>
11999 
12000 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Windows&apos;s&#32;implementation&#32;of&#32;std::tmpfile&#32;is&#32;terrible&#32;(it&#32;tries</emphasis>
12001 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;create&#32;a&#32;file&#32;inside&#32;system&#32;folder,&#32;thus&#32;requiring&#32;elevated</emphasis>
12002 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;privileges&#32;for&#32;the&#32;binary),&#32;so&#32;we&#32;have&#32;to&#32;use&#32;tmpnam(_s)&#32;and</emphasis>
12003 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;create&#32;the&#32;file&#32;ourselves&#32;there.</emphasis>
12004 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>TempFile&#32;{
12005 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
12006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TempFile(TempFile&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
12007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TempFile&amp;&#32;operator=(TempFile&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
12008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TempFile(TempFile&amp;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
12009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TempFile&amp;&#32;operator=(TempFile&amp;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
12010 
12011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TempFile();
12012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~TempFile();
12013 
12014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::FILE*&#32;getFile();
12015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;getContents();
12016 
12017 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
12018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::FILE*&#32;m_file&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
12019 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;defined(_MSC_VER)</emphasis>
12020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;m_buffer[L_tmpnam]&#32;=&#32;{&#32;0&#32;};
12021 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
12022 &#32;&#32;&#32;&#32;};
12023 
12024 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>OutputRedirect&#32;{
12025 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
12026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OutputRedirect(OutputRedirect&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
12027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OutputRedirect&amp;&#32;operator=(OutputRedirect&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
12028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OutputRedirect(OutputRedirect&amp;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
12029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OutputRedirect&amp;&#32;operator=(OutputRedirect&amp;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
12030 
12031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OutputRedirect(std::string&amp;&#32;stdout_dest,&#32;std::string&amp;&#32;stderr_dest);
12032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~OutputRedirect();
12033 
12034 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
12035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;m_originalStdout&#32;=&#32;-1;
12036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;m_originalStderr&#32;=&#32;-1;
12037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TempFile&#32;m_stdoutFile;
12038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TempFile&#32;m_stderrFile;
12039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&amp;&#32;m_stdoutDest;
12040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&amp;&#32;m_stderrDest;
12041 &#32;&#32;&#32;&#32;};
12042 
12043 <emphasis role="preprocessor">#endif</emphasis>
12044 
12045 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
12046 
12047 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TWOBLUECUBES_CATCH_OUTPUT_REDIRECT_H</emphasis>
12048 <emphasis role="comment">//&#32;end&#32;catch_output_redirect.h</emphasis>
12049 <emphasis role="preprocessor">#include&#32;&lt;cstdio&gt;</emphasis>
12050 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>
12051 <emphasis role="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>
12052 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
12053 <emphasis role="preprocessor">#include&#32;&lt;stdexcept&gt;</emphasis>
12054 
12055 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_NEW_CAPTURE)</emphasis>
12056 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;defined(_MSC_VER)</emphasis>
12057 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;io.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//_dup&#32;and&#32;_dup2</emphasis>
12058 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;dup&#32;_dup</emphasis>
12059 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;dup2&#32;_dup2</emphasis>
12060 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;fileno&#32;_fileno</emphasis>
12061 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#else</emphasis>
12062 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;unistd.h&gt;</emphasis>&#32;&#32;<emphasis role="comment">//&#32;dup&#32;and&#32;dup2</emphasis>
12063 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
12064 <emphasis role="preprocessor">#endif</emphasis>
12065 
12066 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
12067 
12068 &#32;&#32;&#32;&#32;RedirectedStream::RedirectedStream(&#32;std::ostream&amp;&#32;originalStream,&#32;std::ostream&amp;&#32;redirectionStream&#32;)
12069 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_originalStream(&#32;originalStream&#32;),
12070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_redirectionStream(&#32;redirectionStream&#32;),
12071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_prevBuf(&#32;m_originalStream.rdbuf()&#32;)
12072 &#32;&#32;&#32;&#32;{
12073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_originalStream.rdbuf(&#32;m_redirectionStream.rdbuf()&#32;);
12074 &#32;&#32;&#32;&#32;}
12075 
12076 &#32;&#32;&#32;&#32;RedirectedStream::~RedirectedStream()&#32;{
12077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_originalStream.rdbuf(&#32;m_prevBuf&#32;);
12078 &#32;&#32;&#32;&#32;}
12079 
12080 &#32;&#32;&#32;&#32;RedirectedStdOut::RedirectedStdOut()&#32;:&#32;m_cout(&#32;<link linkend="_namespace_catch">Catch</link>::<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">cout</link>(),&#32;m_rss.get()&#32;)&#32;{}
12081 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;RedirectedStdOut::str()&#32;const&#32;-&gt;&#32;std::<emphasis role="keywordtype">string</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_rss.str();&#32;}
12082 
12083 &#32;&#32;&#32;&#32;RedirectedStdErr::RedirectedStdErr()
12084 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_cerr(&#32;<link linkend="_namespace_catch">Catch</link>::<link linkend="_namespace_catch_1a54c1ce08041448d684ae8edc14162cd2">cerr</link>(),&#32;m_rss.get()&#32;),
12085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_clog(&#32;<link linkend="_namespace_catch">Catch</link>::<link linkend="_namespace_catch_1a1b2213f54e4d31a659db49827e81856b">clog</link>(),&#32;m_rss.get()&#32;)
12086 &#32;&#32;&#32;&#32;{}
12087 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;RedirectedStdErr::str()&#32;const&#32;-&gt;&#32;std::<emphasis role="keywordtype">string</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_rss.str();&#32;}
12088 
12089 &#32;&#32;&#32;&#32;RedirectedStreams::RedirectedStreams(std::string&amp;&#32;redirectedCout,&#32;std::string&amp;&#32;redirectedCerr)
12090 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_redirectedCout(redirectedCout),
12091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_redirectedCerr(redirectedCerr)
12092 &#32;&#32;&#32;&#32;{}
12093 
12094 &#32;&#32;&#32;&#32;RedirectedStreams::~RedirectedStreams()&#32;{
12095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_redirectedCout&#32;+=&#32;m_redirectedStdOut.str();
12096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_redirectedCerr&#32;+=&#32;m_redirectedStdErr.str();
12097 &#32;&#32;&#32;&#32;}
12098 
12099 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_NEW_CAPTURE)</emphasis>
12100 
12101 <emphasis role="preprocessor">#if&#32;defined(_MSC_VER)</emphasis>
12102 &#32;&#32;&#32;&#32;TempFile::TempFile()&#32;{
12103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tmpnam_s(m_buffer))&#32;{
12104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1a834a24a39cf448d5a0f812e716be1c76">CATCH_RUNTIME_ERROR</link>(<emphasis role="stringliteral">&quot;Could&#32;not&#32;get&#32;a&#32;temp&#32;filename&quot;</emphasis>);
12105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fopen_s(&amp;m_file,&#32;m_buffer,&#32;<emphasis role="stringliteral">&quot;w+&quot;</emphasis>))&#32;{
12107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;buffer[100];
12108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strerror_s(buffer,&#32;errno))&#32;{
12109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1a834a24a39cf448d5a0f812e716be1c76">CATCH_RUNTIME_ERROR</link>(<emphasis role="stringliteral">&quot;Could&#32;not&#32;translate&#32;errno&#32;to&#32;a&#32;string&quot;</emphasis>);
12110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1a834a24a39cf448d5a0f812e716be1c76">CATCH_RUNTIME_ERROR</link>(<emphasis role="stringliteral">&quot;Could&#32;not&#32;open&#32;the&#32;temp&#32;file:&#32;&apos;&quot;</emphasis>&#32;&lt;&lt;&#32;m_buffer&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&apos;&#32;because:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;buffer);
12112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12113 &#32;&#32;&#32;&#32;}
12114 <emphasis role="preprocessor">#else</emphasis>
12115 &#32;&#32;&#32;&#32;TempFile::TempFile()&#32;{
12116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_file&#32;=&#32;std::tmpfile();
12117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!m_file)&#32;{
12118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1a834a24a39cf448d5a0f812e716be1c76">CATCH_RUNTIME_ERROR</link>(<emphasis role="stringliteral">&quot;Could&#32;not&#32;create&#32;a&#32;temp&#32;file.&quot;</emphasis>);
12119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12120 &#32;&#32;&#32;&#32;}
12121 
12122 <emphasis role="preprocessor">#endif</emphasis>
12123 
12124 &#32;&#32;&#32;&#32;TempFile::~TempFile()&#32;{
12125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TBD:&#32;What&#32;to&#32;do&#32;about&#32;errors&#32;here?</emphasis>
12126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fclose(m_file);
12127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;manually&#32;create&#32;the&#32;file&#32;on&#32;Windows&#32;only,&#32;on&#32;Linux</emphasis>
12128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;it&#32;will&#32;be&#32;autodeleted</emphasis>
12129 <emphasis role="preprocessor">#if&#32;defined(_MSC_VER)</emphasis>
12130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::remove(m_buffer);
12131 <emphasis role="preprocessor">#endif</emphasis>
12132 &#32;&#32;&#32;&#32;}
12133 
12134 &#32;&#32;&#32;&#32;FILE*&#32;TempFile::getFile()&#32;{
12135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_file;
12136 &#32;&#32;&#32;&#32;}
12137 
12138 &#32;&#32;&#32;&#32;std::string&#32;TempFile::getContents()&#32;{
12139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::stringstream&#32;sstr;
12140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;buffer[100]&#32;=&#32;{};
12141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::rewind(m_file);
12142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(std::fgets(buffer,&#32;<emphasis role="keyword">sizeof</emphasis>(buffer),&#32;m_file))&#32;{
12143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sstr&#32;&lt;&lt;&#32;buffer;
12144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sstr.str();
12146 &#32;&#32;&#32;&#32;}
12147 
12148 &#32;&#32;&#32;&#32;OutputRedirect::OutputRedirect(std::string&amp;&#32;stdout_dest,&#32;std::string&amp;&#32;stderr_dest)&#32;:
12149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_originalStdout(dup(1)),
12150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_originalStderr(dup(2)),
12151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_stdoutDest(stdout_dest),
12152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_stderrDest(stderr_dest)&#32;{
12153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dup2(fileno(m_stdoutFile.getFile()),&#32;1);
12154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dup2(fileno(m_stderrFile.getFile()),&#32;2);
12155 &#32;&#32;&#32;&#32;}
12156 
12157 &#32;&#32;&#32;&#32;OutputRedirect::~OutputRedirect()&#32;{
12158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()&#32;&lt;&lt;&#32;std::flush;
12159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fflush(stdout);
12160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Since&#32;we&#32;support&#32;overriding&#32;these&#32;streams,&#32;we&#32;flush&#32;cerr</emphasis>
12161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;even&#32;though&#32;std::cerr&#32;is&#32;unbuffered</emphasis>
12162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a54c1ce08041448d684ae8edc14162cd2">Catch::cerr</link>()&#32;&lt;&lt;&#32;std::flush;
12163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a1b2213f54e4d31a659db49827e81856b">Catch::clog</link>()&#32;&lt;&lt;&#32;std::flush;
12164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fflush(stderr);
12165 
12166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dup2(m_originalStdout,&#32;1);
12167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dup2(m_originalStderr,&#32;2);
12168 
12169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_stdoutDest&#32;+=&#32;m_stdoutFile.getContents();
12170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_stderrDest&#32;+=&#32;m_stderrFile.getContents();
12171 &#32;&#32;&#32;&#32;}
12172 
12173 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_NEW_CAPTURE</emphasis>
12174 
12175 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
12176 
12177 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_NEW_CAPTURE)</emphasis>
12178 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;defined(_MSC_VER)</emphasis>
12179 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;dup</emphasis>
12180 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;dup2</emphasis>
12181 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;fileno</emphasis>
12182 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
12183 <emphasis role="preprocessor">#endif</emphasis>
12184 <emphasis role="comment">//&#32;end&#32;catch_output_redirect.cpp</emphasis>
12185 <emphasis role="comment">//&#32;start&#32;catch_polyfills.cpp</emphasis>
12186 
12187 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
12188 
12189 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
12190 
12191 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_POLYFILL_ISNAN)</emphasis>
12192 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isnan(<emphasis role="keywordtype">float</emphasis>&#32;f)&#32;{
12193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::isnan(f);
12194 &#32;&#32;&#32;&#32;}
12195 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isnan(<emphasis role="keywordtype">double</emphasis>&#32;d)&#32;{
12196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::isnan(d);
12197 &#32;&#32;&#32;&#32;}
12198 <emphasis role="preprocessor">#else</emphasis>
12199 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;now&#32;we&#32;only&#32;use&#32;this&#32;for&#32;embarcadero</emphasis>
12200 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isnan(<emphasis role="keywordtype">float</emphasis>&#32;f)&#32;{
12201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::_isnan(f);
12202 &#32;&#32;&#32;&#32;}
12203 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isnan(<emphasis role="keywordtype">double</emphasis>&#32;d)&#32;{
12204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::_isnan(d);
12205 &#32;&#32;&#32;&#32;}
12206 <emphasis role="preprocessor">#endif</emphasis>
12207 
12208 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
12209 <emphasis role="comment">//&#32;end&#32;catch_polyfills.cpp</emphasis>
12210 <emphasis role="comment">//&#32;start&#32;catch_random_number_generator.cpp</emphasis>
12211 
12212 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
12213 
12214 <emphasis role="keyword">namespace&#32;</emphasis>{
12215 
12216 <emphasis role="preprocessor">#if&#32;defined(_MSC_VER)</emphasis>
12217 <emphasis role="preprocessor">#pragma&#32;warning(push)</emphasis>
12218 <emphasis role="preprocessor">#pragma&#32;warning(disable:4146)&#32;</emphasis><emphasis role="comment">//&#32;we&#32;negate&#32;uint32&#32;during&#32;the&#32;rotate</emphasis>
12219 <emphasis role="preprocessor">#endif</emphasis>
12220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Safe&#32;rotr&#32;implementation&#32;thanks&#32;to&#32;John&#32;Regehr</emphasis>
12221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;rotate_right(uint32_t&#32;val,&#32;uint32_t&#32;count)&#32;{
12222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint32_t&#32;mask&#32;=&#32;31;
12223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count&#32;&amp;=&#32;mask;
12224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(val&#32;&gt;&gt;&#32;count)&#32;|&#32;(val&#32;&lt;&lt;&#32;(-count&#32;&amp;&#32;mask));
12225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12226 
12227 <emphasis role="preprocessor">#if&#32;defined(_MSC_VER)</emphasis>
12228 <emphasis role="preprocessor">#pragma&#32;warning(pop)</emphasis>
12229 <emphasis role="preprocessor">#endif</emphasis>
12230 
12231 }
12232 
12233 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_simple_pcg32_1a045c99a96f9b0faf384e22f871576282">SimplePcg32::SimplePcg32</link>(result_type&#32;seed_)&#32;{
12234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_simple_pcg32_1a215dac93c384973353a2b4f87f68c8bc">seed</link>(seed_);
12235 &#32;&#32;&#32;&#32;}
12236 
12237 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_simple_pcg32_1a215dac93c384973353a2b4f87f68c8bc">SimplePcg32::seed</link>(result_type&#32;seed_)&#32;{
12238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_simple_pcg32_1a830bb20e51776b605910f4a00dde46ad">m_state</link>&#32;=&#32;0;
12239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*this)();
12240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_simple_pcg32_1a830bb20e51776b605910f4a00dde46ad">m_state</link>&#32;+=&#32;seed_;
12241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*this)();
12242 &#32;&#32;&#32;&#32;}
12243 
12244 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_simple_pcg32_1a877e7a9c14d378af729ad19a0e959178">SimplePcg32::discard</link>(uint64_t&#32;skip)&#32;{
12245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;could&#32;implement&#32;this&#32;to&#32;run&#32;in&#32;O(log&#32;n)&#32;steps,&#32;but&#32;this</emphasis>
12246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;should&#32;suffice&#32;for&#32;our&#32;use&#32;case.</emphasis>
12247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint64_t&#32;s&#32;=&#32;0;&#32;s&#32;&lt;&#32;skip;&#32;++s)&#32;{
12248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis><emphasis role="keyword">&gt;</emphasis>((*this)());
12249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12250 &#32;&#32;&#32;&#32;}
12251 
12252 &#32;&#32;&#32;&#32;SimplePcg32::result_type&#32;SimplePcg32::operator()()&#32;{
12253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;prepare&#32;the&#32;output&#32;value</emphasis>
12254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint32_t&#32;xorshifted&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint32_t<emphasis role="keyword">&gt;</emphasis>(((m_state&#32;&gt;&gt;&#32;18u)&#32;^&#32;m_state)&#32;&gt;&gt;&#32;27u);
12255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;output&#32;=&#32;rotate_right(xorshifted,&#32;m_state&#32;&gt;&gt;&#32;59u);
12256 
12257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;advance&#32;state</emphasis>
12258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_state&#32;=&#32;m_state&#32;*&#32;6364136223846793005ULL&#32;+&#32;s_inc;
12259 
12260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;output;
12261 &#32;&#32;&#32;&#32;}
12262 
12263 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator==(SimplePcg32&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lhs,&#32;SimplePcg32&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;rhs)&#32;{
12264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.m_state&#32;==&#32;rhs.m_state;
12265 &#32;&#32;&#32;&#32;}
12266 
12267 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator!=(SimplePcg32&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lhs,&#32;SimplePcg32&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;rhs)&#32;{
12268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.m_state&#32;!=&#32;rhs.m_state;
12269 &#32;&#32;&#32;&#32;}
12270 }
12271 <emphasis role="comment">//&#32;end&#32;catch_random_number_generator.cpp</emphasis>
12272 <emphasis role="comment">//&#32;start&#32;catch_registry_hub.cpp</emphasis>
12273 
12274 <emphasis role="comment">//&#32;start&#32;catch_test_case_registry_impl.h</emphasis>
12275 
12276 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
12277 <emphasis role="preprocessor">#include&#32;&lt;set&gt;</emphasis>
12278 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
12279 <emphasis role="preprocessor">#include&#32;&lt;ios&gt;</emphasis>
12280 
12281 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
12282 
12283 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>TestCase;
12284 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>IConfig;
12285 
12286 &#32;&#32;&#32;&#32;std::vector&lt;TestCase&gt;&#32;sortTests(&#32;IConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config,&#32;std::vector&lt;TestCase&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;unsortedTestCases&#32;);
12287 
12288 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1af3e820574c7a0b38d71328c5bd54b0e0">isThrowSafe</link>(&#32;TestCase&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase,&#32;IConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;);
12289 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1aadef80fbc6bc84589777a462770cef49">matchTest</link>(&#32;TestCase&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase,&#32;TestSpec&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testSpec,&#32;IConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;);
12290 
12291 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;enforceNoDuplicateTestCases(&#32;std::vector&lt;TestCase&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;functions&#32;);
12292 
12293 &#32;&#32;&#32;&#32;std::vector&lt;TestCase&gt;&#32;<link linkend="_namespace_catch_1a105d5acdec8a6b401e12a592557c9dd1">filterTests</link>(&#32;std::vector&lt;TestCase&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCases,&#32;TestSpec&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testSpec,&#32;IConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;);
12294 &#32;&#32;&#32;&#32;std::vector&lt;TestCase&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_namespace_catch_1a97039bab95e97f059410f67425f1f2da">getAllTestCasesSorted</link>(&#32;IConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;);
12295 
12296 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>TestRegistry&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;ITestCaseRegistry&#32;{
12297 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
12298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~TestRegistry()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
12299 
12300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;registerTest(&#32;TestCase&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase&#32;);
12301 
12302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;TestCase&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;getAllTests()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
12303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;TestCase&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;getAllTestsSorted(&#32;IConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;)&#32;<emphasis role="keyword">const&#32;override</emphasis>;
12304 
12305 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
12306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;TestCase&gt;&#32;m_functions;
12307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;<link linkend="_struct_catch_1_1_run_tests_1ab56bd851b1dd085869992d1a9d73dc5d">RunTests::InWhatOrder</link>&#32;m_currentSortOrder&#32;=&#32;<link linkend="_struct_catch_1_1_run_tests_1ab56bd851b1dd085869992d1a9d73dc5da732a98670b4661d80d8c392784a14f09">RunTests::InDeclarationOrder</link>;
12308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;std::vector&lt;TestCase&gt;&#32;m_sortedFunctions;
12309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;m_unnamedCount&#32;=&#32;0;
12310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ios_base::Init&#32;m_ostreamInit;&#32;<emphasis role="comment">//&#32;Forces&#32;cout/&#32;cerr&#32;to&#32;be&#32;initialised</emphasis>
12311 &#32;&#32;&#32;&#32;};
12312 
12314 
12315 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>TestInvokerAsFunction&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;ITestInvoker&#32;{
12316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void(*m_testAsFunction)();
12317 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
12318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestInvokerAsFunction(&#32;<emphasis role="keywordtype">void</emphasis>(*testAsFunction)()&#32;)&#32;noexcept;
12319 
12320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;invoke()&#32;const&#32;override;
12321 &#32;&#32;&#32;&#32;};
12322 
12323 &#32;&#32;&#32;&#32;std::<emphasis role="keywordtype">string</emphasis>&#32;extractClassName(&#32;StringRef&#32;const&amp;&#32;classOrQualifiedMethodName&#32;);
12324 
12326 
12327 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
12328 
12329 <emphasis role="comment">//&#32;end&#32;catch_test_case_registry_impl.h</emphasis>
12330 <emphasis role="comment">//&#32;start&#32;catch_reporter_registry.h</emphasis>
12331 
12332 <emphasis role="preprocessor">#include&#32;&lt;map&gt;</emphasis>
12333 
12334 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
12335 
12336 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ReporterRegistry&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;IReporterRegistry&#32;{
12337 
12338 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
12339 
12340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~ReporterRegistry()&#32;<emphasis role="keyword">override</emphasis>;
12341 
12342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IStreamingReporterPtr&#32;create(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;IConfigPtr&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;)&#32;<emphasis role="keyword">const&#32;override</emphasis>;
12343 
12344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;registerReporter(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;IReporterFactoryPtr&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;factory&#32;);
12345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;registerListener(&#32;IReporterFactoryPtr&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;factory&#32;);
12346 
12347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FactoryMap&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;getFactories()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
12348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Listeners&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;getListeners()&#32;<emphasis role="keyword">const&#32;override</emphasis>;
12349 
12350 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
12351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FactoryMap&#32;m_factories;
12352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Listeners&#32;m_listeners;
12353 &#32;&#32;&#32;&#32;};
12354 }
12355 
12356 <emphasis role="comment">//&#32;end&#32;catch_reporter_registry.h</emphasis>
12357 <emphasis role="comment">//&#32;start&#32;catch_tag_alias_registry.h</emphasis>
12358 
12359 <emphasis role="comment">//&#32;start&#32;catch_tag_alias.h</emphasis>
12360 
12361 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
12362 
12363 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
12364 
12365 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>TagAlias&#32;{
12366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TagAlias(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_tag,&#32;SourceLineInfo&#32;_lineInfo);
12367 
12368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;tag;
12369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLineInfo&#32;lineInfo;
12370 &#32;&#32;&#32;&#32;};
12371 
12372 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
12373 
12374 <emphasis role="comment">//&#32;end&#32;catch_tag_alias.h</emphasis>
12375 <emphasis role="preprocessor">#include&#32;&lt;map&gt;</emphasis>
12376 
12377 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
12378 
12379 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>TagAliasRegistry&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;ITagAliasRegistry&#32;{
12380 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
12381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~TagAliasRegistry()&#32;<emphasis role="keyword">override</emphasis>;
12382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TagAlias&#32;<emphasis role="keyword">const</emphasis>*&#32;find(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;alias&#32;)&#32;<emphasis role="keyword">const&#32;override</emphasis>;
12383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;expandAliases(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;unexpandedTestSpec&#32;)&#32;<emphasis role="keyword">const&#32;override</emphasis>;
12384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;add(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;alias,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;tag,&#32;SourceLineInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lineInfo&#32;);
12385 
12386 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
12387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::map&lt;std::string,&#32;TagAlias&gt;&#32;m_registry;
12388 &#32;&#32;&#32;&#32;};
12389 
12390 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
12391 
12392 <emphasis role="comment">//&#32;end&#32;catch_tag_alias_registry.h</emphasis>
12393 <emphasis role="comment">//&#32;start&#32;catch_startup_exception_registry.h</emphasis>
12394 
12395 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
12396 <emphasis role="preprocessor">#include&#32;&lt;exception&gt;</emphasis>
12397 
12398 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
12399 
12400 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>StartupExceptionRegistry&#32;{
12401 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</emphasis>
12402 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
12403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;add(std::exception_ptr&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;exception)&#32;<emphasis role="keyword">noexcept</emphasis>;
12404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::exception_ptr&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;getExceptions()&#32;const&#32;noexcept;
12405 &#32;&#32;&#32;&#32;private:
12406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::exception_ptr&gt;&#32;m_exceptions;
12407 <emphasis role="preprocessor">#endif</emphasis>
12408 &#32;&#32;&#32;&#32;};
12409 
12410 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
12411 
12412 <emphasis role="comment">//&#32;end&#32;catch_startup_exception_registry.h</emphasis>
12413 <emphasis role="comment">//&#32;start&#32;catch_singletons.hpp</emphasis>
12414 
12415 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
12416 
12417 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>ISingleton&#32;{
12418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~ISingleton();
12419 &#32;&#32;&#32;&#32;};
12420 
12421 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;addSingleton(&#32;ISingleton*&#32;singleton&#32;);
12422 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;cleanupSingletons();
12423 
12424 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;SingletonImplT,&#32;<emphasis role="keyword">typename</emphasis>&#32;InterfaceT&#32;=&#32;SingletonImplT,&#32;<emphasis role="keyword">typename</emphasis>&#32;MutableInterfaceT&#32;=&#32;InterfaceT&gt;
12425 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>Singleton&#32;:&#32;SingletonImplT,&#32;<emphasis role="keyword">public</emphasis>&#32;ISingleton&#32;{
12426 
12427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;getInternal()&#32;-&gt;&#32;Singleton*&#32;{
12428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;Singleton*&#32;s_instance&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
12429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!s_instance&#32;)&#32;{
12430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s_instance&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Singleton;
12431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addSingleton(&#32;s_instance&#32;);
12432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s_instance;
12434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12435 
12436 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
12437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;get()&#32;-&gt;&#32;InterfaceT&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;{
12438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*getInternal();
12439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;getMutable()&#32;-&gt;&#32;MutableInterfaceT&amp;&#32;{
12441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*getInternal();
12442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12443 &#32;&#32;&#32;&#32;};
12444 
12445 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
12446 
12447 <emphasis role="comment">//&#32;end&#32;catch_singletons.hpp</emphasis>
12448 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
12449 
12450 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>{
12451 
12452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>RegistryHub&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;IRegistryHub,&#32;<emphasis role="keyword">public</emphasis>&#32;IMutableRegistryHub,
12453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;NonCopyable&#32;{
12454 
12455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:&#32;<emphasis role="comment">//&#32;IRegistryHub</emphasis>
12456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RegistryHub()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
12457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IReporterRegistry&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;getReporterRegistry()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
12458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_reporterRegistry;
12459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ITestCaseRegistry&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;getTestCaseRegistry()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
12461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_testCaseRegistry;
12462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IExceptionTranslatorRegistry&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;getExceptionTranslatorRegistry()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
12464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_exceptionTranslatorRegistry;
12465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ITagAliasRegistry&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;getTagAliasRegistry()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
12467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_tagAliasRegistry;
12468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StartupExceptionRegistry&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;getStartupExceptionRegistry()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
12470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_exceptionRegistry;
12471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12472 
12473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:&#32;<emphasis role="comment">//&#32;IMutableRegistryHub</emphasis>
12474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;registerReporter(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;IReporterFactoryPtr&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;factory&#32;)<emphasis role="keyword">&#32;override&#32;</emphasis>{
12475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporterRegistry.registerReporter(&#32;name,&#32;factory&#32;);
12476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;registerListener(&#32;IReporterFactoryPtr&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;factory&#32;)<emphasis role="keyword">&#32;override&#32;</emphasis>{
12478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporterRegistry.registerListener(&#32;factory&#32;);
12479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;registerTest(&#32;TestCase&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testInfo&#32;)<emphasis role="keyword">&#32;override&#32;</emphasis>{
12481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_testCaseRegistry.registerTest(&#32;testInfo&#32;);
12482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;registerTranslator(&#32;<emphasis role="keyword">const</emphasis>&#32;IExceptionTranslator*&#32;translator&#32;)<emphasis role="keyword">&#32;override&#32;</emphasis>{
12484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_exceptionTranslatorRegistry.registerTranslator(&#32;translator&#32;);
12485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;registerTagAlias(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;alias,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;tag,&#32;SourceLineInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lineInfo&#32;)<emphasis role="keyword">&#32;override&#32;</emphasis>{
12487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_tagAliasRegistry.add(&#32;alias,&#32;tag,&#32;lineInfo&#32;);
12488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;registerStartupException()&#32;noexcept<emphasis role="keyword">&#32;override&#32;</emphasis>{
12490 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</emphasis>
12491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_exceptionRegistry.add(std::current_exception());
12492 <emphasis role="preprocessor">#else</emphasis>
12493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1af445c1e136fadba0e92f3c22d68a7641">CATCH_INTERNAL_ERROR</link>(<emphasis role="stringliteral">&quot;Attempted&#32;to&#32;register&#32;active&#32;exception&#32;under&#32;CATCH_CONFIG_DISABLE_EXCEPTIONS!&quot;</emphasis>);
12494 <emphasis role="preprocessor">#endif</emphasis>
12495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IMutableEnumValuesRegistry&amp;&#32;getMutableEnumValuesRegistry()<emphasis role="keyword">&#32;override&#32;</emphasis>{
12497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_enumValuesRegistry;
12498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12499 
12500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
12501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestRegistry&#32;m_testCaseRegistry;
12502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReporterRegistry&#32;m_reporterRegistry;
12503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExceptionTranslatorRegistry&#32;m_exceptionTranslatorRegistry;
12504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TagAliasRegistry&#32;m_tagAliasRegistry;
12505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StartupExceptionRegistry&#32;m_exceptionRegistry;
12506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Detail::EnumValuesRegistry&#32;m_enumValuesRegistry;
12507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
12508 &#32;&#32;&#32;&#32;}
12509 
12510 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>RegistryHubSingleton&#32;=&#32;Singleton&lt;RegistryHub,&#32;IRegistryHub,&#32;IMutableRegistryHub&gt;;
12511 
12512 &#32;&#32;&#32;&#32;IRegistryHub&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_namespace_catch_1a5d328566cb8da87b48f1fac3f319ac7a">getRegistryHub</link>()&#32;{
12513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;RegistryHubSingleton::get();
12514 &#32;&#32;&#32;&#32;}
12515 &#32;&#32;&#32;&#32;IMutableRegistryHub&amp;&#32;<link linkend="_namespace_catch_1a585459763f2c7610e57de2dd22dd1ad8">getMutableRegistryHub</link>()&#32;{
12516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;RegistryHubSingleton::getMutable();
12517 &#32;&#32;&#32;&#32;}
12518 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1a0f78e9afdebc6d4512d18e76fbf54b8c">cleanUp</link>()&#32;{
12519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cleanupSingletons();
12520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1ae50508f10ffc4ed873a31a4db4caea16">cleanUpContext</link>();
12521 &#32;&#32;&#32;&#32;}
12522 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_namespace_catch_1adafff91485eeeeb9e9333f317cc0e3b1">translateActiveException</link>()&#32;{
12523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1a5d328566cb8da87b48f1fac3f319ac7a">getRegistryHub</link>().<link linkend="_struct_catch_1_1_i_registry_hub_1aa97defa756fe28dd6249b19c12bbbec1">getExceptionTranslatorRegistry</link>().translateActiveException();
12524 &#32;&#32;&#32;&#32;}
12525 
12526 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
12527 <emphasis role="comment">//&#32;end&#32;catch_registry_hub.cpp</emphasis>
12528 <emphasis role="comment">//&#32;start&#32;catch_reporter_registry.cpp</emphasis>
12529 
12530 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
12531 
12532 &#32;&#32;&#32;&#32;ReporterRegistry::~ReporterRegistry()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
12533 
12534 &#32;&#32;&#32;&#32;IStreamingReporterPtr&#32;ReporterRegistry::create(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;IConfigPtr&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
12535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;&#32;m_factories.find(&#32;name&#32;);
12536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;it&#32;==&#32;m_factories.end()&#32;)
12537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
12538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it-&gt;second-&gt;create(&#32;ReporterConfig(&#32;config&#32;)&#32;);
12539 &#32;&#32;&#32;&#32;}
12540 
12541 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ReporterRegistry::registerReporter(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;IReporterFactoryPtr&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;factory&#32;)&#32;{
12542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_factories.emplace(name,&#32;factory);
12543 &#32;&#32;&#32;&#32;}
12544 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ReporterRegistry::registerListener(&#32;IReporterFactoryPtr&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;factory&#32;)&#32;{
12545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_listeners.push_back(&#32;factory&#32;);
12546 &#32;&#32;&#32;&#32;}
12547 
12548 &#32;&#32;&#32;&#32;IReporterRegistry::FactoryMap&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;ReporterRegistry::getFactories()<emphasis role="keyword">&#32;const&#32;</emphasis>{
12549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_factories;
12550 &#32;&#32;&#32;&#32;}
12551 &#32;&#32;&#32;&#32;IReporterRegistry::Listeners&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;ReporterRegistry::getListeners()<emphasis role="keyword">&#32;const&#32;</emphasis>{
12552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_listeners;
12553 &#32;&#32;&#32;&#32;}
12554 
12555 }
12556 <emphasis role="comment">//&#32;end&#32;catch_reporter_registry.cpp</emphasis>
12557 <emphasis role="comment">//&#32;start&#32;catch_result_type.cpp</emphasis>
12558 
12559 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
12560 
12561 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1a5205869c81c06d3460759cb86676ae68">isOk</link>(&#32;ResultWas::OfType&#32;resultType&#32;)&#32;{
12562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(&#32;resultType&#32;&amp;&#32;ResultWas::FailureBit&#32;)&#32;==&#32;0;
12563 &#32;&#32;&#32;&#32;}
12564 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1a54b01af61673a3e1f21f31713639b180">isJustInfo</link>(&#32;<emphasis role="keywordtype">int</emphasis>&#32;flags&#32;)&#32;{
12565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;flags&#32;==&#32;ResultWas::Info;
12566 &#32;&#32;&#32;&#32;}
12567 
12568 &#32;&#32;&#32;&#32;ResultDisposition::Flags&#32;operator&#32;|&#32;(&#32;ResultDisposition::Flags&#32;lhs,&#32;ResultDisposition::Flags&#32;rhs&#32;)&#32;{
12569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ResultDisposition::Flags<emphasis role="keyword">&gt;</emphasis>(&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(&#32;lhs&#32;)&#32;|&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(&#32;rhs&#32;)&#32;);
12570 &#32;&#32;&#32;&#32;}
12571 
12572 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1a7f7480b15d74965459c844f0d393ed87">shouldContinueOnFailure</link>(&#32;<emphasis role="keywordtype">int</emphasis>&#32;flags&#32;)&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(&#32;flags&#32;&amp;&#32;ResultDisposition::ContinueOnFailure&#32;)&#32;!=&#32;0;&#32;}
12573 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1ab91eb13081203d634fe48d3d2ab386d7">shouldSuppressFailure</link>(&#32;<emphasis role="keywordtype">int</emphasis>&#32;flags&#32;)&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(&#32;flags&#32;&amp;&#32;ResultDisposition::SuppressFail&#32;)&#32;!=&#32;0;&#32;}
12574 
12575 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
12576 <emphasis role="comment">//&#32;end&#32;catch_result_type.cpp</emphasis>
12577 <emphasis role="comment">//&#32;start&#32;catch_run_context.cpp</emphasis>
12578 
12579 <emphasis role="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>
12580 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
12581 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
12582 
12583 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
12584 
12585 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Generators&#32;{
12586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>GeneratorTracker&#32;:&#32;TestCaseTracking::TrackerBase,&#32;IGeneratorTracker&#32;{
12587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1_1_generators_1a9578dfa233a0ab3fb14f58203161b6b8">GeneratorBasePtr</link>&#32;m_generator;
12588 
12589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GeneratorTracker(&#32;TestCaseTracking::NameAndLocation&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;nameAndLocation,&#32;TrackerContext&amp;&#32;ctx,&#32;ITracker*&#32;parent&#32;)
12590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;TrackerBase(&#32;nameAndLocation,&#32;ctx,&#32;parent&#32;)
12591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
12592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~GeneratorTracker();
12593 
12594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;GeneratorTracker&amp;&#32;acquire(&#32;TrackerContext&amp;&#32;ctx,&#32;TestCaseTracking::NameAndLocation&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;nameAndLocation&#32;)&#32;{
12595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::shared_ptr&lt;GeneratorTracker&gt;&#32;tracker;
12596 
12597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ITracker&amp;&#32;currentTracker&#32;=&#32;ctx.currentTracker();
12598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Under&#32;specific&#32;circumstances,&#32;the&#32;generator&#32;we&#32;want</emphasis>
12599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;acquire&#32;is&#32;also&#32;the&#32;current&#32;tracker.&#32;If&#32;this&#32;is</emphasis>
12600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;case,&#32;we&#32;have&#32;to&#32;avoid&#32;looking&#32;through&#32;current</emphasis>
12601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;tracker&apos;s&#32;children,&#32;and&#32;instead&#32;return&#32;the&#32;current</emphasis>
12602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;tracker.</emphasis>
12603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;case&#32;where&#32;this&#32;check&#32;is&#32;important&#32;is&#32;e.g.</emphasis>
12604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;for&#32;(int&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;5;&#32;++i)&#32;{</emphasis>
12605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int&#32;n&#32;=&#32;GENERATE(1,&#32;2);</emphasis>
12606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;}</emphasis>
12607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
12608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;without&#32;it,&#32;the&#32;code&#32;above&#32;creates&#32;5&#32;nested&#32;generators.</emphasis>
12609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(currentTracker.nameAndLocation()&#32;==&#32;nameAndLocation)&#32;{
12610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;thisTracker&#32;=&#32;currentTracker.parent().findChild(nameAndLocation);
12611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(thisTracker);
12612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(thisTracker-&gt;isGeneratorTracker());
12613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tracker&#32;=&#32;std::static_pointer_cast&lt;GeneratorTracker&gt;(thisTracker);
12614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;TestCaseTracking::ITrackerPtr&#32;childTracker&#32;=&#32;currentTracker.findChild(&#32;nameAndLocation&#32;)&#32;)&#32;{
12615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(&#32;childTracker&#32;);
12616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(&#32;childTracker-&gt;isGeneratorTracker()&#32;);
12617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tracker&#32;=&#32;std::static_pointer_cast&lt;GeneratorTracker&gt;(&#32;childTracker&#32;);
12618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
12619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tracker&#32;=&#32;std::make_shared&lt;GeneratorTracker&gt;(&#32;nameAndLocation,&#32;ctx,&#32;&amp;currentTracker&#32;);
12620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentTracker.addChild(&#32;tracker&#32;);
12621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12622 
12623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!tracker-&gt;isComplete()&#32;)&#32;{
12624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tracker-&gt;open();
12625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12626 
12627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*tracker;
12628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12629 
12630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TrackerBase&#32;interface</emphasis>
12631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isGeneratorTracker()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;}
12632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;hasGenerator()&#32;const&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&#32;override&#32;</emphasis>{
12633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!m_generator;
12634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;close()<emphasis role="keyword">&#32;override&#32;</emphasis>{
12636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TrackerBase::close();
12637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;a&#32;generator&#32;has&#32;a&#32;child&#32;(it&#32;is&#32;followed&#32;by&#32;a&#32;section)</emphasis>
12638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;none&#32;of&#32;its&#32;children&#32;have&#32;started,&#32;then&#32;we&#32;must&#32;wait</emphasis>
12639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;until&#32;later&#32;to&#32;start&#32;consuming&#32;its&#32;values.</emphasis>
12640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;catches&#32;cases&#32;where&#32;`GENERATE`&#32;is&#32;placed&#32;between&#32;two</emphasis>
12641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;`SECTION`s.</emphasis>
12642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;**The&#32;check&#32;for&#32;m_children.empty&#32;cannot&#32;be&#32;removed**.</emphasis>
12643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;doing&#32;so&#32;would&#32;break&#32;`GENERATE`&#32;_not_&#32;followed&#32;by&#32;`SECTION`s.</emphasis>
12644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;should_wait_for_child&#32;=&#32;[&amp;]()&#32;{
12645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;children&#32;-&gt;&#32;nobody&#32;to&#32;wait&#32;for</emphasis>
12646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;m_children.empty()&#32;)&#32;{
12647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
12648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;at&#32;least&#32;one&#32;child&#32;started&#32;executing,&#32;don&apos;t&#32;wait</emphasis>
12650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;std::find_if(
12651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_children.begin(),
12652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_children.end(),
12653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](&#32;TestCaseTracking::ITrackerPtr&#32;tracker&#32;)&#32;{
12654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;tracker-&gt;hasStarted();
12655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;)&#32;!=&#32;m_children.end()&#32;)&#32;{
12656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
12657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12658 
12659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;children&#32;have&#32;started.&#32;We&#32;need&#32;to&#32;check&#32;if&#32;they&#32;_can_</emphasis>
12660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;start,&#32;and&#32;thus&#32;we&#32;should&#32;wait&#32;for&#32;them,&#32;or&#32;they&#32;cannot</emphasis>
12661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;start&#32;(due&#32;to&#32;filters),&#32;and&#32;we&#32;shouldn&apos;t&#32;wait&#32;for&#32;them</emphasis>
12662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;parent&#32;=&#32;m_parent;
12663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;safe:&#32;there&#32;is&#32;always&#32;at&#32;least&#32;one&#32;section</emphasis>
12664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;tracker&#32;in&#32;a&#32;test&#32;case&#32;tracking&#32;tree</emphasis>
12665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(&#32;!parent-&gt;isSectionTracker()&#32;)&#32;{
12666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parent&#32;=&#32;&amp;(&#32;parent-&gt;parent()&#32;);
12667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(&#32;parent&#32;&amp;&amp;
12669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Missing&#32;root&#32;(test&#32;case)&#32;level&#32;section&quot;</emphasis>&#32;);
12670 
12671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;parentSection&#32;=
12672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>SectionTracker&amp;<emphasis role="keyword">&gt;</emphasis>(&#32;*parent&#32;);
12673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;filters&#32;=&#32;parentSection.getFilters();
12674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;filters&#32;-&gt;&#32;no&#32;restrictions&#32;on&#32;running&#32;sections</emphasis>
12675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;filters.empty()&#32;)&#32;{
12676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
12677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12678 
12679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;child&#32;:&#32;m_children&#32;)&#32;{
12680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;child-&gt;isSectionTracker()&#32;&amp;&amp;
12681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::find(&#32;filters.begin(),
12682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filters.end(),
12683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>SectionTracker&amp;<emphasis role="keyword">&gt;</emphasis>(&#32;*child&#32;)
12684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.trimmedName()&#32;)&#32;!=
12685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filters.end()&#32;)&#32;{
12686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
12687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
12690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}();
12691 
12692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;check&#32;is&#32;a&#32;bit&#32;tricky,&#32;because&#32;m_generator-&gt;next()</emphasis>
12693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;has&#32;a&#32;side-effect,&#32;where&#32;it&#32;consumes&#32;generator&apos;s&#32;current</emphasis>
12694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;value,&#32;but&#32;we&#32;do&#32;not&#32;want&#32;to&#32;invoke&#32;the&#32;side-effect&#32;if</emphasis>
12695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;this&#32;generator&#32;is&#32;still&#32;waiting&#32;for&#32;any&#32;child&#32;to&#32;start.</emphasis>
12696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;should_wait_for_child&#32;||
12697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;m_runState&#32;==&#32;CompletedSuccessfully&#32;&amp;&amp;
12698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_generator-&gt;next()&#32;)&#32;)&#32;{
12699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_children.clear();
12700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_runState&#32;=&#32;Executing;
12701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12703 
12704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;IGeneratorTracker&#32;interface</emphasis>
12705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;getGenerator()&#32;const&#32;-&gt;&#32;GeneratorBasePtr&#32;const&amp;<emphasis role="keyword">&#32;override&#32;</emphasis>{
12706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_generator;
12707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setGenerator(&#32;GeneratorBasePtr&amp;&amp;&#32;generator&#32;)<emphasis role="keyword">&#32;override&#32;</emphasis>{
12709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_generator&#32;=&#32;std::move(&#32;generator&#32;);
12710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
12712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GeneratorTracker::~GeneratorTracker()&#32;{}
12713 &#32;&#32;&#32;&#32;}
12714 
12715 &#32;&#32;&#32;&#32;RunContext::RunContext(IConfigPtr&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_config,&#32;IStreamingReporterPtr&amp;&amp;&#32;reporter)
12716 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_runInfo(_config-&gt;name()),
12717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_context(<link linkend="_namespace_catch_1a710841d4732b86c06f816bd4822bd425">getCurrentMutableContext</link>()),
12718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_config(_config),
12719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter(std::move(reporter)),
12720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lastAssertionInfo{&#32;StringRef(),&#32;SourceLineInfo(<emphasis role="stringliteral">&quot;&quot;</emphasis>,0),&#32;StringRef(),&#32;ResultDisposition::<link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737a960b44c579bc2f6818d2daaf9e4c16f0">Normal</link>&#32;},
12721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_includeSuccessfulResults(&#32;m_config-&gt;includeSuccessfulResults()&#32;||&#32;m_reporter-&gt;getPreferences().shouldReportAllAssertions&#32;)
12722 &#32;&#32;&#32;&#32;{
12723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_context.setRunner(<emphasis role="keyword">this</emphasis>);
12724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_context.setConfig(m_config);
12725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_context.setResultCapture(<emphasis role="keyword">this</emphasis>);
12726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;testRunStarting(m_runInfo);
12727 &#32;&#32;&#32;&#32;}
12728 
12729 &#32;&#32;&#32;&#32;RunContext::~RunContext()&#32;{
12730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;testRunEnded(TestRunStats(m_runInfo,&#32;m_totals,&#32;aborting()));
12731 &#32;&#32;&#32;&#32;}
12732 
12733 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::testGroupStarting(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testSpec,&#32;std::size_t&#32;groupIndex,&#32;std::size_t&#32;groupsCount)&#32;{
12734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;testGroupStarting(GroupInfo(testSpec,&#32;groupIndex,&#32;groupsCount));
12735 &#32;&#32;&#32;&#32;}
12736 
12737 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::testGroupEnded(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testSpec,&#32;Totals&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;totals,&#32;std::size_t&#32;groupIndex,&#32;std::size_t&#32;groupsCount)&#32;{
12738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;testGroupEnded(TestGroupStats(GroupInfo(testSpec,&#32;groupIndex,&#32;groupsCount),&#32;totals,&#32;aborting()));
12739 &#32;&#32;&#32;&#32;}
12740 
12741 &#32;&#32;&#32;&#32;Totals&#32;RunContext::runTest(TestCase&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase)&#32;{
12742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Totals&#32;prevTotals&#32;=&#32;m_totals;
12743 
12744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;redirectedCout;
12745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;redirectedCerr;
12746 
12747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testInfo&#32;=&#32;testCase.getTestCaseInfo();
12748 
12749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;testCaseStarting(testInfo);
12750 
12751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_activeTestCase&#32;=&#32;&amp;testCase;
12752 
12753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ITracker&amp;&#32;rootTracker&#32;=&#32;m_trackerContext.startRun();
12754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(rootTracker.isSectionTracker());
12755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>SectionTracker&amp;<emphasis role="keyword">&gt;</emphasis>(rootTracker).addInitialFilters(m_config-&gt;getSectionsToRun());
12756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
12757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_trackerContext.startCycle();
12758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_testCaseTracker&#32;=&#32;&amp;SectionTracker::acquire(m_trackerContext,&#32;TestCaseTracking::NameAndLocation(testInfo.name,&#32;testInfo.lineInfo));
12759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;runCurrentTest(redirectedCout,&#32;redirectedCerr);
12760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!m_testCaseTracker-&gt;isSuccessfullyCompleted()&#32;&amp;&amp;&#32;!aborting());
12761 
12762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Totals&#32;deltaTotals&#32;=&#32;m_totals.delta(prevTotals);
12763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(testInfo.expectedToFail()&#32;&amp;&amp;&#32;deltaTotals.testCases.passed&#32;&gt;&#32;0)&#32;{
12764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deltaTotals.assertions.failed++;
12765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deltaTotals.testCases.passed--;
12766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deltaTotals.testCases.failed++;
12767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_totals.testCases&#32;+=&#32;deltaTotals.testCases;
12769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;testCaseEnded(TestCaseStats(testInfo,
12770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deltaTotals,
12771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;redirectedCout,
12772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;redirectedCerr,
12773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;aborting()));
12774 
12775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_activeTestCase&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
12776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_testCaseTracker&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
12777 
12778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;deltaTotals;
12779 &#32;&#32;&#32;&#32;}
12780 
12781 &#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6">IConfigPtr</link>&#32;RunContext::config()<emphasis role="keyword">&#32;const&#32;</emphasis>{
12782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_config;
12783 &#32;&#32;&#32;&#32;}
12784 
12785 &#32;&#32;&#32;&#32;IStreamingReporter&amp;&#32;RunContext::reporter()<emphasis role="keyword">&#32;const&#32;</emphasis>{
12786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*m_reporter;
12787 &#32;&#32;&#32;&#32;}
12788 
12789 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::assertionEnded(AssertionResult&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;result)&#32;{
12790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result.getResultType()&#32;==&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efae7cbe89bb9ec7ece9b44d48b63d01b63">ResultWas::Ok</link>)&#32;{
12791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_totals.assertions.passed++;
12792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lastAssertionPassed&#32;=&#32;<emphasis role="keyword">true</emphasis>;
12793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!result.isOk())&#32;{
12794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lastAssertionPassed&#32;=&#32;<emphasis role="keyword">false</emphasis>;
12795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_activeTestCase-&gt;getTestCaseInfo().okToFail()&#32;)
12796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_totals.assertions.failedButOk++;
12797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
12798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_totals.assertions.failed++;
12799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
12801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lastAssertionPassed&#32;=&#32;<emphasis role="keyword">true</emphasis>;
12802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12803 
12804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;have&#32;no&#32;use&#32;for&#32;the&#32;return&#32;value&#32;(whether&#32;messages&#32;should&#32;be&#32;cleared),&#32;because&#32;messages&#32;were&#32;made&#32;scoped</emphasis>
12805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;should&#32;be&#32;let&#32;to&#32;clear&#32;themselves&#32;out.</emphasis>
12806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis><emphasis role="keyword">&gt;</emphasis>(m_reporter-&gt;assertionEnded(AssertionStats(result,&#32;m_messages,&#32;m_totals)));
12807 
12808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result.getResultType()&#32;!=&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa67e9d36ba0f04a60a19896834d840c21">ResultWas::Warning</link>)
12809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_messageScopes.clear();
12810 
12811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reset&#32;working&#32;state</emphasis>
12812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resetAssertionInfo();
12813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lastResult&#32;=&#32;result;
12814 &#32;&#32;&#32;&#32;}
12815 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::resetAssertionInfo()&#32;{
12816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lastAssertionInfo.macroName&#32;=&#32;StringRef();
12817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lastAssertionInfo.capturedExpression&#32;=&#32;<emphasis role="stringliteral">&quot;{Unknown&#32;expression&#32;after&#32;the&#32;reported&#32;line}&quot;</emphasis>_sr;
12818 &#32;&#32;&#32;&#32;}
12819 
12820 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;RunContext::sectionStarted(SectionInfo&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;sectionInfo,&#32;Counts&#32;&amp;&#32;assertions)&#32;{
12821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ITracker&amp;&#32;sectionTracker&#32;=&#32;SectionTracker::acquire(m_trackerContext,&#32;TestCaseTracking::NameAndLocation(sectionInfo.name,&#32;sectionInfo.lineInfo));
12822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!sectionTracker.isOpen())
12823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
12824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_activeSections.push_back(&amp;sectionTracker);
12825 
12826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lastAssertionInfo.lineInfo&#32;=&#32;sectionInfo.lineInfo;
12827 
12828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;sectionStarting(sectionInfo);
12829 
12830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertions&#32;=&#32;m_totals.assertions;
12831 
12832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
12833 &#32;&#32;&#32;&#32;}
12834 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;RunContext::acquireGeneratorTracker(&#32;StringRef&#32;generatorName,&#32;SourceLineInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lineInfo&#32;)&#32;-&gt;&#32;IGeneratorTracker&amp;&#32;{
12835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>Generators;
12836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GeneratorTracker&amp;&#32;tracker&#32;=&#32;GeneratorTracker::acquire(m_trackerContext,
12837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestCaseTracking::NameAndLocation(&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::string<emphasis role="keyword">&gt;</emphasis>(generatorName),&#32;lineInfo&#32;)&#32;);
12838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lastAssertionInfo.lineInfo&#32;=&#32;lineInfo;
12839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tracker;
12840 &#32;&#32;&#32;&#32;}
12841 
12842 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;RunContext::testForMissingAssertions(Counts&amp;&#32;assertions)&#32;{
12843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(assertions.total()&#32;!=&#32;0)
12844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
12845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!m_config-&gt;warnAboutMissingAssertions())
12846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
12847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_trackerContext.currentTracker().hasChildren())
12848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
12849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_totals.assertions.failed++;
12850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertions.failed++;
12851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
12852 &#32;&#32;&#32;&#32;}
12853 
12854 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::sectionEnded(SectionEndInfo&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;endInfo)&#32;{
12855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Counts&#32;assertions&#32;=&#32;m_totals.assertions&#32;-&#32;endInfo.prevAssertions;
12856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;missingAssertions&#32;=&#32;testForMissingAssertions(assertions);
12857 
12858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!m_activeSections.empty())&#32;{
12859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_activeSections.back()-&gt;close();
12860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_activeSections.pop_back();
12861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12862 
12863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;sectionEnded(SectionStats(endInfo.sectionInfo,&#32;assertions,&#32;endInfo.durationInSeconds,&#32;missingAssertions));
12864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_messages.clear();
12865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_messageScopes.clear();
12866 &#32;&#32;&#32;&#32;}
12867 
12868 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::sectionEndedEarly(SectionEndInfo&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;endInfo)&#32;{
12869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_unfinishedSections.empty())
12870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_activeSections.back()-&gt;fail();
12871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
12872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_activeSections.back()-&gt;close();
12873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_activeSections.pop_back();
12874 
12875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_unfinishedSections.push_back(endInfo);
12876 &#32;&#32;&#32;&#32;}
12877 
12878 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</emphasis>
12879 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::benchmarkPreparing(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name)&#32;{
12880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;benchmarkPreparing(name);
12881 &#32;&#32;&#32;&#32;}
12882 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::benchmarkStarting(&#32;BenchmarkInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;info&#32;)&#32;{
12883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;benchmarkStarting(&#32;info&#32;);
12884 &#32;&#32;&#32;&#32;}
12885 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::benchmarkEnded(&#32;BenchmarkStats&lt;&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;stats&#32;)&#32;{
12886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;benchmarkEnded(&#32;stats&#32;);
12887 &#32;&#32;&#32;&#32;}
12888 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::benchmarkFailed(std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;error)&#32;{
12889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;benchmarkFailed(error);
12890 &#32;&#32;&#32;&#32;}
12891 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_ENABLE_BENCHMARKING</emphasis>
12892 
12893 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::pushScopedMessage(MessageInfo&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;message)&#32;{
12894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_messages.push_back(message);
12895 &#32;&#32;&#32;&#32;}
12896 
12897 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::popScopedMessage(MessageInfo&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;message)&#32;{
12898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_messages.erase(std::remove(m_messages.begin(),&#32;m_messages.end(),&#32;message),&#32;m_messages.end());
12899 &#32;&#32;&#32;&#32;}
12900 
12901 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::emplaceUnscopedMessage(&#32;MessageBuilder&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;builder&#32;)&#32;{
12902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_messageScopes.emplace_back(&#32;builder&#32;);
12903 &#32;&#32;&#32;&#32;}
12904 
12905 &#32;&#32;&#32;&#32;std::string&#32;RunContext::getCurrentTestName()<emphasis role="keyword">&#32;const&#32;</emphasis>{
12906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_activeTestCase
12907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;m_activeTestCase-&gt;getTestCaseInfo().name
12908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;std::string();
12909 &#32;&#32;&#32;&#32;}
12910 
12911 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;AssertionResult&#32;*&#32;RunContext::getLastResult()<emphasis role="keyword">&#32;const&#32;</emphasis>{
12912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;(*m_lastResult);
12913 &#32;&#32;&#32;&#32;}
12914 
12915 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::exceptionEarlyReported()&#32;{
12916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_shouldReportUnexpected&#32;=&#32;<emphasis role="keyword">false</emphasis>;
12917 &#32;&#32;&#32;&#32;}
12918 
12919 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::handleFatalErrorCondition(&#32;StringRef&#32;message&#32;)&#32;{
12920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;notify&#32;reporter&#32;that&#32;bad&#32;things&#32;happened</emphasis>
12921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;fatalErrorEncountered(message);
12922 
12923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Don&apos;t&#32;rebuild&#32;the&#32;result&#32;--&#32;the&#32;stringification&#32;itself&#32;can&#32;cause&#32;more&#32;fatal&#32;errors</emphasis>
12924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Instead,&#32;fake&#32;a&#32;result&#32;data.</emphasis>
12925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionResultData&#32;tempResult(&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa87fa1f2a2a63290b61948002e2935377">ResultWas::FatalErrorCondition</link>,&#32;{&#32;<emphasis role="keyword">false</emphasis>&#32;}&#32;);
12926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tempResult.message&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::string<emphasis role="keyword">&gt;</emphasis>(message);
12927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionResult&#32;result(m_lastAssertionInfo,&#32;tempResult);
12928 
12929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertionEnded(result);
12930 
12931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handleUnfinishedSections();
12932 
12933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Recreate&#32;section&#32;for&#32;test&#32;case&#32;(as&#32;we&#32;will&#32;lose&#32;the&#32;one&#32;that&#32;was&#32;in&#32;scope)</emphasis>
12934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCaseInfo&#32;=&#32;m_activeTestCase-&gt;getTestCaseInfo();
12935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SectionInfo&#32;testCaseSection(testCaseInfo.lineInfo,&#32;testCaseInfo.name);
12936 
12937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Counts&#32;assertions;
12938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertions.failed&#32;=&#32;1;
12939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SectionStats&#32;testCaseSectionStats(testCaseSection,&#32;assertions,&#32;0,&#32;<emphasis role="keyword">false</emphasis>);
12940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;sectionEnded(testCaseSectionStats);
12941 
12942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testInfo&#32;=&#32;m_activeTestCase-&gt;getTestCaseInfo();
12943 
12944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Totals&#32;deltaTotals;
12945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deltaTotals.testCases.failed&#32;=&#32;1;
12946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deltaTotals.assertions.failed&#32;=&#32;1;
12947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;testCaseEnded(TestCaseStats(testInfo,
12948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deltaTotals,
12949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string(),
12950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string(),
12951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">false</emphasis>));
12952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_totals.testCases.failed++;
12953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testGroupEnded(std::string(),&#32;m_totals,&#32;1,&#32;1);
12954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;testRunEnded(TestRunStats(m_runInfo,&#32;m_totals,&#32;<emphasis role="keyword">false</emphasis>));
12955 &#32;&#32;&#32;&#32;}
12956 
12957 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;RunContext::lastAssertionPassed()&#32;{
12958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_lastAssertionPassed;
12959 &#32;&#32;&#32;&#32;}
12960 
12961 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::assertionPassed()&#32;{
12962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lastAssertionPassed&#32;=&#32;<emphasis role="keyword">true</emphasis>;
12963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++m_totals.assertions.passed;
12964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resetAssertionInfo();
12965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_messageScopes.clear();
12966 &#32;&#32;&#32;&#32;}
12967 
12968 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;RunContext::aborting()<emphasis role="keyword">&#32;const&#32;</emphasis>{
12969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_totals.assertions.failed&#32;&gt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(m_config-&gt;abortAfter());
12970 &#32;&#32;&#32;&#32;}
12971 
12972 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::runCurrentTest(std::string&#32;&amp;&#32;redirectedCout,&#32;std::string&#32;&amp;&#32;redirectedCerr)&#32;{
12973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCaseInfo&#32;=&#32;m_activeTestCase-&gt;getTestCaseInfo();
12974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SectionInfo&#32;testCaseSection(testCaseInfo.lineInfo,&#32;testCaseInfo.name);
12975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;sectionStarting(testCaseSection);
12976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Counts&#32;prevAssertions&#32;=&#32;m_totals.assertions;
12977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;duration&#32;=&#32;0;
12978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_shouldReportUnexpected&#32;=&#32;<emphasis role="keyword">true</emphasis>;
12979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lastAssertionInfo&#32;=&#32;{&#32;<emphasis role="stringliteral">&quot;TEST_CASE&quot;</emphasis>_sr,&#32;testCaseInfo.lineInfo,&#32;StringRef(),&#32;<link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8af3bd52347ed6f8796e8ce2f77bb39ea5">ResultDisposition::Normal</link>&#32;};
12980 
12981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;seedRng(*m_config);
12982 
12983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Timer&#32;timer;
12984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1ab76c2d22e571ab1a828f5c60d2f485a6">CATCH_TRY</link>&#32;{
12985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_reporter-&gt;getPreferences().shouldRedirectStdOut)&#32;{
12986 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_EXPERIMENTAL_REDIRECT)</emphasis>
12987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RedirectedStreams&#32;redirectedStreams(redirectedCout,&#32;redirectedCerr);
12988 
12989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;timer.start();
12990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invokeActiveTestCase();
12991 <emphasis role="preprocessor">#else</emphasis>
12992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OutputRedirect&#32;r(redirectedCout,&#32;redirectedCerr);
12993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;timer.start();
12994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invokeActiveTestCase();
12995 <emphasis role="preprocessor">#endif</emphasis>
12996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
12997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;timer.start();
12998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invokeActiveTestCase();
12999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration&#32;=&#32;timer.getElapsedSeconds();
13001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<link linkend="_catch_8h_1a3caecf3cbc55848423d744df50d84d5b">CATCH_CATCH_ANON</link>&#32;(TestFailureException&amp;)&#32;{
13002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;just&#32;means&#32;the&#32;test&#32;was&#32;aborted&#32;due&#32;to&#32;failure</emphasis>
13003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<link linkend="_catch_8h_1afa0ae14e70806dca4f8bf06d06645fa9">CATCH_CATCH_ALL</link>&#32;{
13004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Under&#32;CATCH_CONFIG_FAST_COMPILE,&#32;unexpected&#32;exceptions&#32;under&#32;REQUIRE&#32;assertions</emphasis>
13005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;are&#32;reported&#32;without&#32;translation&#32;at&#32;the&#32;point&#32;of&#32;origin.</emphasis>
13006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_shouldReportUnexpected&#32;)&#32;{
13007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionReaction&#32;dummyReaction;
13008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handleUnexpectedInflightException(&#32;m_lastAssertionInfo,&#32;<link linkend="_namespace_catch_1adafff91485eeeeb9e9333f317cc0e3b1">translateActiveException</link>(),&#32;dummyReaction&#32;);
13009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Counts&#32;assertions&#32;=&#32;m_totals.assertions&#32;-&#32;prevAssertions;
13012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;missingAssertions&#32;=&#32;testForMissingAssertions(assertions);
13013 
13014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_testCaseTracker-&gt;close();
13015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handleUnfinishedSections();
13016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_messages.clear();
13017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_messageScopes.clear();
13018 
13019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SectionStats&#32;testCaseSectionStats(testCaseSection,&#32;assertions,&#32;duration,&#32;missingAssertions);
13020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;sectionEnded(testCaseSectionStats);
13021 &#32;&#32;&#32;&#32;}
13022 
13023 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::invokeActiveTestCase()&#32;{
13024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FatalConditionHandlerGuard&#32;_(&amp;m_fatalConditionhandler);
13025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_activeTestCase-&gt;invoke();
13026 &#32;&#32;&#32;&#32;}
13027 
13028 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::handleUnfinishedSections()&#32;{
13029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;sections&#32;ended&#32;prematurely&#32;due&#32;to&#32;an&#32;exception&#32;we&#32;stored&#32;their</emphasis>
13030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;infos&#32;here&#32;so&#32;we&#32;can&#32;tear&#32;them&#32;down&#32;outside&#32;the&#32;unwind&#32;process.</emphasis>
13031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;m_unfinishedSections.rbegin(),
13032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;itEnd&#32;=&#32;m_unfinishedSections.rend();
13033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;!=&#32;itEnd;
13034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++it)
13035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sectionEnded(*it);
13036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_unfinishedSections.clear();
13037 &#32;&#32;&#32;&#32;}
13038 
13039 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::handleExpr(
13040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;info,
13041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ITransientExpression&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;expr,
13042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionReaction&amp;&#32;reaction
13043 &#32;&#32;&#32;&#32;)&#32;{
13044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;assertionStarting(&#32;info&#32;);
13045 
13046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;negated&#32;=&#32;<link linkend="_namespace_catch_1a93ef4e3e307a2021ca0d41b32c0e54b0">isFalseTest</link>(&#32;info.resultDisposition&#32;);
13047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;result&#32;=&#32;expr.getResult()&#32;!=&#32;negated;
13048 
13049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;result&#32;)&#32;{
13050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!m_includeSuccessfulResults)&#32;{
13051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertionPassed();
13052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
13054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reportExpr(info,&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efae7cbe89bb9ec7ece9b44d48b63d01b63">ResultWas::Ok</link>,&#32;&amp;expr,&#32;negated);
13055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
13058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reportExpr(info,&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa5e7126b8458dc1376ac870a719f7873f">ResultWas::ExpressionFailed</link>,&#32;&amp;expr,&#32;negated&#32;);
13059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;populateReaction(&#32;reaction&#32;);
13060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13061 &#32;&#32;&#32;&#32;}
13062 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::reportExpr(
13063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;info,
13064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link>&#32;resultType,
13065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ITransientExpression&#32;<emphasis role="keyword">const</emphasis>&#32;*expr,
13066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;negated&#32;)&#32;{
13067 
13068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lastAssertionInfo&#32;=&#32;info;
13069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionResultData&#32;data(&#32;resultType,&#32;LazyExpression(&#32;negated&#32;)&#32;);
13070 
13071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionResult&#32;assertionResult{&#32;info,&#32;data&#32;};
13072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertionResult.m_resultData.lazyExpression.m_transientExpression&#32;=&#32;expr;
13073 
13074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertionEnded(&#32;assertionResult&#32;);
13075 &#32;&#32;&#32;&#32;}
13076 
13077 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::handleMessage(
13078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;info,
13079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link>&#32;resultType,
13080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StringRef&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;message,
13081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionReaction&amp;&#32;reaction
13082 &#32;&#32;&#32;&#32;)&#32;{
13083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;assertionStarting(&#32;info&#32;);
13084 
13085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lastAssertionInfo&#32;=&#32;info;
13086 
13087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionResultData&#32;data(&#32;resultType,&#32;LazyExpression(&#32;<emphasis role="keyword">false</emphasis>&#32;)&#32;);
13088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data.message&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::string<emphasis role="keyword">&gt;</emphasis>(message);
13089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionResult&#32;assertionResult{&#32;m_lastAssertionInfo,&#32;data&#32;};
13090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertionEnded(&#32;assertionResult&#32;);
13091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!assertionResult.isOk()&#32;)
13092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;populateReaction(&#32;reaction&#32;);
13093 &#32;&#32;&#32;&#32;}
13094 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::handleUnexpectedExceptionNotThrown(
13095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;info,
13096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionReaction&amp;&#32;reaction
13097 &#32;&#32;&#32;&#32;)&#32;{
13098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handleNonExpr(info,&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa8b6d3d5bc78d4e7a95543b6ecfbdb57d">Catch::ResultWas::DidntThrowException</link>,&#32;reaction);
13099 &#32;&#32;&#32;&#32;}
13100 
13101 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::handleUnexpectedInflightException(
13102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;info,
13103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;message,
13104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionReaction&amp;&#32;reaction
13105 &#32;&#32;&#32;&#32;)&#32;{
13106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lastAssertionInfo&#32;=&#32;info;
13107 
13108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionResultData&#32;data(&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa3bb56296483947280cf7fa1ad074ab45">ResultWas::ThrewException</link>,&#32;LazyExpression(&#32;<emphasis role="keyword">false</emphasis>&#32;)&#32;);
13109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data.message&#32;=&#32;message;
13110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionResult&#32;assertionResult{&#32;info,&#32;data&#32;};
13111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertionEnded(&#32;assertionResult&#32;);
13112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;populateReaction(&#32;reaction&#32;);
13113 &#32;&#32;&#32;&#32;}
13114 
13115 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::populateReaction(&#32;AssertionReaction&amp;&#32;reaction&#32;)&#32;{
13116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reaction.shouldDebugBreak&#32;=&#32;m_config-&gt;shouldDebugBreak();
13117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reaction.shouldThrow&#32;=&#32;aborting()&#32;||&#32;(m_lastAssertionInfo.resultDisposition&#32;&amp;&#32;<link linkend="_struct_catch_1_1_result_disposition_1a3396cad6e2259af326b3aae93e23e9d8af3bd52347ed6f8796e8ce2f77bb39ea5">ResultDisposition::Normal</link>);
13118 &#32;&#32;&#32;&#32;}
13119 
13120 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::handleIncomplete(
13121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;info
13122 &#32;&#32;&#32;&#32;)&#32;{
13123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lastAssertionInfo&#32;=&#32;info;
13124 
13125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionResultData&#32;data(&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa3bb56296483947280cf7fa1ad074ab45">ResultWas::ThrewException</link>,&#32;LazyExpression(&#32;<emphasis role="keyword">false</emphasis>&#32;)&#32;);
13126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data.message&#32;=&#32;<emphasis role="stringliteral">&quot;Exception&#32;translation&#32;was&#32;disabled&#32;by&#32;CATCH_CONFIG_FAST_COMPILE&quot;</emphasis>;
13127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionResult&#32;assertionResult{&#32;info,&#32;data&#32;};
13128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertionEnded(&#32;assertionResult&#32;);
13129 &#32;&#32;&#32;&#32;}
13130 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunContext::handleNonExpr(
13131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;info,
13132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601ef">ResultWas::OfType</link>&#32;resultType,
13133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionReaction&#32;&amp;reaction
13134 &#32;&#32;&#32;&#32;)&#32;{
13135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lastAssertionInfo&#32;=&#32;info;
13136 
13137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionResultData&#32;data(&#32;resultType,&#32;LazyExpression(&#32;<emphasis role="keyword">false</emphasis>&#32;)&#32;);
13138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionResult&#32;assertionResult{&#32;info,&#32;data&#32;};
13139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertionEnded(&#32;assertionResult&#32;);
13140 
13141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!assertionResult.isOk()&#32;)
13142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;populateReaction(&#32;reaction&#32;);
13143 &#32;&#32;&#32;&#32;}
13144 
13145 &#32;&#32;&#32;&#32;IResultCapture&amp;&#32;<link linkend="_namespace_catch_1af718eeab870712f292ed8dc6ee3f6488">getResultCapture</link>()&#32;{
13146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>*&#32;capture&#32;=&#32;<link linkend="_namespace_catch_1a228a625318bb6183842e394eeba17d50">getCurrentContext</link>().<link linkend="_namespace_catch_1af718eeab870712f292ed8dc6ee3f6488">getResultCapture</link>())
13147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*capture;
13148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1af445c1e136fadba0e92f3c22d68a7641">CATCH_INTERNAL_ERROR</link>(<emphasis role="stringliteral">&quot;No&#32;result&#32;capture&#32;instance&quot;</emphasis>);
13150 &#32;&#32;&#32;&#32;}
13151 
13152 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;seedRng(IConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config)&#32;{
13153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(config.rngSeed()&#32;!=&#32;0)&#32;{
13154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::srand(config.rngSeed());
13155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a66ea553511cbbc59d99e1720d8da514e">rng</link>().<link linkend="_class_catch_1_1_simple_pcg32_1a215dac93c384973353a2b4f87f68c8bc">seed</link>(config.rngSeed());
13156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13157 &#32;&#32;&#32;&#32;}
13158 
13159 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespace_catch_1acf5ea05e942d2d7fe79111e12754ed76">rngSeed</link>()&#32;{
13160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1a228a625318bb6183842e394eeba17d50">getCurrentContext</link>().<link linkend="_struct_catch_1_1_i_context_1ad72743ae753feab0a6f5505f26f79ced">getConfig</link>()-&gt;rngSeed();
13161 &#32;&#32;&#32;&#32;}
13162 
13163 }
13164 <emphasis role="comment">//&#32;end&#32;catch_run_context.cpp</emphasis>
13165 <emphasis role="comment">//&#32;start&#32;catch_section.cpp</emphasis>
13166 
13167 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
13168 
13169 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_section_1a68fd4e51e8981aaa7ddb00d8a6abd099">Section::Section</link>(&#32;SectionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;info&#32;)
13170 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_info(&#32;info&#32;),
13171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_sectionIncluded(&#32;<link linkend="_namespace_catch_1af718eeab870712f292ed8dc6ee3f6488">getResultCapture</link>().sectionStarted(&#32;m_info,&#32;m_assertions&#32;)&#32;)
13172 &#32;&#32;&#32;&#32;{
13173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_timer.start();
13174 &#32;&#32;&#32;&#32;}
13175 
13176 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_section_1aa1422edd68a77aa578b5cc6b8b69f86f">Section::~Section</link>()&#32;{
13177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_class_catch_1_1_section_1a038bb0d5d2718df6e3ae1ece4b3d695d">m_sectionIncluded</link>&#32;)&#32;{
13178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SectionEndInfo&#32;endInfo{&#32;<link linkend="_class_catch_1_1_section_1a22f54832b33b341ae5a78807a6219af6">m_info</link>,&#32;<link linkend="_class_catch_1_1_section_1ae0a2acc394d4bd1bc7a51a1445d25034">m_assertions</link>,&#32;<link linkend="_class_catch_1_1_section_1a1548993afa64305a1b093391c6884b7e">m_timer</link>.<link linkend="_class_catch_1_1_timer_1a065e37e3c9eb16bd4dcf41971d8deedc">getElapsedSeconds</link>()&#32;};
13179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;uncaught_exceptions()&#32;)
13180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1af718eeab870712f292ed8dc6ee3f6488">getResultCapture</link>().<link linkend="_struct_catch_1_1_i_result_capture_1afcc71eef8ca821ae132cced4a2be6988">sectionEndedEarly</link>(&#32;endInfo&#32;);
13181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1af718eeab870712f292ed8dc6ee3f6488">getResultCapture</link>().<link linkend="_struct_catch_1_1_i_result_capture_1a4e152bc43dc0933684e31fa67a58195d">sectionEnded</link>(&#32;endInfo&#32;);
13183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13184 &#32;&#32;&#32;&#32;}
13185 
13186 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;indicates&#32;whether&#32;the&#32;section&#32;should&#32;be&#32;executed&#32;or&#32;not</emphasis>
13187 &#32;&#32;&#32;&#32;Section::operator&#32;bool()<emphasis role="keyword">&#32;const&#32;</emphasis>{
13188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_sectionIncluded;
13189 &#32;&#32;&#32;&#32;}
13190 
13191 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
13192 <emphasis role="comment">//&#32;end&#32;catch_section.cpp</emphasis>
13193 <emphasis role="comment">//&#32;start&#32;catch_section_info.cpp</emphasis>
13194 
13195 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
13196 
13197 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_section_info_1a2808437ae7d4bc0830cee1c3995165a6">SectionInfo::SectionInfo</link>
13198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;&#32;&#32;SourceLineInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_lineInfo,
13199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_name&#32;)
13200 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;name(&#32;_name&#32;),
13201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lineInfo(&#32;_lineInfo&#32;)
13202 &#32;&#32;&#32;&#32;{}
13203 
13204 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
13205 <emphasis role="comment">//&#32;end&#32;catch_section_info.cpp</emphasis>
13206 <emphasis role="comment">//&#32;start&#32;catch_session.cpp</emphasis>
13207 
13208 <emphasis role="comment">//&#32;start&#32;catch_session.h</emphasis>
13209 
13210 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
13211 
13212 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
13213 
13214 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>Session&#32;:&#32;NonCopyable&#32;{
13215 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
13216 
13217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Session();
13218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~Session()&#32;<emphasis role="keyword">override</emphasis>;
13219 
13220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;showHelp()&#32;<emphasis role="keyword">const</emphasis>;
13221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;libIdentify();
13222 
13223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;applyCommandLine(&#32;<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;argv&#32;);
13224 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;defined(CATCH_CONFIG_WCHAR)&#32;&amp;&amp;&#32;defined(_WIN32)&#32;&amp;&amp;&#32;defined(UNICODE)</emphasis>
13225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;applyCommandLine(&#32;<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">wchar_t</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;argv&#32;);
13226 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
13227 
13228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;useConfigData(&#32;ConfigData&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;configData&#32;);
13229 
13230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;CharT&gt;
13231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;run(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;CharT&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<emphasis role="keyword">const</emphasis>&#32;argv[])&#32;{
13232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_startupExceptions)
13233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
13234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;returnCode&#32;=&#32;applyCommandLine(argc,&#32;argv);
13235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(returnCode&#32;==&#32;0)
13236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;returnCode&#32;=&#32;run();
13237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;returnCode;
13238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13239 
13240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;run();
13241 
13242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;clara::Parser&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;cli()&#32;<emphasis role="keyword">const</emphasis>;
13243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;cli(&#32;clara::Parser&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;newParser&#32;);
13244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ConfigData&amp;&#32;configData();
13245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Config&amp;&#32;config();
13246 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
13247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;runInternal();
13248 
13249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;clara::Parser&#32;m_cli;
13250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ConfigData&#32;m_configData;
13251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::shared_ptr&lt;Config&gt;&#32;m_config;
13252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;m_startupExceptions&#32;=&#32;<emphasis role="keyword">false</emphasis>;
13253 &#32;&#32;&#32;&#32;};
13254 
13255 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
13256 
13257 <emphasis role="comment">//&#32;end&#32;catch_session.h</emphasis>
13258 <emphasis role="comment">//&#32;start&#32;catch_version.h</emphasis>
13259 
13260 <emphasis role="preprocessor">#include&#32;&lt;iosfwd&gt;</emphasis>
13261 
13262 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
13263 
13264 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Versioning&#32;information</emphasis>
13265 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Version&#32;{
13266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Version(&#32;Version&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
13267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Version&amp;&#32;operator=(&#32;Version&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
13268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Version(&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_majorVersion,
13269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_minorVersion,
13270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_patchNumber,
13271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<emphasis role="keyword">const</emphasis>&#32;_branchName,
13272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_buildNumber&#32;);
13273 
13274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;majorVersion;
13275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;minorVersion;
13276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;patchNumber;
13277 
13278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;buildNumber&#32;is&#32;only&#32;used&#32;if&#32;branchName&#32;is&#32;not&#32;null</emphasis>
13279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<emphasis role="keyword">const</emphasis>&#32;branchName;
13280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;buildNumber;
13281 
13282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_namespace_catch_1a8c8ea1f66bc1cdc3e1254ed7fa57c06d">operator &lt;&lt; </link>(&#32;std::ostream&amp;&#32;os,&#32;Version&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;version&#32;);
13283 &#32;&#32;&#32;&#32;};
13284 
13285 &#32;&#32;&#32;&#32;Version&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;libraryVersion();
13286 }
13287 
13288 <emphasis role="comment">//&#32;end&#32;catch_version.h</emphasis>
13289 <emphasis role="preprocessor">#include&#32;&lt;cstdlib&gt;</emphasis>
13290 <emphasis role="preprocessor">#include&#32;&lt;iomanip&gt;</emphasis>
13291 <emphasis role="preprocessor">#include&#32;&lt;set&gt;</emphasis>
13292 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>
13293 
13294 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
13295 
13296 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>{
13297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;MaxExitCode&#32;=&#32;255;
13298 
13299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IStreamingReporterPtr&#32;createReporter(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;reporterName,&#32;<link linkend="_namespace_catch_1a961f6f5f07e265684c220a8ae014d7d6">IConfigPtr</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config)&#32;{
13300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;reporter&#32;=&#32;<link linkend="_namespace_catch_1a5d328566cb8da87b48f1fac3f319ac7a">Catch::getRegistryHub</link>().<link linkend="_struct_catch_1_1_i_registry_hub_1abbb3aafb58916d633ef959d724d4b82c">getReporterRegistry</link>().create(reporterName,&#32;config);
13301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1aba552c917b9ac8604f50a914a745e974">CATCH_ENFORCE</link>(reporter,&#32;<emphasis role="stringliteral">&quot;No&#32;reporter&#32;registered&#32;with&#32;name:&#32;&apos;&quot;</emphasis>&#32;&lt;&lt;&#32;reporterName&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis>);
13302 
13303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;reporter;
13304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13305 
13306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IStreamingReporterPtr&#32;makeReporter(std::shared_ptr&lt;Config&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config)&#32;{
13307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespace_catch_1a5d328566cb8da87b48f1fac3f319ac7a">Catch::getRegistryHub</link>().getReporterRegistry().getListeners().empty())&#32;{
13308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;createReporter(config-&gt;getReporterName(),&#32;config);
13309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13310 
13311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;On&#32;older&#32;platforms,&#32;returning&#32;std::unique_ptr&lt;ListeningReporter&gt;</emphasis>
13312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;when&#32;the&#32;return&#32;type&#32;is&#32;std::unique_ptr&lt;IStreamingReporter&gt;</emphasis>
13313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;doesn&apos;t&#32;compile&#32;without&#32;a&#32;std::move&#32;call.&#32;However,&#32;this&#32;causes</emphasis>
13314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;a&#32;warning&#32;on&#32;newer&#32;platforms.&#32;Thus,&#32;we&#32;have&#32;to&#32;work&#32;around</emphasis>
13315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;it&#32;a&#32;bit&#32;and&#32;downcast&#32;the&#32;pointer&#32;manually.</emphasis>
13316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ret&#32;=&#32;std::unique_ptr&lt;IStreamingReporter&gt;(<emphasis role="keyword">new</emphasis>&#32;ListeningReporter);
13317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;multi&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ListeningReporter&amp;<emphasis role="keyword">&gt;</emphasis>(*ret);
13318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;listeners&#32;=&#32;<link linkend="_namespace_catch_1a5d328566cb8da87b48f1fac3f319ac7a">Catch::getRegistryHub</link>().<link linkend="_struct_catch_1_1_i_registry_hub_1abbb3aafb58916d633ef959d724d4b82c">getReporterRegistry</link>().getListeners();
13319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;listener&#32;:&#32;listeners)&#32;{
13320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;multi.addListener(listener-&gt;create(<link linkend="_struct_catch_1_1true__given">Catch::ReporterConfig</link>(config)));
13321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;multi.addReporter(createReporter(config-&gt;getReporterName(),&#32;config));
13323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
13324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13325 
13326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>TestGroup&#32;{
13327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
13328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;TestGroup(std::shared_ptr&lt;Config&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config)
13329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_config{config}
13330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;m_context{config,&#32;makeReporter(config)}
13331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;allTestCases&#32;=&#32;<link linkend="_namespace_catch_1a97039bab95e97f059410f67425f1f2da">getAllTestCasesSorted</link>(*m_config);
13333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_matches&#32;=&#32;m_config-&gt;testSpec().matchesByFilter(allTestCases,&#32;*m_config);
13334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;invalidArgs&#32;=&#32;m_config-&gt;testSpec().getInvalidArgs();
13335 
13336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_matches.empty()&#32;&amp;&amp;&#32;invalidArgs.empty())&#32;{
13337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;test&#32;:&#32;allTestCases)
13338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(!test.isHidden())
13339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_tests.emplace(&amp;test);
13340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
13341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;match&#32;:&#32;m_matches)
13342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_tests.insert(match.tests.begin(),&#32;match.tests.end());
13343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13345 
13346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Totals&#32;execute()&#32;{
13347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;invalidArgs&#32;=&#32;m_config-&gt;testSpec().getInvalidArgs();
13348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Totals&#32;totals;
13349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_context.testGroupStarting(m_config-&gt;name(),&#32;1,&#32;1);
13350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase&#32;:&#32;m_tests)&#32;{
13351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!m_context.aborting())
13352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;totals&#32;+=&#32;m_context.runTest(*testCase);
13353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_context.reporter().skipTest(*testCase);
13355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13356 
13357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;match&#32;:&#32;m_matches)&#32;{
13358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(match.tests.empty())&#32;{
13359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_context.reporter().noMatchingTestCases(match.name);
13360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;totals.error&#32;=&#32;-1;
13361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13363 
13364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!invalidArgs.empty())&#32;{
13365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;invalidArg:&#32;invalidArgs)
13366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_context.reporter().reportInvalidArguments(invalidArg);
13367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13368 
13369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_context.testGroupEnded(m_config-&gt;name(),&#32;totals,&#32;1,&#32;1);
13370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;totals;
13371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13372 
13373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
13374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>Tests&#32;=&#32;std::set&lt;TestCase&#32;const*&gt;;
13375 
13376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::shared_ptr&lt;Config&gt;&#32;m_config;
13377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RunContext&#32;m_context;
13378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tests&#32;m_tests;
13379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestSpec::Matches&#32;m_matches;
13380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
13381 
13382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;applyFilenamesAsTags(<link linkend="_struct_catch_1_1_i_config">Catch::IConfig</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config)&#32;{
13383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;tests&#32;=&#32;<emphasis role="keyword">const_cast&lt;</emphasis>std::vector&lt;TestCase&gt;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="_namespace_catch_1a97039bab95e97f059410f67425f1f2da">getAllTestCasesSorted</link>(config));
13384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;testCase&#32;:&#32;tests)&#32;{
13385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;tags&#32;=&#32;testCase.tags;
13386 
13387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;filename&#32;=&#32;testCase.lineInfo.file;
13388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;lastSlash&#32;=&#32;filename.find_last_of(<emphasis role="stringliteral">&quot;\\/&quot;</emphasis>);
13389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lastSlash&#32;!=&#32;std::string::npos)&#32;{
13390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filename.erase(0,&#32;lastSlash);
13391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filename[0]&#32;=&#32;<emphasis role="charliteral">&apos;#&apos;</emphasis>;
13392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filename.insert(0,&#32;<emphasis role="stringliteral">&quot;#&quot;</emphasis>);
13396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13397 
13398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;lastDot&#32;=&#32;filename.find_last_of(<emphasis role="charliteral">&apos;.&apos;</emphasis>);
13399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lastDot&#32;!=&#32;std::string::npos)&#32;{
13400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filename.erase(lastDot);
13401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13402 
13403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tags.push_back(std::move(filename));
13404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setTags(testCase,&#32;tags);
13405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13407 
13408 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;anon&#32;namespace</emphasis>
13409 
13410 &#32;&#32;&#32;&#32;Session::Session()&#32;{
13411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;alreadyInstantiated&#32;=&#32;<emphasis role="keyword">false</emphasis>;
13412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;alreadyInstantiated&#32;)&#32;{
13413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1ab76c2d22e571ab1a828f5c60d2f485a6">CATCH_TRY</link>&#32;{&#32;<link linkend="_catch_8h_1af445c1e136fadba0e92f3c22d68a7641">CATCH_INTERNAL_ERROR</link>(&#32;<emphasis role="stringliteral">&quot;Only&#32;one&#32;instance&#32;of&#32;Catch::Session&#32;can&#32;ever&#32;be&#32;used&quot;</emphasis>&#32;);&#32;}
13414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1afa0ae14e70806dca4f8bf06d06645fa9">CATCH_CATCH_ALL</link>&#32;{&#32;<link linkend="_namespace_catch_1a585459763f2c7610e57de2dd22dd1ad8">getMutableRegistryHub</link>().<link linkend="_struct_catch_1_1_i_mutable_registry_hub_1a72a7d5386851ac3200f8da794a009c86">registerStartupException</link>();&#32;}
13415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13416 
13417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;There&#32;cannot&#32;be&#32;exceptions&#32;at&#32;startup&#32;in&#32;no-exception&#32;mode.</emphasis>
13418 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</emphasis>
13419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;exceptions&#32;=&#32;<link linkend="_namespace_catch_1a5d328566cb8da87b48f1fac3f319ac7a">getRegistryHub</link>().<link linkend="_struct_catch_1_1_i_registry_hub_1a6a1810bb78ba99c3be091958bcc12f29">getStartupExceptionRegistry</link>().getExceptions();
13420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;!exceptions.empty()&#32;)&#32;{
13421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config();
13422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a710841d4732b86c06f816bd4822bd425">getCurrentMutableContext</link>().<link linkend="_struct_catch_1_1_i_mutable_context_1aa81ba080fce084e9482f20338bc88531">setConfig</link>(m_config);
13423 
13424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_startupExceptions&#32;=&#32;<emphasis role="keyword">true</emphasis>;
13425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Colour&#32;colourGuard(&#32;Colour::Red&#32;);
13426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a54c1ce08041448d684ae8edc14162cd2">Catch::cerr</link>()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Errors&#32;occurred&#32;during&#32;startup!&quot;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
13427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterate&#32;over&#32;all&#32;exceptions&#32;and&#32;notify&#32;user</emphasis>
13428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;ex_ptr&#32;:&#32;exceptions&#32;)&#32;{
13429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
13430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::rethrow_exception(ex_ptr);
13431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(&#32;std::exception&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;ex&#32;)&#32;{
13432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a54c1ce08041448d684ae8edc14162cd2">Catch::cerr</link>()&#32;&lt;&lt;&#32;Column(&#32;ex.what()&#32;).indent(2)&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
13433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13436 <emphasis role="preprocessor">#endif</emphasis>
13437 
13438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;alreadyInstantiated&#32;=&#32;<emphasis role="keyword">true</emphasis>;
13439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_cli&#32;=&#32;makeCommandLineParser(&#32;m_configData&#32;);
13440 &#32;&#32;&#32;&#32;}
13441 &#32;&#32;&#32;&#32;Session::~Session()&#32;{
13442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0f78e9afdebc6d4512d18e76fbf54b8c">Catch::cleanUp</link>();
13443 &#32;&#32;&#32;&#32;}
13444 
13445 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Session::showHelp()<emphasis role="keyword">&#32;const&#32;</emphasis>{
13446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()
13447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\nCatch&#32;v&quot;</emphasis>&#32;&lt;&lt;&#32;libraryVersion()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>
13448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;m_cli&#32;&lt;&lt;&#32;std::endl
13449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;For&#32;more&#32;detailed&#32;usage&#32;please&#32;see&#32;the&#32;project&#32;docs\n&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
13450 &#32;&#32;&#32;&#32;}
13451 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Session::libIdentify()&#32;{
13452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()
13453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::left&#32;&lt;&lt;&#32;std::setw(16)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;description:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;A&#32;Catch2&#32;test&#32;executable\n&quot;</emphasis>
13454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::left&#32;&lt;&lt;&#32;std::setw(16)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;category:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;testframework\n&quot;</emphasis>
13455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::left&#32;&lt;&lt;&#32;std::setw(16)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;framework:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Catch&#32;Test\n&quot;</emphasis>
13456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::left&#32;&lt;&lt;&#32;std::setw(16)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;version:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;libraryVersion()&#32;&lt;&lt;&#32;std::endl;
13457 &#32;&#32;&#32;&#32;}
13458 
13459 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;Session::applyCommandLine(&#32;<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;argv&#32;)&#32;{
13460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_startupExceptions&#32;)
13461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
13462 
13463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;result&#32;=&#32;m_cli.parse_expr(&#32;clara::Args(&#32;argc,&#32;argv&#32;)&#32;);
13464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!result&#32;)&#32;{
13465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config();
13466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a710841d4732b86c06f816bd4822bd425">getCurrentMutableContext</link>().<link linkend="_struct_catch_1_1_i_mutable_context_1aa81ba080fce084e9482f20338bc88531">setConfig</link>(m_config);
13467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a54c1ce08041448d684ae8edc14162cd2">Catch::cerr</link>()
13468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Colour(&#32;Colour::Red&#32;)
13469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\nError(s)&#32;in&#32;input:\n&quot;</emphasis>
13470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Column(&#32;result.errorMessage()&#32;).indent(&#32;2&#32;)
13471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n\n&quot;</emphasis>;
13472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a54c1ce08041448d684ae8edc14162cd2">Catch::cerr</link>()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Run&#32;with&#32;-?&#32;for&#32;usage\n&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
13473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;MaxExitCode;
13474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13475 
13476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_configData.showHelp&#32;)
13477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;showHelp();
13478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_configData.libIdentify&#32;)
13479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;libIdentify();
13480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_config.reset();
13481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
13482 &#32;&#32;&#32;&#32;}
13483 
13484 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_WCHAR)&#32;&amp;&amp;&#32;defined(_WIN32)&#32;&amp;&amp;&#32;defined(UNICODE)</emphasis>
13485 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;Session::applyCommandLine(&#32;<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">wchar_t</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;argv&#32;)&#32;{
13486 
13487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;**utf8Argv&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*[&#32;argc&#32;];
13488 
13489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;argc;&#32;++i&#32;)&#32;{
13490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bufSize&#32;=&#32;WideCharToMultiByte(&#32;CP_UTF8,&#32;0,&#32;argv[i],&#32;-1,&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;0,&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;<emphasis role="keyword">nullptr</emphasis>&#32;);
13491 
13492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8Argv[&#32;i&#32;]&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[&#32;bufSize&#32;];
13493 
13494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WideCharToMultiByte(&#32;CP_UTF8,&#32;0,&#32;argv[i],&#32;-1,&#32;utf8Argv[i],&#32;bufSize,&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;<emphasis role="keyword">nullptr</emphasis>&#32;);
13495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13496 
13497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;returnCode&#32;=&#32;applyCommandLine(&#32;argc,&#32;utf8Argv&#32;);
13498 
13499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;argc;&#32;++i&#32;)
13500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;delete&#32;[]&#32;utf8Argv[&#32;i&#32;];
13501 
13502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;utf8Argv;
13503 
13504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;returnCode;
13505 &#32;&#32;&#32;&#32;}
13506 <emphasis role="preprocessor">#endif</emphasis>
13507 
13508 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Session::useConfigData(&#32;ConfigData&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;configData&#32;)&#32;{
13509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_configData&#32;=&#32;configData;
13510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_config.reset();
13511 &#32;&#32;&#32;&#32;}
13512 
13513 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;Session::run()&#32;{
13514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;(&#32;m_configData.waitForKeypress&#32;&amp;&#32;WaitForKeypress::BeforeStart&#32;)&#32;!=&#32;0&#32;)&#32;{
13515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;...waiting&#32;for&#32;enter/&#32;return&#32;before&#32;starting&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
13516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis><emphasis role="keyword">&gt;</emphasis>(std::getchar());
13517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;exitCode&#32;=&#32;runInternal();
13519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;(&#32;m_configData.waitForKeypress&#32;&amp;&#32;WaitForKeypress::BeforeExit&#32;)&#32;!=&#32;0&#32;)&#32;{
13520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">Catch::cout</link>()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;...waiting&#32;for&#32;enter/&#32;return&#32;before&#32;exiting,&#32;with&#32;code:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;exitCode&#32;&lt;&lt;&#32;std::endl;
13521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis><emphasis role="keyword">&gt;</emphasis>(std::getchar());
13522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;exitCode;
13524 &#32;&#32;&#32;&#32;}
13525 
13526 &#32;&#32;&#32;&#32;clara::Parser&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Session::cli()<emphasis role="keyword">&#32;const&#32;</emphasis>{
13527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_cli;
13528 &#32;&#32;&#32;&#32;}
13529 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Session::cli(&#32;clara::Parser&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;newParser&#32;)&#32;{
13530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_cli&#32;=&#32;newParser;
13531 &#32;&#32;&#32;&#32;}
13532 &#32;&#32;&#32;&#32;ConfigData&amp;&#32;Session::configData()&#32;{
13533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_configData;
13534 &#32;&#32;&#32;&#32;}
13535 &#32;&#32;&#32;&#32;Config&amp;&#32;Session::config()&#32;{
13536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!m_config&#32;)
13537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_config&#32;=&#32;std::make_shared&lt;Config&gt;(&#32;m_configData&#32;);
13538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*m_config;
13539 &#32;&#32;&#32;&#32;}
13540 
13541 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;Session::runInternal()&#32;{
13542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_startupExceptions&#32;)
13543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
13544 
13545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_configData.showHelp&#32;||&#32;m_configData.libIdentify)&#32;{
13546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
13547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13548 
13549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1ab76c2d22e571ab1a828f5c60d2f485a6">CATCH_TRY</link>&#32;{
13550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config();&#32;<emphasis role="comment">//&#32;Force&#32;config&#32;to&#32;be&#32;constructed</emphasis>
13551 
13552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;seedRng(&#32;*m_config&#32;);
13553 
13554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_configData.filenamesAsTags&#32;)
13555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;applyFilenamesAsTags(&#32;*m_config&#32;);
13556 
13557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Handle&#32;list&#32;request</emphasis>
13558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;Option&lt;std::size_t&gt;&#32;listed&#32;=&#32;list(&#32;m_config&#32;)&#32;)
13559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(std::min)&#32;(MaxExitCode,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(*listed));
13560 
13561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestGroup&#32;tests&#32;{&#32;m_config&#32;};
13562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;totals&#32;=&#32;tests.execute();
13563 
13564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_config-&gt;warnAboutNoTests()&#32;&amp;&amp;&#32;totals.error&#32;==&#32;-1&#32;)
13565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;2;
13566 
13567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note&#32;that&#32;on&#32;unices&#32;only&#32;the&#32;lower&#32;8&#32;bits&#32;are&#32;usually&#32;used,&#32;clamping</emphasis>
13568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;return&#32;value&#32;to&#32;255&#32;prevents&#32;false&#32;negative&#32;when&#32;some&#32;multiple</emphasis>
13569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;of&#32;256&#32;tests&#32;has&#32;failed</emphasis>
13570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(std::min)&#32;(MaxExitCode,&#32;(std::max)&#32;(totals.error,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(totals.assertions.failed)));
13571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13572 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</emphasis>
13573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>(&#32;std::exception&amp;&#32;ex&#32;)&#32;{
13574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a54c1ce08041448d684ae8edc14162cd2">Catch::cerr</link>()&#32;&lt;&lt;&#32;ex.what()&#32;&lt;&lt;&#32;std::endl;
13575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;MaxExitCode;
13576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13577 <emphasis role="preprocessor">#endif</emphasis>
13578 &#32;&#32;&#32;&#32;}
13579 
13580 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
13581 <emphasis role="comment">//&#32;end&#32;catch_session.cpp</emphasis>
13582 <emphasis role="comment">//&#32;start&#32;catch_singletons.cpp</emphasis>
13583 
13584 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
13585 
13586 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
13587 
13588 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>{
13589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;getSingletons()&#32;-&gt;&#32;std::vector&lt;ISingleton*&gt;*&amp;&#32;{
13590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::vector&lt;ISingleton*&gt;*&#32;g_singletons&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
13591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!g_singletons&#32;)
13592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_singletons&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;std::vector&lt;ISingleton*&gt;();
13593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;g_singletons;
13594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13595 &#32;&#32;&#32;&#32;}
13596 
13597 &#32;&#32;&#32;&#32;ISingleton::~ISingleton()&#32;{}
13598 
13599 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;addSingleton(ISingleton*&#32;singleton&#32;)&#32;{
13600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getSingletons()-&gt;push_back(&#32;singleton&#32;);
13601 &#32;&#32;&#32;&#32;}
13602 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;cleanupSingletons()&#32;{
13603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;singletons&#32;=&#32;getSingletons();
13604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;singleton&#32;:&#32;*singletons&#32;)
13605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;delete&#32;singleton;
13606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;singletons;
13607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;singletons&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
13608 &#32;&#32;&#32;&#32;}
13609 
13610 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
13611 <emphasis role="comment">//&#32;end&#32;catch_singletons.cpp</emphasis>
13612 <emphasis role="comment">//&#32;start&#32;catch_startup_exception_registry.cpp</emphasis>
13613 
13614 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</emphasis>
13615 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
13616 <emphasis role="keywordtype">void</emphasis>&#32;StartupExceptionRegistry::add(&#32;std::exception_ptr&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;exception&#32;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
13617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1ab76c2d22e571ab1a828f5c60d2f485a6">CATCH_TRY</link>&#32;{
13618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_exceptions.push_back(exception);
13619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<link linkend="_catch_8h_1afa0ae14e70806dca4f8bf06d06645fa9">CATCH_CATCH_ALL</link>&#32;{
13620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;run&#32;out&#32;of&#32;memory&#32;during&#32;start-up&#32;there&apos;s&#32;really&#32;not&#32;a&#32;lot&#32;more&#32;we&#32;can&#32;do&#32;about&#32;it</emphasis>
13621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::terminate();
13622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13623 &#32;&#32;&#32;&#32;}
13624 
13625 &#32;&#32;&#32;&#32;std::vector&lt;std::exception_ptr&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;StartupExceptionRegistry::getExceptions()&#32;const&#32;noexcept&#32;{
13626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_exceptions;
13627 &#32;&#32;&#32;&#32;}
13628 
13629 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
13630 <emphasis role="preprocessor">#endif</emphasis>
13631 <emphasis role="comment">//&#32;end&#32;catch_startup_exception_registry.cpp</emphasis>
13632 <emphasis role="comment">//&#32;start&#32;catch_stream.cpp</emphasis>
13633 
13634 <emphasis role="preprocessor">#include&#32;&lt;cstdio&gt;</emphasis>
13635 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
13636 <emphasis role="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>
13637 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
13638 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
13639 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
13640 
13641 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
13642 
13643 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_i_stream_1a344a88d0e5fc1f727f5801c72b4a4e2a">Catch::IStream::~IStream</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
13644 
13645 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{&#32;<emphasis role="keyword">namespace&#32;</emphasis>{
13646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;WriterF,&#32;std::<emphasis role="keywordtype">size_t</emphasis>&#32;bufferSize=256&gt;
13647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>StreamBufImpl&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::streambuf&#32;{
13648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;data[bufferSize];
13649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriterF&#32;m_writer;
13650 
13651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
13652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StreamBufImpl()&#32;{
13653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setp(&#32;data,&#32;data&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>(data)&#32;);
13654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13655 
13656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~StreamBufImpl()&#32;noexcept&#32;{
13657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StreamBufImpl::sync();
13658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13659 
13660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
13661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;overflow(&#32;<emphasis role="keywordtype">int</emphasis>&#32;c&#32;)<emphasis role="keyword">&#32;override&#32;</emphasis>{
13662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sync();
13663 
13664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;c&#32;!=&#32;EOF&#32;)&#32;{
13665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;pbase()&#32;==&#32;epptr()&#32;)
13666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_writer(&#32;std::string(&#32;1,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(&#32;c&#32;)&#32;)&#32;);
13667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sputc(&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(&#32;c&#32;)&#32;);
13669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
13671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13672 
13673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sync()<emphasis role="keyword">&#32;override&#32;</emphasis>{
13674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;pbase()&#32;!=&#32;pptr()&#32;)&#32;{
13675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_writer(&#32;std::string(&#32;pbase(),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::string::size_type<emphasis role="keyword">&gt;</emphasis>(&#32;pptr()&#32;-&#32;pbase()&#32;)&#32;)&#32;);
13676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setp(&#32;pbase(),&#32;epptr()&#32;);
13677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
13679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
13681 
13683 
13684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>OutputDebugWriter&#32;{
13685 
13686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator()(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;str&#32;)&#32;{
13687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writeToDebugConsole(&#32;str&#32;);
13688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
13690 
13692 
13693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>FileStream&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;IStream&#32;{
13694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;std::ofstream&#32;m_ofs;
13695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
13696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FileStream(&#32;StringRef&#32;filename&#32;)&#32;{
13697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_ofs.open(&#32;filename.c_str()&#32;);
13698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1aba552c917b9ac8604f50a914a745e974">CATCH_ENFORCE</link>(&#32;!m_ofs.fail(),&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;open&#32;file:&#32;&apos;&quot;</emphasis>&#32;&lt;&lt;&#32;filename&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis>&#32;);
13699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~FileStream()&#32;<emphasis role="keyword">override</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
13701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:&#32;<emphasis role="comment">//&#32;IStream</emphasis>
13702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostream&amp;&#32;stream()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
13703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_ofs;
13704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
13706 
13708 
13709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>CoutStream&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;IStream&#32;{
13710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;std::ostream&#32;m_os;
13711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
13712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Store&#32;the&#32;streambuf&#32;from&#32;cout&#32;up-front&#32;because</emphasis>
13713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;cout&#32;may&#32;get&#32;redirected&#32;when&#32;running&#32;tests</emphasis>
13714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CoutStream()&#32;:&#32;m_os(&#32;<link linkend="_namespace_catch">Catch</link>::<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">cout</link>().rdbuf()&#32;)&#32;{}
13715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~CoutStream()&#32;<emphasis role="keyword">override</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
13716 
13717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:&#32;<emphasis role="comment">//&#32;IStream</emphasis>
13718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostream&amp;&#32;stream()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_os;&#32;}
13719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
13720 
13722 
13723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>DebugOutStream&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;IStream&#32;{
13724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::unique_ptr&lt;StreamBufImpl&lt;OutputDebugWriter&gt;&gt;&#32;m_streamBuf;
13725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;std::ostream&#32;m_os;
13726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
13727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DebugOutStream()
13728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_streamBuf(&#32;new&#32;StreamBufImpl&lt;OutputDebugWriter&gt;()&#32;),
13729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os(&#32;m_streamBuf.get()&#32;)
13730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
13731 
13732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~DebugOutStream()&#32;<emphasis role="keyword">override</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
13733 
13734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:&#32;<emphasis role="comment">//&#32;IStream</emphasis>
13735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostream&amp;&#32;stream()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_os;&#32;}
13736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
13737 
13738 &#32;&#32;&#32;&#32;}}&#32;<emphasis role="comment">//&#32;namespace&#32;anon::detail</emphasis>
13739 
13741 
13742 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1af6d27462573d60c30c51acf1c980e3ff">makeStream</link>(&#32;StringRef&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;filename&#32;)&#32;-&gt;&#32;IStream&#32;<emphasis role="keyword">const</emphasis>*&#32;{
13743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;filename.empty()&#32;)
13744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Detail::CoutStream();
13745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(&#32;filename[0]&#32;==&#32;<emphasis role="charliteral">&apos;%&apos;</emphasis>&#32;)&#32;{
13746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;filename&#32;==&#32;<emphasis role="stringliteral">&quot;%debug&quot;</emphasis>&#32;)
13747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Detail::DebugOutStream();
13748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1ad9884641eb178d2628cf3ad19c394f47">CATCH_ERROR</link>(&#32;<emphasis role="stringliteral">&quot;Unrecognised&#32;stream:&#32;&apos;&quot;</emphasis>&#32;&lt;&lt;&#32;filename&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis>&#32;);
13750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Detail::FileStream(&#32;filename&#32;);
13753 &#32;&#32;&#32;&#32;}
13754 
13755 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;class&#32;encapsulates&#32;the&#32;idea&#32;of&#32;a&#32;pool&#32;of&#32;ostringstreams&#32;that&#32;can&#32;be&#32;reused.</emphasis>
13756 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>StringStreams&#32;{
13757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::unique_ptr&lt;std::ostringstream&gt;&gt;&#32;m_streams;
13758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::size_t&gt;&#32;m_unused;
13759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostringstream&#32;m_referenceStream;&#32;<emphasis role="comment">//&#32;Used&#32;for&#32;copy&#32;state/&#32;flags&#32;from</emphasis>
13760 
13761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;add()&#32;-&gt;&#32;std::size_t&#32;{
13762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_unused.empty()&#32;)&#32;{
13763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_streams.push_back(&#32;std::unique_ptr&lt;std::ostringstream&gt;(&#32;<emphasis role="keyword">new</emphasis>&#32;std::ostringstream&#32;)&#32;);
13764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_streams.size()-1;
13765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
13767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;index&#32;=&#32;m_unused.back();
13768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_unused.pop_back();
13769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;index;
13770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13772 
13773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;release(&#32;std::size_t&#32;index&#32;)&#32;{
13774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_streams[index]-&gt;copyfmt(&#32;m_referenceStream&#32;);&#32;<emphasis role="comment">//&#32;Restore&#32;initial&#32;flags&#32;and&#32;other&#32;state</emphasis>
13775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_unused.push_back(index);
13776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13777 &#32;&#32;&#32;&#32;};
13778 
13779 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_reusable_string_stream_1a9b3f8c52b0d2d63ffd825297a9c09781">ReusableStringStream::ReusableStringStream</link>()
13780 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_index(&#32;Singleton&lt;StringStreams&gt;::getMutable().add()&#32;),
13781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_oss(&#32;Singleton&lt;StringStreams&gt;::getMutable().m_streams[m_index].get()&#32;)
13782 &#32;&#32;&#32;&#32;{}
13783 
13784 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_reusable_string_stream_1aba9384e258a4db3178447b6a58414712">ReusableStringStream::~ReusableStringStream</link>()&#32;{
13785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::ostringstream*<emphasis role="keyword">&gt;</emphasis>(&#32;<link linkend="_class_catch_1_1_reusable_string_stream_1ae8dc0aa8ab418990869cd5ea9ee51f14">m_oss</link>&#32;)-&gt;<link linkend="_class_catch_1_1_reusable_string_stream_1a0e9ecf260b2a5d35f4886ef0d51f6270">str</link>(<emphasis role="stringliteral">&quot;&quot;</emphasis>);
13786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_reusable_string_stream_1ae8dc0aa8ab418990869cd5ea9ee51f14">m_oss</link>-&gt;clear();
13787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Singleton&lt;StringStreams&gt;::getMutable().release(&#32;<link linkend="_class_catch_1_1_reusable_string_stream_1a6e8154ffe67117de424c491e3b192504">m_index</link>&#32;);
13788 &#32;&#32;&#32;&#32;}
13789 
13790 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_reusable_string_stream_1a0e9ecf260b2a5d35f4886ef0d51f6270">ReusableStringStream::str</link>()&#32;const&#32;-&gt;&#32;std::<emphasis role="keywordtype">string</emphasis>&#32;{
13791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::ostringstream*<emphasis role="keyword">&gt;</emphasis>(&#32;<link linkend="_class_catch_1_1_reusable_string_stream_1ae8dc0aa8ab418990869cd5ea9ee51f14">m_oss</link>&#32;)-&gt;<link linkend="_class_catch_1_1_reusable_string_stream_1a0e9ecf260b2a5d35f4886ef0d51f6270">str</link>();
13792 &#32;&#32;&#32;&#32;}
13793 
13795 
13796 <emphasis role="preprocessor">#ifndef&#32;CATCH_CONFIG_NOSTDOUT&#32;</emphasis><emphasis role="comment">//&#32;If&#32;you&#32;#define&#32;this&#32;you&#32;must&#32;implement&#32;these&#32;functions</emphasis>
13797 &#32;&#32;&#32;&#32;std::ostream&amp;&#32;<link linkend="_namespace_catch_1a0179d453617ba2296f2baa99a49e7264">cout</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::cout;&#32;}
13798 &#32;&#32;&#32;&#32;std::ostream&amp;&#32;<link linkend="_namespace_catch_1a54c1ce08041448d684ae8edc14162cd2">cerr</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::cerr;&#32;}
13799 &#32;&#32;&#32;&#32;std::ostream&amp;&#32;<link linkend="_namespace_catch_1a1b2213f54e4d31a659db49827e81856b">clog</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::clog;&#32;}
13800 <emphasis role="preprocessor">#endif</emphasis>
13801 }
13802 <emphasis role="comment">//&#32;end&#32;catch_stream.cpp</emphasis>
13803 <emphasis role="comment">//&#32;start&#32;catch_string_manip.cpp</emphasis>
13804 
13805 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
13806 <emphasis role="preprocessor">#include&#32;&lt;ostream&gt;</emphasis>
13807 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>
13808 <emphasis role="preprocessor">#include&#32;&lt;cctype&gt;</emphasis>
13809 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
13810 
13811 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
13812 
13813 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>{
13814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;toLowerCh(<emphasis role="keywordtype">char</emphasis>&#32;c)&#32;{
13815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(&#32;std::tolower(&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(c)&#32;)&#32;);
13816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13817 &#32;&#32;&#32;&#32;}
13818 
13819 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1a695f62327be0676e046291eeaae15110">startsWith</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;s,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;prefix&#32;)&#32;{
13820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s.size()&#32;&gt;=&#32;prefix.size()&#32;&amp;&amp;&#32;std::equal(prefix.begin(),&#32;prefix.end(),&#32;s.begin());
13821 &#32;&#32;&#32;&#32;}
13822 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1a695f62327be0676e046291eeaae15110">startsWith</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;s,&#32;<emphasis role="keywordtype">char</emphasis>&#32;prefix&#32;)&#32;{
13823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!s.empty()&#32;&amp;&amp;&#32;s[0]&#32;==&#32;prefix;
13824 &#32;&#32;&#32;&#32;}
13825 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1ada025504f627feaf9ac68ca391515dff">endsWith</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;s,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;suffix&#32;)&#32;{
13826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s.size()&#32;&gt;=&#32;suffix.size()&#32;&amp;&amp;&#32;std::equal(suffix.rbegin(),&#32;suffix.rend(),&#32;s.rbegin());
13827 &#32;&#32;&#32;&#32;}
13828 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1ada025504f627feaf9ac68ca391515dff">endsWith</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;s,&#32;<emphasis role="keywordtype">char</emphasis>&#32;suffix&#32;)&#32;{
13829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!s.empty()&#32;&amp;&amp;&#32;s[s.size()-1]&#32;==&#32;suffix;
13830 &#32;&#32;&#32;&#32;}
13831 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1aa52974b0e426e7e2fbd725a900e9c36e">contains</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;s,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;infix&#32;)&#32;{
13832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s.find(&#32;infix&#32;)&#32;!=&#32;std::string::npos;
13833 &#32;&#32;&#32;&#32;}
13834 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1a0760dbe87d090a55a35414db57d272c4">toLowerInPlace</link>(&#32;std::string&amp;&#32;s&#32;)&#32;{
13835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::transform(&#32;s.begin(),&#32;s.end(),&#32;s.begin(),&#32;toLowerCh&#32;);
13836 &#32;&#32;&#32;&#32;}
13837 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_namespace_catch_1ac036a17412d318598ffda8e1fe7a1177">toLower</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;s&#32;)&#32;{
13838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;lc&#32;=&#32;s;
13839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a0760dbe87d090a55a35414db57d272c4">toLowerInPlace</link>(&#32;lc&#32;);
13840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lc;
13841 &#32;&#32;&#32;&#32;}
13842 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_namespace_catch_1a084108b47f37d8bfd5db51c50c7451b3">trim</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str&#32;)&#32;{
13843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*&#32;whitespaceChars&#32;=&#32;<emphasis role="stringliteral">&quot;\n\r\t&#32;&quot;</emphasis>;
13844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string::size_type&#32;start&#32;=&#32;str.find_first_not_of(&#32;whitespaceChars&#32;);
13845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string::size_type&#32;end&#32;=&#32;str.find_last_not_of(&#32;whitespaceChars&#32;);
13846 
13847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;start&#32;!=&#32;std::string::npos&#32;?&#32;str.substr(&#32;start,&#32;1+end-start&#32;)&#32;:&#32;std::string();
13848 &#32;&#32;&#32;&#32;}
13849 
13850 &#32;&#32;&#32;&#32;StringRef&#32;<link linkend="_namespace_catch_1a084108b47f37d8bfd5db51c50c7451b3">trim</link>(StringRef&#32;ref)&#32;{
13851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;is_ws&#32;=&#32;[](<emphasis role="keywordtype">char</emphasis>&#32;c)&#32;{
13852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;||&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>&#32;||&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;||&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;\r&apos;</emphasis>;
13853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
13854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;real_begin&#32;=&#32;0;
13855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(real_begin&#32;&lt;&#32;ref.size()&#32;&amp;&amp;&#32;is_ws(ref[real_begin]))&#32;{&#32;++real_begin;&#32;}
13856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;real_end&#32;=&#32;ref.size();
13857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(real_end&#32;&gt;&#32;real_begin&#32;&amp;&amp;&#32;is_ws(ref[real_end&#32;-&#32;1]))&#32;{&#32;--real_end;&#32;}
13858 
13859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ref.substr(real_begin,&#32;real_end&#32;-&#32;real_begin);
13860 &#32;&#32;&#32;&#32;}
13861 
13862 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1afe4e6770da547e43e9e4eeaa05f946ea">replaceInPlace</link>(&#32;std::string&amp;&#32;str,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;replaceThis,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;withThis&#32;)&#32;{
13863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;replaced&#32;=&#32;<emphasis role="keyword">false</emphasis>;
13864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;i&#32;=&#32;str.find(&#32;replaceThis&#32;);
13865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(&#32;i&#32;!=&#32;std::string::npos&#32;)&#32;{
13866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;replaced&#32;=&#32;<emphasis role="keyword">true</emphasis>;
13867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;=&#32;str.substr(&#32;0,&#32;i&#32;)&#32;+&#32;withThis&#32;+&#32;str.substr(&#32;i+replaceThis.size()&#32;);
13868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;i&#32;&lt;&#32;str.size()-withThis.size()&#32;)
13869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;=&#32;str.find(&#32;replaceThis,&#32;i+withThis.size()&#32;);
13870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;=&#32;std::string::npos;
13872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;replaced;
13874 &#32;&#32;&#32;&#32;}
13875 
13876 &#32;&#32;&#32;&#32;std::vector&lt;StringRef&gt;&#32;<link linkend="_namespace_catch_1a678e3c779388970bb3ec5802245f93d7">splitStringRef</link>(&#32;StringRef&#32;str,&#32;<emphasis role="keywordtype">char</emphasis>&#32;delimiter&#32;)&#32;{
13877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;StringRef&gt;&#32;subStrings;
13878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;start&#32;=&#32;0;
13879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;pos&#32;=&#32;0;&#32;pos&#32;&lt;&#32;str.size();&#32;++pos&#32;)&#32;{
13880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;str[pos]&#32;==&#32;delimiter&#32;)&#32;{
13881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;pos&#32;-&#32;start&#32;&gt;&#32;1&#32;)
13882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;subStrings.push_back(&#32;str.substr(&#32;start,&#32;pos-start&#32;)&#32;);
13883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;start&#32;=&#32;pos+1;
13884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;start&#32;&lt;&#32;str.size()&#32;)
13887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;subStrings.push_back(&#32;str.substr(&#32;start,&#32;str.size()-start&#32;)&#32;);
13888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;subStrings;
13889 &#32;&#32;&#32;&#32;}
13890 
13891 &#32;&#32;&#32;&#32;pluralise::pluralise(&#32;std::size_t&#32;count,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;label&#32;)
13892 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_count(&#32;count&#32;),
13893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_label(&#32;label&#32;)
13894 &#32;&#32;&#32;&#32;{}
13895 
13896 &#32;&#32;&#32;&#32;std::ostream&amp;&#32;<link linkend="_namespace_catch_1a8c8ea1f66bc1cdc3e1254ed7fa57c06d">operator &lt;&lt; </link>(&#32;std::ostream&amp;&#32;os,&#32;pluralise&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;pluraliser&#32;)&#32;{
13897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;pluraliser.m_count&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;&lt;&lt;&#32;pluraliser.m_label;
13898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;pluraliser.m_count&#32;!=&#32;1&#32;)
13899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;s&apos;</emphasis>;
13900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
13901 &#32;&#32;&#32;&#32;}
13902 
13903 }
13904 <emphasis role="comment">//&#32;end&#32;catch_string_manip.cpp</emphasis>
13905 <emphasis role="comment">//&#32;start&#32;catch_stringref.cpp</emphasis>
13906 
13907 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
13908 <emphasis role="preprocessor">#include&#32;&lt;ostream&gt;</emphasis>
13909 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>
13910 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>
13911 
13912 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
13913 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_string_ref_1a611907867225695d38198c058758c92d">StringRef::StringRef</link>(&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*&#32;rawChars&#32;)&#32;noexcept
13914 &#32;&#32;&#32;&#32;:&#32;StringRef(&#32;rawChars,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class_catch_1_1_string_ref_1a06b4db8fc82b197004291cf370b2ba7c">StringRef::size_type</link><emphasis role="keyword">&gt;</emphasis>(std::strlen(rawChars)&#32;)&#32;)
13915 &#32;&#32;&#32;&#32;{}
13916 
13917 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref_1a1669cb2765e820ca258159676cbd82a5">StringRef::c_str</link>()&#32;const&#32;-&gt;&#32;<emphasis role="keywordtype">char</emphasis>&#32;const*&#32;{
13918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1aba552c917b9ac8604f50a914a745e974">CATCH_ENFORCE</link>(<link linkend="_class_catch_1_1_string_ref_1a646e58f5f4e1f5e82cfba06d9fd5d016">isNullTerminated</link>(),&#32;<emphasis role="stringliteral">&quot;Called&#32;StringRef::c_str()&#32;on&#32;a&#32;non-null-terminated&#32;instance&quot;</emphasis>);
13919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref_1a0583d4e5ea88c99c121504052a4fcb6c">m_start</link>;
13920 &#32;&#32;&#32;&#32;}
13921 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref_1ab0f85edde9f97153fc758fac3bb14507">StringRef::data</link>()&#32;const&#32;noexcept&#32;-&gt;&#32;<emphasis role="keywordtype">char</emphasis>&#32;const*&#32;{
13922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref_1a0583d4e5ea88c99c121504052a4fcb6c">m_start</link>;
13923 &#32;&#32;&#32;&#32;}
13924 
13925 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref_1a594bc3e10ffad77df92f7d1a4c99d7ff">StringRef::substr</link>(&#32;size_type&#32;start,&#32;size_type&#32;size&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;-&gt;&#32;StringRef&#32;{
13926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(start&#32;&lt;&#32;m_size)&#32;{
13927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;StringRef(m_start&#32;+&#32;start,&#32;(std::min)(m_size&#32;-&#32;start,&#32;size));
13928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
13929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;StringRef();
13930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13931 &#32;&#32;&#32;&#32;}
13932 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_class_catch_1_1_string_ref_1aabb30149ab961187e4b3ff3394bf6e73">StringRef::operator == </link>(&#32;StringRef&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other&#32;)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{
13933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_size&#32;==&#32;other.m_size
13934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(std::memcmp(&#32;m_start,&#32;other.m_start,&#32;m_size&#32;)&#32;==&#32;0);
13935 &#32;&#32;&#32;&#32;}
13936 
13937 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1a8c8ea1f66bc1cdc3e1254ed7fa57c06d">operator &lt;&lt; </link>(&#32;std::ostream&amp;&#32;os,&#32;StringRef&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str&#32;)&#32;-&gt;&#32;std::ostream&amp;&#32;{
13938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os.write(str.data(),&#32;str.size());
13939 &#32;&#32;&#32;&#32;}
13940 
13941 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(&#32;std::string&amp;&#32;lhs,&#32;StringRef&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;rhs&#32;)&#32;-&gt;&#32;std::string&amp;&#32;{
13942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lhs.append(rhs.data(),&#32;rhs.size());
13943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs;
13944 &#32;&#32;&#32;&#32;}
13945 
13946 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
13947 <emphasis role="comment">//&#32;end&#32;catch_stringref.cpp</emphasis>
13948 <emphasis role="comment">//&#32;start&#32;catch_tag_alias.cpp</emphasis>
13949 
13950 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
13951 &#32;&#32;&#32;&#32;TagAlias::TagAlias(std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;_tag,&#32;SourceLineInfo&#32;_lineInfo):&#32;tag(_tag),&#32;lineInfo(_lineInfo)&#32;{}
13952 }
13953 <emphasis role="comment">//&#32;end&#32;catch_tag_alias.cpp</emphasis>
13954 <emphasis role="comment">//&#32;start&#32;catch_tag_alias_autoregistrar.cpp</emphasis>
13955 
13956 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
13957 
13958 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_registrar_for_tag_aliases_1ae4e45830e4763bcd65d55d8db9167b69">RegistrarForTagAliases::RegistrarForTagAliases</link>(<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*&#32;alias,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*&#32;tag,&#32;SourceLineInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lineInfo)&#32;{
13959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1ab76c2d22e571ab1a828f5c60d2f485a6">CATCH_TRY</link>&#32;{
13960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a585459763f2c7610e57de2dd22dd1ad8">getMutableRegistryHub</link>().<link linkend="_struct_catch_1_1_i_mutable_registry_hub_1abf2e386b6f94f615719ada711adbf822">registerTagAlias</link>(alias,&#32;tag,&#32;lineInfo);
13961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<link linkend="_catch_8h_1afa0ae14e70806dca4f8bf06d06645fa9">CATCH_CATCH_ALL</link>&#32;{
13962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;not&#32;throw&#32;when&#32;constructing&#32;global&#32;objects,&#32;instead&#32;register&#32;the&#32;exception&#32;to&#32;be&#32;processed&#32;later</emphasis>
13963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a585459763f2c7610e57de2dd22dd1ad8">getMutableRegistryHub</link>().<link linkend="_struct_catch_1_1_i_mutable_registry_hub_1a72a7d5386851ac3200f8da794a009c86">registerStartupException</link>();
13964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13965 &#32;&#32;&#32;&#32;}
13966 
13967 }
13968 <emphasis role="comment">//&#32;end&#32;catch_tag_alias_autoregistrar.cpp</emphasis>
13969 <emphasis role="comment">//&#32;start&#32;catch_tag_alias_registry.cpp</emphasis>
13970 
13971 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
13972 
13973 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
13974 
13975 &#32;&#32;&#32;&#32;TagAliasRegistry::~TagAliasRegistry()&#32;{}
13976 
13977 &#32;&#32;&#32;&#32;TagAlias&#32;<emphasis role="keyword">const</emphasis>*&#32;TagAliasRegistry::find(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;alias&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
13978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;m_registry.find(&#32;alias&#32;);
13979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;it&#32;!=&#32;m_registry.end()&#32;)
13980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;(it-&gt;second);
13981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
13983 &#32;&#32;&#32;&#32;}
13984 
13985 &#32;&#32;&#32;&#32;std::string&#32;TagAliasRegistry::expandAliases(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;unexpandedTestSpec&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
13986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;expandedTestSpec&#32;=&#32;unexpandedTestSpec;
13987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;registryKvp&#32;:&#32;m_registry&#32;)&#32;{
13988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;pos&#32;=&#32;expandedTestSpec.find(&#32;registryKvp.first&#32;);
13989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;pos&#32;!=&#32;std::string::npos&#32;)&#32;{
13990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expandedTestSpec&#32;=&#32;&#32;expandedTestSpec.substr(&#32;0,&#32;pos&#32;)&#32;+
13991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;registryKvp.second.tag&#32;+
13992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expandedTestSpec.substr(&#32;pos&#32;+&#32;registryKvp.first.size()&#32;);
13993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;expandedTestSpec;
13996 &#32;&#32;&#32;&#32;}
13997 
13998 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TagAliasRegistry::add(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;alias,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;tag,&#32;SourceLineInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lineInfo&#32;)&#32;{
13999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1aba552c917b9ac8604f50a914a745e974">CATCH_ENFORCE</link>(&#32;<link linkend="_namespace_catch_1a695f62327be0676e046291eeaae15110">startsWith</link>(alias,&#32;<emphasis role="stringliteral">&quot;[@&quot;</emphasis>)&#32;&amp;&amp;&#32;<link linkend="_namespace_catch_1ada025504f627feaf9ac68ca391515dff">endsWith</link>(alias,&#32;<emphasis role="charliteral">&apos;]&apos;</emphasis>),
14000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;error:&#32;tag&#32;alias,&#32;&apos;&quot;</emphasis>&#32;&lt;&lt;&#32;alias&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&apos;&#32;is&#32;not&#32;of&#32;the&#32;form&#32;[@alias&#32;name].\n&quot;</emphasis>&#32;&lt;&lt;&#32;lineInfo&#32;);
14001 
14002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1aba552c917b9ac8604f50a914a745e974">CATCH_ENFORCE</link>(&#32;m_registry.insert(std::make_pair(alias,&#32;TagAlias(tag,&#32;lineInfo))).second,
14003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;error:&#32;tag&#32;alias,&#32;&apos;&quot;</emphasis>&#32;&lt;&lt;&#32;alias&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&apos;&#32;already&#32;registered.\n&quot;</emphasis>
14004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\tFirst&#32;seen&#32;at:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;find(alias)-&gt;lineInfo&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>
14005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\tRedefined&#32;at:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;lineInfo&#32;);
14006 &#32;&#32;&#32;&#32;}
14007 
14008 &#32;&#32;&#32;&#32;ITagAliasRegistry::~ITagAliasRegistry()&#32;{}
14009 
14010 &#32;&#32;&#32;&#32;ITagAliasRegistry&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;ITagAliasRegistry::get()&#32;{
14011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1a5d328566cb8da87b48f1fac3f319ac7a">getRegistryHub</link>().<link linkend="_struct_catch_1_1_i_registry_hub_1a3fb24564dba3f679dfa58792f1e21708">getTagAliasRegistry</link>();
14012 &#32;&#32;&#32;&#32;}
14013 
14014 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
14015 <emphasis role="comment">//&#32;end&#32;catch_tag_alias_registry.cpp</emphasis>
14016 <emphasis role="comment">//&#32;start&#32;catch_test_case_info.cpp</emphasis>
14017 
14018 <emphasis role="preprocessor">#include&#32;&lt;cctype&gt;</emphasis>
14019 <emphasis role="preprocessor">#include&#32;&lt;exception&gt;</emphasis>
14020 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
14021 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
14022 
14023 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
14024 
14025 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>{
14026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eac">TestCaseInfo::SpecialProperties</link>&#32;parseSpecialTag(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;tag&#32;)&#32;{
14027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_namespace_catch_1a695f62327be0676e046291eeaae15110">startsWith</link>(&#32;tag,&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>&#32;)&#32;||
14028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tag&#32;==&#32;<emphasis role="stringliteral">&quot;!hide&quot;</emphasis>&#32;)
14029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eacaeda53906c14c3973e0980900c132b8f7">TestCaseInfo::IsHidden</link>;
14030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(&#32;tag&#32;==&#32;<emphasis role="stringliteral">&quot;!throws&quot;</emphasis>&#32;)
14031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eaca4704adf89ed7f7ad653d08f99813a974">TestCaseInfo::Throws</link>;
14032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(&#32;tag&#32;==&#32;<emphasis role="stringliteral">&quot;!shouldfail&quot;</emphasis>&#32;)
14033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eacaf9002285bccfc343935958f3953f4c01">TestCaseInfo::ShouldFail</link>;
14034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(&#32;tag&#32;==&#32;<emphasis role="stringliteral">&quot;!mayfail&quot;</emphasis>&#32;)
14035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eacadf1873d3271121cb9f52d7df45b416ca">TestCaseInfo::MayFail</link>;
14036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(&#32;tag&#32;==&#32;<emphasis role="stringliteral">&quot;!nonportable&quot;</emphasis>&#32;)
14037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eaca06472887b53fda9eb8015d74e7fd2cf1">TestCaseInfo::NonPortable</link>;
14038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(&#32;tag&#32;==&#32;<emphasis role="stringliteral">&quot;!benchmark&quot;</emphasis>&#32;)
14039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eac">TestCaseInfo::SpecialProperties</link><emphasis role="keyword">&gt;</emphasis>(&#32;<link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eacad0e25e337246ae34d555fe53baf81c16">TestCaseInfo::Benchmark</link>&#32;|&#32;<link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eacaeda53906c14c3973e0980900c132b8f7">TestCaseInfo::IsHidden</link>&#32;);
14040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eacaf94e9de5f8ec1e53b1aa761ec564b31a">TestCaseInfo::None</link>;
14042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isReservedTag(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;tag&#32;)&#32;{
14044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;parseSpecialTag(&#32;tag&#32;)&#32;==&#32;<link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eacaf94e9de5f8ec1e53b1aa761ec564b31a">TestCaseInfo::None</link>&#32;&amp;&amp;&#32;tag.size()&#32;&gt;&#32;0&#32;&amp;&amp;&#32;!std::isalnum(&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(tag[0])&#32;);
14045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;enforceNotReservedTag(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;tag,&#32;SourceLineInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_lineInfo&#32;)&#32;{
14047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1aba552c917b9ac8604f50a914a745e974">CATCH_ENFORCE</link>(&#32;!isReservedTag(tag),
14048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Tag&#32;name:&#32;[&quot;</emphasis>&#32;&lt;&lt;&#32;tag&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;]&#32;is&#32;not&#32;allowed.\n&quot;</emphasis>
14049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Tag&#32;names&#32;starting&#32;with&#32;non&#32;alphanumeric&#32;characters&#32;are&#32;reserved\n&quot;</emphasis>
14050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;_lineInfo&#32;);
14051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14052 &#32;&#32;&#32;&#32;}
14053 
14054 &#32;&#32;&#32;&#32;TestCase&#32;<link linkend="_namespace_catch_1a5e63df38d06a43d4cee17454e724b5c0">makeTestCase</link>(&#32;&#32;ITestInvoker*&#32;_testCase,
14055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_className,
14056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NameAndTags&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;nameAndTags,
14057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLineInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_lineInfo&#32;)
14058 &#32;&#32;&#32;&#32;{
14059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isHidden&#32;=&#32;<emphasis role="keyword">false</emphasis>;
14060 
14061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Parse&#32;out&#32;tags</emphasis>
14062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;tags;
14063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;desc,&#32;tag;
14064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;inTag&#32;=&#32;<emphasis role="keyword">false</emphasis>;
14065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">char</emphasis>&#32;c&#32;:&#32;nameAndTags.tags)&#32;{
14066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!inTag&#32;)&#32;{
14067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;[&apos;</emphasis>&#32;)
14068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inTag&#32;=&#32;<emphasis role="keyword">true</emphasis>;
14069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;desc&#32;+=&#32;c;
14071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
14073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;]&apos;</emphasis>&#32;)&#32;{
14074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eac">TestCaseInfo::SpecialProperties</link>&#32;prop&#32;=&#32;parseSpecialTag(&#32;tag&#32;);
14075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;(&#32;prop&#32;&amp;&#32;<link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eacaeda53906c14c3973e0980900c132b8f7">TestCaseInfo::IsHidden</link>&#32;)&#32;!=&#32;0&#32;)
14076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isHidden&#32;=&#32;<emphasis role="keyword">true</emphasis>;
14077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(&#32;prop&#32;==&#32;<link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eacaf94e9de5f8ec1e53b1aa761ec564b31a">TestCaseInfo::None</link>&#32;)
14078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enforceNotReservedTag(&#32;tag,&#32;_lineInfo&#32;);
14079 
14080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Merged&#32;hide&#32;tags&#32;like&#32;`[.approvals]`&#32;should&#32;be&#32;added&#32;as</emphasis>
14081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;`[.][approvals]`.&#32;The&#32;`[.]`&#32;is&#32;added&#32;at&#32;later&#32;point,&#32;so</emphasis>
14082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;only&#32;strip&#32;the&#32;prefix</emphasis>
14083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespace_catch_1a695f62327be0676e046291eeaae15110">startsWith</link>(tag,&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>)&#32;&amp;&amp;&#32;tag.size()&#32;&gt;&#32;1)&#32;{
14084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tag.erase(0,&#32;1);
14085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tags.push_back(&#32;tag&#32;);
14087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tag.clear();
14088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inTag&#32;=&#32;<emphasis role="keyword">false</emphasis>;
14089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tag&#32;+=&#32;c;
14092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;isHidden&#32;)&#32;{
14095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Add&#32;all&#32;&quot;hidden&quot;&#32;tags&#32;to&#32;make&#32;them&#32;behave&#32;identically</emphasis>
14096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tags.insert(&#32;tags.end(),&#32;{&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;!hide&quot;</emphasis>&#32;}&#32;);
14097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14098 
14099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestCaseInfo&#32;info(&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::string<emphasis role="keyword">&gt;</emphasis>(nameAndTags.name),&#32;_className,&#32;desc,&#32;tags,&#32;_lineInfo&#32;);
14100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TestCase(&#32;_testCase,&#32;std::move(info)&#32;);
14101 &#32;&#32;&#32;&#32;}
14102 
14103 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setTags(&#32;TestCaseInfo&amp;&#32;testCaseInfo,&#32;std::vector&lt;std::string&gt;&#32;tags&#32;)&#32;{
14104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::sort(begin(tags),&#32;end(tags));
14105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tags.erase(std::unique(begin(tags),&#32;end(tags)),&#32;end(tags));
14106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testCaseInfo.lcaseTags.clear();
14107 
14108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;tag&#32;:&#32;tags&#32;)&#32;{
14109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;lcaseTag&#32;=&#32;<link linkend="_namespace_catch_1ac036a17412d318598ffda8e1fe7a1177">toLower</link>(&#32;tag&#32;);
14110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testCaseInfo.properties&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eac">TestCaseInfo::SpecialProperties</link><emphasis role="keyword">&gt;</emphasis>(&#32;testCaseInfo.properties&#32;|&#32;parseSpecialTag(&#32;lcaseTag&#32;)&#32;);
14111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testCaseInfo.lcaseTags.push_back(&#32;lcaseTag&#32;);
14112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testCaseInfo.tags&#32;=&#32;std::move(tags);
14114 &#32;&#32;&#32;&#32;}
14115 
14116 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_test_case_info_1ad1a6b08b5a83d1c5eb4596b727b5305f">TestCaseInfo::TestCaseInfo</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_name,
14117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_className,
14118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_description,
14119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_tags,
14120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLineInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_lineInfo&#32;)
14121 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;name(&#32;_name&#32;),
14122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;className(&#32;_className&#32;),
14123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;description(&#32;_description&#32;),
14124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lineInfo(&#32;_lineInfo&#32;),
14125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;properties(&#32;None&#32;)
14126 &#32;&#32;&#32;&#32;{
14127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setTags(&#32;*<emphasis role="keyword">this</emphasis>,&#32;_tags&#32;);
14128 &#32;&#32;&#32;&#32;}
14129 
14130 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_test_case_info_1a934b1a0952700743e99d62ec1731a2e2">TestCaseInfo::isHidden</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
14131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(&#32;<link linkend="_struct_catch_1_1_test_case_info_1afc1e84bd7a2e180895a06d9131302af0">properties</link>&#32;&amp;&#32;<link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eacaeda53906c14c3973e0980900c132b8f7">IsHidden</link>&#32;)&#32;!=&#32;0;
14132 &#32;&#32;&#32;&#32;}
14133 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_test_case_info_1afc70d4379a2070cc22b693ffe3932c1a">TestCaseInfo::throws</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
14134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(&#32;<link linkend="_struct_catch_1_1_test_case_info_1afc1e84bd7a2e180895a06d9131302af0">properties</link>&#32;&amp;&#32;<link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eaca4704adf89ed7f7ad653d08f99813a974">Throws</link>&#32;)&#32;!=&#32;0;
14135 &#32;&#32;&#32;&#32;}
14136 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_test_case_info_1a5f37291295e3a6de2dd85324c941edaf">TestCaseInfo::okToFail</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
14137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(&#32;<link linkend="_struct_catch_1_1_test_case_info_1afc1e84bd7a2e180895a06d9131302af0">properties</link>&#32;&amp;&#32;(<link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eacaf9002285bccfc343935958f3953f4c01">ShouldFail</link>&#32;|&#32;<link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eacadf1873d3271121cb9f52d7df45b416ca">MayFail</link>&#32;)&#32;)&#32;!=&#32;0;
14138 &#32;&#32;&#32;&#32;}
14139 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_test_case_info_1abe33d81233230cdae8afa714688e905b">TestCaseInfo::expectedToFail</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
14140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(&#32;<link linkend="_struct_catch_1_1_test_case_info_1afc1e84bd7a2e180895a06d9131302af0">properties</link>&#32;&amp;&#32;(<link linkend="_struct_catch_1_1_test_case_info_1a39b232f74b4a7a6f2183b96759027eacaf9002285bccfc343935958f3953f4c01">ShouldFail</link>&#32;)&#32;)&#32;!=&#32;0;
14141 &#32;&#32;&#32;&#32;}
14142 
14143 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_catch_1_1_test_case_info_1a17506de67fb18e27511c17f8a81119d8">TestCaseInfo::tagsAsString</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
14144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;ret;
14145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;[&apos;&#32;and&#32;&apos;]&apos;&#32;per&#32;tag</emphasis>
14146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;full_size&#32;=&#32;2&#32;*&#32;<link linkend="_struct_catch_1_1_test_case_info_1a150a7cbca1dd0c91799ccb14ff822eb0">tags</link>.size();
14147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;tag&#32;:&#32;<link linkend="_struct_catch_1_1_test_case_info_1a150a7cbca1dd0c91799ccb14ff822eb0">tags</link>)&#32;{
14148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;full_size&#32;+=&#32;tag.size();
14149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.reserve(full_size);
14151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;tag&#32;:&#32;<link linkend="_struct_catch_1_1_test_case_info_1a150a7cbca1dd0c91799ccb14ff822eb0">tags</link>)&#32;{
14152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.push_back(<emphasis role="charliteral">&apos;[&apos;</emphasis>);
14153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.append(tag);
14154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.push_back(<emphasis role="charliteral">&apos;]&apos;</emphasis>);
14155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14156 
14157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
14158 &#32;&#32;&#32;&#32;}
14159 
14160 &#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_test_case_1aae5709fc1cb68e19ab0ac27e1ffd6a76">TestCase::TestCase</link>(&#32;ITestInvoker*&#32;testCase,&#32;TestCaseInfo&amp;&amp;&#32;info&#32;)&#32;:&#32;TestCaseInfo(&#32;std::move(info)&#32;),&#32;test(&#32;testCase&#32;)&#32;{}
14161 
14162 &#32;&#32;&#32;&#32;TestCase&#32;<link linkend="_class_catch_1_1_test_case_1a0812e8a216d09b087d5874687009f0d6">TestCase::withName</link>(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_newName&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
14163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_test_case_1aae5709fc1cb68e19ab0ac27e1ffd6a76">TestCase</link>&#32;other(&#32;*<emphasis role="keyword">this</emphasis>&#32;);
14164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other.name&#32;=&#32;_newName;
14165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;other;
14166 &#32;&#32;&#32;&#32;}
14167 
14168 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_catch_1_1_test_case_1a26f346c8446dded0562fe3818ae71651">TestCase::invoke</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
14169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_catch_1_1_test_case_1a7aaa375d6f2bda735095eaa43395b54b">test</link>-&gt;invoke();
14170 &#32;&#32;&#32;&#32;}
14171 
14172 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_test_case_1a5456d03a90f75292835c158f3a3374a1">TestCase::operator == </link>(&#32;TestCase&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
14173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;<link linkend="_class_catch_1_1_test_case_1a7aaa375d6f2bda735095eaa43395b54b">test</link>.get()&#32;==&#32;other.test.get()&#32;&amp;&amp;
14174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_test_case_info_1a463794e2f5cfead307c93efd134ade36">name</link>&#32;==&#32;other.name&#32;&amp;&amp;
14175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_test_case_info_1a1a5e0825132a38d091defdebbf2f8ce9">className</link>&#32;==&#32;other.className;
14176 &#32;&#32;&#32;&#32;}
14177 
14178 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_catch_1_1_test_case_1a030e4b9282e9b32e08c8bd5e5cd6fa98">TestCase::operator &lt; </link>(&#32;TestCase&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
14179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_test_case_info_1a463794e2f5cfead307c93efd134ade36">name</link>&#32;&lt;&#32;other.name;
14180 &#32;&#32;&#32;&#32;}
14181 
14182 &#32;&#32;&#32;&#32;TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_class_catch_1_1_test_case_1a804d0a6a5dc92b219e724f1390c25c7f">TestCase::getTestCaseInfo</link>()<emphasis role="keyword">&#32;const</emphasis>
14183 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
14184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
14185 &#32;&#32;&#32;&#32;}
14186 
14187 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
14188 <emphasis role="comment">//&#32;end&#32;catch_test_case_info.cpp</emphasis>
14189 <emphasis role="comment">//&#32;start&#32;catch_test_case_registry_impl.cpp</emphasis>
14190 
14191 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
14192 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
14193 
14194 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
14195 
14196 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>{
14197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>TestHasher&#32;{
14198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>hash_t&#32;=&#32;uint64_t;
14199 
14200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;TestHasher(&#32;hash_t&#32;hashSuffix&#32;):
14201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_hashSuffix{&#32;hashSuffix&#32;}&#32;{}
14202 
14203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;operator()(&#32;TestCase&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;t&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
14204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FNV-1a&#32;hash&#32;with&#32;multiplication&#32;fold.</emphasis>
14205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hash_t&#32;prime&#32;=&#32;1099511628211u;
14206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hash_t&#32;hash&#32;=&#32;14695981039346656037u;
14207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;c&#32;:&#32;t.name&#32;)&#32;{
14208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hash&#32;^=&#32;c;
14209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hash&#32;*=&#32;prime;
14210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hash&#32;^=&#32;m_hashSuffix;
14212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hash&#32;*=&#32;prime;
14213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint32_t&#32;low{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint32_t<emphasis role="keyword">&gt;</emphasis>(&#32;hash&#32;)&#32;};
14214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint32_t&#32;high{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint32_t<emphasis role="keyword">&gt;</emphasis>(&#32;hash&#32;&gt;&gt;&#32;32&#32;)&#32;};
14215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;low&#32;*&#32;high;
14216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14217 
14218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
14219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hash_t&#32;m_hashSuffix;
14220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
14221 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;end&#32;unnamed&#32;namespace</emphasis>
14222 
14223 &#32;&#32;&#32;&#32;std::vector&lt;TestCase&gt;&#32;sortTests(&#32;IConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config,&#32;std::vector&lt;TestCase&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;unsortedTestCases&#32;)&#32;{
14224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(&#32;config.runOrder()&#32;)&#32;{
14225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_run_tests_1ab56bd851b1dd085869992d1a9d73dc5da732a98670b4661d80d8c392784a14f09">RunTests::InDeclarationOrder</link>:
14226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;already&#32;in&#32;declaration&#32;order</emphasis>
14227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14228 
14229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_run_tests_1ab56bd851b1dd085869992d1a9d73dc5da8c62a42e94d867c708b421322b1c386f">RunTests::InLexicographicalOrder</link>:&#32;{
14230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;TestCase&gt;&#32;sorted&#32;=&#32;unsortedTestCases;
14231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::sort(&#32;sorted.begin(),&#32;sorted.end()&#32;);
14232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sorted;
14233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14234 
14235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_run_tests_1ab56bd851b1dd085869992d1a9d73dc5da262441c5b5391b628ca6930c3ba028a5">RunTests::InRandomOrder</link>:&#32;{
14236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;seedRng(&#32;config&#32;);
14237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestHasher&#32;h{&#32;config.rngSeed()&#32;};
14238 
14239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>hashedTest&#32;=&#32;std::pair&lt;TestHasher::hash_t,&#32;TestCase&#32;const*&gt;;
14240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;hashedTest&gt;&#32;indexed_tests;
14241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indexed_tests.reserve(&#32;unsortedTestCases.size()&#32;);
14242 
14243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase&#32;:&#32;unsortedTestCases)&#32;{
14244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indexed_tests.emplace_back(h(testCase),&#32;&amp;testCase);
14245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14246 
14247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::sort(indexed_tests.begin(),&#32;indexed_tests.end(),
14248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](hashedTest&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lhs,&#32;hashedTest&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;rhs)&#32;{
14249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(lhs.first&#32;==&#32;rhs.first)&#32;{
14250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;lhs.second-&gt;name&#32;&lt;&#32;rhs.second-&gt;name;
14251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.first&#32;&lt;&#32;rhs.first;
14253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
14254 
14255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;TestCase&gt;&#32;sorted;
14256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sorted.reserve(&#32;indexed_tests.size()&#32;);
14257 
14258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;hashed&#32;:&#32;indexed_tests)&#32;{
14259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sorted.emplace_back(*hashed.second);
14260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14261 
14262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sorted;
14263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;unsortedTestCases;
14266 &#32;&#32;&#32;&#32;}
14267 
14268 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1af3e820574c7a0b38d71328c5bd54b0e0">isThrowSafe</link>(&#32;TestCase&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase,&#32;IConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;)&#32;{
14269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!testCase.throws()&#32;||&#32;config.allowThrows();
14270 &#32;&#32;&#32;&#32;}
14271 
14272 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1aadef80fbc6bc84589777a462770cef49">matchTest</link>(&#32;TestCase&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase,&#32;TestSpec&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testSpec,&#32;IConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;)&#32;{
14273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;testSpec.matches(&#32;testCase&#32;)&#32;&amp;&amp;&#32;<link linkend="_namespace_catch_1af3e820574c7a0b38d71328c5bd54b0e0">isThrowSafe</link>(&#32;testCase,&#32;config&#32;);
14274 &#32;&#32;&#32;&#32;}
14275 
14276 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;enforceNoDuplicateTestCases(&#32;std::vector&lt;TestCase&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;functions&#32;)&#32;{
14277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::set&lt;TestCase&gt;&#32;seenFunctions;
14278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;function&#32;:&#32;functions&#32;)&#32;{
14279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;prev&#32;=&#32;seenFunctions.insert(&#32;function&#32;);
14280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1aba552c917b9ac8604f50a914a745e974">CATCH_ENFORCE</link>(&#32;prev.second,
14281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;error:&#32;TEST_CASE(&#32;\&quot;&quot;</emphasis>&#32;&lt;&lt;&#32;function.name&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;)&#32;already&#32;defined.\n&quot;</emphasis>
14282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\tFirst&#32;seen&#32;at&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;prev.first-&gt;getTestCaseInfo().lineInfo&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>
14283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\tRedefined&#32;at&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;function.getTestCaseInfo().lineInfo&#32;);
14284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14285 &#32;&#32;&#32;&#32;}
14286 
14287 &#32;&#32;&#32;&#32;std::vector&lt;TestCase&gt;&#32;<link linkend="_namespace_catch_1a105d5acdec8a6b401e12a592557c9dd1">filterTests</link>(&#32;std::vector&lt;TestCase&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCases,&#32;TestSpec&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testSpec,&#32;IConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;)&#32;{
14288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;TestCase&gt;&#32;filtered;
14289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filtered.reserve(&#32;testCases.size()&#32;);
14290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase&#32;:&#32;testCases)&#32;{
14291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((!testSpec.hasFilters()&#32;&amp;&amp;&#32;!testCase.isHidden())&#32;||
14292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(testSpec.hasFilters()&#32;&amp;&amp;&#32;<link linkend="_namespace_catch_1aadef80fbc6bc84589777a462770cef49">matchTest</link>(testCase,&#32;testSpec,&#32;config)))&#32;{
14293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filtered.push_back(testCase);
14294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;filtered;
14297 &#32;&#32;&#32;&#32;}
14298 &#32;&#32;&#32;&#32;std::vector&lt;TestCase&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_namespace_catch_1a97039bab95e97f059410f67425f1f2da">getAllTestCasesSorted</link>(&#32;IConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;)&#32;{
14299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1a5d328566cb8da87b48f1fac3f319ac7a">getRegistryHub</link>().<link linkend="_struct_catch_1_1_i_registry_hub_1a3016c8766e42bae7b021f02d1cbd356b">getTestCaseRegistry</link>().getAllTestsSorted(&#32;config&#32;);
14300 &#32;&#32;&#32;&#32;}
14301 
14302 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TestRegistry::registerTest(&#32;TestCase&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase&#32;)&#32;{
14303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;name&#32;=&#32;testCase.getTestCaseInfo().name;
14304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;name.empty()&#32;)&#32;{
14305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReusableStringStream&#32;rss;
14306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Anonymous&#32;test&#32;case&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;++m_unnamedCount;
14307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;registerTest(&#32;testCase.withName(&#32;rss.str()&#32;)&#32;);
14308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_functions.push_back(&#32;testCase&#32;);
14310 &#32;&#32;&#32;&#32;}
14311 
14312 &#32;&#32;&#32;&#32;std::vector&lt;TestCase&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;TestRegistry::getAllTests()<emphasis role="keyword">&#32;const&#32;</emphasis>{
14313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_functions;
14314 &#32;&#32;&#32;&#32;}
14315 &#32;&#32;&#32;&#32;std::vector&lt;TestCase&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;TestRegistry::getAllTestsSorted(&#32;IConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
14316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_sortedFunctions.empty()&#32;)
14317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enforceNoDuplicateTestCases(&#32;m_functions&#32;);
14318 
14319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;&#32;m_currentSortOrder&#32;!=&#32;config.runOrder()&#32;||&#32;m_sortedFunctions.empty()&#32;)&#32;{
14320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_sortedFunctions&#32;=&#32;sortTests(&#32;config,&#32;m_functions&#32;);
14321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_currentSortOrder&#32;=&#32;config.runOrder();
14322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_sortedFunctions;
14324 &#32;&#32;&#32;&#32;}
14325 
14327 &#32;&#32;&#32;&#32;TestInvokerAsFunction::TestInvokerAsFunction(&#32;<emphasis role="keywordtype">void</emphasis>(*testAsFunction)()&#32;)&#32;noexcept&#32;:&#32;m_testAsFunction(&#32;testAsFunction&#32;)&#32;{}
14328 
14329 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TestInvokerAsFunction::invoke()<emphasis role="keyword">&#32;const&#32;</emphasis>{
14330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_testAsFunction();
14331 &#32;&#32;&#32;&#32;}
14332 
14333 &#32;&#32;&#32;&#32;std::string&#32;extractClassName(&#32;StringRef&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;classOrQualifiedMethodName&#32;)&#32;{
14334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;className(classOrQualifiedMethodName);
14335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_namespace_catch_1a695f62327be0676e046291eeaae15110">startsWith</link>(&#32;className,&#32;<emphasis role="charliteral">&apos;&amp;&apos;</emphasis>&#32;)&#32;)
14336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;lastColons&#32;=&#32;className.rfind(&#32;<emphasis role="stringliteral">&quot;::&quot;</emphasis>&#32;);
14338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;penultimateColons&#32;=&#32;className.rfind(&#32;<emphasis role="stringliteral">&quot;::&quot;</emphasis>,&#32;lastColons-1&#32;);
14339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;penultimateColons&#32;==&#32;std::string::npos&#32;)
14340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;penultimateColons&#32;=&#32;1;
14341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;className&#32;=&#32;className.substr(&#32;penultimateColons,&#32;lastColons-penultimateColons&#32;);
14342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;className;
14344 &#32;&#32;&#32;&#32;}
14345 
14346 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
14347 <emphasis role="comment">//&#32;end&#32;catch_test_case_registry_impl.cpp</emphasis>
14348 <emphasis role="comment">//&#32;start&#32;catch_test_case_tracker.cpp</emphasis>
14349 
14350 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
14351 <emphasis role="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>
14352 <emphasis role="preprocessor">#include&#32;&lt;stdexcept&gt;</emphasis>
14353 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
14354 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
14355 
14356 <emphasis role="preprocessor">#if&#32;defined(__clang__)</emphasis>
14357 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;pragma&#32;clang&#32;diagnostic&#32;push</emphasis>
14358 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wexit-time-destructors&quot;</emphasis>
14359 <emphasis role="preprocessor">#endif</emphasis>
14360 
14361 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
14362 <emphasis role="keyword">namespace&#32;</emphasis>TestCaseTracking&#32;{
14363 
14364 &#32;&#32;&#32;&#32;NameAndLocation::NameAndLocation(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_name,&#32;SourceLineInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_location&#32;)
14365 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;name(&#32;_name&#32;),
14366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;location(&#32;_location&#32;)
14367 &#32;&#32;&#32;&#32;{}
14368 
14369 &#32;&#32;&#32;&#32;ITracker::~ITracker()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
14370 
14371 &#32;&#32;&#32;&#32;ITracker&amp;&#32;TrackerContext::startRun()&#32;{
14372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_rootTracker&#32;=&#32;std::make_shared&lt;SectionTracker&gt;(&#32;NameAndLocation(&#32;<emphasis role="stringliteral">&quot;{root}&quot;</emphasis>,&#32;<link linkend="_catch_8h_1abc0b2405454c51748a31e0393d9ad5d1">CATCH_INTERNAL_LINEINFO</link>&#32;),&#32;*<emphasis role="keyword">this</emphasis>,&#32;<emphasis role="keyword">nullptr</emphasis>&#32;);
14373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_currentTracker&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
14374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_runState&#32;=&#32;Executing;
14375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*m_rootTracker;
14376 &#32;&#32;&#32;&#32;}
14377 
14378 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TrackerContext::endRun()&#32;{
14379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_rootTracker.reset();
14380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_currentTracker&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
14381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_runState&#32;=&#32;NotStarted;
14382 &#32;&#32;&#32;&#32;}
14383 
14384 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TrackerContext::startCycle()&#32;{
14385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_currentTracker&#32;=&#32;m_rootTracker.get();
14386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_runState&#32;=&#32;Executing;
14387 &#32;&#32;&#32;&#32;}
14388 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TrackerContext::completeCycle()&#32;{
14389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_runState&#32;=&#32;CompletedCycle;
14390 &#32;&#32;&#32;&#32;}
14391 
14392 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;TrackerContext::completedCycle()<emphasis role="keyword">&#32;const&#32;</emphasis>{
14393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_runState&#32;==&#32;CompletedCycle;
14394 &#32;&#32;&#32;&#32;}
14395 &#32;&#32;&#32;&#32;ITracker&amp;&#32;TrackerContext::currentTracker()&#32;{
14396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*m_currentTracker;
14397 &#32;&#32;&#32;&#32;}
14398 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TrackerContext::setCurrentTracker(&#32;ITracker*&#32;tracker&#32;)&#32;{
14399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_currentTracker&#32;=&#32;tracker;
14400 &#32;&#32;&#32;&#32;}
14401 
14402 &#32;&#32;&#32;&#32;TrackerBase::TrackerBase(&#32;NameAndLocation&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;nameAndLocation,&#32;TrackerContext&amp;&#32;ctx,&#32;ITracker*&#32;parent&#32;):
14403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ITracker(nameAndLocation),
14404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_ctx(&#32;ctx&#32;),
14405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_parent(&#32;parent&#32;)
14406 &#32;&#32;&#32;&#32;{}
14407 
14408 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;TrackerBase::isComplete()<emphasis role="keyword">&#32;const&#32;</emphasis>{
14409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_runState&#32;==&#32;CompletedSuccessfully&#32;||&#32;m_runState&#32;==&#32;Failed;
14410 &#32;&#32;&#32;&#32;}
14411 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;TrackerBase::isSuccessfullyCompleted()<emphasis role="keyword">&#32;const&#32;</emphasis>{
14412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_runState&#32;==&#32;CompletedSuccessfully;
14413 &#32;&#32;&#32;&#32;}
14414 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;TrackerBase::isOpen()<emphasis role="keyword">&#32;const&#32;</emphasis>{
14415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_runState&#32;!=&#32;NotStarted&#32;&amp;&amp;&#32;!isComplete();
14416 &#32;&#32;&#32;&#32;}
14417 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;TrackerBase::hasChildren()<emphasis role="keyword">&#32;const&#32;</emphasis>{
14418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!m_children.empty();
14419 &#32;&#32;&#32;&#32;}
14420 
14421 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TrackerBase::addChild(&#32;ITrackerPtr&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;child&#32;)&#32;{
14422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_children.push_back(&#32;child&#32;);
14423 &#32;&#32;&#32;&#32;}
14424 
14425 &#32;&#32;&#32;&#32;ITrackerPtr&#32;TrackerBase::findChild(&#32;NameAndLocation&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;nameAndLocation&#32;)&#32;{
14426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;std::find_if(&#32;m_children.begin(),&#32;m_children.end(),
14427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;nameAndLocation](&#32;ITrackerPtr&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;tracker&#32;){
14428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return
14429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tracker-&gt;nameAndLocation().location&#32;==&#32;nameAndLocation.location&#32;&amp;&amp;
14430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tracker-&gt;nameAndLocation().name&#32;==&#32;nameAndLocation.name;
14431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;);
14432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(&#32;it&#32;!=&#32;m_children.end()&#32;)
14433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;*it
14434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
14435 &#32;&#32;&#32;&#32;}
14436 &#32;&#32;&#32;&#32;ITracker&amp;&#32;TrackerBase::parent()&#32;{
14437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(&#32;m_parent&#32;);&#32;<emphasis role="comment">//&#32;Should&#32;always&#32;be&#32;non-null&#32;except&#32;for&#32;root</emphasis>
14438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*m_parent;
14439 &#32;&#32;&#32;&#32;}
14440 
14441 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TrackerBase::openChild()&#32;{
14442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_runState&#32;!=&#32;ExecutingChildren&#32;)&#32;{
14443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_runState&#32;=&#32;ExecutingChildren;
14444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_parent&#32;)
14445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_parent-&gt;openChild();
14446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14447 &#32;&#32;&#32;&#32;}
14448 
14449 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;TrackerBase::isSectionTracker()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
14450 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;TrackerBase::isGeneratorTracker()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
14451 
14452 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TrackerBase::open()&#32;{
14453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_runState&#32;=&#32;Executing;
14454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;moveToThis();
14455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_parent&#32;)
14456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_parent-&gt;openChild();
14457 &#32;&#32;&#32;&#32;}
14458 
14459 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TrackerBase::close()&#32;{
14460 
14461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Close&#32;any&#32;still&#32;open&#32;children&#32;(e.g.&#32;generators)</emphasis>
14462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(&#32;&amp;m_ctx.currentTracker()&#32;!=&#32;<emphasis role="keyword">this</emphasis>&#32;)
14463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_ctx.currentTracker().close();
14464 
14465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(&#32;m_runState&#32;)&#32;{
14466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NeedsAnotherRun:
14467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14468 
14469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Executing:
14470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_runState&#32;=&#32;CompletedSuccessfully;
14471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;ExecutingChildren:
14473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;std::all_of(m_children.begin(),&#32;m_children.end(),&#32;[](ITrackerPtr&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;t){&#32;return&#32;t-&gt;isComplete();&#32;})&#32;)
14474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_runState&#32;=&#32;CompletedSuccessfully;
14475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14476 
14477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NotStarted:
14478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CompletedSuccessfully:
14479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Failed:
14480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1af445c1e136fadba0e92f3c22d68a7641">CATCH_INTERNAL_ERROR</link>(&#32;<emphasis role="stringliteral">&quot;Illogical&#32;state:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;m_runState&#32;);
14481 
14482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
14483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1af445c1e136fadba0e92f3c22d68a7641">CATCH_INTERNAL_ERROR</link>(&#32;<emphasis role="stringliteral">&quot;Unknown&#32;state:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;m_runState&#32;);
14484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;moveToParent();
14486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_ctx.completeCycle();
14487 &#32;&#32;&#32;&#32;}
14488 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TrackerBase::fail()&#32;{
14489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_runState&#32;=&#32;Failed;
14490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_parent&#32;)
14491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_parent-&gt;markAsNeedingAnotherRun();
14492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;moveToParent();
14493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_ctx.completeCycle();
14494 &#32;&#32;&#32;&#32;}
14495 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TrackerBase::markAsNeedingAnotherRun()&#32;{
14496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_runState&#32;=&#32;NeedsAnotherRun;
14497 &#32;&#32;&#32;&#32;}
14498 
14499 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TrackerBase::moveToParent()&#32;{
14500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(&#32;m_parent&#32;);
14501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_ctx.setCurrentTracker(&#32;m_parent&#32;);
14502 &#32;&#32;&#32;&#32;}
14503 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TrackerBase::moveToThis()&#32;{
14504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_ctx.setCurrentTracker(&#32;<emphasis role="keyword">this</emphasis>&#32;);
14505 &#32;&#32;&#32;&#32;}
14506 
14507 &#32;&#32;&#32;&#32;SectionTracker::SectionTracker(&#32;NameAndLocation&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;nameAndLocation,&#32;TrackerContext&amp;&#32;ctx,&#32;ITracker*&#32;parent&#32;)
14508 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;TrackerBase(&#32;nameAndLocation,&#32;ctx,&#32;parent&#32;),
14509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_trimmed_name(<link linkend="_namespace_catch_1a084108b47f37d8bfd5db51c50c7451b3">trim</link>(nameAndLocation.name))
14510 &#32;&#32;&#32;&#32;{
14511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;parent&#32;)&#32;{
14512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(&#32;!parent-&gt;isSectionTracker()&#32;)
14513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parent&#32;=&#32;&amp;parent-&gt;parent();
14514 
14515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SectionTracker&amp;&#32;parentSection&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>SectionTracker&amp;<emphasis role="keyword">&gt;</emphasis>(&#32;*parent&#32;);
14516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addNextFilters(&#32;parentSection.m_filters&#32;);
14517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14518 &#32;&#32;&#32;&#32;}
14519 
14520 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;SectionTracker::isComplete()<emphasis role="keyword">&#32;const&#32;</emphasis>{
14521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;complete&#32;=&#32;<emphasis role="keyword">true</emphasis>;
14522 
14523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_filters.empty()
14524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;m_filters[0]&#32;==&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>
14525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;std::find(m_filters.begin(),&#32;m_filters.end(),&#32;m_trimmed_name)&#32;!=&#32;m_filters.end())&#32;{
14526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;complete&#32;=&#32;TrackerBase::isComplete();
14527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;complete;
14529 &#32;&#32;&#32;&#32;}
14530 
14531 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;SectionTracker::isSectionTracker()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;}
14532 
14533 &#32;&#32;&#32;&#32;SectionTracker&amp;&#32;SectionTracker::acquire(&#32;TrackerContext&amp;&#32;ctx,&#32;NameAndLocation&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;nameAndLocation&#32;)&#32;{
14534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::shared_ptr&lt;SectionTracker&gt;&#32;section;
14535 
14536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ITracker&amp;&#32;currentTracker&#32;=&#32;ctx.currentTracker();
14537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;ITrackerPtr&#32;childTracker&#32;=&#32;currentTracker.findChild(&#32;nameAndLocation&#32;)&#32;)&#32;{
14538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(&#32;childTracker&#32;);
14539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(&#32;childTracker-&gt;isSectionTracker()&#32;);
14540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;section&#32;=&#32;std::static_pointer_cast&lt;SectionTracker&gt;(&#32;childTracker&#32;);
14541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
14543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;section&#32;=&#32;std::make_shared&lt;SectionTracker&gt;(&#32;nameAndLocation,&#32;ctx,&#32;&amp;currentTracker&#32;);
14544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentTracker.addChild(&#32;section&#32;);
14545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!ctx.completedCycle()&#32;)
14547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;section-&gt;tryOpen();
14548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*section;
14549 &#32;&#32;&#32;&#32;}
14550 
14551 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SectionTracker::tryOpen()&#32;{
14552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!isComplete()&#32;)
14553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;open();
14554 &#32;&#32;&#32;&#32;}
14555 
14556 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SectionTracker::addInitialFilters(&#32;std::vector&lt;std::string&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;filters&#32;)&#32;{
14557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!filters.empty()&#32;)&#32;{
14558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_filters.reserve(&#32;m_filters.size()&#32;+&#32;filters.size()&#32;+&#32;2&#32;);
14559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_filters.emplace_back(<emphasis role="stringliteral">&quot;&quot;</emphasis>);&#32;<emphasis role="comment">//&#32;Root&#32;-&#32;should&#32;never&#32;be&#32;consulted</emphasis>
14560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_filters.emplace_back(<emphasis role="stringliteral">&quot;&quot;</emphasis>);&#32;<emphasis role="comment">//&#32;Test&#32;Case&#32;-&#32;not&#32;a&#32;section&#32;filter</emphasis>
14561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_filters.insert(&#32;m_filters.end(),&#32;filters.begin(),&#32;filters.end()&#32;);
14562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14563 &#32;&#32;&#32;&#32;}
14564 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SectionTracker::addNextFilters(&#32;std::vector&lt;std::string&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;filters&#32;)&#32;{
14565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;filters.size()&#32;&gt;&#32;1&#32;)
14566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_filters.insert(&#32;m_filters.end(),&#32;filters.begin()+1,&#32;filters.end()&#32;);
14567 &#32;&#32;&#32;&#32;}
14568 
14569 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;SectionTracker::getFilters()<emphasis role="keyword">&#32;const&#32;</emphasis>{
14570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_filters;
14571 &#32;&#32;&#32;&#32;}
14572 
14573 &#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;SectionTracker::trimmedName()<emphasis role="keyword">&#32;const&#32;</emphasis>{
14574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_trimmed_name;
14575 &#32;&#32;&#32;&#32;}
14576 
14577 }&#32;<emphasis role="comment">//&#32;namespace&#32;TestCaseTracking</emphasis>
14578 
14579 <emphasis role="keyword">using&#32;</emphasis>TestCaseTracking::ITracker;
14580 <emphasis role="keyword">using&#32;</emphasis>TestCaseTracking::TrackerContext;
14581 <emphasis role="keyword">using&#32;</emphasis>TestCaseTracking::SectionTracker;
14582 
14583 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
14584 
14585 <emphasis role="preprocessor">#if&#32;defined(__clang__)</emphasis>
14586 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;pragma&#32;clang&#32;diagnostic&#32;pop</emphasis>
14587 <emphasis role="preprocessor">#endif</emphasis>
14588 <emphasis role="comment">//&#32;end&#32;catch_test_case_tracker.cpp</emphasis>
14589 <emphasis role="comment">//&#32;start&#32;catch_test_registry.cpp</emphasis>
14590 
14591 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
14592 
14593 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1ab3d8ccbc900fe50322c39ecbba52f536">makeTestInvoker</link>(&#32;<emphasis role="keywordtype">void</emphasis>(*testAsFunction)()&#32;)&#32;noexcept&#32;-&gt;&#32;ITestInvoker*&#32;{
14594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>(std::nothrow)&#32;TestInvokerAsFunction(&#32;testAsFunction&#32;);
14595 &#32;&#32;&#32;&#32;}
14596 
14597 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_name_and_tags_1ab585111e615ce8c504a2b9630de8ee94">NameAndTags::NameAndTags</link>(&#32;StringRef&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name_&#32;,&#32;StringRef&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;tags_&#32;)&#32;noexcept&#32;:&#32;name(&#32;name_&#32;),&#32;tags(&#32;tags_&#32;)&#32;{}
14598 
14599 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_auto_reg_1a7eba02fb9d80b9896bf5a6517369af28">AutoReg::AutoReg</link>(&#32;ITestInvoker*&#32;invoker,&#32;SourceLineInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lineInfo,&#32;StringRef&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;classOrMethod,&#32;NameAndTags&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;nameAndTags&#32;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
14600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1ab76c2d22e571ab1a828f5c60d2f485a6">CATCH_TRY</link>&#32;{
14601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a585459763f2c7610e57de2dd22dd1ad8">getMutableRegistryHub</link>()
14602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.<link linkend="_struct_catch_1_1_i_mutable_registry_hub_1a11b85c6744d88c9f83fe16ad4a8dd451">registerTest</link>(
14603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a5e63df38d06a43d4cee17454e724b5c0">makeTestCase</link>(
14604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invoker,
14605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;extractClassName(&#32;classOrMethod&#32;),
14606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nameAndTags,
14607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lineInfo));
14608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<link linkend="_catch_8h_1afa0ae14e70806dca4f8bf06d06645fa9">CATCH_CATCH_ALL</link>&#32;{
14609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;not&#32;throw&#32;when&#32;constructing&#32;global&#32;objects,&#32;instead&#32;register&#32;the&#32;exception&#32;to&#32;be&#32;processed&#32;later</emphasis>
14610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a585459763f2c7610e57de2dd22dd1ad8">getMutableRegistryHub</link>().<link linkend="_struct_catch_1_1_i_mutable_registry_hub_1a72a7d5386851ac3200f8da794a009c86">registerStartupException</link>();
14611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14612 &#32;&#32;&#32;&#32;}
14613 
14614 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_auto_reg_1a3cdb53f1e5ff115310f3372bebe198f1">AutoReg::~AutoReg</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
14615 }
14616 <emphasis role="comment">//&#32;end&#32;catch_test_registry.cpp</emphasis>
14617 <emphasis role="comment">//&#32;start&#32;catch_test_spec.cpp</emphasis>
14618 
14619 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
14620 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
14621 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
14622 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
14623 
14624 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
14625 
14626 &#32;&#32;&#32;&#32;TestSpec::Pattern::Pattern(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name&#32;)
14627 &#32;&#32;&#32;&#32;:&#32;m_name(&#32;name&#32;)
14628 &#32;&#32;&#32;&#32;{}
14629 
14630 &#32;&#32;&#32;&#32;TestSpec::Pattern::~Pattern()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
14631 
14632 &#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;TestSpec::Pattern::name()<emphasis role="keyword">&#32;const&#32;</emphasis>{
14633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_name;
14634 &#32;&#32;&#32;&#32;}
14635 
14636 &#32;&#32;&#32;&#32;TestSpec::NamePattern::NamePattern(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;filterString&#32;)
14637 &#32;&#32;&#32;&#32;:&#32;Pattern(&#32;filterString&#32;)
14638 &#32;&#32;&#32;&#32;,&#32;m_wildcardPattern(&#32;<link linkend="_namespace_catch_1ac036a17412d318598ffda8e1fe7a1177">toLower</link>(&#32;name&#32;),&#32;CaseSensitive::No&#32;)
14639 &#32;&#32;&#32;&#32;{}
14640 
14641 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;TestSpec::NamePattern::matches(&#32;TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
14642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_wildcardPattern.matches(&#32;testCase.name&#32;);
14643 &#32;&#32;&#32;&#32;}
14644 
14645 &#32;&#32;&#32;&#32;TestSpec::TagPattern::TagPattern(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;tag,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;filterString&#32;)
14646 &#32;&#32;&#32;&#32;:&#32;Pattern(&#32;filterString&#32;)
14647 &#32;&#32;&#32;&#32;,&#32;m_tag(&#32;<link linkend="_namespace_catch_1ac036a17412d318598ffda8e1fe7a1177">toLower</link>(&#32;tag&#32;)&#32;)
14648 &#32;&#32;&#32;&#32;{}
14649 
14650 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;TestSpec::TagPattern::matches(&#32;TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
14651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::find(begin(testCase.lcaseTags),
14652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;end(testCase.lcaseTags),
14653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_tag)&#32;!=&#32;end(testCase.lcaseTags);
14654 &#32;&#32;&#32;&#32;}
14655 
14656 &#32;&#32;&#32;&#32;TestSpec::ExcludedPattern::ExcludedPattern(&#32;PatternPtr&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;underlyingPattern&#32;)
14657 &#32;&#32;&#32;&#32;:&#32;Pattern(&#32;underlyingPattern-&gt;name()&#32;)
14658 &#32;&#32;&#32;&#32;,&#32;m_underlyingPattern(&#32;underlyingPattern&#32;)
14659 &#32;&#32;&#32;&#32;{}
14660 
14661 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;TestSpec::ExcludedPattern::matches(&#32;TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
14662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!m_underlyingPattern-&gt;matches(&#32;testCase&#32;);
14663 &#32;&#32;&#32;&#32;}
14664 
14665 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;TestSpec::Filter::matches(&#32;TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
14666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::all_of(&#32;m_patterns.begin(),&#32;m_patterns.end(),&#32;[&amp;](&#32;PatternPtr&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;p&#32;){&#32;return&#32;p-&gt;matches(&#32;testCase&#32;);&#32;}&#32;);
14667 &#32;&#32;&#32;&#32;}
14668 
14669 &#32;&#32;&#32;&#32;std::string&#32;TestSpec::Filter::name()<emphasis role="keyword">&#32;const&#32;</emphasis>{
14670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;name;
14671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;p&#32;:&#32;m_patterns&#32;)
14672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;name&#32;+=&#32;p-&gt;name();
14673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;name;
14674 &#32;&#32;&#32;&#32;}
14675 
14676 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;TestSpec::hasFilters()<emphasis role="keyword">&#32;const&#32;</emphasis>{
14677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!m_filters.empty();
14678 &#32;&#32;&#32;&#32;}
14679 
14680 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;TestSpec::matches(&#32;TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCase&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
14681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::any_of(&#32;m_filters.begin(),&#32;m_filters.end(),&#32;[&amp;](&#32;Filter&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;f&#32;){&#32;return&#32;f.matches(&#32;testCase&#32;);&#32;}&#32;);
14682 &#32;&#32;&#32;&#32;}
14683 
14684 &#32;&#32;&#32;&#32;TestSpec::Matches&#32;TestSpec::matchesByFilter(&#32;std::vector&lt;TestCase&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCases,&#32;IConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config&#32;)<emphasis role="keyword">&#32;const</emphasis>
14685 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
14686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1_1_matchers_1a82f1893cf50ae4c14b9b3e0980bf22b8">Matches</link>&#32;matches(&#32;m_filters.size()&#32;);
14687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::transform(&#32;m_filters.begin(),&#32;m_filters.end(),&#32;matches.begin(),&#32;[&amp;](&#32;Filter&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;filter&#32;){
14688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;TestCase&#32;const*&gt;&#32;currentMatches;
14689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for(&#32;auto&#32;const&amp;&#32;test&#32;:&#32;testCases&#32;)
14690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(&#32;isThrowSafe(&#32;test,&#32;config&#32;)&#32;&amp;&amp;&#32;filter.matches(&#32;test&#32;)&#32;)
14691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentMatches.emplace_back(&#32;&amp;test&#32;);
14692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;FilterMatch{&#32;filter.name(),&#32;currentMatches&#32;};
14693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;);
14694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;matches;
14695 &#32;&#32;&#32;&#32;}
14696 
14697 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;TestSpec::vectorStrings&amp;&#32;TestSpec::getInvalidArgs()<emphasis role="keyword">&#32;const</emphasis>{
14698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;(m_invalidArgs);
14699 &#32;&#32;&#32;&#32;}
14700 
14701 }
14702 <emphasis role="comment">//&#32;end&#32;catch_test_spec.cpp</emphasis>
14703 <emphasis role="comment">//&#32;start&#32;catch_test_spec_parser.cpp</emphasis>
14704 
14705 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
14706 
14707 &#32;&#32;&#32;&#32;TestSpecParser::TestSpecParser(&#32;ITagAliasRegistry&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;tagAliases&#32;)&#32;:&#32;m_tagAliases(&#32;&amp;tagAliases&#32;)&#32;{}
14708 
14709 &#32;&#32;&#32;&#32;TestSpecParser&amp;&#32;TestSpecParser::parse_expr(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;arg&#32;)&#32;{
14710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_mode&#32;=&#32;None;
14711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_exclusion&#32;=&#32;<emphasis role="keyword">false</emphasis>;
14712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_arg&#32;=&#32;m_tagAliases-&gt;expandAliases(&#32;arg&#32;);
14713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_escapeChars.clear();
14714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_substring.reserve(m_arg.size());
14715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_patternName.reserve(m_arg.size());
14716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_realPatternPos&#32;=&#32;0;
14717 
14718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;m_pos&#32;=&#32;0;&#32;m_pos&#32;&lt;&#32;m_arg.size();&#32;++m_pos&#32;)
14719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//if&#32;visitChar&#32;fails</emphasis>
14720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(&#32;!visitChar(&#32;m_arg[m_pos]&#32;)&#32;){
14721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_testSpec.m_invalidArgs.push_back(arg);
14722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endMode();
14725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
14726 &#32;&#32;&#32;&#32;}
14727 &#32;&#32;&#32;&#32;TestSpec&#32;TestSpecParser::testSpec()&#32;{
14728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addFilter();
14729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_testSpec;
14730 &#32;&#32;&#32;&#32;}
14731 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;TestSpecParser::visitChar(&#32;<emphasis role="keywordtype">char</emphasis>&#32;c&#32;)&#32;{
14732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;(m_mode&#32;!=&#32;EscapedName)&#32;&amp;&amp;&#32;(c&#32;==&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>)&#32;)&#32;{
14733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;escape();
14734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addCharToPattern(c);
14735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
14736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>((m_mode&#32;!=&#32;EscapedName)&#32;&amp;&amp;&#32;(c&#32;==&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>)&#32;)&#32;&#32;{
14737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;separate();
14738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14739 
14740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(&#32;m_mode&#32;)&#32;{
14741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;None:
14742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;processNoneChar(&#32;c&#32;)&#32;)
14743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
14744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Name:
14746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;processNameChar(&#32;c&#32;);
14747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;EscapedName:
14749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endMode();
14750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addCharToPattern(c);
14751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
14752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
14753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Tag:
14754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;QuotedName:
14755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;processOtherChar(&#32;c&#32;)&#32;)
14756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
14757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14759 
14760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_substring&#32;+=&#32;c;
14761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!isControlChar(&#32;c&#32;)&#32;)&#32;{
14762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_patternName&#32;+=&#32;c;
14763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_realPatternPos++;
14764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
14766 &#32;&#32;&#32;&#32;}
14767 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Two&#32;of&#32;the&#32;processing&#32;methods&#32;return&#32;true&#32;to&#32;signal&#32;the&#32;caller&#32;to&#32;return</emphasis>
14768 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;without&#32;adding&#32;the&#32;given&#32;character&#32;to&#32;the&#32;current&#32;pattern&#32;strings</emphasis>
14769 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;TestSpecParser::processNoneChar(&#32;<emphasis role="keywordtype">char</emphasis>&#32;c&#32;)&#32;{
14770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(&#32;c&#32;)&#32;{
14771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>:
14772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
14773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;~&apos;</emphasis>:
14774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_exclusion&#32;=&#32;<emphasis role="keyword">true</emphasis>;
14775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
14776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;[&apos;</emphasis>:
14777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;startNewMode(&#32;Tag&#32;);
14778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
14779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>:
14780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;startNewMode(&#32;QuotedName&#32;);
14781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
14782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
14783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;startNewMode(&#32;Name&#32;);
14784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
14785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14786 &#32;&#32;&#32;&#32;}
14787 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TestSpecParser::processNameChar(&#32;<emphasis role="keywordtype">char</emphasis>&#32;c&#32;)&#32;{
14788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;[&apos;</emphasis>&#32;)&#32;{
14789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_substring&#32;==&#32;<emphasis role="stringliteral">&quot;exclude:&quot;</emphasis>&#32;)
14790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_exclusion&#32;=&#32;<emphasis role="keyword">true</emphasis>;
14791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endMode();
14793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;startNewMode(&#32;Tag&#32;);
14794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14795 &#32;&#32;&#32;&#32;}
14796 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;TestSpecParser::processOtherChar(&#32;<emphasis role="keywordtype">char</emphasis>&#32;c&#32;)&#32;{
14797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!isControlChar(&#32;c&#32;)&#32;)
14798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
14799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_substring&#32;+=&#32;c;
14800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endMode();
14801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
14802 &#32;&#32;&#32;&#32;}
14803 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TestSpecParser::startNewMode(&#32;Mode&#32;mode&#32;)&#32;{
14804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_mode&#32;=&#32;mode;
14805 &#32;&#32;&#32;&#32;}
14806 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TestSpecParser::endMode()&#32;{
14807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(&#32;m_mode&#32;)&#32;{
14808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Name:
14809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;QuotedName:
14810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;addNamePattern();
14811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Tag:
14812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;addTagPattern();
14813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;EscapedName:
14814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;revertBackToLastMode();
14815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
14816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;None:
14817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
14818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;startNewMode(&#32;None&#32;);
14819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14820 &#32;&#32;&#32;&#32;}
14821 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TestSpecParser::escape()&#32;{
14822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;saveLastMode();
14823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_mode&#32;=&#32;EscapedName;
14824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_escapeChars.push_back(m_realPatternPos);
14825 &#32;&#32;&#32;&#32;}
14826 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;TestSpecParser::isControlChar(&#32;<emphasis role="keywordtype">char</emphasis>&#32;c&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
14827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(&#32;m_mode&#32;)&#32;{
14828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
14829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
14830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;None:
14831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;~&apos;</emphasis>;
14832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Name:
14833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;[&apos;</emphasis>;
14834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;EscapedName:
14835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
14836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;QuotedName:
14837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>;
14838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Tag:
14839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;[&apos;</emphasis>&#32;||&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;]&apos;</emphasis>;
14840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14841 &#32;&#32;&#32;&#32;}
14842 
14843 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TestSpecParser::addFilter()&#32;{
14844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!m_currentFilter.m_patterns.empty()&#32;)&#32;{
14845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_testSpec.m_filters.push_back(&#32;m_currentFilter&#32;);
14846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_currentFilter&#32;=&#32;TestSpec::Filter();
14847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14848 &#32;&#32;&#32;&#32;}
14849 
14850 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TestSpecParser::saveLastMode()&#32;{
14851 &#32;&#32;&#32;&#32;&#32;&#32;lastMode&#32;=&#32;m_mode;
14852 &#32;&#32;&#32;&#32;}
14853 
14854 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TestSpecParser::revertBackToLastMode()&#32;{
14855 &#32;&#32;&#32;&#32;&#32;&#32;m_mode&#32;=&#32;lastMode;
14856 &#32;&#32;&#32;&#32;}
14857 
14858 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;TestSpecParser::separate()&#32;{
14859 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;(m_mode==QuotedName)&#32;||&#32;(m_mode==Tag)&#32;){
14860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//invalid&#32;argument,&#32;signal&#32;failure&#32;to&#32;previous&#32;scope.</emphasis>
14861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_mode&#32;=&#32;None;
14862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_pos&#32;=&#32;m_arg.size();
14863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_substring.clear();
14864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_patternName.clear();
14865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_realPatternPos&#32;=&#32;0;
14866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
14867 &#32;&#32;&#32;&#32;&#32;&#32;}
14868 &#32;&#32;&#32;&#32;&#32;&#32;endMode();
14869 &#32;&#32;&#32;&#32;&#32;&#32;addFilter();
14870 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="comment">//success</emphasis>
14871 &#32;&#32;&#32;&#32;}
14872 
14873 &#32;&#32;&#32;&#32;std::string&#32;TestSpecParser::preprocessPattern()&#32;{
14874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;token&#32;=&#32;m_patternName;
14875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;m_escapeChars.size();&#32;++i)
14876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token&#32;=&#32;token.substr(0,&#32;m_escapeChars[i]&#32;-&#32;i)&#32;+&#32;token.substr(m_escapeChars[i]&#32;-&#32;i&#32;+&#32;1);
14877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_escapeChars.clear();
14878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespace_catch_1a695f62327be0676e046291eeaae15110">startsWith</link>(token,&#32;<emphasis role="stringliteral">&quot;exclude:&quot;</emphasis>))&#32;{
14879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_exclusion&#32;=&#32;<emphasis role="keyword">true</emphasis>;
14880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token&#32;=&#32;token.substr(8);
14881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14882 
14883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_patternName.clear();
14884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_realPatternPos&#32;=&#32;0;
14885 
14886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token;
14887 &#32;&#32;&#32;&#32;}
14888 
14889 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TestSpecParser::addNamePattern()&#32;{
14890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;token&#32;=&#32;preprocessPattern();
14891 
14892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!token.empty())&#32;{
14893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestSpec::PatternPtr&#32;pattern&#32;=&#32;std::make_shared&lt;TestSpec::NamePattern&gt;(token,&#32;m_substring);
14894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_exclusion)
14895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pattern&#32;=&#32;std::make_shared&lt;TestSpec::ExcludedPattern&gt;(pattern);
14896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_currentFilter.m_patterns.push_back(pattern);
14897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_substring.clear();
14899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_exclusion&#32;=&#32;<emphasis role="keyword">false</emphasis>;
14900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_mode&#32;=&#32;None;
14901 &#32;&#32;&#32;&#32;}
14902 
14903 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TestSpecParser::addTagPattern()&#32;{
14904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;token&#32;=&#32;preprocessPattern();
14905 
14906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!token.empty())&#32;{
14907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;tag&#32;pattern&#32;is&#32;the&#32;&quot;hide&#32;and&#32;tag&quot;&#32;shorthand&#32;(e.g.&#32;[.foo])</emphasis>
14908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;have&#32;to&#32;create&#32;a&#32;separate&#32;hide&#32;tag&#32;and&#32;shorten&#32;the&#32;real&#32;one</emphasis>
14909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token.size()&#32;&gt;&#32;1&#32;&amp;&amp;&#32;token[0]&#32;==&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>)&#32;{
14910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.erase(token.begin());
14911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestSpec::PatternPtr&#32;pattern&#32;=&#32;std::make_shared&lt;TestSpec::TagPattern&gt;(<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;m_substring);
14912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_exclusion)&#32;{
14913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pattern&#32;=&#32;std::make_shared&lt;TestSpec::ExcludedPattern&gt;(pattern);
14914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_currentFilter.m_patterns.push_back(pattern);
14916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14917 
14918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestSpec::PatternPtr&#32;pattern&#32;=&#32;std::make_shared&lt;TestSpec::TagPattern&gt;(token,&#32;m_substring);
14919 
14920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_exclusion)&#32;{
14921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pattern&#32;=&#32;std::make_shared&lt;TestSpec::ExcludedPattern&gt;(pattern);
14922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_currentFilter.m_patterns.push_back(pattern);
14924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_substring.clear();
14926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_exclusion&#32;=&#32;<emphasis role="keyword">false</emphasis>;
14927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_mode&#32;=&#32;None;
14928 &#32;&#32;&#32;&#32;}
14929 
14930 &#32;&#32;&#32;&#32;TestSpec&#32;parseTestSpec(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;arg&#32;)&#32;{
14931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TestSpecParser(&#32;ITagAliasRegistry::get()&#32;).parse_expr(&#32;arg&#32;).testSpec();
14932 &#32;&#32;&#32;&#32;}
14933 
14934 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
14935 <emphasis role="comment">//&#32;end&#32;catch_test_spec_parser.cpp</emphasis>
14936 <emphasis role="comment">//&#32;start&#32;catch_timer.cpp</emphasis>
14937 
14938 <emphasis role="preprocessor">#include&#32;&lt;chrono&gt;</emphasis>
14939 
14940 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;uint64_t&#32;nanosecondsInSecond&#32;=&#32;1000000000;
14941 
14942 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
14943 
14944 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1a98d058468488c486a9cb5c8463f3ba29">getCurrentNanosecondsSinceEpoch</link>()&#32;-&gt;&#32;uint64_t&#32;{
14945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(&#32;std::chrono::high_resolution_clock::now().time_since_epoch()&#32;).count();
14946 &#32;&#32;&#32;&#32;}
14947 
14948 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>{
14949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;estimateClockResolution()&#32;-&gt;&#32;uint64_t&#32;{
14950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint64_t&#32;sum&#32;=&#32;0;
14951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;uint64_t&#32;iterations&#32;=&#32;1000000;
14952 
14953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;startTime&#32;=&#32;<link linkend="_namespace_catch_1a98d058468488c486a9cb5c8463f3ba29">getCurrentNanosecondsSinceEpoch</link>();
14954 
14955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;iterations;&#32;++i&#32;)&#32;{
14956 
14957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint64_t&#32;ticks;
14958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint64_t&#32;baseTicks&#32;=&#32;<link linkend="_namespace_catch_1a98d058468488c486a9cb5c8463f3ba29">getCurrentNanosecondsSinceEpoch</link>();
14959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
14960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ticks&#32;=&#32;<link linkend="_namespace_catch_1a98d058468488c486a9cb5c8463f3ba29">getCurrentNanosecondsSinceEpoch</link>();
14961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>(&#32;ticks&#32;==&#32;baseTicks&#32;);
14962 
14963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;delta&#32;=&#32;ticks&#32;-&#32;baseTicks;
14964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sum&#32;+=&#32;delta;
14965 
14966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;have&#32;been&#32;calibrating&#32;for&#32;over&#32;3&#32;seconds&#32;--&#32;the&#32;clock</emphasis>
14967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;terrible&#32;and&#32;we&#32;should&#32;move&#32;on.</emphasis>
14968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TBD:&#32;How&#32;to&#32;signal&#32;that&#32;the&#32;measured&#32;resolution&#32;is&#32;probably&#32;wrong?</emphasis>
14969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ticks&#32;&gt;&#32;startTime&#32;+&#32;3&#32;*&#32;nanosecondsInSecond)&#32;{
14970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sum&#32;/&#32;(&#32;i&#32;+&#32;1u&#32;);
14971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14973 
14974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&apos;re&#32;just&#32;taking&#32;the&#32;mean,&#32;here.&#32;To&#32;do&#32;better&#32;we&#32;could&#32;take&#32;the&#32;std.&#32;dev&#32;and&#32;exclude&#32;outliers</emphasis>
14975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-&#32;and&#32;potentially&#32;do&#32;more&#32;iterations&#32;if&#32;there&apos;s&#32;a&#32;high&#32;variance.</emphasis>
14976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sum/iterations;
14977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14978 &#32;&#32;&#32;&#32;}
14979 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1ac8e1ed37624bd0d97b2c0d4ec099d31f">getEstimatedClockResolution</link>()&#32;-&gt;&#32;uint64_t&#32;{
14980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;s_resolution&#32;=&#32;estimateClockResolution();
14981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s_resolution;
14982 &#32;&#32;&#32;&#32;}
14983 
14984 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Timer::start()&#32;{
14985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;m_nanoseconds&#32;=&#32;<link linkend="_namespace_catch_1a98d058468488c486a9cb5c8463f3ba29">getCurrentNanosecondsSinceEpoch</link>();
14986 &#32;&#32;&#32;&#32;}
14987 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;Timer::getElapsedNanoseconds()&#32;const&#32;-&gt;&#32;uint64_t&#32;{
14988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1a98d058468488c486a9cb5c8463f3ba29">getCurrentNanosecondsSinceEpoch</link>()&#32;-&#32;m_nanoseconds;
14989 &#32;&#32;&#32;&#32;}
14990 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;Timer::getElapsedMicroseconds()&#32;const&#32;-&gt;&#32;uint64_t&#32;{
14991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getElapsedNanoseconds()/1000;
14992 &#32;&#32;&#32;&#32;}
14993 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;Timer::getElapsedMilliseconds()&#32;const&#32;-&gt;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;{
14994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(getElapsedMicroseconds()/1000);
14995 &#32;&#32;&#32;&#32;}
14996 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;Timer::getElapsedSeconds()&#32;const&#32;-&gt;&#32;<emphasis role="keywordtype">double</emphasis>&#32;{
14997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getElapsedMicroseconds()/1000000.0;
14998 &#32;&#32;&#32;&#32;}
14999 
15000 }&#32;<emphasis role="comment">//&#32;namespace&#32;Catch</emphasis>
15001 <emphasis role="comment">//&#32;end&#32;catch_timer.cpp</emphasis>
15002 <emphasis role="comment">//&#32;start&#32;catch_tostring.cpp</emphasis>
15003 
15004 <emphasis role="preprocessor">#if&#32;defined(__clang__)</emphasis>
15005 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;pragma&#32;clang&#32;diagnostic&#32;push</emphasis>
15006 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wexit-time-destructors&quot;</emphasis>
15007 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wglobal-constructors&quot;</emphasis>
15008 <emphasis role="preprocessor">#endif</emphasis>
15009 
15010 <emphasis role="comment">//&#32;Enable&#32;specific&#32;decls&#32;locally</emphasis>
15011 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER)</emphasis>
15012 <emphasis role="preprocessor">#define&#32;CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER</emphasis>
15013 <emphasis role="preprocessor">#endif</emphasis>
15014 
15015 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
15016 <emphasis role="preprocessor">#include&#32;&lt;iomanip&gt;</emphasis>
15017 
15018 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
15019 
15020 <emphasis role="keyword">namespace&#32;</emphasis>Detail&#32;{
15021 
15022 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;<link linkend="_namespace_catch_1_1_detail_1a466775f4eec29ffef29ab334cd885136">unprintableString</link>&#32;=&#32;<emphasis role="stringliteral">&quot;{?}&quot;</emphasis>;
15023 
15024 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>{
15025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;hexThreshold&#32;=&#32;255;
15026 
15027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Endianness&#32;{
15028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;Arch&#32;{&#32;Big,&#32;Little&#32;};
15029 
15030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;Arch&#32;which()&#32;{
15031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;one&#32;=&#32;1;
15032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;lowest&#32;byte&#32;we&#32;read&#32;is&#32;non-zero,&#32;we&#32;can&#32;assume</emphasis>
15033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;that&#32;little&#32;endian&#32;format&#32;is&#32;used.</emphasis>
15034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>&#32;=&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;one);
15035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>&#32;?&#32;Little&#32;:&#32;Big;
15036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
15038 &#32;&#32;&#32;&#32;}
15039 
15040 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_namespace_catch_1_1_detail_1ac5d6c510e565ee5bddcc2236194ce29e">rawMemoryToString</link>(&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<emphasis role="keywordtype">object</emphasis>,&#32;std::size_t&#32;size&#32;)&#32;{
15041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reverse&#32;order&#32;for&#32;little&#32;endian&#32;architectures</emphasis>
15042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0,&#32;end&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(&#32;size&#32;),&#32;inc&#32;=&#32;1;
15043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;Endianness::which()&#32;==&#32;Endianness::Little&#32;)&#32;{
15044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;=&#32;end-1;
15045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;end&#32;=&#32;inc&#32;=&#32;-1;
15046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15047 
15048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*bytes&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const&#32;</emphasis>*<emphasis role="keyword">&gt;</emphasis>(object);
15049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReusableStringStream&#32;rss;
15050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;0x&quot;</emphasis>&#32;&lt;&lt;&#32;std::setfill(<emphasis role="charliteral">&apos;0&apos;</emphasis>)&#32;&lt;&lt;&#32;std::hex;
15051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;;&#32;i&#32;!=&#32;end;&#32;i&#32;+=&#32;inc&#32;)
15052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;std::setw(2)&#32;&lt;&lt;&#32;static_cast&lt;unsigned&gt;(bytes[i]);
15053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rss.str();
15054 &#32;&#32;&#32;&#32;}
15055 }
15056 
15057 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
15058 std::string&#32;fpToString(&#32;T&#32;value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;precision&#32;)&#32;{
15059 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_catch_1_1true__given">Catch::isnan</link>(value))&#32;{
15060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;nan&quot;</emphasis>;
15061 &#32;&#32;&#32;&#32;}
15062 
15063 &#32;&#32;&#32;&#32;ReusableStringStream&#32;rss;
15064 &#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;std::setprecision(&#32;precision&#32;)
15065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::fixed
15066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>;
15067 &#32;&#32;&#32;&#32;std::string&#32;d&#32;=&#32;rss.str();
15068 &#32;&#32;&#32;&#32;std::size_t&#32;i&#32;=&#32;d.find_last_not_of(&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;);
15069 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;i&#32;!=&#32;std::string::npos&#32;&amp;&amp;&#32;i&#32;!=&#32;d.size()-1&#32;)&#32;{
15070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;d[i]&#32;==&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>&#32;)
15071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
15072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;d.substr(&#32;0,&#32;i+1&#32;);
15073 &#32;&#32;&#32;&#32;}
15074 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;d;
15075 }
15076 
15078 <emphasis role="comment">//</emphasis>
15079 <emphasis role="comment">//&#32;&#32;&#32;Out-of-line&#32;defs&#32;for&#32;full&#32;specialization&#32;of&#32;StringMaker</emphasis>
15080 <emphasis role="comment">//</emphasis>
15082 
15083 std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;std::string&gt;::convert</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;str)&#32;{
15084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_namespace_catch_1a228a625318bb6183842e394eeba17d50">getCurrentContext</link>().getConfig()-&gt;showInvisibles())&#32;{
15085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>&#32;+&#32;str&#32;+&#32;&apos;&quot;&apos;;
15086 &#32;&#32;&#32;&#32;}
15087 
15088 &#32;&#32;&#32;&#32;std::string&#32;s(<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>);
15089 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">char</emphasis>&#32;c&#32;:&#32;str)&#32;{
15090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(c)&#32;{
15091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>:
15092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s.append(<emphasis role="stringliteral">&quot;\\n&quot;</emphasis>);
15093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>:
15095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s.append(<emphasis role="stringliteral">&quot;\\t&quot;</emphasis>);
15096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
15098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s.push_back(c);
15099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15101 &#32;&#32;&#32;&#32;}
15102 &#32;&#32;&#32;&#32;s.append(<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>);
15103 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s;
15104 }
15105 
15106 <emphasis role="preprocessor">#ifdef&#32;CATCH_CONFIG_CPP17_STRING_VIEW</emphasis>
15107 std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;std::string_view&gt;::convert</link>(std::string_view&#32;str)&#32;{
15108 &#32;&#32;&#32;&#32;return&#32;::Catch::Detail::stringify(std::string{&#32;str&#32;});
15109 }
15110 <emphasis role="preprocessor">#endif</emphasis>
15111 
15112 std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;char const*&gt;::convert</link>(<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*&#32;str)&#32;{
15113 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(str)&#32;{
15114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;::Catch::Detail::stringify(std::string{&#32;str&#32;});
15115 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
15116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>{&#32;<emphasis role="stringliteral">&quot;{null&#32;string}&quot;</emphasis>&#32;};
15117 &#32;&#32;&#32;&#32;}
15118 }
15119 std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;char*&gt;::convert</link>(<emphasis role="keywordtype">char</emphasis>*&#32;str)&#32;{
15120 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(str)&#32;{
15121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;::Catch::Detail::stringify(std::string{&#32;str&#32;});
15122 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
15123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>{&#32;<emphasis role="stringliteral">&quot;{null&#32;string}&quot;</emphasis>&#32;};
15124 &#32;&#32;&#32;&#32;}
15125 }
15126 
15127 <emphasis role="preprocessor">#ifdef&#32;CATCH_CONFIG_WCHAR</emphasis>
15128 std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;std::wstring&gt;::convert</link>(<emphasis role="keyword">const</emphasis>&#32;std::wstring&amp;&#32;wstr)&#32;{
15129 &#32;&#32;&#32;&#32;std::string&#32;s;
15130 &#32;&#32;&#32;&#32;s.reserve(wstr.size());
15131 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;c&#32;:&#32;wstr)&#32;{
15132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(c&#32;&lt;=&#32;0xff)&#32;?&#32;static_cast&lt;char&gt;(c)&#32;:&#32;&apos;?&apos;;
15133 &#32;&#32;&#32;&#32;}
15134 &#32;&#32;&#32;&#32;return&#32;::Catch::Detail::stringify(s);
15135 }
15136 
15137 <emphasis role="preprocessor">#&#32;ifdef&#32;CATCH_CONFIG_CPP17_STRING_VIEW</emphasis>
15138 std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;std::wstring_view&gt;::convert</link>(std::wstring_view&#32;str)&#32;{
15139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;std::wstring&gt;::convert</link>(std::wstring(str));
15140 }
15141 <emphasis role="preprocessor">#&#32;endif</emphasis>
15142 
15143 std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;wchar_t const*&gt;::convert</link>(<emphasis role="keywordtype">wchar_t</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;str)&#32;{
15144 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(str)&#32;{
15145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;::Catch::Detail::stringify(std::wstring{&#32;str&#32;});
15146 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
15147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>{&#32;<emphasis role="stringliteral">&quot;{null&#32;string}&quot;</emphasis>&#32;};
15148 &#32;&#32;&#32;&#32;}
15149 }
15150 std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;wchar_t *&gt;::convert</link>(<emphasis role="keywordtype">wchar_t</emphasis>&#32;*&#32;str)&#32;{
15151 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(str)&#32;{
15152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;::Catch::Detail::stringify(std::wstring{&#32;str&#32;});
15153 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
15154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>{&#32;<emphasis role="stringliteral">&quot;{null&#32;string}&quot;</emphasis>&#32;};
15155 &#32;&#32;&#32;&#32;}
15156 }
15157 <emphasis role="preprocessor">#endif</emphasis>
15158 
15159 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_CPP17_BYTE)</emphasis>
15160 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>
15161 std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;std::byte&gt;::convert</link>(std::byte&#32;value)&#32;{
15162 &#32;&#32;&#32;&#32;return&#32;::Catch::Detail::stringify(std::to_integer&lt;unsigned&#32;long&#32;long&gt;(value));
15163 }
15164 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;defined(CATCH_CONFIG_CPP17_BYTE)</emphasis>
15165 
15166 std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;int&gt;::convert</link>(<emphasis role="keywordtype">int</emphasis>&#32;value)&#32;{
15167 &#32;&#32;&#32;&#32;return&#32;::Catch::Detail::stringify(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis><emphasis role="keyword">&gt;</emphasis>(value));
15168 }
15169 std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;long&gt;::convert</link>(<emphasis role="keywordtype">long</emphasis>&#32;value)&#32;{
15170 &#32;&#32;&#32;&#32;return&#32;::Catch::Detail::stringify(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis><emphasis role="keyword">&gt;</emphasis>(value));
15171 }
15172 std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;long long&gt;::convert</link>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;value)&#32;{
15173 &#32;&#32;&#32;&#32;ReusableStringStream&#32;rss;
15174 &#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>;
15175 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;&gt;&#32;Detail::hexThreshold)&#32;{
15176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;(0x&quot;</emphasis>&#32;&lt;&lt;&#32;std::hex&#32;&lt;&lt;&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;)&apos;</emphasis>;
15177 &#32;&#32;&#32;&#32;}
15178 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rss.str();
15179 }
15180 
15181 std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;unsigned int&gt;::convert</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;value)&#32;{
15182 &#32;&#32;&#32;&#32;return&#32;::Catch::Detail::stringify(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis><emphasis role="keyword">&gt;</emphasis>(value));
15183 }
15184 std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;unsigned long&gt;::convert</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;value)&#32;{
15185 &#32;&#32;&#32;&#32;return&#32;::Catch::Detail::stringify(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis><emphasis role="keyword">&gt;</emphasis>(value));
15186 }
15187 std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;unsigned long long&gt;::convert</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;value)&#32;{
15188 &#32;&#32;&#32;&#32;ReusableStringStream&#32;rss;
15189 &#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>;
15190 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;&gt;&#32;Detail::hexThreshold)&#32;{
15191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;(0x&quot;</emphasis>&#32;&lt;&lt;&#32;std::hex&#32;&lt;&lt;&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;)&apos;</emphasis>;
15192 &#32;&#32;&#32;&#32;}
15193 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rss.str();
15194 }
15195 
15196 std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;bool&gt;::convert</link>(<emphasis role="keywordtype">bool</emphasis>&#32;b)&#32;{
15197 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;b&#32;?&#32;<emphasis role="stringliteral">&quot;true&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;false&quot;</emphasis>;
15198 }
15199 
15200 std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;signed char&gt;::convert</link>(<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;value)&#32;{
15201 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;==&#32;<emphasis role="charliteral">&apos;\r&apos;</emphasis>)&#32;{
15202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&apos;\\r&apos;&quot;</emphasis>;
15203 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;==&#32;<emphasis role="charliteral">&apos;\f&apos;</emphasis>)&#32;{
15204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&apos;\\f&apos;&quot;</emphasis>;
15205 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;==&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>)&#32;{
15206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&apos;\\n&apos;&quot;</emphasis>;
15207 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;==&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>)&#32;{
15208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&apos;\\t&apos;&quot;</emphasis>;
15209 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="charliteral">&apos;\0&apos;</emphasis>&#32;&lt;=&#32;value&#32;&amp;&amp;&#32;value&#32;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>)&#32;{
15210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;::Catch::Detail::stringify(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(value));
15211 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
15212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;chstr[]&#32;=&#32;<emphasis role="stringliteral">&quot;&apos;&#32;&apos;&quot;</emphasis>;
15213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chstr[1]&#32;=&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>;
15214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;chstr;
15215 &#32;&#32;&#32;&#32;}
15216 }
15217 std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;char&gt;::convert</link>(<emphasis role="keywordtype">char</emphasis>&#32;c)&#32;{
15218 &#32;&#32;&#32;&#32;return&#32;::Catch::Detail::stringify(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(c));
15219 }
15220 std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;unsigned char&gt;::convert</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;c)&#32;{
15221 &#32;&#32;&#32;&#32;return&#32;::Catch::Detail::stringify(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(c));
15222 }
15223 
15224 std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;std::nullptr_t&gt;::convert</link>(std::nullptr_t)&#32;{
15225 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;nullptr&quot;</emphasis>;
15226 }
15227 
15228 <emphasis role="keywordtype">int</emphasis>&#32;StringMaker&lt;float&gt;::precision&#32;=&#32;5;
15229 
15230 std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;float&gt;::convert</link>(<emphasis role="keywordtype">float</emphasis>&#32;value)&#32;{
15231 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;fpToString(value,&#32;precision)&#32;+&#32;&apos;f&apos;;
15232 }
15233 
15234 <emphasis role="keywordtype">int</emphasis>&#32;StringMaker&lt;double&gt;::precision&#32;=&#32;10;
15235 
15236 std::string&#32;<link linkend="_struct_catch_1_1_string_maker_1a98ebf81ba6ef3cfd72b23316e291d3d0">StringMaker&lt;double&gt;::convert</link>(<emphasis role="keywordtype">double</emphasis>&#32;value)&#32;{
15237 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;fpToString(value,&#32;precision);
15238 }
15239 
15240 std::string&#32;ratio_string&lt;std::atto&gt;::symbol()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>;&#32;}
15241 std::string&#32;ratio_string&lt;std::femto&gt;::symbol()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;f&quot;</emphasis>;&#32;}
15242 std::string&#32;ratio_string&lt;std::pico&gt;::symbol()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;p&quot;</emphasis>;&#32;}
15243 std::string&#32;ratio_string&lt;std::nano&gt;::symbol()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;n&quot;</emphasis>;&#32;}
15244 std::string&#32;ratio_string&lt;std::micro&gt;::symbol()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;u&quot;</emphasis>;&#32;}
15245 std::string&#32;ratio_string&lt;std::milli&gt;::symbol()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;m&quot;</emphasis>;&#32;}
15246 
15247 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
15248 
15249 <emphasis role="preprocessor">#if&#32;defined(__clang__)</emphasis>
15250 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;pragma&#32;clang&#32;diagnostic&#32;pop</emphasis>
15251 <emphasis role="preprocessor">#endif</emphasis>
15252 
15253 <emphasis role="comment">//&#32;end&#32;catch_tostring.cpp</emphasis>
15254 <emphasis role="comment">//&#32;start&#32;catch_totals.cpp</emphasis>
15255 
15256 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
15257 
15258 &#32;&#32;&#32;&#32;Counts&#32;<link linkend="_struct_catch_1_1_counts_1aaa10666f559057e3e860d2a5a6fae4c4">Counts::operator - </link>(&#32;Counts&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
15259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Counts&#32;diff;
15260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;diff.<link linkend="_struct_catch_1_1_counts_1ad28daaf3de28006400208b6dd0c631e6">passed</link>&#32;=&#32;<link linkend="_struct_catch_1_1_counts_1ad28daaf3de28006400208b6dd0c631e6">passed</link>&#32;-&#32;other.<link linkend="_struct_catch_1_1_counts_1ad28daaf3de28006400208b6dd0c631e6">passed</link>;
15261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;diff.failed&#32;=&#32;<link linkend="_struct_catch_1_1_counts_1a19982a3817a3bc2c07f0290e71f497a3">failed</link>&#32;-&#32;other.<link linkend="_struct_catch_1_1_counts_1a19982a3817a3bc2c07f0290e71f497a3">failed</link>;
15262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;diff.failedButOk&#32;=&#32;<link linkend="_struct_catch_1_1_counts_1ac090973a2ff51394cd452718e75c073e">failedButOk</link>&#32;-&#32;other.<link linkend="_struct_catch_1_1_counts_1ac090973a2ff51394cd452718e75c073e">failedButOk</link>;
15263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;diff;
15264 &#32;&#32;&#32;&#32;}
15265 
15266 &#32;&#32;&#32;&#32;Counts&amp;&#32;<link linkend="_struct_catch_1_1_counts_1a0c4a2295b896e189cdf4663377e156df">Counts::operator += </link>(&#32;Counts&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other&#32;)&#32;{
15267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_counts_1ad28daaf3de28006400208b6dd0c631e6">passed</link>&#32;+=&#32;other.<link linkend="_struct_catch_1_1_counts_1ad28daaf3de28006400208b6dd0c631e6">passed</link>;
15268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_counts_1a19982a3817a3bc2c07f0290e71f497a3">failed</link>&#32;+=&#32;other.<link linkend="_struct_catch_1_1_counts_1a19982a3817a3bc2c07f0290e71f497a3">failed</link>;
15269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_counts_1ac090973a2ff51394cd452718e75c073e">failedButOk</link>&#32;+=&#32;other.<link linkend="_struct_catch_1_1_counts_1ac090973a2ff51394cd452718e75c073e">failedButOk</link>;
15270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
15271 &#32;&#32;&#32;&#32;}
15272 
15273 &#32;&#32;&#32;&#32;std::size_t&#32;<link linkend="_struct_catch_1_1_counts_1a94f969c09cf52d1339c085c9603cd1d3">Counts::total</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
15274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_counts_1ad28daaf3de28006400208b6dd0c631e6">passed</link>&#32;+&#32;<link linkend="_struct_catch_1_1_counts_1a19982a3817a3bc2c07f0290e71f497a3">failed</link>&#32;+&#32;<link linkend="_struct_catch_1_1_counts_1ac090973a2ff51394cd452718e75c073e">failedButOk</link>;
15275 &#32;&#32;&#32;&#32;}
15276 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_counts_1a84999490e0ecaa3de5e121bf48eda1b3">Counts::allPassed</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
15277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_counts_1a19982a3817a3bc2c07f0290e71f497a3">failed</link>&#32;==&#32;0&#32;&amp;&amp;&#32;<link linkend="_struct_catch_1_1_counts_1ac090973a2ff51394cd452718e75c073e">failedButOk</link>&#32;==&#32;0;
15278 &#32;&#32;&#32;&#32;}
15279 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_catch_1_1_counts_1a33bd996e016030155b99fe1c51c08991">Counts::allOk</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
15280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1_counts_1a19982a3817a3bc2c07f0290e71f497a3">failed</link>&#32;==&#32;0;
15281 &#32;&#32;&#32;&#32;}
15282 
15283 &#32;&#32;&#32;&#32;Totals&#32;<link linkend="_struct_catch_1_1_totals_1a9279ed39139cb7e7b291918a6d08290e">Totals::operator - </link>(&#32;Totals&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
15284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Totals&#32;diff;
15285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;diff.<link linkend="_struct_catch_1_1_totals_1a885ded66df752147b30c3d45aa602ec9">assertions</link>&#32;=&#32;<link linkend="_struct_catch_1_1_totals_1a885ded66df752147b30c3d45aa602ec9">assertions</link>&#32;-&#32;other.<link linkend="_struct_catch_1_1_totals_1a885ded66df752147b30c3d45aa602ec9">assertions</link>;
15286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;diff.testCases&#32;=&#32;<link linkend="_struct_catch_1_1_totals_1adb195fe477aedee2ecea88c888f16506">testCases</link>&#32;-&#32;other.<link linkend="_struct_catch_1_1_totals_1adb195fe477aedee2ecea88c888f16506">testCases</link>;
15287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;diff;
15288 &#32;&#32;&#32;&#32;}
15289 
15290 &#32;&#32;&#32;&#32;Totals&amp;&#32;<link linkend="_struct_catch_1_1_totals_1aa809975b6055917ecb1b1ae7c25149a8">Totals::operator += </link>(&#32;Totals&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;other&#32;)&#32;{
15291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_totals_1a885ded66df752147b30c3d45aa602ec9">assertions</link>&#32;+=&#32;other.<link linkend="_struct_catch_1_1_totals_1a885ded66df752147b30c3d45aa602ec9">assertions</link>;
15292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_totals_1adb195fe477aedee2ecea88c888f16506">testCases</link>&#32;+=&#32;other.<link linkend="_struct_catch_1_1_totals_1adb195fe477aedee2ecea88c888f16506">testCases</link>;
15293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
15294 &#32;&#32;&#32;&#32;}
15295 
15296 &#32;&#32;&#32;&#32;Totals&#32;<link linkend="_struct_catch_1_1_totals_1a1a94a654f5f3786b75695e081fc9bca2">Totals::delta</link>(&#32;Totals&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;prevTotals&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
15297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Totals&#32;diff&#32;=&#32;*<emphasis role="keyword">this</emphasis>&#32;-&#32;prevTotals;
15298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;diff.assertions.failed&#32;&gt;&#32;0&#32;)
15299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++diff.<link linkend="_struct_catch_1_1_totals_1adb195fe477aedee2ecea88c888f16506">testCases</link>.failed;
15300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(&#32;diff.assertions.failedButOk&#32;&gt;&#32;0&#32;)
15301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++diff.<link linkend="_struct_catch_1_1_totals_1adb195fe477aedee2ecea88c888f16506">testCases</link>.failedButOk;
15302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++diff.<link linkend="_struct_catch_1_1_totals_1adb195fe477aedee2ecea88c888f16506">testCases</link>.passed;
15304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;diff;
15305 &#32;&#32;&#32;&#32;}
15306 
15307 }
15308 <emphasis role="comment">//&#32;end&#32;catch_totals.cpp</emphasis>
15309 <emphasis role="comment">//&#32;start&#32;catch_uncaught_exceptions.cpp</emphasis>
15310 
15311 <emphasis role="comment">//&#32;start&#32;catch_config_uncaught_exceptions.hpp</emphasis>
15312 
15313 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Copyright&#32;Catch2&#32;Authors</emphasis>
15314 <emphasis role="comment">//&#32;Distributed&#32;under&#32;the&#32;Boost&#32;Software&#32;License,&#32;Version&#32;1.0.</emphasis>
15315 <emphasis role="comment">//&#32;&#32;&#32;(See&#32;accompanying&#32;file&#32;LICENSE_1_0.txt&#32;or&#32;copy&#32;at</emphasis>
15316 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;https://www.boost.org/LICENSE_1_0.txt)</emphasis>
15317 
15318 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;BSL-1.0</emphasis>
15319 
15320 <emphasis role="preprocessor">#ifndef&#32;CATCH_CONFIG_UNCAUGHT_EXCEPTIONS_HPP</emphasis>
15321 <emphasis role="preprocessor">#define&#32;CATCH_CONFIG_UNCAUGHT_EXCEPTIONS_HPP</emphasis>
15322 
15323 <emphasis role="preprocessor">#if&#32;defined(_MSC_VER)</emphasis>
15324 <emphasis role="preprocessor">#&#32;&#32;if&#32;_MSC_VER&#32;&gt;=&#32;1900&#32;</emphasis><emphasis role="comment">//&#32;Visual&#32;Studio&#32;2015&#32;or&#32;newer</emphasis>
15325 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS</emphasis>
15326 <emphasis role="preprocessor">#&#32;&#32;endif</emphasis>
15327 <emphasis role="preprocessor">#endif</emphasis>
15328 
15329 <emphasis role="preprocessor">#include&#32;&lt;exception&gt;</emphasis>
15330 
15331 <emphasis role="preprocessor">#if&#32;defined(__cpp_lib_uncaught_exceptions)&#32;\</emphasis>
15332 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&amp;&amp;&#32;!defined(CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS)</emphasis>
15333 
15334 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS</emphasis>
15335 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cpp_lib_uncaught_exceptions</emphasis>
15336 
15337 <emphasis role="preprocessor">#if&#32;defined(CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS)&#32;\</emphasis>
15338 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_NO_CPP17_UNCAUGHT_EXCEPTIONS)&#32;\</emphasis>
15339 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&amp;&amp;&#32;!defined(CATCH_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS)</emphasis>
15340 
15341 <emphasis role="preprocessor">#&#32;&#32;define&#32;CATCH_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS</emphasis>
15342 <emphasis role="preprocessor">#endif</emphasis>
15343 
15344 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_UNCAUGHT_EXCEPTIONS_HPP</emphasis>
15345 <emphasis role="comment">//&#32;end&#32;catch_config_uncaught_exceptions.hpp</emphasis>
15346 <emphasis role="preprocessor">#include&#32;&lt;exception&gt;</emphasis>
15347 
15348 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
15349 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;uncaught_exceptions()&#32;{
15350 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</emphasis>
15351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
15352 <emphasis role="preprocessor">#elif&#32;defined(CATCH_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS)</emphasis>
15353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::uncaught_exceptions()&#32;&gt;&#32;0;
15354 <emphasis role="preprocessor">#else</emphasis>
15355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::uncaught_exception();
15356 <emphasis role="preprocessor">#endif</emphasis>
15357 &#32;&#32;}
15358 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
15359 <emphasis role="comment">//&#32;end&#32;catch_uncaught_exceptions.cpp</emphasis>
15360 <emphasis role="comment">//&#32;start&#32;catch_version.cpp</emphasis>
15361 
15362 <emphasis role="preprocessor">#include&#32;&lt;ostream&gt;</emphasis>
15363 
15364 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
15365 
15366 &#32;&#32;&#32;&#32;Version::Version
15367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_majorVersion,
15368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_minorVersion,
15369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_patchNumber,
15370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<emphasis role="keyword">const</emphasis>&#32;_branchName,
15371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_buildNumber&#32;)
15372 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;majorVersion(&#32;_majorVersion&#32;),
15373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minorVersion(&#32;_minorVersion&#32;),
15374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;patchNumber(&#32;_patchNumber&#32;),
15375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;branchName(&#32;_branchName&#32;),
15376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buildNumber(&#32;_buildNumber&#32;)
15377 &#32;&#32;&#32;&#32;{}
15378 
15379 &#32;&#32;&#32;&#32;std::ostream&amp;&#32;<link linkend="_namespace_catch_1a8c8ea1f66bc1cdc3e1254ed7fa57c06d">operator &lt;&lt; </link>(&#32;std::ostream&amp;&#32;os,&#32;Version&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;version&#32;)&#32;{
15380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&#32;&lt;&lt;&#32;version.majorVersion&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>
15381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;version.minorVersion&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>
15382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;version.patchNumber;
15383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;branchName&#32;is&#32;never&#32;null&#32;-&gt;&#32;0th&#32;char&#32;is&#32;\0&#32;if&#32;it&#32;is&#32;empty</emphasis>
15384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(version.branchName[0])&#32;{
15385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>&#32;&lt;&lt;&#32;version.branchName
15386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>&#32;&lt;&lt;&#32;version.buildNumber;
15387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
15389 &#32;&#32;&#32;&#32;}
15390 
15391 &#32;&#32;&#32;&#32;Version&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;libraryVersion()&#32;{
15392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;Version&#32;version(&#32;2,&#32;13,&#32;10,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;0&#32;);
15393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;version;
15394 &#32;&#32;&#32;&#32;}
15395 
15396 }
15397 <emphasis role="comment">//&#32;end&#32;catch_version.cpp</emphasis>
15398 <emphasis role="comment">//&#32;start&#32;catch_wildcard_pattern.cpp</emphasis>
15399 
15400 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
15401 
15402 &#32;&#32;&#32;&#32;WildcardPattern::WildcardPattern(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;pattern,
15403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6a">CaseSensitive::Choice</link>&#32;caseSensitivity&#32;)
15404 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_caseSensitivity(&#32;caseSensitivity&#32;),
15405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_pattern(&#32;normaliseString(&#32;pattern&#32;)&#32;)
15406 &#32;&#32;&#32;&#32;{
15407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_namespace_catch_1a695f62327be0676e046291eeaae15110">startsWith</link>(&#32;m_pattern,&#32;<emphasis role="charliteral">&apos;*&apos;</emphasis>&#32;)&#32;)&#32;{
15408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_pattern&#32;=&#32;m_pattern.substr(&#32;1&#32;);
15409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_wildcard&#32;=&#32;WildcardAtStart;
15410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_namespace_catch_1ada025504f627feaf9ac68ca391515dff">endsWith</link>(&#32;m_pattern,&#32;<emphasis role="charliteral">&apos;*&apos;</emphasis>&#32;)&#32;)&#32;{
15412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_pattern&#32;=&#32;m_pattern.substr(&#32;0,&#32;m_pattern.size()-1&#32;);
15413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_wildcard&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>WildcardPosition<emphasis role="keyword">&gt;</emphasis>(&#32;m_wildcard&#32;|&#32;WildcardAtEnd&#32;);
15414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15415 &#32;&#32;&#32;&#32;}
15416 
15417 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;WildcardPattern::matches(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
15418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(&#32;m_wildcard&#32;)&#32;{
15419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NoWildcard:
15420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_pattern&#32;==&#32;normaliseString(&#32;str&#32;);
15421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;WildcardAtStart:
15422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1ada025504f627feaf9ac68ca391515dff">endsWith</link>(&#32;normaliseString(&#32;str&#32;),&#32;m_pattern&#32;);
15423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;WildcardAtEnd:
15424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1a695f62327be0676e046291eeaae15110">startsWith</link>(&#32;normaliseString(&#32;str&#32;),&#32;m_pattern&#32;);
15425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;WildcardAtBothEnds:
15426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1aa52974b0e426e7e2fbd725a900e9c36e">contains</link>(&#32;normaliseString(&#32;str&#32;),&#32;m_pattern&#32;);
15427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
15428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1af445c1e136fadba0e92f3c22d68a7641">CATCH_INTERNAL_ERROR</link>(&#32;<emphasis role="stringliteral">&quot;Unknown&#32;enum&quot;</emphasis>&#32;);
15429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15430 &#32;&#32;&#32;&#32;}
15431 
15432 &#32;&#32;&#32;&#32;std::string&#32;WildcardPattern::normaliseString(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
15433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1a084108b47f37d8bfd5db51c50c7451b3">trim</link>(&#32;m_caseSensitivity&#32;==&#32;<link linkend="_struct_catch_1_1_case_sensitive_1aad49d3aee2d97066642fffa919685c6aa4ffff8d29b481f0116abc37228cd53f6">CaseSensitive::No</link>&#32;?&#32;<link linkend="_namespace_catch_1ac036a17412d318598ffda8e1fe7a1177">toLower</link>(&#32;str&#32;)&#32;:&#32;str&#32;);
15434 &#32;&#32;&#32;&#32;}
15435 }
15436 <emphasis role="comment">//&#32;end&#32;catch_wildcard_pattern.cpp</emphasis>
15437 <emphasis role="comment">//&#32;start&#32;catch_xmlwriter.cpp</emphasis>
15438 
15439 <emphasis role="preprocessor">#include&#32;&lt;iomanip&gt;</emphasis>
15440 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
15441 
15442 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
15443 
15444 <emphasis role="keyword">namespace&#32;</emphasis>{
15445 
15446 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;trailingBytes(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;c)&#32;{
15447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((c&#32;&amp;&#32;0xE0)&#32;==&#32;0xC0)&#32;{
15448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;2;
15449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((c&#32;&amp;&#32;0xF0)&#32;==&#32;0xE0)&#32;{
15451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;3;
15452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((c&#32;&amp;&#32;0xF8)&#32;==&#32;0xF0)&#32;{
15454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;4;
15455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1af445c1e136fadba0e92f3c22d68a7641">CATCH_INTERNAL_ERROR</link>(<emphasis role="stringliteral">&quot;Invalid&#32;multibyte&#32;utf-8&#32;start&#32;byte&#32;encountered&quot;</emphasis>);
15457 &#32;&#32;&#32;&#32;}
15458 
15459 &#32;&#32;&#32;&#32;uint32_t&#32;headerValue(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;c)&#32;{
15460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((c&#32;&amp;&#32;0xE0)&#32;==&#32;0xC0)&#32;{
15461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;&amp;&#32;0x1F;
15462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((c&#32;&amp;&#32;0xF0)&#32;==&#32;0xE0)&#32;{
15464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;&amp;&#32;0x0F;
15465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((c&#32;&amp;&#32;0xF8)&#32;==&#32;0xF0)&#32;{
15467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;&amp;&#32;0x07;
15468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8h_1af445c1e136fadba0e92f3c22d68a7641">CATCH_INTERNAL_ERROR</link>(<emphasis role="stringliteral">&quot;Invalid&#32;multibyte&#32;utf-8&#32;start&#32;byte&#32;encountered&quot;</emphasis>);
15470 &#32;&#32;&#32;&#32;}
15471 
15472 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;hexEscapeChar(std::ostream&amp;&#32;os,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;c)&#32;{
15473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ios_base::fmtflags&#32;f(os.flags());
15474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\\x&quot;</emphasis>
15475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::uppercase&#32;&lt;&lt;&#32;std::hex&#32;&lt;&lt;&#32;std::setfill(<emphasis role="charliteral">&apos;0&apos;</emphasis>)&#32;&lt;&lt;&#32;std::setw(2)
15476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(c);
15477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os.flags(f);
15478 &#32;&#32;&#32;&#32;}
15479 
15480 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;shouldNewline(XmlFormatting&#32;fmt)&#32;{
15481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!(<emphasis role="keyword">static_cast&lt;</emphasis>std::underlying_type&lt;XmlFormatting&gt;::type<emphasis role="keyword">&gt;</emphasis>(fmt&#32;&amp;&#32;XmlFormatting::Newline));
15482 &#32;&#32;&#32;&#32;}
15483 
15484 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;shouldIndent(XmlFormatting&#32;fmt)&#32;{
15485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!(<emphasis role="keyword">static_cast&lt;</emphasis>std::underlying_type&lt;XmlFormatting&gt;::type<emphasis role="keyword">&gt;</emphasis>(fmt&#32;&amp;&#32;XmlFormatting::Indent));
15486 &#32;&#32;&#32;&#32;}
15487 
15488 }&#32;<emphasis role="comment">//&#32;anonymous&#32;namespace</emphasis>
15489 
15490 &#32;&#32;&#32;&#32;XmlFormatting&#32;<link linkend="_namespace_catch_1ab32a083e442cc09f736327d2e2865999">operator | </link>(XmlFormatting&#32;lhs,&#32;XmlFormatting&#32;rhs)&#32;{
15491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>XmlFormatting<emphasis role="keyword">&gt;</emphasis>(
15492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::underlying_type&lt;XmlFormatting&gt;::type<emphasis role="keyword">&gt;</emphasis>(lhs)&#32;|
15493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::underlying_type&lt;XmlFormatting&gt;::type<emphasis role="keyword">&gt;</emphasis>(rhs)
15494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
15495 &#32;&#32;&#32;&#32;}
15496 
15497 &#32;&#32;&#32;&#32;XmlFormatting&#32;operator&#32;&amp;&#32;(XmlFormatting&#32;lhs,&#32;XmlFormatting&#32;rhs)&#32;{
15498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>XmlFormatting<emphasis role="keyword">&gt;</emphasis>(
15499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::underlying_type&lt;XmlFormatting&gt;::type<emphasis role="keyword">&gt;</emphasis>(lhs)&#32;&amp;
15500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::underlying_type&lt;XmlFormatting&gt;::type<emphasis role="keyword">&gt;</emphasis>(rhs)
15501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
15502 &#32;&#32;&#32;&#32;}
15503 
15504 &#32;&#32;&#32;&#32;XmlEncode::XmlEncode(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str,&#32;ForWhat&#32;forWhat&#32;)
15505 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_str(&#32;str&#32;),
15506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_forWhat(&#32;forWhat&#32;)
15507 &#32;&#32;&#32;&#32;{}
15508 
15509 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlEncode::encodeTo(&#32;std::ostream&amp;&#32;os&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
15510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Apostrophe&#32;escaping&#32;not&#32;necessary&#32;if&#32;we&#32;always&#32;use&#32;&quot;&#32;to&#32;write&#32;attributes</emphasis>
15511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(see:&#32;http://www.w3.org/TR/xml/#syntax)</emphasis>
15512 
15513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;std::size_t&#32;idx&#32;=&#32;0;&#32;idx&#32;&lt;&#32;m_str.size();&#32;++&#32;idx&#32;)&#32;{
15514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;c&#32;=&#32;m_str[idx];
15515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(c)&#32;{
15516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;&lt;&apos;</emphasis>:&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&amp;lt;&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
15517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;&amp;&apos;</emphasis>:&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&amp;amp;&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
15518 
15519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;&gt;&apos;</emphasis>:
15520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See:&#32;http://www.w3.org/TR/xml/#syntax</emphasis>
15521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(idx&#32;&gt;&#32;2&#32;&amp;&amp;&#32;m_str[idx&#32;-&#32;1]&#32;==&#32;<emphasis role="charliteral">&apos;]&apos;</emphasis>&#32;&amp;&amp;&#32;m_str[idx&#32;-&#32;2]&#32;==&#32;<emphasis role="charliteral">&apos;]&apos;</emphasis>)
15522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&amp;gt;&quot;</emphasis>;
15523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;c;
15525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15526 
15527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>:
15528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_forWhat&#32;==&#32;ForAttributes)
15529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&amp;quot;&quot;</emphasis>;
15530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;c;
15532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15533 
15534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
15535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;for&#32;control&#32;characters&#32;and&#32;invalid&#32;utf-8</emphasis>
15536 
15537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Escape&#32;control&#32;characters&#32;in&#32;standard&#32;ascii</emphasis>
15538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;see&#32;http://stackoverflow.com/questions/404107/why-are-control-characters-illegal-in-xml-1-0</emphasis>
15539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;&lt;&#32;0x09&#32;||&#32;(c&#32;&gt;&#32;0x0D&#32;&amp;&amp;&#32;c&#32;&lt;&#32;0x20)&#32;||&#32;c&#32;==&#32;0x7F)&#32;{
15540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hexEscapeChar(os,&#32;c);
15541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15543 
15544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Plain&#32;ASCII:&#32;Write&#32;it&#32;to&#32;stream</emphasis>
15545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;&lt;&#32;0x7F)&#32;{
15546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;c;
15547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15549 
15550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;UTF-8&#32;territory</emphasis>
15551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;the&#32;encoding&#32;is&#32;valid&#32;and&#32;if&#32;it&#32;is&#32;not,&#32;hex&#32;escape&#32;bytes.</emphasis>
15552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Important:&#32;We&#32;do&#32;not&#32;check&#32;the&#32;exact&#32;decoded&#32;values&#32;for&#32;validity,&#32;only&#32;the&#32;encoding&#32;format</emphasis>
15553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;check&#32;that&#32;this&#32;bytes&#32;is&#32;a&#32;valid&#32;lead&#32;byte:</emphasis>
15554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;means&#32;that&#32;it&#32;is&#32;not&#32;encoded&#32;as&#32;1111&#32;1XXX</emphasis>
15555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Or&#32;as&#32;10XX&#32;XXXX</emphasis>
15556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;&lt;&#32;&#32;0xC0&#32;||
15557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c&#32;&gt;=&#32;0xF8)&#32;{
15558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hexEscapeChar(os,&#32;c);
15559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15561 
15562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;encBytes&#32;=&#32;trailingBytes(c);
15563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Are&#32;there&#32;enough&#32;bytes&#32;left&#32;to&#32;avoid&#32;accessing&#32;out-of-bounds&#32;memory?</emphasis>
15564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(idx&#32;+&#32;encBytes&#32;-&#32;1&#32;&gt;=&#32;m_str.size())&#32;{
15565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hexEscapeChar(os,&#32;c);
15566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;header&#32;is&#32;valid,&#32;check&#32;data</emphasis>
15569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;next&#32;encBytes&#32;bytes&#32;must&#32;together&#32;be&#32;a&#32;valid&#32;utf-8</emphasis>
15570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;means:&#32;bitpattern&#32;10XX&#32;XXXX&#32;and&#32;the&#32;extracted&#32;value&#32;is&#32;sane&#32;(ish)</emphasis>
15571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;valid&#32;=&#32;<emphasis role="keyword">true</emphasis>;
15572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>&#32;=&#32;headerValue(c);
15573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;n&#32;=&#32;1;&#32;n&#32;&lt;&#32;encBytes;&#32;++n)&#32;{
15574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;nc&#32;=&#32;m_str[idx&#32;+&#32;n];
15575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;valid&#32;&amp;=&#32;((nc&#32;&amp;&#32;0xC0)&#32;==&#32;0x80);
15576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>&#32;=&#32;(<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>&#32;&lt;&lt;&#32;6)&#32;|&#32;(nc&#32;&amp;&#32;0x3F);
15577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15578 
15579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(
15580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Wrong&#32;bit&#32;pattern&#32;of&#32;following&#32;bytes</emphasis>
15581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(!valid)&#32;||
15582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Overlong&#32;encodings</emphasis>
15583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>&#32;&lt;&#32;0x80)&#32;||
15584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(0x80&#32;&lt;=&#32;value&#32;&amp;&amp;&#32;value&#32;&lt;&#32;0x800&#32;&#32;&#32;&amp;&amp;&#32;encBytes&#32;&gt;&#32;2)&#32;||
15585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(0x800&#32;&lt;&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>&#32;&amp;&amp;&#32;value&#32;&lt;&#32;0x10000&#32;&amp;&amp;&#32;encBytes&#32;&gt;&#32;3)&#32;||
15586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Encoded&#32;value&#32;out&#32;of&#32;range</emphasis>
15587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(value&#32;&gt;=&#32;0x110000)
15588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
15589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hexEscapeChar(os,&#32;c);
15590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15592 
15593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;got&#32;here,&#32;this&#32;is&#32;in&#32;fact&#32;a&#32;valid(ish)&#32;utf-8&#32;sequence</emphasis>
15594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;n&#32;=&#32;0;&#32;n&#32;&lt;&#32;encBytes;&#32;++n)&#32;{
15595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;m_str[idx&#32;+&#32;n];
15596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;idx&#32;+=&#32;encBytes&#32;-&#32;1;
15598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15601 &#32;&#32;&#32;&#32;}
15602 
15603 &#32;&#32;&#32;&#32;std::ostream&amp;&#32;<link linkend="_catch_8h_1aae0cdd5d2f0ac242b9ab18b0f66ba26e">operator &lt;&lt; </link>(&#32;std::ostream&amp;&#32;os,&#32;XmlEncode&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;xmlEncode&#32;)&#32;{
15604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xmlEncode.encodeTo(&#32;os&#32;);
15605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
15606 &#32;&#32;&#32;&#32;}
15607 
15608 &#32;&#32;&#32;&#32;XmlWriter::ScopedElement::ScopedElement(&#32;XmlWriter*&#32;writer,&#32;XmlFormatting&#32;fmt&#32;)
15609 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_writer(&#32;writer&#32;),
15610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_fmt(fmt)
15611 &#32;&#32;&#32;&#32;{}
15612 
15613 &#32;&#32;&#32;&#32;XmlWriter::ScopedElement::ScopedElement(&#32;ScopedElement&amp;&amp;&#32;other&#32;)&#32;noexcept
15614 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_writer(&#32;other.m_writer&#32;),
15615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_fmt(other.m_fmt)
15616 &#32;&#32;&#32;&#32;{
15617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other.m_writer&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
15618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other.m_fmt&#32;=&#32;XmlFormatting::None;
15619 &#32;&#32;&#32;&#32;}
15620 &#32;&#32;&#32;&#32;XmlWriter::ScopedElement&amp;&#32;XmlWriter::ScopedElement::operator=(&#32;ScopedElement&amp;&amp;&#32;other&#32;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
15621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;m_writer&#32;)&#32;{
15622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_writer-&gt;endElement();
15623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_writer&#32;=&#32;other.m_writer;
15625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other.m_writer&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
15626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_fmt&#32;=&#32;other.m_fmt;
15627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other.m_fmt&#32;=&#32;XmlFormatting::None;
15628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
15629 &#32;&#32;&#32;&#32;}
15630 
15631 &#32;&#32;&#32;&#32;XmlWriter::ScopedElement::~ScopedElement()&#32;{
15632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_writer)&#32;{
15633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_writer-&gt;endElement(m_fmt);
15634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15635 &#32;&#32;&#32;&#32;}
15636 
15637 &#32;&#32;&#32;&#32;XmlWriter::ScopedElement&amp;&#32;XmlWriter::ScopedElement::writeText(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;text,&#32;XmlFormatting&#32;fmt&#32;)&#32;{
15638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_writer-&gt;writeText(&#32;text,&#32;fmt&#32;);
15639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
15640 &#32;&#32;&#32;&#32;}
15641 
15642 &#32;&#32;&#32;&#32;XmlWriter::XmlWriter(&#32;std::ostream&amp;&#32;os&#32;)&#32;:&#32;m_os(&#32;os&#32;)
15643 &#32;&#32;&#32;&#32;{
15644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writeDeclaration();
15645 &#32;&#32;&#32;&#32;}
15646 
15647 &#32;&#32;&#32;&#32;XmlWriter::~XmlWriter()&#32;{
15648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!m_tags.empty())&#32;{
15649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endElement();
15650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newlineIfNecessary();
15652 &#32;&#32;&#32;&#32;}
15653 
15654 &#32;&#32;&#32;&#32;XmlWriter&amp;&#32;XmlWriter::startElement(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;XmlFormatting&#32;fmt&#32;)&#32;{
15655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ensureTagClosed();
15656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newlineIfNecessary();
15657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(shouldIndent(fmt))&#32;{
15658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;m_indent;
15659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_indent&#32;+=&#32;&quot;&#32;&#32;&quot;;
15660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&lt;&apos;</emphasis>&#32;&lt;&lt;&#32;name;
15662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_tags.push_back(&#32;name&#32;);
15663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_tagIsOpen&#32;=&#32;<emphasis role="keyword">true</emphasis>;
15664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;applyFormatting(fmt);
15665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
15666 &#32;&#32;&#32;&#32;}
15667 
15668 &#32;&#32;&#32;&#32;XmlWriter::ScopedElement&#32;XmlWriter::scopedElement(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;XmlFormatting&#32;fmt&#32;)&#32;{
15669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ScopedElement&#32;scoped(&#32;<emphasis role="keyword">this</emphasis>,&#32;fmt&#32;);
15670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;startElement(&#32;name,&#32;fmt&#32;);
15671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;scoped;
15672 &#32;&#32;&#32;&#32;}
15673 
15674 &#32;&#32;&#32;&#32;XmlWriter&amp;&#32;XmlWriter::endElement(XmlFormatting&#32;fmt)&#32;{
15675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_indent&#32;=&#32;m_indent.substr(0,&#32;m_indent.size()&#32;-&#32;2);
15676 
15677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_tagIsOpen&#32;)&#32;{
15678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;/&gt;&quot;</emphasis>;
15679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_tagIsOpen&#32;=&#32;<emphasis role="keyword">false</emphasis>;
15680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
15681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newlineIfNecessary();
15682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(shouldIndent(fmt))&#32;{
15683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;m_indent;
15684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&lt;/&quot;</emphasis>&#32;&lt;&lt;&#32;m_tags.back()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>;
15686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;std::flush;
15688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;applyFormatting(fmt);
15689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_tags.pop_back();
15690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
15691 &#32;&#32;&#32;&#32;}
15692 
15693 &#32;&#32;&#32;&#32;XmlWriter&amp;&#32;XmlWriter::writeAttribute(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;attribute&#32;)&#32;{
15694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!name.empty()&#32;&amp;&amp;&#32;!attribute.empty()&#32;)
15695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;&lt;&lt;&#32;name&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;=\&quot;&quot;</emphasis>&#32;&lt;&lt;&#32;XmlEncode(&#32;attribute,&#32;XmlEncode::ForAttributes&#32;)&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>;
15696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
15697 &#32;&#32;&#32;&#32;}
15698 
15699 &#32;&#32;&#32;&#32;XmlWriter&amp;&#32;XmlWriter::writeAttribute(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;attribute&#32;)&#32;{
15700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;&lt;&lt;&#32;name&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;=\&quot;&quot;</emphasis>&#32;&lt;&lt;&#32;(&#32;attribute&#32;?&#32;<emphasis role="stringliteral">&quot;true&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;false&quot;</emphasis>&#32;)&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>;
15701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
15702 &#32;&#32;&#32;&#32;}
15703 
15704 &#32;&#32;&#32;&#32;XmlWriter&amp;&#32;XmlWriter::writeText(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;text,&#32;XmlFormatting&#32;fmt)&#32;{
15705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!text.empty()&#32;){
15706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;tagWasOpen&#32;=&#32;m_tagIsOpen;
15707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ensureTagClosed();
15708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tagWasOpen&#32;&amp;&amp;&#32;shouldIndent(fmt))&#32;{
15709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;m_indent;
15710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;XmlEncode(&#32;text&#32;);
15712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;applyFormatting(fmt);
15713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
15715 &#32;&#32;&#32;&#32;}
15716 
15717 &#32;&#32;&#32;&#32;XmlWriter&amp;&#32;XmlWriter::writeComment(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;text,&#32;XmlFormatting&#32;fmt)&#32;{
15718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ensureTagClosed();
15719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(shouldIndent(fmt))&#32;{
15720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;m_indent;
15721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&lt;!--&quot;</emphasis>&#32;&lt;&lt;&#32;text&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;--&gt;&quot;</emphasis>;
15723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;applyFormatting(fmt);
15724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
15725 &#32;&#32;&#32;&#32;}
15726 
15727 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlWriter::writeStylesheetRef(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;url&#32;)&#32;{
15728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&lt;?xml-stylesheet&#32;type=\&quot;text/xsl\&quot;&#32;href=\&quot;&quot;</emphasis>&#32;&lt;&lt;&#32;url&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\&quot;?&gt;\n&quot;</emphasis>;
15729 &#32;&#32;&#32;&#32;}
15730 
15731 &#32;&#32;&#32;&#32;XmlWriter&amp;&#32;XmlWriter::writeBlankLine()&#32;{
15732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ensureTagClosed();
15733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
15734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
15735 &#32;&#32;&#32;&#32;}
15736 
15737 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlWriter::ensureTagClosed()&#32;{
15738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_tagIsOpen&#32;)&#32;{
15739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&gt;&apos;</emphasis>&#32;&lt;&lt;&#32;std::flush;
15740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newlineIfNecessary();
15741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_tagIsOpen&#32;=&#32;<emphasis role="keyword">false</emphasis>;
15742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15743 &#32;&#32;&#32;&#32;}
15744 
15745 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlWriter::applyFormatting(XmlFormatting&#32;fmt)&#32;{
15746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_needsNewline&#32;=&#32;shouldNewline(fmt);
15747 &#32;&#32;&#32;&#32;}
15748 
15749 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlWriter::writeDeclaration()&#32;{
15750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&lt;?xml&#32;version=\&quot;1.0\&quot;&#32;encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;</emphasis>;
15751 &#32;&#32;&#32;&#32;}
15752 
15753 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlWriter::newlineIfNecessary()&#32;{
15754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_needsNewline&#32;)&#32;{
15755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;std::endl;
15756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_needsNewline&#32;=&#32;<emphasis role="keyword">false</emphasis>;
15757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15758 &#32;&#32;&#32;&#32;}
15759 }
15760 <emphasis role="comment">//&#32;end&#32;catch_xmlwriter.cpp</emphasis>
15761 <emphasis role="comment">//&#32;start&#32;catch_reporter_bases.cpp</emphasis>
15762 
15763 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>
15764 <emphasis role="preprocessor">#include&#32;&lt;cfloat&gt;</emphasis>
15765 <emphasis role="preprocessor">#include&#32;&lt;cstdio&gt;</emphasis>
15766 <emphasis role="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>
15767 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
15768 
15769 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
15770 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;prepareExpandedExpression(AssertionResult&amp;&#32;result)&#32;{
15771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.getExpandedExpression();
15772 &#32;&#32;&#32;&#32;}
15773 
15774 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Because&#32;formatting&#32;using&#32;c++&#32;streams&#32;is&#32;stateful,&#32;drop&#32;down&#32;to&#32;C&#32;is&#32;required</emphasis>
15775 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Alternatively&#32;we&#32;could&#32;use&#32;stringstream,&#32;but&#32;its&#32;performance&#32;is...&#32;not&#32;good.</emphasis>
15776 &#32;&#32;&#32;&#32;std::string&#32;getFormattedDuration(&#32;<emphasis role="keywordtype">double</emphasis>&#32;duration&#32;)&#32;{
15777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Max&#32;exponent&#32;+&#32;1&#32;is&#32;required&#32;to&#32;represent&#32;the&#32;whole&#32;part</emphasis>
15778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;+&#32;1&#32;for&#32;decimal&#32;point</emphasis>
15779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;+&#32;3&#32;for&#32;the&#32;3&#32;decimal&#32;places</emphasis>
15780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;+&#32;1&#32;for&#32;null&#32;terminator</emphasis>
15781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::size_t&#32;maxDoubleSize&#32;=&#32;DBL_MAX_10_EXP&#32;+&#32;1&#32;+&#32;1&#32;+&#32;3&#32;+&#32;1;
15782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;buffer[maxDoubleSize];
15783 
15784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Save&#32;previous&#32;errno,&#32;to&#32;prevent&#32;sprintf&#32;from&#32;overwriting&#32;it</emphasis>
15785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ErrnoGuard&#32;guard;
15786 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
15787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sprintf_s(buffer,&#32;<emphasis role="stringliteral">&quot;%.3f&quot;</emphasis>,&#32;duration);
15788 <emphasis role="preprocessor">#else</emphasis>
15789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::sprintf(buffer,&#32;<emphasis role="stringliteral">&quot;%.3f&quot;</emphasis>,&#32;duration);
15790 <emphasis role="preprocessor">#endif</emphasis>
15791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string(buffer);
15792 &#32;&#32;&#32;&#32;}
15793 
15794 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;shouldShowDuration(&#32;IConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config,&#32;<emphasis role="keywordtype">double</emphasis>&#32;duration&#32;)&#32;{
15795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;config.showDurations()&#32;==&#32;<link linkend="_struct_catch_1_1_show_durations_1a82fa0174554187220c1eda175f122ee1ab49682ccb55f2d6b4dfcdb027c09da9a">ShowDurations::Always</link>&#32;)&#32;{
15796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
15797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;config.showDurations()&#32;==&#32;<link linkend="_struct_catch_1_1_show_durations_1a82fa0174554187220c1eda175f122ee1af1a716bc46185f561382a12a0dede9f3">ShowDurations::Never</link>&#32;)&#32;{
15799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
15800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;min&#32;=&#32;config.minDuration();
15802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;min&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;duration&#32;&gt;=&#32;min;
15803 &#32;&#32;&#32;&#32;}
15804 
15805 &#32;&#32;&#32;&#32;std::string&#32;serializeFilters(&#32;std::vector&lt;std::string&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;container&#32;)&#32;{
15806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReusableStringStream&#32;oss;
15807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;first&#32;=&#32;<emphasis role="keyword">true</emphasis>;
15808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;filter&#32;:&#32;container)
15809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!first)
15811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oss&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>;
15812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first&#32;=&#32;<emphasis role="keyword">false</emphasis>;
15814 
15815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oss&#32;&lt;&lt;&#32;<link linkend="_namespace_catch_1_1_generators_1a4df89be8072a9685ee89b6776a54bb93">filter</link>;
15816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;oss.str();
15818 &#32;&#32;&#32;&#32;}
15819 
15820 &#32;&#32;&#32;&#32;TestEventListenerBase::TestEventListenerBase(ReporterConfig&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;_config)
15821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:StreamingReporterBase(_config)&#32;{}
15822 
15823 &#32;&#32;&#32;&#32;std::set&lt;Verbosity&gt;&#32;TestEventListenerBase::getSupportedVerbosities()&#32;{
15824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737a098753f8980036f4b936e3d4b6997111">Verbosity::Quiet</link>,&#32;<link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737a960b44c579bc2f6818d2daaf9e4c16f0">Verbosity::Normal</link>,&#32;<link linkend="_namespace_catch_1af85c0d46dfe687d923a157362fd07737a655d20c1ca69519ca647684edbb2db35">Verbosity::High</link>&#32;};
15825 &#32;&#32;&#32;&#32;}
15826 
15827 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TestEventListenerBase::assertionStarting(AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;)&#32;{}
15828 
15829 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;TestEventListenerBase::assertionEnded(AssertionStats&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;)&#32;{
15830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
15831 &#32;&#32;&#32;&#32;}
15832 
15833 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
15834 <emphasis role="comment">//&#32;end&#32;catch_reporter_bases.cpp</emphasis>
15835 <emphasis role="comment">//&#32;start&#32;catch_reporter_compact.cpp</emphasis>
15836 
15837 <emphasis role="keyword">namespace&#32;</emphasis>{
15838 
15839 <emphasis role="preprocessor">#ifdef&#32;CATCH_PLATFORM_MAC</emphasis>
15840 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;failedString()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;FAILED&quot;</emphasis>;&#32;}
15841 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;passedString()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;PASSED&quot;</emphasis>;&#32;}
15842 <emphasis role="preprocessor">#else</emphasis>
15843 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;failedString()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;failed&quot;</emphasis>;&#32;}
15844 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;passedString()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;passed&quot;</emphasis>;&#32;}
15845 <emphasis role="preprocessor">#endif</emphasis>
15846 
15847 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Colour::LightGrey</emphasis>
15848 &#32;&#32;&#32;&#32;Catch::Colour::Code&#32;dimColour()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;Catch::Colour::FileName;&#32;}
15849 
15850 &#32;&#32;&#32;&#32;std::string&#32;bothOrAll(&#32;std::size_t&#32;count&#32;)&#32;{
15851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;count&#32;==&#32;1&#32;?&#32;std::string()&#32;:
15852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count&#32;==&#32;2&#32;?&#32;<emphasis role="stringliteral">&quot;both&#32;&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;all&#32;&quot;</emphasis>&#32;;
15853 &#32;&#32;&#32;&#32;}
15854 
15855 }&#32;<emphasis role="comment">//&#32;anon&#32;namespace</emphasis>
15856 
15857 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
15858 <emphasis role="keyword">namespace&#32;</emphasis>{
15859 <emphasis role="comment">//&#32;Colour,&#32;message&#32;variants:</emphasis>
15860 <emphasis role="comment">//&#32;-&#32;white:&#32;No&#32;tests&#32;ran.</emphasis>
15861 <emphasis role="comment">//&#32;-&#32;&#32;&#32;red:&#32;Failed&#32;[both/all]&#32;N&#32;test&#32;cases,&#32;failed&#32;[both/all]&#32;M&#32;assertions.</emphasis>
15862 <emphasis role="comment">//&#32;-&#32;white:&#32;Passed&#32;[both/all]&#32;N&#32;test&#32;cases&#32;(no&#32;assertions).</emphasis>
15863 <emphasis role="comment">//&#32;-&#32;&#32;&#32;red:&#32;Failed&#32;N&#32;tests&#32;cases,&#32;failed&#32;M&#32;assertions.</emphasis>
15864 <emphasis role="comment">//&#32;-&#32;green:&#32;Passed&#32;[both/all]&#32;N&#32;tests&#32;cases&#32;with&#32;M&#32;assertions.</emphasis>
15865 <emphasis role="keywordtype">void</emphasis>&#32;printTotals(std::ostream&amp;&#32;out,&#32;<emphasis role="keyword">const</emphasis>&#32;Totals&amp;&#32;totals)&#32;{
15866 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(totals.testCases.total()&#32;==&#32;0)&#32;{
15867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;No&#32;tests&#32;ran.&quot;</emphasis>;
15868 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(totals.testCases.failed&#32;==&#32;totals.testCases.total())&#32;{
15869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Colour&#32;colour(Colour::ResultError);
15870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;qualify_assertions_failed&#32;=
15871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;totals.assertions.failed&#32;==&#32;totals.assertions.total()&#32;?
15872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bothOrAll(totals.assertions.failed)&#32;:&#32;std::string();
15873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;&lt;&lt;
15874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Failed&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;bothOrAll(totals.testCases.failed)
15875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;pluralise(totals.testCases.failed,&#32;<emphasis role="stringliteral">&quot;test&#32;case&quot;</emphasis>)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>
15876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;failed&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;qualify_assertions_failed&#32;&lt;&lt;
15877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pluralise(totals.assertions.failed,&#32;<emphasis role="stringliteral">&quot;assertion&quot;</emphasis>)&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>;
15878 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(totals.assertions.total()&#32;==&#32;0)&#32;{
15879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;&lt;&lt;
15880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Passed&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;bothOrAll(totals.testCases.total())
15881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;pluralise(totals.testCases.total(),&#32;<emphasis role="stringliteral">&quot;test&#32;case&quot;</emphasis>)
15882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;(no&#32;assertions).&quot;</emphasis>;
15883 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(totals.assertions.failed)&#32;{
15884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Colour&#32;colour(Colour::ResultError);
15885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;&lt;&lt;
15886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Failed&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;pluralise(totals.testCases.failed,&#32;<emphasis role="stringliteral">&quot;test&#32;case&quot;</emphasis>)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>
15887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;failed&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;pluralise(totals.assertions.failed,&#32;<emphasis role="stringliteral">&quot;assertion&quot;</emphasis>)&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>;
15888 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
15889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Colour&#32;colour(Colour::ResultSuccess);
15890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;&lt;&lt;
15891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Passed&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;bothOrAll(totals.testCases.passed)
15892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;pluralise(totals.testCases.passed,&#32;<emphasis role="stringliteral">&quot;test&#32;case&quot;</emphasis>)&#32;&lt;&lt;
15893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;with&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;pluralise(totals.assertions.passed,&#32;<emphasis role="stringliteral">&quot;assertion&quot;</emphasis>)&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>;
15894 &#32;&#32;&#32;&#32;}
15895 }
15896 
15897 <emphasis role="comment">//&#32;Implementation&#32;of&#32;CompactReporter&#32;formatting</emphasis>
15898 <emphasis role="keyword">class&#32;</emphasis>AssertionPrinter&#32;{
15899 <emphasis role="keyword">public</emphasis>:
15900 &#32;&#32;&#32;&#32;AssertionPrinter&amp;&#32;operator=&#32;(AssertionPrinter&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
15901 &#32;&#32;&#32;&#32;AssertionPrinter(AssertionPrinter&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
15902 &#32;&#32;&#32;&#32;AssertionPrinter(std::ostream&amp;&#32;_stream,&#32;AssertionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_stats,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_printInfoMessages)
15903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;stream(_stream)
15904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;result(_stats.assertionResult)
15905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;messages(_stats.infoMessages)
15906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;itMessage(_stats.infoMessages.begin())
15907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;printInfoMessages(_printInfoMessages)&#32;{}
15908 
15909 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;print()&#32;{
15910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printSourceInfo();
15911 
15912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;itMessage&#32;=&#32;messages.begin();
15913 
15914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(result.getResultType())&#32;{
15915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efae7cbe89bb9ec7ece9b44d48b63d01b63">ResultWas::Ok</link>:
15916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printResultType(Colour::ResultSuccess,&#32;passedString());
15917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printOriginalExpression();
15918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printReconstructedExpression();
15919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!result.hasExpression())
15920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printRemainingMessages(Colour::None);
15921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printRemainingMessages();
15923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa5e7126b8458dc1376ac870a719f7873f">ResultWas::ExpressionFailed</link>:
15925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result.isOk())
15926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printResultType(Colour::ResultSuccess,&#32;failedString()&#32;+&#32;std::string(<emphasis role="stringliteral">&quot;&#32;-&#32;but&#32;was&#32;ok&quot;</emphasis>));
15927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printResultType(Colour::Error,&#32;failedString());
15929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printOriginalExpression();
15930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printReconstructedExpression();
15931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printRemainingMessages();
15932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa3bb56296483947280cf7fa1ad074ab45">ResultWas::ThrewException</link>:
15934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printResultType(Colour::Error,&#32;failedString());
15935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printIssue(<emphasis role="stringliteral">&quot;unexpected&#32;exception&#32;with&#32;message:&quot;</emphasis>);
15936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printMessage();
15937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printExpressionWas();
15938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printRemainingMessages();
15939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa87fa1f2a2a63290b61948002e2935377">ResultWas::FatalErrorCondition</link>:
15941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printResultType(Colour::Error,&#32;failedString());
15942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printIssue(<emphasis role="stringliteral">&quot;fatal&#32;error&#32;condition&#32;with&#32;message:&quot;</emphasis>);
15943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printMessage();
15944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printExpressionWas();
15945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printRemainingMessages();
15946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa8b6d3d5bc78d4e7a95543b6ecfbdb57d">ResultWas::DidntThrowException</link>:
15948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printResultType(Colour::Error,&#32;failedString());
15949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printIssue(<emphasis role="stringliteral">&quot;expected&#32;exception,&#32;got&#32;none&quot;</emphasis>);
15950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printExpressionWas();
15951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printRemainingMessages();
15952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa30222063929ca1b6318faa78e8242f1c">ResultWas::Info</link>:
15954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printResultType(Colour::None,&#32;<emphasis role="stringliteral">&quot;info&quot;</emphasis>);
15955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printMessage();
15956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printRemainingMessages();
15957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa67e9d36ba0f04a60a19896834d840c21">ResultWas::Warning</link>:
15959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printResultType(Colour::None,&#32;<emphasis role="stringliteral">&quot;warning&quot;</emphasis>);
15960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printMessage();
15961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printRemainingMessages();
15962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efacecfc052e2499499b13304249303cc36">ResultWas::ExplicitFailure</link>:
15964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printResultType(Colour::Error,&#32;failedString());
15965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printIssue(<emphasis role="stringliteral">&quot;explicitly&quot;</emphasis>);
15966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printRemainingMessages(Colour::None);
15967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;These&#32;cases&#32;are&#32;here&#32;to&#32;prevent&#32;compiler&#32;warnings</emphasis>
15969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa65721dda02fe5efb522e7449e496608a">ResultWas::Unknown</link>:
15970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa1818f1b198f10b5734c405142b22025c">ResultWas::FailureBit</link>:
15971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efaa9107b7836cc7590ca668002f76d27c7">ResultWas::Exception</link>:
15972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printResultType(Colour::Error,&#32;<emphasis role="stringliteral">&quot;**&#32;internal&#32;error&#32;**&quot;</emphasis>);
15973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15975 &#32;&#32;&#32;&#32;}
15976 
15977 <emphasis role="keyword">private</emphasis>:
15978 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printSourceInfo()<emphasis role="keyword">&#32;const&#32;</emphasis>{
15979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Colour&#32;colourGuard(Colour::FileName);
15980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;result.getSourceInfo()&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>;
15981 &#32;&#32;&#32;&#32;}
15982 
15983 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printResultType(Colour::Code&#32;colour,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;passOrFail)<emphasis role="keyword">&#32;const&#32;</emphasis>{
15984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!passOrFail.empty())&#32;{
15985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Colour&#32;colourGuard(colour);
15987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;&lt;&lt;&#32;passOrFail;
15988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>;
15990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15991 &#32;&#32;&#32;&#32;}
15992 
15993 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printIssue(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;issue)<emphasis role="keyword">&#32;const&#32;</emphasis>{
15994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;&lt;&lt;&#32;issue;
15995 &#32;&#32;&#32;&#32;}
15996 
15997 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printExpressionWas()&#32;{
15998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result.hasExpression())&#32;{
15999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;;&apos;</emphasis>;
16000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Colour&#32;colour(dimColour());
16002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;expression&#32;was:&quot;</emphasis>;
16003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printOriginalExpression();
16005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16006 &#32;&#32;&#32;&#32;}
16007 
16008 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printOriginalExpression()<emphasis role="keyword">&#32;const&#32;</emphasis>{
16009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result.hasExpression())&#32;{
16010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;&lt;&lt;&#32;result.getExpression();
16011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16012 &#32;&#32;&#32;&#32;}
16013 
16014 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printReconstructedExpression()<emphasis role="keyword">&#32;const&#32;</emphasis>{
16015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result.hasExpandedExpression())&#32;{
16016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Colour&#32;colour(dimColour());
16018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;for:&#32;&quot;</emphasis>;
16019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;result.getExpandedExpression();
16021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16022 &#32;&#32;&#32;&#32;}
16023 
16024 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printMessage()&#32;{
16025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(itMessage&#32;!=&#32;messages.end())&#32;{
16026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&apos;&quot;</emphasis>&#32;&lt;&lt;&#32;itMessage-&gt;message&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>;
16027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++itMessage;
16028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16029 &#32;&#32;&#32;&#32;}
16030 
16031 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printRemainingMessages(Colour::Code&#32;colour&#32;=&#32;dimColour())&#32;{
16032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(itMessage&#32;==&#32;messages.end())
16033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
16034 
16035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;itEnd&#32;=&#32;messages.cend();
16036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;N&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(std::distance(itMessage,&#32;itEnd));
16037 
16038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Colour&#32;colourGuard(colour);
16040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;with&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;pluralise(N,&#32;<emphasis role="stringliteral">&quot;message&quot;</emphasis>)&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>;
16041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16042 
16043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(itMessage&#32;!=&#32;itEnd)&#32;{
16044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;this&#32;assertion&#32;is&#32;a&#32;warning&#32;ignore&#32;any&#32;INFO&#32;messages</emphasis>
16045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(printInfoMessages&#32;||&#32;itMessage-&gt;type&#32;!=&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa30222063929ca1b6318faa78e8242f1c">ResultWas::Info</link>)&#32;{
16046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printMessage();
16047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(itMessage&#32;!=&#32;itEnd)&#32;{
16048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Colour&#32;colourGuard(dimColour());
16049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;and&quot;</emphasis>;
16050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
16052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++itMessage;
16054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16055 &#32;&#32;&#32;&#32;}
16056 
16057 <emphasis role="keyword">private</emphasis>:
16058 &#32;&#32;&#32;&#32;std::ostream&amp;&#32;stream;
16059 &#32;&#32;&#32;&#32;AssertionResult&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;result;
16060 &#32;&#32;&#32;&#32;std::vector&lt;MessageInfo&gt;&#32;messages;
16061 &#32;&#32;&#32;&#32;std::vector&lt;MessageInfo&gt;::const_iterator&#32;itMessage;
16062 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;printInfoMessages;
16063 };
16064 
16065 }&#32;<emphasis role="comment">//&#32;anon&#32;namespace</emphasis>
16066 
16067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;CompactReporter::getDescription()&#32;{
16068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Reports&#32;test&#32;results&#32;on&#32;a&#32;single&#32;line,&#32;suitable&#32;for&#32;IDEs&quot;</emphasis>;
16069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16070 
16071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;CompactReporter::noMatchingTestCases(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;spec&#32;)&#32;{
16072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;No&#32;test&#32;cases&#32;matched&#32;&apos;&quot;</emphasis>&#32;&lt;&lt;&#32;spec&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>&#32;&lt;&lt;&#32;std::endl;
16073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16074 
16075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;CompactReporter::assertionStarting(&#32;AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;{}
16076 
16077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;CompactReporter::assertionEnded(&#32;AssertionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_assertionStats&#32;)&#32;{
16078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionResult&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;result&#32;=&#32;_assertionStats.assertionResult;
16079 
16080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;printInfoMessages&#32;=&#32;<emphasis role="keyword">true</emphasis>;
16081 
16082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Drop&#32;out&#32;if&#32;result&#32;was&#32;successful&#32;and&#32;we&apos;re&#32;not&#32;printing&#32;those</emphasis>
16083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!m_config-&gt;includeSuccessfulResults()&#32;&amp;&amp;&#32;result.isOk()&#32;)&#32;{
16084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;result.getResultType()&#32;!=&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa67e9d36ba0f04a60a19896834d840c21">ResultWas::Warning</link>&#32;)
16085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
16086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printInfoMessages&#32;=&#32;<emphasis role="keyword">false</emphasis>;
16087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16088 
16089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionPrinter&#32;printer(&#32;stream,&#32;_assertionStats,&#32;printInfoMessages&#32;);
16090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printer.print();
16091 
16092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;std::endl;
16093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
16094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16095 
16096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;CompactReporter::sectionEnded(SectionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_sectionStats)&#32;{
16097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dur&#32;=&#32;_sectionStats.durationInSeconds;
16098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;shouldShowDuration(&#32;*m_config,&#32;dur&#32;)&#32;)&#32;{
16099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;getFormattedDuration(&#32;dur&#32;)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;s:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;_sectionStats.sectionInfo.name&#32;&lt;&lt;&#32;std::endl;
16100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16102 
16103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;CompactReporter::testRunEnded(&#32;TestRunStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_testRunStats&#32;)&#32;{
16104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printTotals(&#32;stream,&#32;_testRunStats.totals&#32;);
16105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;std::endl;
16106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StreamingReporterBase::testRunEnded(&#32;_testRunStats&#32;);
16107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16108 
16109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CompactReporter::~CompactReporter()&#32;{}
16110 
16111 &#32;&#32;&#32;&#32;CATCH_REGISTER_REPORTER(&#32;<emphasis role="stringliteral">&quot;compact&quot;</emphasis>,&#32;CompactReporter&#32;)
16112 
16113 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
16114 <emphasis role="comment">//&#32;end&#32;catch_reporter_compact.cpp</emphasis>
16115 <emphasis role="comment">//&#32;start&#32;catch_reporter_console.cpp</emphasis>
16116 
16117 <emphasis role="preprocessor">#include&#32;&lt;cfloat&gt;</emphasis>
16118 <emphasis role="preprocessor">#include&#32;&lt;cstdio&gt;</emphasis>
16119 
16120 <emphasis role="preprocessor">#if&#32;defined(_MSC_VER)</emphasis>
16121 <emphasis role="preprocessor">#pragma&#32;warning(push)</emphasis>
16122 <emphasis role="preprocessor">#pragma&#32;warning(disable:4061)&#32;</emphasis><emphasis role="comment">//&#32;Not&#32;all&#32;labels&#32;are&#32;EXPLICITLY&#32;handled&#32;in&#32;switch</emphasis>
16123 &#32;<emphasis role="comment">//&#32;Note&#32;that&#32;4062&#32;(not&#32;all&#32;labels&#32;are&#32;handled&#32;and&#32;default&#32;is&#32;missing)&#32;is&#32;enabled</emphasis>
16124 <emphasis role="preprocessor">#endif</emphasis>
16125 
16126 <emphasis role="preprocessor">#if&#32;defined(__clang__)</emphasis>
16127 <emphasis role="preprocessor">#&#32;&#32;pragma&#32;clang&#32;diagnostic&#32;push</emphasis>
16128 <emphasis role="comment">//&#32;For&#32;simplicity,&#32;benchmarking-only&#32;helpers&#32;are&#32;always&#32;enabled</emphasis>
16129 <emphasis role="preprocessor">#&#32;&#32;pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wunused-function&quot;</emphasis>
16130 <emphasis role="preprocessor">#endif</emphasis>
16131 
16132 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
16133 
16134 <emphasis role="keyword">namespace&#32;</emphasis>{
16135 
16136 <emphasis role="comment">//&#32;Formatter&#32;impl&#32;for&#32;ConsoleReporter</emphasis>
16137 <emphasis role="keyword">class&#32;</emphasis>ConsoleAssertionPrinter&#32;{
16138 <emphasis role="keyword">public</emphasis>:
16139 &#32;&#32;&#32;&#32;ConsoleAssertionPrinter&amp;&#32;operator=&#32;(ConsoleAssertionPrinter&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
16140 &#32;&#32;&#32;&#32;ConsoleAssertionPrinter(ConsoleAssertionPrinter&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
16141 &#32;&#32;&#32;&#32;ConsoleAssertionPrinter(std::ostream&amp;&#32;_stream,&#32;AssertionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_stats,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_printInfoMessages)
16142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;stream(_stream),
16143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stats(_stats),
16144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result(_stats.assertionResult),
16145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;colour(Colour::None),
16146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;message(result.getMessage()),
16147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;messages(_stats.infoMessages),
16148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printInfoMessages(_printInfoMessages)&#32;{
16149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(result.getResultType())&#32;{
16150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efae7cbe89bb9ec7ece9b44d48b63d01b63">ResultWas::Ok</link>:
16151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;colour&#32;=&#32;Colour::Success;
16152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;passOrFail&#32;=&#32;<emphasis role="stringliteral">&quot;PASSED&quot;</emphasis>;
16153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//if(&#32;result.hasMessage()&#32;)</emphasis>
16154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_stats.infoMessages.size()&#32;==&#32;1)
16155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;messageLabel&#32;=&#32;<emphasis role="stringliteral">&quot;with&#32;message&quot;</emphasis>;
16156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_stats.infoMessages.size()&#32;&gt;&#32;1)
16157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;messageLabel&#32;=&#32;<emphasis role="stringliteral">&quot;with&#32;messages&quot;</emphasis>;
16158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
16159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa5e7126b8458dc1376ac870a719f7873f">ResultWas::ExpressionFailed</link>:
16160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result.isOk())&#32;{
16161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;colour&#32;=&#32;Colour::Success;
16162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;passOrFail&#32;=&#32;<emphasis role="stringliteral">&quot;FAILED&#32;-&#32;but&#32;was&#32;ok&quot;</emphasis>;
16163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
16164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;colour&#32;=&#32;Colour::Error;
16165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;passOrFail&#32;=&#32;<emphasis role="stringliteral">&quot;FAILED&quot;</emphasis>;
16166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_stats.infoMessages.size()&#32;==&#32;1)
16168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;messageLabel&#32;=&#32;<emphasis role="stringliteral">&quot;with&#32;message&quot;</emphasis>;
16169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_stats.infoMessages.size()&#32;&gt;&#32;1)
16170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;messageLabel&#32;=&#32;<emphasis role="stringliteral">&quot;with&#32;messages&quot;</emphasis>;
16171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
16172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa3bb56296483947280cf7fa1ad074ab45">ResultWas::ThrewException</link>:
16173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;colour&#32;=&#32;Colour::Error;
16174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;passOrFail&#32;=&#32;<emphasis role="stringliteral">&quot;FAILED&quot;</emphasis>;
16175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;messageLabel&#32;=&#32;<emphasis role="stringliteral">&quot;due&#32;to&#32;unexpected&#32;exception&#32;with&#32;&quot;</emphasis>;
16176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_stats.infoMessages.size()&#32;==&#32;1)
16177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;messageLabel&#32;+=&#32;&quot;message&quot;;
16178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_stats.infoMessages.size()&#32;&gt;&#32;1)
16179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;messageLabel&#32;+=&#32;&quot;messages&quot;;
16180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
16181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa87fa1f2a2a63290b61948002e2935377">ResultWas::FatalErrorCondition</link>:
16182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;colour&#32;=&#32;Colour::Error;
16183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;passOrFail&#32;=&#32;<emphasis role="stringliteral">&quot;FAILED&quot;</emphasis>;
16184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;messageLabel&#32;=&#32;<emphasis role="stringliteral">&quot;due&#32;to&#32;a&#32;fatal&#32;error&#32;condition&quot;</emphasis>;
16185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
16186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa8b6d3d5bc78d4e7a95543b6ecfbdb57d">ResultWas::DidntThrowException</link>:
16187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;colour&#32;=&#32;Colour::Error;
16188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;passOrFail&#32;=&#32;<emphasis role="stringliteral">&quot;FAILED&quot;</emphasis>;
16189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;messageLabel&#32;=&#32;<emphasis role="stringliteral">&quot;because&#32;no&#32;exception&#32;was&#32;thrown&#32;where&#32;one&#32;was&#32;expected&quot;</emphasis>;
16190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
16191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa30222063929ca1b6318faa78e8242f1c">ResultWas::Info</link>:
16192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;messageLabel&#32;=&#32;<emphasis role="stringliteral">&quot;info&quot;</emphasis>;
16193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
16194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa67e9d36ba0f04a60a19896834d840c21">ResultWas::Warning</link>:
16195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;messageLabel&#32;=&#32;<emphasis role="stringliteral">&quot;warning&quot;</emphasis>;
16196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
16197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efacecfc052e2499499b13304249303cc36">ResultWas::ExplicitFailure</link>:
16198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;passOrFail&#32;=&#32;<emphasis role="stringliteral">&quot;FAILED&quot;</emphasis>;
16199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;colour&#32;=&#32;Colour::Error;
16200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_stats.infoMessages.size()&#32;==&#32;1)
16201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;messageLabel&#32;=&#32;<emphasis role="stringliteral">&quot;explicitly&#32;with&#32;message&quot;</emphasis>;
16202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_stats.infoMessages.size()&#32;&gt;&#32;1)
16203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;messageLabel&#32;=&#32;<emphasis role="stringliteral">&quot;explicitly&#32;with&#32;messages&quot;</emphasis>;
16204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
16205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;These&#32;cases&#32;are&#32;here&#32;to&#32;prevent&#32;compiler&#32;warnings</emphasis>
16206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa65721dda02fe5efb522e7449e496608a">ResultWas::Unknown</link>:
16207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa1818f1b198f10b5734c405142b22025c">ResultWas::FailureBit</link>:
16208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efaa9107b7836cc7590ca668002f76d27c7">ResultWas::Exception</link>:
16209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;passOrFail&#32;=&#32;<emphasis role="stringliteral">&quot;**&#32;internal&#32;error&#32;**&quot;</emphasis>;
16210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;colour&#32;=&#32;Colour::Error;
16211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
16212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16213 &#32;&#32;&#32;&#32;}
16214 
16215 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;print()<emphasis role="keyword">&#32;const&#32;</emphasis>{
16216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printSourceInfo();
16217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stats.totals.assertions.total()&#32;&gt;&#32;0)&#32;{
16218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printResultType();
16219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printOriginalExpression();
16220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printReconstructedExpression();
16221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
16222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
16223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printMessage();
16225 &#32;&#32;&#32;&#32;}
16226 
16227 <emphasis role="keyword">private</emphasis>:
16228 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printResultType()<emphasis role="keyword">&#32;const&#32;</emphasis>{
16229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!passOrFail.empty())&#32;{
16230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Colour&#32;colourGuard(colour);
16231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;passOrFail&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:\n&quot;</emphasis>;
16232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16233 &#32;&#32;&#32;&#32;}
16234 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printOriginalExpression()<emphasis role="keyword">&#32;const&#32;</emphasis>{
16235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result.hasExpression())&#32;{
16236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Colour&#32;colourGuard(Colour::OriginalExpression);
16237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&quot;</emphasis>;
16238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;result.getExpressionInMacro();
16239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
16240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16241 &#32;&#32;&#32;&#32;}
16242 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printReconstructedExpression()<emphasis role="keyword">&#32;const&#32;</emphasis>{
16243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result.hasExpandedExpression())&#32;{
16244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;with&#32;expansion:\n&quot;</emphasis>;
16245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Colour&#32;colourGuard(Colour::ReconstructedExpression);
16246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;Column(result.getExpandedExpression()).indent(2)&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
16247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16248 &#32;&#32;&#32;&#32;}
16249 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printMessage()<emphasis role="keyword">&#32;const&#32;</emphasis>{
16250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!messageLabel.empty())
16251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;messageLabel&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
16252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;msg&#32;:&#32;messages)&#32;{
16253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;this&#32;assertion&#32;is&#32;a&#32;warning&#32;ignore&#32;any&#32;INFO&#32;messages</emphasis>
16254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(printInfoMessages&#32;||&#32;msg.type&#32;!=&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa30222063929ca1b6318faa78e8242f1c">ResultWas::Info</link>)
16255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;Column(msg.message).indent(2)&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
16256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16257 &#32;&#32;&#32;&#32;}
16258 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printSourceInfo()<emphasis role="keyword">&#32;const&#32;</emphasis>{
16259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Colour&#32;colourGuard(Colour::FileName);
16260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;result.getSourceInfo()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>;
16261 &#32;&#32;&#32;&#32;}
16262 
16263 &#32;&#32;&#32;&#32;std::ostream&amp;&#32;stream;
16264 &#32;&#32;&#32;&#32;AssertionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;stats;
16265 &#32;&#32;&#32;&#32;AssertionResult&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;result;
16266 &#32;&#32;&#32;&#32;Colour::Code&#32;colour;
16267 &#32;&#32;&#32;&#32;std::string&#32;passOrFail;
16268 &#32;&#32;&#32;&#32;std::string&#32;messageLabel;
16269 &#32;&#32;&#32;&#32;std::string&#32;message;
16270 &#32;&#32;&#32;&#32;std::vector&lt;MessageInfo&gt;&#32;messages;
16271 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;printInfoMessages;
16272 };
16273 
16274 std::size_t&#32;makeRatio(std::size_t&#32;number,&#32;std::size_t&#32;total)&#32;{
16275 &#32;&#32;&#32;&#32;std::size_t&#32;ratio&#32;=&#32;total&#32;&gt;&#32;0&#32;?&#32;CATCH_CONFIG_CONSOLE_WIDTH&#32;*&#32;number&#32;/&#32;total&#32;:&#32;0;
16276 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(ratio&#32;==&#32;0&#32;&amp;&amp;&#32;number&#32;&gt;&#32;0)&#32;?&#32;1&#32;:&#32;ratio;
16277 }
16278 
16279 std::size_t&amp;&#32;findMax(std::size_t&amp;&#32;i,&#32;std::size_t&amp;&#32;j,&#32;std::size_t&amp;&#32;k)&#32;{
16280 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&gt;&#32;j&#32;&amp;&amp;&#32;i&#32;&gt;&#32;k)
16281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i;
16282 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j&#32;&gt;&#32;k)
16283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;j;
16284 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;k;
16286 }
16287 
16288 <emphasis role="keyword">struct&#32;</emphasis>ColumnInfo&#32;{
16289 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;Justification&#32;{&#32;Left,&#32;Right&#32;};
16290 &#32;&#32;&#32;&#32;std::string&#32;name;
16291 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;width;
16292 &#32;&#32;&#32;&#32;Justification&#32;justification;
16293 };
16294 <emphasis role="keyword">struct&#32;</emphasis>ColumnBreak&#32;{};
16295 <emphasis role="keyword">struct&#32;</emphasis>RowBreak&#32;{};
16296 
16297 <emphasis role="keyword">class&#32;</emphasis>Duration&#32;{
16298 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;Unit&#32;{
16299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Auto,
16300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Nanoseconds,
16301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Microseconds,
16302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Milliseconds,
16303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Seconds,
16304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Minutes
16305 &#32;&#32;&#32;&#32;};
16306 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;uint64_t&#32;s_nanosecondsInAMicrosecond&#32;=&#32;1000;
16307 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;uint64_t&#32;s_nanosecondsInAMillisecond&#32;=&#32;1000&#32;*&#32;s_nanosecondsInAMicrosecond;
16308 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;uint64_t&#32;s_nanosecondsInASecond&#32;=&#32;1000&#32;*&#32;s_nanosecondsInAMillisecond;
16309 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;uint64_t&#32;s_nanosecondsInAMinute&#32;=&#32;60&#32;*&#32;s_nanosecondsInASecond;
16310 
16311 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;m_inNanoseconds;
16312 &#32;&#32;&#32;&#32;Unit&#32;m_units;
16313 
16314 <emphasis role="keyword">public</emphasis>:
16315 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;Duration(<emphasis role="keywordtype">double</emphasis>&#32;inNanoseconds,&#32;Unit&#32;units&#32;=&#32;Unit::Auto)
16316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_inNanoseconds(inNanoseconds),
16317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_units(units)&#32;{
16318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_units&#32;==&#32;Unit::Auto)&#32;{
16319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_inNanoseconds&#32;&lt;&#32;s_nanosecondsInAMicrosecond)
16320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_units&#32;=&#32;Unit::Nanoseconds;
16321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_inNanoseconds&#32;&lt;&#32;s_nanosecondsInAMillisecond)
16322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_units&#32;=&#32;Unit::Microseconds;
16323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_inNanoseconds&#32;&lt;&#32;s_nanosecondsInASecond)
16324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_units&#32;=&#32;Unit::Milliseconds;
16325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_inNanoseconds&#32;&lt;&#32;s_nanosecondsInAMinute)
16326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_units&#32;=&#32;Unit::Seconds;
16327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_units&#32;=&#32;Unit::Minutes;
16329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16330 
16331 &#32;&#32;&#32;&#32;}
16332 
16333 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>()&#32;const&#32;-&gt;&#32;<emphasis role="keywordtype">double</emphasis>&#32;{
16334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_units)&#32;{
16335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Unit::Microseconds:
16336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_inNanoseconds&#32;/&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(s_nanosecondsInAMicrosecond);
16337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Unit::Milliseconds:
16338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_inNanoseconds&#32;/&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(s_nanosecondsInAMillisecond);
16339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Unit::Seconds:
16340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_inNanoseconds&#32;/&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(s_nanosecondsInASecond);
16341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Unit::Minutes:
16342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_inNanoseconds&#32;/&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(s_nanosecondsInAMinute);
16343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
16344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_inNanoseconds;
16345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16346 &#32;&#32;&#32;&#32;}
16347 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;unitsAsString()&#32;const&#32;-&gt;&#32;std::<emphasis role="keywordtype">string</emphasis>&#32;{
16348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_units)&#32;{
16349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Unit::Nanoseconds:
16350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;ns&quot;</emphasis>;
16351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Unit::Microseconds:
16352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;us&quot;</emphasis>;
16353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Unit::Milliseconds:
16354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;ms&quot;</emphasis>;
16355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Unit::Seconds:
16356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;s&quot;</emphasis>;
16357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Unit::Minutes:
16358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;m&quot;</emphasis>;
16359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
16360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;**&#32;internal&#32;error&#32;**&quot;</emphasis>;
16361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16362 
16363 &#32;&#32;&#32;&#32;}
16364 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_catch_1a8c8ea1f66bc1cdc3e1254ed7fa57c06d">operator &lt;&lt; </link>(std::ostream&amp;&#32;os,&#32;Duration&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;duration)&#32;-&gt;&#32;std::ostream&amp;&#32;{
16365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;duration.value()&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;&lt;&lt;&#32;duration.unitsAsString();
16366 &#32;&#32;&#32;&#32;}
16367 };
16368 }&#32;<emphasis role="comment">//&#32;end&#32;anon&#32;namespace</emphasis>
16369 
16370 <emphasis role="keyword">class&#32;</emphasis>TablePrinter&#32;{
16371 &#32;&#32;&#32;&#32;std::ostream&amp;&#32;m_os;
16372 &#32;&#32;&#32;&#32;std::vector&lt;ColumnInfo&gt;&#32;m_columnInfos;
16373 &#32;&#32;&#32;&#32;std::ostringstream&#32;m_oss;
16374 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;m_currentColumn&#32;=&#32;-1;
16375 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;m_isOpen&#32;=&#32;<emphasis role="keyword">false</emphasis>;
16376 
16377 <emphasis role="keyword">public</emphasis>:
16378 &#32;&#32;&#32;&#32;TablePrinter(&#32;std::ostream&amp;&#32;os,&#32;std::vector&lt;ColumnInfo&gt;&#32;columnInfos&#32;)
16379 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_os(&#32;os&#32;),
16380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_columnInfos(&#32;std::move(&#32;columnInfos&#32;)&#32;)&#32;{}
16381 
16382 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;columnInfos()&#32;const&#32;-&gt;&#32;std::vector&lt;ColumnInfo&gt;&#32;const&amp;&#32;{
16383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_columnInfos;
16384 &#32;&#32;&#32;&#32;}
16385 
16386 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;open()&#32;{
16387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!m_isOpen)&#32;{
16388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_isOpen&#32;=&#32;<emphasis role="keyword">true</emphasis>;
16389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;&lt;&lt;&#32;RowBreak();
16390 
16391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Columns&#32;headerCols;
16392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Spacer&#32;spacer(2);
16393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;info&#32;:&#32;m_columnInfos)&#32;{
16394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;headerCols&#32;+=&#32;Column(info.name).width(static_cast&lt;std::size_t&gt;(info.width&#32;-&#32;2));
16395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;headerCols&#32;+=&#32;spacer;
16396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;headerCols&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
16398 
16399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;<link linkend="_struct_catch_1_1true__given">Catch::getLineOfChars</link>&lt;<emphasis role="charliteral">&apos;-&apos;</emphasis>&gt;()&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
16400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16401 &#32;&#32;&#32;&#32;}
16402 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;close()&#32;{
16403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_isOpen)&#32;{
16404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;&lt;&lt;&#32;RowBreak();
16405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;std::endl;
16406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_isOpen&#32;=&#32;<emphasis role="keyword">false</emphasis>;
16407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16408 &#32;&#32;&#32;&#32;}
16409 
16410 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
16411 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;TablePrinter&amp;&#32;<link linkend="_namespace_catch_1a8c8ea1f66bc1cdc3e1254ed7fa57c06d">operator &lt;&lt; </link>(TablePrinter&amp;&#32;tp,&#32;T&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;value)&#32;{
16412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tp.m_oss&#32;&lt;&lt;&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>;
16413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tp;
16414 &#32;&#32;&#32;&#32;}
16415 
16416 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;TablePrinter&amp;&#32;<link linkend="_namespace_catch_1a8c8ea1f66bc1cdc3e1254ed7fa57c06d">operator &lt;&lt; </link>(TablePrinter&amp;&#32;tp,&#32;ColumnBreak)&#32;{
16417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;colStr&#32;=&#32;tp.m_oss.str();
16418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;strSize&#32;=&#32;colStr.size();
16419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tp.m_oss.str(<emphasis role="stringliteral">&quot;&quot;</emphasis>);
16420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tp.open();
16421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tp.m_currentColumn&#32;==&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(tp.m_columnInfos.size()&#32;-&#32;1))&#32;{
16422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tp.m_currentColumn&#32;=&#32;-1;
16423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tp.m_os&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
16424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tp.m_currentColumn++;
16426 
16427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;colInfo&#32;=&#32;tp.m_columnInfos[tp.m_currentColumn];
16428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;padding&#32;=&#32;(strSize&#32;+&#32;1&#32;&lt;&#32;static_cast&lt;std::size_t&gt;(colInfo.width))
16429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;std::string(colInfo.width&#32;-&#32;(strSize&#32;+&#32;1),&#32;&apos;&#32;&apos;)
16430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;std::string();
16431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(colInfo.justification&#32;==&#32;ColumnInfo::Left)
16432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tp.m_os&#32;&lt;&lt;&#32;colStr&#32;&lt;&lt;&#32;padding&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>;
16433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tp.m_os&#32;&lt;&lt;&#32;padding&#32;&lt;&lt;&#32;colStr&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>;
16435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tp;
16436 &#32;&#32;&#32;&#32;}
16437 
16438 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;TablePrinter&amp;&#32;<link linkend="_namespace_catch_1a8c8ea1f66bc1cdc3e1254ed7fa57c06d">operator &lt;&lt; </link>(TablePrinter&amp;&#32;tp,&#32;RowBreak)&#32;{
16439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tp.m_currentColumn&#32;&gt;&#32;0)&#32;{
16440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tp.m_os&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
16441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tp.m_currentColumn&#32;=&#32;-1;
16442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tp;
16444 &#32;&#32;&#32;&#32;}
16445 };
16446 
16447 ConsoleReporter::ConsoleReporter(ReporterConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;config)
16448 &#32;&#32;&#32;&#32;:&#32;StreamingReporterBase(config),
16449 &#32;&#32;&#32;&#32;m_tablePrinter(new&#32;TablePrinter(config.stream(),
16450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;config]()&#32;-&gt;&#32;std::vector&lt;ColumnInfo&gt;&#32;{
16451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(config.fullConfig()-&gt;benchmarkNoAnalysis())
16452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>{
16454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="stringliteral">&quot;benchmark&#32;name&quot;</emphasis>,&#32;CATCH_CONFIG_CONSOLE_WIDTH&#32;-&#32;43,&#32;ColumnInfo::Left&#32;},
16455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;samples&quot;</emphasis>,&#32;14,&#32;ColumnInfo::Right&#32;},
16456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="stringliteral">&quot;&#32;&#32;iterations&quot;</emphasis>,&#32;14,&#32;ColumnInfo::Right&#32;},
16457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mean&quot;</emphasis>,&#32;14,&#32;ColumnInfo::Right&#32;}
16458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
16459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>{
16463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="stringliteral">&quot;benchmark&#32;name&quot;</emphasis>,&#32;CATCH_CONFIG_CONSOLE_WIDTH&#32;-&#32;43,&#32;ColumnInfo::Left&#32;},
16464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="stringliteral">&quot;samples&#32;&#32;&#32;&#32;&#32;&#32;mean&#32;&#32;&#32;&#32;&#32;&#32;&#32;std&#32;dev&quot;</emphasis>,&#32;14,&#32;ColumnInfo::Right&#32;},
16465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="stringliteral">&quot;iterations&#32;&#32;&#32;low&#32;mean&#32;&#32;&#32;low&#32;std&#32;dev&quot;</emphasis>,&#32;14,&#32;ColumnInfo::Right&#32;},
16466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="stringliteral">&quot;estimated&#32;&#32;&#32;&#32;high&#32;mean&#32;&#32;high&#32;std&#32;dev&quot;</emphasis>,&#32;14,&#32;ColumnInfo::Right&#32;}
16467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
16468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16469 &#32;&#32;&#32;&#32;}()))&#32;{}
16470 ConsoleReporter::~ConsoleReporter()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
16471 
16472 std::string&#32;ConsoleReporter::getDescription()&#32;{
16473 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Reports&#32;test&#32;results&#32;as&#32;plain&#32;lines&#32;of&#32;text&quot;</emphasis>;
16474 }
16475 
16476 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::noMatchingTestCases(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;spec)&#32;{
16477 &#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;No&#32;test&#32;cases&#32;matched&#32;&apos;&quot;</emphasis>&#32;&lt;&lt;&#32;spec&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>&#32;&lt;&lt;&#32;std::endl;
16478 }
16479 
16480 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::reportInvalidArguments(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;arg){
16481 &#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;Filter:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;arg&#32;&lt;&lt;&#32;std::endl;
16482 }
16483 
16484 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::assertionStarting(AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;{}
16485 
16486 <emphasis role="keywordtype">bool</emphasis>&#32;ConsoleReporter::assertionEnded(AssertionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_assertionStats)&#32;{
16487 &#32;&#32;&#32;&#32;AssertionResult&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;result&#32;=&#32;_assertionStats.assertionResult;
16488 
16489 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;includeResults&#32;=&#32;m_config-&gt;includeSuccessfulResults()&#32;||&#32;!result.isOk();
16490 
16491 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Drop&#32;out&#32;if&#32;result&#32;was&#32;successful&#32;but&#32;we&apos;re&#32;not&#32;printing&#32;them.</emphasis>
16492 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!includeResults&#32;&amp;&amp;&#32;result.getResultType()&#32;!=&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa67e9d36ba0f04a60a19896834d840c21">ResultWas::Warning</link>)
16493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
16494 
16495 &#32;&#32;&#32;&#32;lazyPrint();
16496 
16497 &#32;&#32;&#32;&#32;ConsoleAssertionPrinter&#32;printer(stream,&#32;_assertionStats,&#32;includeResults);
16498 &#32;&#32;&#32;&#32;printer.print();
16499 &#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;std::endl;
16500 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
16501 }
16502 
16503 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::sectionStarting(SectionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_sectionInfo)&#32;{
16504 &#32;&#32;&#32;&#32;m_tablePrinter-&gt;close();
16505 &#32;&#32;&#32;&#32;m_headerPrinted&#32;=&#32;<emphasis role="keyword">false</emphasis>;
16506 &#32;&#32;&#32;&#32;StreamingReporterBase::sectionStarting(_sectionInfo);
16507 }
16508 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::sectionEnded(SectionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_sectionStats)&#32;{
16509 &#32;&#32;&#32;&#32;m_tablePrinter-&gt;close();
16510 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_sectionStats.missingAssertions)&#32;{
16511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lazyPrint();
16512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Colour&#32;colour(Colour::ResultError);
16513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_sectionStack.size()&#32;&gt;&#32;1)
16514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\nNo&#32;assertions&#32;in&#32;section&quot;</emphasis>;
16515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\nNo&#32;assertions&#32;in&#32;test&#32;case&quot;</emphasis>;
16517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&apos;&quot;</emphasis>&#32;&lt;&lt;&#32;_sectionStats.sectionInfo.name&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&apos;\n&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
16518 &#32;&#32;&#32;&#32;}
16519 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dur&#32;=&#32;_sectionStats.durationInSeconds;
16520 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(shouldShowDuration(*m_config,&#32;dur))&#32;{
16521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;getFormattedDuration(dur)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;s:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;_sectionStats.sectionInfo.name&#32;&lt;&lt;&#32;std::endl;
16522 &#32;&#32;&#32;&#32;}
16523 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_headerPrinted)&#32;{
16524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_headerPrinted&#32;=&#32;<emphasis role="keyword">false</emphasis>;
16525 &#32;&#32;&#32;&#32;}
16526 &#32;&#32;&#32;&#32;StreamingReporterBase::sectionEnded(_sectionStats);
16527 }
16528 
16529 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</emphasis>
16530 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::benchmarkPreparing(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name)&#32;{
16531 &#32;&#32;&#32;&#32;lazyPrintWithoutClosingBenchmarkTable();
16532 
16533 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;nameCol&#32;=&#32;Column(name).width(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(m_tablePrinter-&gt;columnInfos()[0].width&#32;-&#32;2));
16534 
16535 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;firstLine&#32;=&#32;<emphasis role="keyword">true</emphasis>;
16536 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;line&#32;:&#32;nameCol)&#32;{
16537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!firstLine)
16538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*m_tablePrinter)&#32;&lt;&lt;&#32;ColumnBreak()&#32;&lt;&lt;&#32;ColumnBreak()&#32;&lt;&lt;&#32;ColumnBreak();
16539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;firstLine&#32;=&#32;<emphasis role="keyword">false</emphasis>;
16541 
16542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*m_tablePrinter)&#32;&lt;&lt;&#32;line&#32;&lt;&lt;&#32;ColumnBreak();
16543 &#32;&#32;&#32;&#32;}
16544 }
16545 
16546 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::benchmarkStarting(BenchmarkInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;info)&#32;{
16547 &#32;&#32;&#32;&#32;(*m_tablePrinter)&#32;&lt;&lt;&#32;info.samples&#32;&lt;&lt;&#32;ColumnBreak()
16548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;info.iterations&#32;&lt;&lt;&#32;ColumnBreak();
16549 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!m_config-&gt;benchmarkNoAnalysis())
16550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*m_tablePrinter)&#32;&lt;&lt;&#32;Duration(info.estimatedDuration)&#32;&lt;&lt;&#32;ColumnBreak();
16551 }
16552 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::benchmarkEnded(BenchmarkStats&lt;&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;stats)&#32;{
16553 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_config-&gt;benchmarkNoAnalysis())
16554 &#32;&#32;&#32;&#32;{
16555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*m_tablePrinter)&#32;&lt;&lt;&#32;Duration(stats.mean.point.count())&#32;&lt;&lt;&#32;ColumnBreak();
16556 &#32;&#32;&#32;&#32;}
16557 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16558 &#32;&#32;&#32;&#32;{
16559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*m_tablePrinter)&#32;&lt;&lt;&#32;ColumnBreak()
16560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Duration(stats.mean.point.count())&#32;&lt;&lt;&#32;ColumnBreak()
16561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Duration(stats.mean.lower_bound.count())&#32;&lt;&lt;&#32;ColumnBreak()
16562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Duration(stats.mean.upper_bound.count())&#32;&lt;&lt;&#32;ColumnBreak()&#32;&lt;&lt;&#32;ColumnBreak()
16563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Duration(stats.standardDeviation.point.count())&#32;&lt;&lt;&#32;ColumnBreak()
16564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Duration(stats.standardDeviation.lower_bound.count())&#32;&lt;&lt;&#32;ColumnBreak()
16565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Duration(stats.standardDeviation.upper_bound.count())&#32;&lt;&lt;&#32;ColumnBreak()&#32;&lt;&lt;&#32;ColumnBreak()&#32;&lt;&lt;&#32;ColumnBreak()&#32;&lt;&lt;&#32;ColumnBreak()&#32;&lt;&lt;&#32;ColumnBreak();
16566 &#32;&#32;&#32;&#32;}
16567 }
16568 
16569 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::benchmarkFailed(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;error)&#32;{
16570 &#32;&#32;&#32;&#32;Colour&#32;colour(Colour::Red);
16571 &#32;&#32;&#32;&#32;(*m_tablePrinter)
16572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Benchmark&#32;failed&#32;(&quot;</emphasis>&#32;&lt;&lt;&#32;error&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;)&apos;</emphasis>
16573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;ColumnBreak()&#32;&lt;&lt;&#32;RowBreak();
16574 }
16575 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_ENABLE_BENCHMARKING</emphasis>
16576 
16577 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::testCaseEnded(TestCaseStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_testCaseStats)&#32;{
16578 &#32;&#32;&#32;&#32;m_tablePrinter-&gt;close();
16579 &#32;&#32;&#32;&#32;StreamingReporterBase::testCaseEnded(_testCaseStats);
16580 &#32;&#32;&#32;&#32;m_headerPrinted&#32;=&#32;<emphasis role="keyword">false</emphasis>;
16581 }
16582 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::testGroupEnded(TestGroupStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_testGroupStats)&#32;{
16583 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(currentGroupInfo.used)&#32;{
16584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printSummaryDivider();
16585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Summary&#32;for&#32;group&#32;&apos;&quot;</emphasis>&#32;&lt;&lt;&#32;_testGroupStats.groupInfo.name&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&apos;:\n&quot;</emphasis>;
16586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printTotals(_testGroupStats.totals);
16587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;std::endl;
16588 &#32;&#32;&#32;&#32;}
16589 &#32;&#32;&#32;&#32;StreamingReporterBase::testGroupEnded(_testGroupStats);
16590 }
16591 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::testRunEnded(TestRunStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_testRunStats)&#32;{
16592 &#32;&#32;&#32;&#32;printTotalsDivider(_testRunStats.totals);
16593 &#32;&#32;&#32;&#32;printTotals(_testRunStats.totals);
16594 &#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;std::endl;
16595 &#32;&#32;&#32;&#32;StreamingReporterBase::testRunEnded(_testRunStats);
16596 }
16597 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::testRunStarting(TestRunInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_testInfo)&#32;{
16598 &#32;&#32;&#32;&#32;StreamingReporterBase::testRunStarting(_testInfo);
16599 &#32;&#32;&#32;&#32;printTestFilters();
16600 }
16601 
16602 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::lazyPrint()&#32;{
16603 
16604 &#32;&#32;&#32;&#32;m_tablePrinter-&gt;close();
16605 &#32;&#32;&#32;&#32;lazyPrintWithoutClosingBenchmarkTable();
16606 }
16607 
16608 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::lazyPrintWithoutClosingBenchmarkTable()&#32;{
16609 
16610 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!currentTestRunInfo.used)
16611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lazyPrintRunInfo();
16612 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!currentGroupInfo.used)
16613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lazyPrintGroupInfo();
16614 
16615 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!m_headerPrinted)&#32;{
16616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printTestCaseAndSectionHeader();
16617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_headerPrinted&#32;=&#32;<emphasis role="keyword">true</emphasis>;
16618 &#32;&#32;&#32;&#32;}
16619 }
16620 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::lazyPrintRunInfo()&#32;{
16621 &#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;&apos;\n&apos;&#32;&lt;&lt;&#32;getLineOfChars&lt;&apos;~&apos;&gt;()&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
16622 &#32;&#32;&#32;&#32;Colour&#32;colour(Colour::SecondaryText);
16623 &#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;currentTestRunInfo-&gt;name
16624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;is&#32;a&#32;Catch&#32;v&quot;</emphasis>&#32;&lt;&lt;&#32;libraryVersion()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;host&#32;application.\n&quot;</emphasis>
16625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Run&#32;with&#32;-?&#32;for&#32;options\n\n&quot;</emphasis>;
16626 
16627 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_config-&gt;rngSeed()&#32;!=&#32;0)
16628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Randomness&#32;seeded&#32;to:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;m_config-&gt;rngSeed()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n\n&quot;</emphasis>;
16629 
16630 &#32;&#32;&#32;&#32;currentTestRunInfo.used&#32;=&#32;<emphasis role="keyword">true</emphasis>;
16631 }
16632 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::lazyPrintGroupInfo()&#32;{
16633 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!currentGroupInfo-&gt;name.empty()&#32;&amp;&amp;&#32;currentGroupInfo-&gt;groupsCounts&#32;&gt;&#32;1)&#32;{
16634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printClosedHeader(<emphasis role="stringliteral">&quot;Group:&#32;&quot;</emphasis>&#32;+&#32;currentGroupInfo-&gt;name);
16635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentGroupInfo.used&#32;=&#32;<emphasis role="keyword">true</emphasis>;
16636 &#32;&#32;&#32;&#32;}
16637 }
16638 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::printTestCaseAndSectionHeader()&#32;{
16639 &#32;&#32;&#32;&#32;assert(!m_sectionStack.empty());
16640 &#32;&#32;&#32;&#32;printOpenHeader(currentTestCaseInfo-&gt;name);
16641 
16642 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_sectionStack.size()&#32;&gt;&#32;1)&#32;{
16643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Colour&#32;colourGuard(Colour::Headers);
16644 
16645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
16646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;=&#32;m_sectionStack.begin()&#32;+&#32;1,&#32;<emphasis role="comment">//&#32;Skip&#32;first&#32;section&#32;(test&#32;case)</emphasis>
16647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;itEnd&#32;=&#32;m_sectionStack.end();
16648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;it&#32;!=&#32;itEnd;&#32;++it)
16649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printHeaderString(it-&gt;name,&#32;2);
16650 &#32;&#32;&#32;&#32;}
16651 
16652 &#32;&#32;&#32;&#32;SourceLineInfo&#32;lineInfo&#32;=&#32;m_sectionStack.back().lineInfo;
16653 
16654 &#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;getLineOfChars&lt;<emphasis role="charliteral">&apos;-&apos;</emphasis>&gt;()&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
16655 &#32;&#32;&#32;&#32;Colour&#32;colourGuard(Colour::FileName);
16656 &#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;lineInfo&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
16657 &#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;getLineOfChars&lt;<emphasis role="charliteral">&apos;.&apos;</emphasis>&gt;()&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;std::endl;
16658 }
16659 
16660 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::printClosedHeader(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_name)&#32;{
16661 &#32;&#32;&#32;&#32;printOpenHeader(_name);
16662 &#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;getLineOfChars&lt;<emphasis role="charliteral">&apos;.&apos;</emphasis>&gt;()&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
16663 }
16664 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::printOpenHeader(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_name)&#32;{
16665 &#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;getLineOfChars&lt;<emphasis role="charliteral">&apos;-&apos;</emphasis>&gt;()&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
16666 &#32;&#32;&#32;&#32;{
16667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Colour&#32;colourGuard(Colour::Headers);
16668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printHeaderString(_name);
16669 &#32;&#32;&#32;&#32;}
16670 }
16671 
16672 <emphasis role="comment">//&#32;if&#32;string&#32;has&#32;a&#32;:&#32;in&#32;first&#32;line&#32;will&#32;set&#32;indent&#32;to&#32;follow&#32;it&#32;on</emphasis>
16673 <emphasis role="comment">//&#32;subsequent&#32;lines</emphasis>
16674 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::printHeaderString(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_string,&#32;std::size_t&#32;indent)&#32;{
16675 &#32;&#32;&#32;&#32;std::size_t&#32;i&#32;=&#32;_string.find(<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>);
16676 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;!=&#32;std::string::npos)
16677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;+=&#32;2;
16678 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;=&#32;0;
16680 &#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;Column(_string).indent(indent&#32;+&#32;i).initialIndent(indent)&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
16681 }
16682 
16683 <emphasis role="keyword">struct&#32;</emphasis>SummaryColumn&#32;{
16684 
16685 &#32;&#32;&#32;&#32;SummaryColumn(&#32;std::string&#32;_label,&#32;Colour::Code&#32;_colour&#32;)
16686 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;label(&#32;std::move(&#32;_label&#32;)&#32;),
16687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;colour(&#32;_colour&#32;)&#32;{}
16688 &#32;&#32;&#32;&#32;SummaryColumn&#32;addRow(&#32;std::size_t&#32;count&#32;)&#32;{
16689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReusableStringStream&#32;rss;
16690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;count;
16691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;row&#32;=&#32;rss.str();
16692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;oldRow&#32;:&#32;rows)&#32;{
16693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(oldRow.size()&#32;&lt;&#32;row.size())
16694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oldRow&#32;=&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;+&#32;oldRow;
16695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(oldRow.size()&#32;&gt;&#32;row.size())
16696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;row&#32;=&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;+&#32;row;
16697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rows.push_back(row);
16699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
16700 &#32;&#32;&#32;&#32;}
16701 
16702 &#32;&#32;&#32;&#32;std::string&#32;label;
16703 &#32;&#32;&#32;&#32;Colour::Code&#32;colour;
16704 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;rows;
16705 
16706 };
16707 
16708 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::printTotals(&#32;Totals&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;totals&#32;)&#32;{
16709 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(totals.testCases.total()&#32;==&#32;0)&#32;{
16710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;Colour(Colour::Warning)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;No&#32;tests&#32;ran\n&quot;</emphasis>;
16711 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(totals.assertions.total()&#32;&gt;&#32;0&#32;&amp;&amp;&#32;totals.testCases.allPassed())&#32;{
16712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;Colour(Colour::ResultSuccess)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;All&#32;tests&#32;passed&quot;</emphasis>;
16713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;(&quot;</emphasis>
16714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;pluralise(totals.assertions.passed,&#32;<emphasis role="stringliteral">&quot;assertion&quot;</emphasis>)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;in&#32;&quot;</emphasis>
16715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;pluralise(totals.testCases.passed,&#32;<emphasis role="stringliteral">&quot;test&#32;case&quot;</emphasis>)&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;)&apos;</emphasis>
16716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
16717 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
16718 
16719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;SummaryColumn&gt;&#32;columns;
16720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;columns.push_back(SummaryColumn(<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;Colour::None)
16721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.addRow(totals.testCases.total())
16722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.addRow(totals.assertions.total()));
16723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;columns.push_back(SummaryColumn(<emphasis role="stringliteral">&quot;passed&quot;</emphasis>,&#32;Colour::Success)
16724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.addRow(totals.testCases.passed)
16725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.addRow(totals.assertions.passed));
16726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;columns.push_back(SummaryColumn(<emphasis role="stringliteral">&quot;failed&quot;</emphasis>,&#32;Colour::ResultError)
16727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.addRow(totals.testCases.failed)
16728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.addRow(totals.assertions.failed));
16729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;columns.push_back(SummaryColumn(<emphasis role="stringliteral">&quot;failed&#32;as&#32;expected&quot;</emphasis>,&#32;Colour::ResultExpectedFailure)
16730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.addRow(totals.testCases.failedButOk)
16731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.addRow(totals.assertions.failedButOk));
16732 
16733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printSummaryRow(<emphasis role="stringliteral">&quot;test&#32;cases&quot;</emphasis>,&#32;columns,&#32;0);
16734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printSummaryRow(<emphasis role="stringliteral">&quot;assertions&quot;</emphasis>,&#32;columns,&#32;1);
16735 &#32;&#32;&#32;&#32;}
16736 }
16737 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::printSummaryRow(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;label,&#32;std::vector&lt;SummaryColumn&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;cols,&#32;std::size_t&#32;row)&#32;{
16738 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;col&#32;:&#32;cols)&#32;{
16739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>&#32;=&#32;col.rows[row];
16740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(col.label.empty())&#32;{
16741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;label&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>;
16742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;!=&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>)
16743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>;
16744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;Colour(Colour::Warning)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;-&#32;none&#32;-&quot;</emphasis>;
16746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;!=&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>)&#32;{
16747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;Colour(Colour::LightGrey)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;|&#32;&quot;</emphasis>;
16748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;Colour(col.colour)
16749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<link linkend="_namespace_catch_1_1_generators_1a3b2efc97978cf37951b75394aae1a3fb">value</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;&lt;&lt;&#32;col.label;
16750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16751 &#32;&#32;&#32;&#32;}
16752 &#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
16753 }
16754 
16755 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::printTotalsDivider(Totals&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;totals)&#32;{
16756 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(totals.testCases.total()&#32;&gt;&#32;0)&#32;{
16757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;failedRatio&#32;=&#32;makeRatio(totals.testCases.failed,&#32;totals.testCases.total());
16758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;failedButOkRatio&#32;=&#32;makeRatio(totals.testCases.failedButOk,&#32;totals.testCases.total());
16759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;passedRatio&#32;=&#32;makeRatio(totals.testCases.passed,&#32;totals.testCases.total());
16760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(failedRatio&#32;+&#32;failedButOkRatio&#32;+&#32;passedRatio&#32;&lt;&#32;CATCH_CONFIG_CONSOLE_WIDTH&#32;-&#32;1)
16761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;findMax(failedRatio,&#32;failedButOkRatio,&#32;passedRatio)++;
16762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(failedRatio&#32;+&#32;failedButOkRatio&#32;+&#32;passedRatio&#32;&gt;&#32;CATCH_CONFIG_CONSOLE_WIDTH&#32;-&#32;1)
16763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;findMax(failedRatio,&#32;failedButOkRatio,&#32;passedRatio)--;
16764 
16765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;Colour(Colour::Error)&#32;&lt;&lt;&#32;std::string(failedRatio,&#32;<emphasis role="charliteral">&apos;=&apos;</emphasis>);
16766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;Colour(Colour::ResultExpectedFailure)&#32;&lt;&lt;&#32;std::string(failedButOkRatio,&#32;<emphasis role="charliteral">&apos;=&apos;</emphasis>);
16767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(totals.testCases.allPassed())
16768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;Colour(Colour::ResultSuccess)&#32;&lt;&lt;&#32;std::string(passedRatio,&#32;<emphasis role="charliteral">&apos;=&apos;</emphasis>);
16769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;Colour(Colour::Success)&#32;&lt;&lt;&#32;std::string(passedRatio,&#32;<emphasis role="charliteral">&apos;=&apos;</emphasis>);
16771 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
16772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;Colour(Colour::Warning)&#32;&lt;&lt;&#32;std::string(CATCH_CONFIG_CONSOLE_WIDTH&#32;-&#32;1,&#32;<emphasis role="charliteral">&apos;=&apos;</emphasis>);
16773 &#32;&#32;&#32;&#32;}
16774 &#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
16775 }
16776 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::printSummaryDivider()&#32;{
16777 &#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;getLineOfChars&lt;<emphasis role="charliteral">&apos;-&apos;</emphasis>&gt;()&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
16778 }
16779 
16780 <emphasis role="keywordtype">void</emphasis>&#32;ConsoleReporter::printTestFilters()&#32;{
16781 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_config-&gt;testSpec().hasFilters())&#32;{
16782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Colour&#32;guard(Colour::BrightYellow);
16783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Filters:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;serializeFilters(m_config-&gt;getTestsOrTags())&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
16784 &#32;&#32;&#32;&#32;}
16785 }
16786 
16787 CATCH_REGISTER_REPORTER(<emphasis role="stringliteral">&quot;console&quot;</emphasis>,&#32;ConsoleReporter)
16788 
16789 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
16790 
16791 <emphasis role="preprocessor">#if&#32;defined(_MSC_VER)</emphasis>
16792 <emphasis role="preprocessor">#pragma&#32;warning(pop)</emphasis>
16793 <emphasis role="preprocessor">#endif</emphasis>
16794 
16795 <emphasis role="preprocessor">#if&#32;defined(__clang__)</emphasis>
16796 <emphasis role="preprocessor">#&#32;&#32;pragma&#32;clang&#32;diagnostic&#32;pop</emphasis>
16797 <emphasis role="preprocessor">#endif</emphasis>
16798 <emphasis role="comment">//&#32;end&#32;catch_reporter_console.cpp</emphasis>
16799 <emphasis role="comment">//&#32;start&#32;catch_reporter_junit.cpp</emphasis>
16800 
16801 <emphasis role="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>
16802 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
16803 <emphasis role="preprocessor">#include&#32;&lt;ctime&gt;</emphasis>
16804 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
16805 <emphasis role="preprocessor">#include&#32;&lt;iomanip&gt;</emphasis>
16806 
16807 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
16808 
16809 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>{
16810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;getCurrentTimestamp()&#32;{
16811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Beware,&#32;this&#32;is&#32;not&#32;reentrant&#32;because&#32;of&#32;backward&#32;compatibility&#32;issues</emphasis>
16812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Also,&#32;UTC&#32;only,&#32;again&#32;because&#32;of&#32;backward&#32;compatibility&#32;(%z&#32;is&#32;C++11)</emphasis>
16813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;time_t&#32;rawtime;
16814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::time(&amp;rawtime);
16815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;timeStampSize&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="stringliteral">&quot;2017-01-16T17:06:45Z&quot;</emphasis>);
16816 
16817 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
16818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::tm&#32;timeInfo&#32;=&#32;{};
16819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;gmtime_s(&amp;timeInfo,&#32;&amp;rawtime);
16820 <emphasis role="preprocessor">#else</emphasis>
16821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::tm*&#32;timeInfo;
16822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;timeInfo&#32;=&#32;std::gmtime(&amp;rawtime);
16823 <emphasis role="preprocessor">#endif</emphasis>
16824 
16825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;timeStamp[timeStampSize];
16826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;<emphasis role="keyword">const</emphasis>&#32;fmt&#32;=&#32;<emphasis role="stringliteral">&quot;%Y-%m-%dT%H:%M:%SZ&quot;</emphasis>;
16827 
16828 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
16829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::strftime(timeStamp,&#32;timeStampSize,&#32;fmt,&#32;&amp;timeInfo);
16830 <emphasis role="preprocessor">#else</emphasis>
16831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::strftime(timeStamp,&#32;timeStampSize,&#32;fmt,&#32;timeInfo);
16832 <emphasis role="preprocessor">#endif</emphasis>
16833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string(timeStamp,&#32;timeStampSize-1);
16834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16835 
16836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;fileNameTag(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;std::string&gt;&#32;&amp;tags)&#32;{
16837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;std::find_if(begin(tags),
16838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;end(tags),
16839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[]&#32;(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;tag)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;tag.front()&#32;==&#32;<emphasis role="charliteral">&apos;#&apos;</emphasis>;&#32;});
16840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it&#32;!=&#32;tags.end())
16841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it-&gt;substr(1);
16842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string();
16843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16844 
16845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Formats&#32;the&#32;duration&#32;in&#32;seconds&#32;to&#32;3&#32;decimal&#32;places.</emphasis>
16846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;done&#32;because&#32;some&#32;genius&#32;defined&#32;Maven&#32;Surefire&#32;schema</emphasis>
16847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;in&#32;a&#32;way&#32;that&#32;only&#32;accepts&#32;3&#32;decimal&#32;places,&#32;and&#32;tools&#32;like</emphasis>
16848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Jenkins&#32;use&#32;that&#32;schema&#32;for&#32;validation&#32;JUnit&#32;reporter&#32;output.</emphasis>
16849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;formatDuration(&#32;<emphasis role="keywordtype">double</emphasis>&#32;seconds&#32;)&#32;{
16850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReusableStringStream&#32;rss;
16851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;std::fixed&#32;&lt;&lt;&#32;std::setprecision(&#32;3&#32;)&#32;&lt;&lt;&#32;seconds;
16852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rss.str();
16853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16854 
16855 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;anonymous&#32;namespace</emphasis>
16856 
16857 &#32;&#32;&#32;&#32;JunitReporter::JunitReporter(&#32;ReporterConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_config&#32;)
16858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&#32;&#32;CumulativeReporterBase(&#32;_config&#32;),
16859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml(&#32;_config.stream()&#32;)
16860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporterPrefs.shouldRedirectStdOut&#32;=&#32;<emphasis role="keyword">true</emphasis>;
16862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporterPrefs.shouldReportAllAssertions&#32;=&#32;<emphasis role="keyword">true</emphasis>;
16863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16864 
16865 &#32;&#32;&#32;&#32;JunitReporter::~JunitReporter()&#32;{}
16866 
16867 &#32;&#32;&#32;&#32;std::string&#32;JunitReporter::getDescription()&#32;{
16868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Reports&#32;test&#32;results&#32;in&#32;an&#32;XML&#32;format&#32;that&#32;looks&#32;like&#32;Ant&apos;s&#32;junitreport&#32;target&quot;</emphasis>;
16869 &#32;&#32;&#32;&#32;}
16870 
16871 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;JunitReporter::noMatchingTestCases(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<emphasis role="comment">/*spec*/</emphasis>&#32;)&#32;{}
16872 
16873 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;JunitReporter::testRunStarting(&#32;TestRunInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;runInfo&#32;)&#32;&#32;{
16874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CumulativeReporterBase::testRunStarting(&#32;runInfo&#32;);
16875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.startElement(&#32;<emphasis role="stringliteral">&quot;testsuites&quot;</emphasis>&#32;);
16876 &#32;&#32;&#32;&#32;}
16877 
16878 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;JunitReporter::testGroupStarting(&#32;GroupInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;groupInfo&#32;)&#32;{
16879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;suiteTimer.start();
16880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stdOutForSuite.clear();
16881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stdErrForSuite.clear();
16882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unexpectedExceptions&#32;=&#32;0;
16883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CumulativeReporterBase::testGroupStarting(&#32;groupInfo&#32;);
16884 &#32;&#32;&#32;&#32;}
16885 
16886 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;JunitReporter::testCaseStarting(&#32;TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCaseInfo&#32;)&#32;{
16887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_okToFail&#32;=&#32;testCaseInfo.okToFail();
16888 &#32;&#32;&#32;&#32;}
16889 
16890 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;JunitReporter::assertionEnded(&#32;AssertionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;assertionStats&#32;)&#32;{
16891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;assertionStats.assertionResult.getResultType()&#32;==&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa3bb56296483947280cf7fa1ad074ab45">ResultWas::ThrewException</link>&#32;&amp;&amp;&#32;!m_okToFail&#32;)
16892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unexpectedExceptions++;
16893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CumulativeReporterBase::assertionEnded(&#32;assertionStats&#32;);
16894 &#32;&#32;&#32;&#32;}
16895 
16896 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;JunitReporter::testCaseEnded(&#32;TestCaseStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCaseStats&#32;)&#32;{
16897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stdOutForSuite&#32;+=&#32;testCaseStats.stdOut;
16898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stdErrForSuite&#32;+=&#32;testCaseStats.stdErr;
16899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CumulativeReporterBase::testCaseEnded(&#32;testCaseStats&#32;);
16900 &#32;&#32;&#32;&#32;}
16901 
16902 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;JunitReporter::testGroupEnded(&#32;TestGroupStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testGroupStats&#32;)&#32;{
16903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;suiteTime&#32;=&#32;suiteTimer.getElapsedSeconds();
16904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CumulativeReporterBase::testGroupEnded(&#32;testGroupStats&#32;);
16905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writeGroup(&#32;*m_testGroups.back(),&#32;suiteTime&#32;);
16906 &#32;&#32;&#32;&#32;}
16907 
16908 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;JunitReporter::testRunEndedCumulative()&#32;{
16909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.endElement();
16910 &#32;&#32;&#32;&#32;}
16911 
16912 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;JunitReporter::writeGroup(&#32;TestGroupNode&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;groupNode,&#32;<emphasis role="keywordtype">double</emphasis>&#32;suiteTime&#32;)&#32;{
16913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter::ScopedElement&#32;e&#32;=&#32;xml.scopedElement(&#32;<emphasis role="stringliteral">&quot;testsuite&quot;</emphasis>&#32;);
16914 
16915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestGroupStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;stats&#32;=&#32;groupNode.value;
16916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(&#32;<emphasis role="stringliteral">&quot;name&quot;</emphasis>,&#32;stats.groupInfo.name&#32;);
16917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(&#32;<emphasis role="stringliteral">&quot;errors&quot;</emphasis>,&#32;unexpectedExceptions&#32;);
16918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(&#32;<emphasis role="stringliteral">&quot;failures&quot;</emphasis>,&#32;stats.totals.assertions.failed-unexpectedExceptions&#32;);
16919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(&#32;<emphasis role="stringliteral">&quot;tests&quot;</emphasis>,&#32;stats.totals.assertions.total()&#32;);
16920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(&#32;<emphasis role="stringliteral">&quot;hostname&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;tbd&quot;</emphasis>&#32;);&#32;<emphasis role="comment">//&#32;!TBD</emphasis>
16921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_config-&gt;showDurations()&#32;==&#32;<link linkend="_struct_catch_1_1_show_durations_1a82fa0174554187220c1eda175f122ee1af1a716bc46185f561382a12a0dede9f3">ShowDurations::Never</link>&#32;)
16922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(&#32;<emphasis role="stringliteral">&quot;time&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;);
16923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(&#32;<emphasis role="stringliteral">&quot;time&quot;</emphasis>,&#32;formatDuration(&#32;suiteTime&#32;)&#32;);
16925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(&#32;<emphasis role="stringliteral">&quot;timestamp&quot;</emphasis>,&#32;getCurrentTimestamp()&#32;);
16926 
16927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Write&#32;properties&#32;if&#32;there&#32;are&#32;any</emphasis>
16928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_config-&gt;hasTestFilters()&#32;||&#32;m_config-&gt;rngSeed()&#32;!=&#32;0)&#32;{
16929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;properties&#32;=&#32;xml.scopedElement(<emphasis role="stringliteral">&quot;properties&quot;</emphasis>);
16930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_config-&gt;hasTestFilters())&#32;{
16931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(<emphasis role="stringliteral">&quot;property&quot;</emphasis>)
16932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;name&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;filters&quot;</emphasis>)
16933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;value&quot;</emphasis>,&#32;serializeFilters(m_config-&gt;getTestsOrTags()));
16934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_config-&gt;rngSeed()&#32;!=&#32;0)&#32;{
16936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(<emphasis role="stringliteral">&quot;property&quot;</emphasis>)
16937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;name&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;random-seed&quot;</emphasis>)
16938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;value&quot;</emphasis>,&#32;m_config-&gt;rngSeed());
16939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16941 
16942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Write&#32;test&#32;cases</emphasis>
16943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;child&#32;:&#32;groupNode.children&#32;)
16944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writeTestCase(&#32;*child&#32;);
16945 
16946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(&#32;<emphasis role="stringliteral">&quot;system-out&quot;</emphasis>&#32;).writeText(&#32;<link linkend="_namespace_catch_1a084108b47f37d8bfd5db51c50c7451b3">trim</link>(&#32;stdOutForSuite&#32;),&#32;XmlFormatting::Newline&#32;);
16947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(&#32;<emphasis role="stringliteral">&quot;system-err&quot;</emphasis>&#32;).writeText(&#32;<link linkend="_namespace_catch_1a084108b47f37d8bfd5db51c50c7451b3">trim</link>(&#32;stdErrForSuite&#32;),&#32;XmlFormatting::Newline&#32;);
16948 &#32;&#32;&#32;&#32;}
16949 
16950 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;JunitReporter::writeTestCase(&#32;TestCaseNode&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCaseNode&#32;)&#32;{
16951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestCaseStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;stats&#32;=&#32;testCaseNode.value;
16952 
16953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;All&#32;test&#32;cases&#32;have&#32;exactly&#32;one&#32;section&#32;-&#32;which&#32;represents&#32;the</emphasis>
16954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;test&#32;case&#32;itself.&#32;That&#32;section&#32;may&#32;have&#32;0-n&#32;nested&#32;sections</emphasis>
16955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(&#32;testCaseNode.children.size()&#32;==&#32;1&#32;);
16956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SectionNode&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;rootSection&#32;=&#32;*testCaseNode.children.front();
16957 
16958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;className&#32;=&#32;stats.testInfo.className;
16959 
16960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;className.empty()&#32;)&#32;{
16961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;className&#32;=&#32;fileNameTag(stats.testInfo.tags);
16962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;className.empty()&#32;)
16963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;className&#32;=&#32;<emphasis role="stringliteral">&quot;global&quot;</emphasis>;
16964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16965 
16966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;!m_config-&gt;name().empty()&#32;)
16967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;className&#32;=&#32;m_config-&gt;name()&#32;+&#32;&quot;.&quot;&#32;+&#32;className;
16968 
16969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writeSection(&#32;className,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;rootSection,&#32;stats.testInfo.okToFail()&#32;);
16970 &#32;&#32;&#32;&#32;}
16971 
16972 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;JunitReporter::writeSection(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;className,
16973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;rootName,
16974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SectionNode&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;sectionNode,
16975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;testOkToFail)&#32;{
16976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;name&#32;=&#32;<link linkend="_namespace_catch_1a084108b47f37d8bfd5db51c50c7451b3">trim</link>(&#32;sectionNode.stats.sectionInfo.name&#32;);
16977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!rootName.empty()&#32;)
16978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;name&#32;=&#32;rootName&#32;+&#32;&apos;/&apos;&#32;+&#32;name;
16979 
16980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!sectionNode.assertions.empty()&#32;||
16981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!sectionNode.stdOut.empty()&#32;||
16982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!sectionNode.stdErr.empty()&#32;)&#32;{
16983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter::ScopedElement&#32;e&#32;=&#32;xml.scopedElement(&#32;<emphasis role="stringliteral">&quot;testcase&quot;</emphasis>&#32;);
16984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;className.empty()&#32;)&#32;{
16985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(&#32;<emphasis role="stringliteral">&quot;classname&quot;</emphasis>,&#32;name&#32;);
16986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(&#32;<emphasis role="stringliteral">&quot;name&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;root&quot;</emphasis>&#32;);
16987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
16989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(&#32;<emphasis role="stringliteral">&quot;classname&quot;</emphasis>,&#32;className&#32;);
16990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(&#32;<emphasis role="stringliteral">&quot;name&quot;</emphasis>,&#32;name&#32;);
16991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(&#32;<emphasis role="stringliteral">&quot;time&quot;</emphasis>,&#32;formatDuration(&#32;sectionNode.stats.durationInSeconds&#32;)&#32;);
16993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;not&#32;ideal,&#32;but&#32;it&#32;should&#32;be&#32;enough&#32;to&#32;mimic&#32;gtest&apos;s</emphasis>
16994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;junit&#32;output.</emphasis>
16995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ideally&#32;the&#32;JUnit&#32;reporter&#32;would&#32;also&#32;handle&#32;`skipTest`</emphasis>
16996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;events&#32;and&#32;write&#32;those&#32;out&#32;appropriately.</emphasis>
16997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(&#32;<emphasis role="stringliteral">&quot;status&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;run&quot;</emphasis>&#32;);
16998 
16999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sectionNode.stats.assertions.failedButOk)&#32;{
17000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(<emphasis role="stringliteral">&quot;skipped&quot;</emphasis>)
17001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;message&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;TEST_CASE&#32;tagged&#32;with&#32;!mayfail&quot;</emphasis>);
17002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17003 
17004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writeAssertions(&#32;sectionNode&#32;);
17005 
17006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!sectionNode.stdOut.empty()&#32;)
17007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(&#32;<emphasis role="stringliteral">&quot;system-out&quot;</emphasis>&#32;).writeText(&#32;<link linkend="_namespace_catch_1a084108b47f37d8bfd5db51c50c7451b3">trim</link>(&#32;sectionNode.stdOut&#32;),&#32;XmlFormatting::Newline&#32;);
17008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!sectionNode.stdErr.empty()&#32;)
17009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(&#32;<emphasis role="stringliteral">&quot;system-err&quot;</emphasis>&#32;).writeText(&#32;<link linkend="_namespace_catch_1a084108b47f37d8bfd5db51c50c7451b3">trim</link>(&#32;sectionNode.stdErr&#32;),&#32;XmlFormatting::Newline&#32;);
17010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;childNode&#32;:&#32;sectionNode.childSections&#32;)
17012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(&#32;className.empty()&#32;)
17013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writeSection(&#32;name,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;*childNode,&#32;testOkToFail&#32;);
17014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
17015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writeSection(&#32;className,&#32;name,&#32;*childNode,&#32;testOkToFail&#32;);
17016 &#32;&#32;&#32;&#32;}
17017 
17018 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;JunitReporter::writeAssertions(&#32;SectionNode&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;sectionNode&#32;)&#32;{
17019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;assertion&#32;:&#32;sectionNode.assertions&#32;)
17020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writeAssertion(&#32;assertion&#32;);
17021 &#32;&#32;&#32;&#32;}
17022 
17023 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;JunitReporter::writeAssertion(&#32;AssertionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;stats&#32;)&#32;{
17024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionResult&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;result&#32;=&#32;stats.assertionResult;
17025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!result.isOk()&#32;)&#32;{
17026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;elementName;
17027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(&#32;result.getResultType()&#32;)&#32;{
17028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa3bb56296483947280cf7fa1ad074ab45">ResultWas::ThrewException</link>:
17029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa87fa1f2a2a63290b61948002e2935377">ResultWas::FatalErrorCondition</link>:
17030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elementName&#32;=&#32;<emphasis role="stringliteral">&quot;error&quot;</emphasis>;
17031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efacecfc052e2499499b13304249303cc36">ResultWas::ExplicitFailure</link>:
17033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa5e7126b8458dc1376ac870a719f7873f">ResultWas::ExpressionFailed</link>:
17034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa8b6d3d5bc78d4e7a95543b6ecfbdb57d">ResultWas::DidntThrowException</link>:
17035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elementName&#32;=&#32;<emphasis role="stringliteral">&quot;failure&quot;</emphasis>;
17036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17037 
17038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;should&#32;never&#32;see&#32;these&#32;here:</emphasis>
17039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa30222063929ca1b6318faa78e8242f1c">ResultWas::Info</link>:
17040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa67e9d36ba0f04a60a19896834d840c21">ResultWas::Warning</link>:
17041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efae7cbe89bb9ec7ece9b44d48b63d01b63">ResultWas::Ok</link>:
17042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa65721dda02fe5efb522e7449e496608a">ResultWas::Unknown</link>:
17043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa1818f1b198f10b5734c405142b22025c">ResultWas::FailureBit</link>:
17044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efaa9107b7836cc7590ca668002f76d27c7">ResultWas::Exception</link>:
17045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elementName&#32;=&#32;<emphasis role="stringliteral">&quot;internalError&quot;</emphasis>;
17046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17048 
17049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter::ScopedElement&#32;e&#32;=&#32;xml.scopedElement(&#32;elementName&#32;);
17050 
17051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(&#32;<emphasis role="stringliteral">&quot;message&quot;</emphasis>,&#32;result.getExpression()&#32;);
17052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(&#32;<emphasis role="stringliteral">&quot;type&quot;</emphasis>,&#32;result.getTestMacroName()&#32;);
17053 
17054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReusableStringStream&#32;rss;
17055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stats.totals.assertions.total()&#32;&gt;&#32;0)&#32;{
17056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;FAILED&quot;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:\n&quot;</emphasis>;
17057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result.hasExpression())&#32;{
17058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&quot;</emphasis>;
17059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;result.getExpressionInMacro();
17060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
17061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result.hasExpandedExpression())&#32;{
17063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;with&#32;expansion:\n&quot;</emphasis>;
17064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;Column(result.getExpandedExpression()).indent(2)&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
17065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
17067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
17068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17069 
17070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!result.getMessage().empty()&#32;)
17071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;result.getMessage()&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
17072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;msg&#32;:&#32;stats.infoMessages&#32;)
17073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(&#32;msg.type&#32;==&#32;ResultWas::Info&#32;)
17074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;msg.message&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&apos;\n&apos;</emphasis>;
17075 
17076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;at&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;result.getSourceInfo();
17077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeText(&#32;rss.str(),&#32;XmlFormatting::Newline&#32;);
17078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17079 &#32;&#32;&#32;&#32;}
17080 
17081 &#32;&#32;&#32;&#32;CATCH_REGISTER_REPORTER(&#32;<emphasis role="stringliteral">&quot;junit&quot;</emphasis>,&#32;JunitReporter&#32;)
17082 
17083 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
17084 <emphasis role="comment">//&#32;end&#32;catch_reporter_junit.cpp</emphasis>
17085 <emphasis role="comment">//&#32;start&#32;catch_reporter_listening.cpp</emphasis>
17086 
17087 <emphasis role="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>
17088 
17089 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
17090 
17091 &#32;&#32;&#32;&#32;ListeningReporter::ListeningReporter()&#32;{
17092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;will&#32;assume&#32;that&#32;listeners&#32;will&#32;always&#32;want&#32;all&#32;assertions</emphasis>
17093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_preferences.shouldReportAllAssertions&#32;=&#32;<emphasis role="keyword">true</emphasis>;
17094 &#32;&#32;&#32;&#32;}
17095 
17096 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ListeningReporter::addListener(&#32;IStreamingReporterPtr&amp;&amp;&#32;listener&#32;)&#32;{
17097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_listeners.push_back(&#32;std::move(&#32;listener&#32;)&#32;);
17098 &#32;&#32;&#32;&#32;}
17099 
17100 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ListeningReporter::addReporter(IStreamingReporterPtr&amp;&amp;&#32;reporter)&#32;{
17101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(!m_reporter&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Listening&#32;reporter&#32;can&#32;wrap&#32;only&#32;1&#32;real&#32;reporter&quot;</emphasis>);
17102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter&#32;=&#32;std::move(&#32;reporter&#32;);
17103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_preferences.shouldRedirectStdOut&#32;=&#32;m_reporter-&gt;getPreferences().shouldRedirectStdOut;
17104 &#32;&#32;&#32;&#32;}
17105 
17106 &#32;&#32;&#32;&#32;ReporterPreferences&#32;ListeningReporter::getPreferences()<emphasis role="keyword">&#32;const&#32;</emphasis>{
17107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_preferences;
17108 &#32;&#32;&#32;&#32;}
17109 
17110 &#32;&#32;&#32;&#32;std::set&lt;Verbosity&gt;&#32;ListeningReporter::getSupportedVerbosities()&#32;{
17111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::set&lt;Verbosity&gt;{&#32;};
17112 &#32;&#32;&#32;&#32;}
17113 
17114 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ListeningReporter::noMatchingTestCases(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;spec&#32;)&#32;{
17115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;listener&#32;:&#32;m_listeners&#32;)&#32;{
17116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;listener-&gt;noMatchingTestCases(&#32;spec&#32;);
17117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;noMatchingTestCases(&#32;spec&#32;);
17119 &#32;&#32;&#32;&#32;}
17120 
17121 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ListeningReporter::reportInvalidArguments(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;arg){
17122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;listener&#32;:&#32;m_listeners&#32;)&#32;{
17123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;listener-&gt;reportInvalidArguments(&#32;arg&#32;);
17124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;reportInvalidArguments(&#32;arg&#32;);
17126 &#32;&#32;&#32;&#32;}
17127 
17128 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</emphasis>
17129 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ListeningReporter::benchmarkPreparing(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name&#32;)&#32;{
17130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;listener&#32;:&#32;m_listeners)&#32;{
17131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;listener-&gt;benchmarkPreparing(name);
17132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;benchmarkPreparing(name);
17134 &#32;&#32;&#32;&#32;}
17135 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ListeningReporter::benchmarkStarting(&#32;BenchmarkInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;benchmarkInfo&#32;)&#32;{
17136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;listener&#32;:&#32;m_listeners&#32;)&#32;{
17137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;listener-&gt;benchmarkStarting(&#32;benchmarkInfo&#32;);
17138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;benchmarkStarting(&#32;benchmarkInfo&#32;);
17140 &#32;&#32;&#32;&#32;}
17141 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ListeningReporter::benchmarkEnded(&#32;BenchmarkStats&lt;&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;benchmarkStats&#32;)&#32;{
17142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;listener&#32;:&#32;m_listeners&#32;)&#32;{
17143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;listener-&gt;benchmarkEnded(&#32;benchmarkStats&#32;);
17144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;benchmarkEnded(&#32;benchmarkStats&#32;);
17146 &#32;&#32;&#32;&#32;}
17147 
17148 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ListeningReporter::benchmarkFailed(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;error&#32;)&#32;{
17149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;listener&#32;:&#32;m_listeners)&#32;{
17150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;listener-&gt;benchmarkFailed(error);
17151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;benchmarkFailed(error);
17153 &#32;&#32;&#32;&#32;}
17154 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_ENABLE_BENCHMARKING</emphasis>
17155 
17156 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ListeningReporter::testRunStarting(&#32;TestRunInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testRunInfo&#32;)&#32;{
17157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;listener&#32;:&#32;m_listeners&#32;)&#32;{
17158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;listener-&gt;testRunStarting(&#32;testRunInfo&#32;);
17159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;testRunStarting(&#32;testRunInfo&#32;);
17161 &#32;&#32;&#32;&#32;}
17162 
17163 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ListeningReporter::testGroupStarting(&#32;GroupInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;groupInfo&#32;)&#32;{
17164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;listener&#32;:&#32;m_listeners&#32;)&#32;{
17165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;listener-&gt;testGroupStarting(&#32;groupInfo&#32;);
17166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;testGroupStarting(&#32;groupInfo&#32;);
17168 &#32;&#32;&#32;&#32;}
17169 
17170 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ListeningReporter::testCaseStarting(&#32;TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testInfo&#32;)&#32;{
17171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;listener&#32;:&#32;m_listeners&#32;)&#32;{
17172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;listener-&gt;testCaseStarting(&#32;testInfo&#32;);
17173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;testCaseStarting(&#32;testInfo&#32;);
17175 &#32;&#32;&#32;&#32;}
17176 
17177 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ListeningReporter::sectionStarting(&#32;SectionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;sectionInfo&#32;)&#32;{
17178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;listener&#32;:&#32;m_listeners&#32;)&#32;{
17179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;listener-&gt;sectionStarting(&#32;sectionInfo&#32;);
17180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;sectionStarting(&#32;sectionInfo&#32;);
17182 &#32;&#32;&#32;&#32;}
17183 
17184 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ListeningReporter::assertionStarting(&#32;AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;assertionInfo&#32;)&#32;{
17185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;listener&#32;:&#32;m_listeners&#32;)&#32;{
17186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;listener-&gt;assertionStarting(&#32;assertionInfo&#32;);
17187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;assertionStarting(&#32;assertionInfo&#32;);
17189 &#32;&#32;&#32;&#32;}
17190 
17191 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;return&#32;value&#32;indicates&#32;if&#32;the&#32;messages&#32;buffer&#32;should&#32;be&#32;cleared:</emphasis>
17192 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ListeningReporter::assertionEnded(&#32;AssertionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;assertionStats&#32;)&#32;{
17193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;listener&#32;:&#32;m_listeners&#32;)&#32;{
17194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis><emphasis role="keyword">&gt;</emphasis>(&#32;listener-&gt;assertionEnded(&#32;assertionStats&#32;)&#32;);
17195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_reporter-&gt;assertionEnded(&#32;assertionStats&#32;);
17197 &#32;&#32;&#32;&#32;}
17198 
17199 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ListeningReporter::sectionEnded(&#32;SectionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;sectionStats&#32;)&#32;{
17200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;listener&#32;:&#32;m_listeners&#32;)&#32;{
17201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;listener-&gt;sectionEnded(&#32;sectionStats&#32;);
17202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;sectionEnded(&#32;sectionStats&#32;);
17204 &#32;&#32;&#32;&#32;}
17205 
17206 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ListeningReporter::testCaseEnded(&#32;TestCaseStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCaseStats&#32;)&#32;{
17207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;listener&#32;:&#32;m_listeners&#32;)&#32;{
17208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;listener-&gt;testCaseEnded(&#32;testCaseStats&#32;);
17209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;testCaseEnded(&#32;testCaseStats&#32;);
17211 &#32;&#32;&#32;&#32;}
17212 
17213 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ListeningReporter::testGroupEnded(&#32;TestGroupStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testGroupStats&#32;)&#32;{
17214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;listener&#32;:&#32;m_listeners&#32;)&#32;{
17215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;listener-&gt;testGroupEnded(&#32;testGroupStats&#32;);
17216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;testGroupEnded(&#32;testGroupStats&#32;);
17218 &#32;&#32;&#32;&#32;}
17219 
17220 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ListeningReporter::testRunEnded(&#32;TestRunStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testRunStats&#32;)&#32;{
17221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;listener&#32;:&#32;m_listeners&#32;)&#32;{
17222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;listener-&gt;testRunEnded(&#32;testRunStats&#32;);
17223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;testRunEnded(&#32;testRunStats&#32;);
17225 &#32;&#32;&#32;&#32;}
17226 
17227 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ListeningReporter::skipTest(&#32;TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testInfo&#32;)&#32;{
17228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;listener&#32;:&#32;m_listeners&#32;)&#32;{
17229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;listener-&gt;skipTest(&#32;testInfo&#32;);
17230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporter-&gt;skipTest(&#32;testInfo&#32;);
17232 &#32;&#32;&#32;&#32;}
17233 
17234 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ListeningReporter::isMulti()<emphasis role="keyword">&#32;const&#32;</emphasis>{
17235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
17236 &#32;&#32;&#32;&#32;}
17237 
17238 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
17239 <emphasis role="comment">//&#32;end&#32;catch_reporter_listening.cpp</emphasis>
17240 <emphasis role="comment">//&#32;start&#32;catch_reporter_xml.cpp</emphasis>
17241 
17242 <emphasis role="preprocessor">#if&#32;defined(_MSC_VER)</emphasis>
17243 <emphasis role="preprocessor">#pragma&#32;warning(push)</emphasis>
17244 <emphasis role="preprocessor">#pragma&#32;warning(disable:4061)&#32;</emphasis><emphasis role="comment">//&#32;Not&#32;all&#32;labels&#32;are&#32;EXPLICITLY&#32;handled&#32;in&#32;switch</emphasis>
17245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note&#32;that&#32;4062&#32;(not&#32;all&#32;labels&#32;are&#32;handled</emphasis>
17246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;default&#32;is&#32;missing)&#32;is&#32;enabled</emphasis>
17247 <emphasis role="preprocessor">#endif</emphasis>
17248 
17249 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
17250 &#32;&#32;&#32;&#32;XmlReporter::XmlReporter(&#32;ReporterConfig&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;_config&#32;)
17251 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;StreamingReporterBase(&#32;_config&#32;),
17252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml(_config.stream())
17253 &#32;&#32;&#32;&#32;{
17254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporterPrefs.shouldRedirectStdOut&#32;=&#32;<emphasis role="keyword">true</emphasis>;
17255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_reporterPrefs.shouldReportAllAssertions&#32;=&#32;<emphasis role="keyword">true</emphasis>;
17256 &#32;&#32;&#32;&#32;}
17257 
17258 &#32;&#32;&#32;&#32;XmlReporter::~XmlReporter()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
17259 
17260 &#32;&#32;&#32;&#32;std::string&#32;XmlReporter::getDescription()&#32;{
17261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Reports&#32;test&#32;results&#32;as&#32;an&#32;XML&#32;document&quot;</emphasis>;
17262 &#32;&#32;&#32;&#32;}
17263 
17264 &#32;&#32;&#32;&#32;std::string&#32;XmlReporter::getStylesheetRef()<emphasis role="keyword">&#32;const&#32;</emphasis>{
17265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string();
17266 &#32;&#32;&#32;&#32;}
17267 
17268 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlReporter::writeSourceInfo(&#32;SourceLineInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;sourceInfo&#32;)&#32;{
17269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml
17270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(&#32;<emphasis role="stringliteral">&quot;filename&quot;</emphasis>,&#32;sourceInfo.file&#32;)
17271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(&#32;<emphasis role="stringliteral">&quot;line&quot;</emphasis>,&#32;sourceInfo.line&#32;);
17272 &#32;&#32;&#32;&#32;}
17273 
17274 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlReporter::noMatchingTestCases(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;s&#32;)&#32;{
17275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StreamingReporterBase::noMatchingTestCases(&#32;s&#32;);
17276 &#32;&#32;&#32;&#32;}
17277 
17278 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlReporter::testRunStarting(&#32;TestRunInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testInfo&#32;)&#32;{
17279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StreamingReporterBase::testRunStarting(&#32;testInfo&#32;);
17280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;stylesheetRef&#32;=&#32;getStylesheetRef();
17281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!stylesheetRef.empty()&#32;)
17282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.writeStylesheetRef(&#32;stylesheetRef&#32;);
17283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.startElement(&#32;<emphasis role="stringliteral">&quot;Catch&quot;</emphasis>&#32;);
17284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!m_config-&gt;name().empty()&#32;)
17285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.writeAttribute(&#32;<emphasis role="stringliteral">&quot;name&quot;</emphasis>,&#32;m_config-&gt;name()&#32;);
17286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_config-&gt;testSpec().hasFilters())
17287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.writeAttribute(&#32;<emphasis role="stringliteral">&quot;filters&quot;</emphasis>,&#32;serializeFilters(&#32;m_config-&gt;getTestsOrTags()&#32;)&#32;);
17288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_config-&gt;rngSeed()&#32;!=&#32;0&#32;)
17289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.scopedElement(&#32;<emphasis role="stringliteral">&quot;Randomness&quot;</emphasis>&#32;)
17290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(&#32;<emphasis role="stringliteral">&quot;seed&quot;</emphasis>,&#32;m_config-&gt;rngSeed()&#32;);
17291 &#32;&#32;&#32;&#32;}
17292 
17293 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlReporter::testGroupStarting(&#32;GroupInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;groupInfo&#32;)&#32;{
17294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StreamingReporterBase::testGroupStarting(&#32;groupInfo&#32;);
17295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.startElement(&#32;<emphasis role="stringliteral">&quot;Group&quot;</emphasis>&#32;)
17296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(&#32;<emphasis role="stringliteral">&quot;name&quot;</emphasis>,&#32;groupInfo.name&#32;);
17297 &#32;&#32;&#32;&#32;}
17298 
17299 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlReporter::testCaseStarting(&#32;TestCaseInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testInfo&#32;)&#32;{
17300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StreamingReporterBase::testCaseStarting(testInfo);
17301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.startElement(&#32;<emphasis role="stringliteral">&quot;TestCase&quot;</emphasis>&#32;)
17302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(&#32;<emphasis role="stringliteral">&quot;name&quot;</emphasis>,&#32;<link linkend="_namespace_catch_1a084108b47f37d8bfd5db51c50c7451b3">trim</link>(&#32;testInfo.name&#32;)&#32;)
17303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(&#32;<emphasis role="stringliteral">&quot;description&quot;</emphasis>,&#32;testInfo.description&#32;)
17304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(&#32;<emphasis role="stringliteral">&quot;tags&quot;</emphasis>,&#32;testInfo.tagsAsString()&#32;);
17305 
17306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writeSourceInfo(&#32;testInfo.lineInfo&#32;);
17307 
17308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;m_config-&gt;showDurations()&#32;==&#32;<link linkend="_struct_catch_1_1_show_durations_1a82fa0174554187220c1eda175f122ee1ab49682ccb55f2d6b4dfcdb027c09da9a">ShowDurations::Always</link>&#32;)
17309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_testCaseTimer.start();
17310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.ensureTagClosed();
17311 &#32;&#32;&#32;&#32;}
17312 
17313 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlReporter::sectionStarting(&#32;SectionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;sectionInfo&#32;)&#32;{
17314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StreamingReporterBase::sectionStarting(&#32;sectionInfo&#32;);
17315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_sectionDepth++&#32;&gt;&#32;0&#32;)&#32;{
17316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.startElement(&#32;<emphasis role="stringliteral">&quot;Section&quot;</emphasis>&#32;)
17317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(&#32;<emphasis role="stringliteral">&quot;name&quot;</emphasis>,&#32;<link linkend="_namespace_catch_1a084108b47f37d8bfd5db51c50c7451b3">trim</link>(&#32;sectionInfo.name&#32;)&#32;);
17318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writeSourceInfo(&#32;sectionInfo.lineInfo&#32;);
17319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.ensureTagClosed();
17320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17321 &#32;&#32;&#32;&#32;}
17322 
17323 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlReporter::assertionStarting(&#32;AssertionInfo&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;{&#32;}
17324 
17325 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;XmlReporter::assertionEnded(&#32;AssertionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;assertionStats&#32;)&#32;{
17326 
17327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertionResult&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;result&#32;=&#32;assertionStats.assertionResult;
17328 
17329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;includeResults&#32;=&#32;m_config-&gt;includeSuccessfulResults()&#32;||&#32;!result.isOk();
17330 
17331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;includeResults&#32;||&#32;result.getResultType()&#32;==&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa67e9d36ba0f04a60a19896834d840c21">ResultWas::Warning</link>&#32;)&#32;{
17332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Print&#32;any&#32;info&#32;messages&#32;in&#32;&lt;Info&gt;&#32;tags.</emphasis>
17333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;msg&#32;:&#32;assertionStats.infoMessages&#32;)&#32;{
17334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;msg.type&#32;==&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa30222063929ca1b6318faa78e8242f1c">ResultWas::Info</link>&#32;&amp;&amp;&#32;includeResults&#32;)&#32;{
17335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.scopedElement(&#32;<emphasis role="stringliteral">&quot;Info&quot;</emphasis>&#32;)
17336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeText(&#32;msg.message&#32;);
17337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;msg.type&#32;==&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa67e9d36ba0f04a60a19896834d840c21">ResultWas::Warning</link>&#32;)&#32;{
17338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.scopedElement(&#32;<emphasis role="stringliteral">&quot;Warning&quot;</emphasis>&#32;)
17339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeText(&#32;msg.message&#32;);
17340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17343 
17344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Drop&#32;out&#32;if&#32;result&#32;was&#32;successful&#32;but&#32;we&apos;re&#32;not&#32;printing&#32;them.</emphasis>
17345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!includeResults&#32;&amp;&amp;&#32;result.getResultType()&#32;!=&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa67e9d36ba0f04a60a19896834d840c21">ResultWas::Warning</link>&#32;)
17346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
17347 
17348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Print&#32;the&#32;expression&#32;if&#32;there&#32;is&#32;one.</emphasis>
17349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;result.hasExpression()&#32;)&#32;{
17350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.startElement(&#32;<emphasis role="stringliteral">&quot;Expression&quot;</emphasis>&#32;)
17351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(&#32;<emphasis role="stringliteral">&quot;success&quot;</emphasis>,&#32;result.succeeded()&#32;)
17352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(&#32;<emphasis role="stringliteral">&quot;type&quot;</emphasis>,&#32;result.getTestMacroName()&#32;);
17353 
17354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writeSourceInfo(&#32;result.getSourceInfo()&#32;);
17355 
17356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.scopedElement(&#32;<emphasis role="stringliteral">&quot;Original&quot;</emphasis>&#32;)
17357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeText(&#32;result.getExpression()&#32;);
17358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.scopedElement(&#32;<emphasis role="stringliteral">&quot;Expanded&quot;</emphasis>&#32;)
17359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeText(&#32;result.getExpandedExpression()&#32;);
17360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17361 
17362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;And...&#32;Print&#32;a&#32;result&#32;applicable&#32;to&#32;each&#32;result&#32;type.</emphasis>
17363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(&#32;result.getResultType()&#32;)&#32;{
17364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa3bb56296483947280cf7fa1ad074ab45">ResultWas::ThrewException</link>:
17365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.startElement(&#32;<emphasis role="stringliteral">&quot;Exception&quot;</emphasis>&#32;);
17366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writeSourceInfo(&#32;result.getSourceInfo()&#32;);
17367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.writeText(&#32;result.getMessage()&#32;);
17368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.endElement();
17369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa87fa1f2a2a63290b61948002e2935377">ResultWas::FatalErrorCondition</link>:
17371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.startElement(&#32;<emphasis role="stringliteral">&quot;FatalErrorCondition&quot;</emphasis>&#32;);
17372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writeSourceInfo(&#32;result.getSourceInfo()&#32;);
17373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.writeText(&#32;result.getMessage()&#32;);
17374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.endElement();
17375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa30222063929ca1b6318faa78e8242f1c">ResultWas::Info</link>:
17377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.scopedElement(&#32;<emphasis role="stringliteral">&quot;Info&quot;</emphasis>&#32;)
17378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeText(&#32;result.getMessage()&#32;);
17379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efa67e9d36ba0f04a60a19896834d840c21">ResultWas::Warning</link>:
17381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Warning&#32;will&#32;already&#32;have&#32;been&#32;written</emphasis>
17382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_catch_1_1_result_was_1a624e1ee3661fcf6094ceef1f654601efacecfc052e2499499b13304249303cc36">ResultWas::ExplicitFailure</link>:
17384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.startElement(&#32;<emphasis role="stringliteral">&quot;Failure&quot;</emphasis>&#32;);
17385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writeSourceInfo(&#32;result.getSourceInfo()&#32;);
17386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.writeText(&#32;result.getMessage()&#32;);
17387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.endElement();
17388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
17390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17392 
17393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;result.hasExpression()&#32;)
17394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.endElement();
17395 
17396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
17397 &#32;&#32;&#32;&#32;}
17398 
17399 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlReporter::sectionEnded(&#32;SectionStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;sectionStats&#32;)&#32;{
17400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StreamingReporterBase::sectionEnded(&#32;sectionStats&#32;);
17401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;--m_sectionDepth&#32;&gt;&#32;0&#32;)&#32;{
17402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter::ScopedElement&#32;e&#32;=&#32;m_xml.scopedElement(&#32;<emphasis role="stringliteral">&quot;OverallResults&quot;</emphasis>&#32;);
17403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;e.writeAttribute(&#32;<emphasis role="stringliteral">&quot;successes&quot;</emphasis>,&#32;sectionStats.assertions.passed&#32;);
17404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;e.writeAttribute(&#32;<emphasis role="stringliteral">&quot;failures&quot;</emphasis>,&#32;sectionStats.assertions.failed&#32;);
17405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;e.writeAttribute(&#32;<emphasis role="stringliteral">&quot;expectedFailures&quot;</emphasis>,&#32;sectionStats.assertions.failedButOk&#32;);
17406 
17407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;m_config-&gt;showDurations()&#32;==&#32;<link linkend="_struct_catch_1_1_show_durations_1a82fa0174554187220c1eda175f122ee1ab49682ccb55f2d6b4dfcdb027c09da9a">ShowDurations::Always</link>&#32;)
17408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;e.writeAttribute(&#32;<emphasis role="stringliteral">&quot;durationInSeconds&quot;</emphasis>,&#32;sectionStats.durationInSeconds&#32;);
17409 
17410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.endElement();
17411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17412 &#32;&#32;&#32;&#32;}
17413 
17414 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlReporter::testCaseEnded(&#32;TestCaseStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testCaseStats&#32;)&#32;{
17415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StreamingReporterBase::testCaseEnded(&#32;testCaseStats&#32;);
17416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter::ScopedElement&#32;e&#32;=&#32;m_xml.scopedElement(&#32;<emphasis role="stringliteral">&quot;OverallResult&quot;</emphasis>&#32;);
17417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;e.writeAttribute(&#32;<emphasis role="stringliteral">&quot;success&quot;</emphasis>,&#32;testCaseStats.totals.assertions.allOk()&#32;);
17418 
17419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;m_config-&gt;showDurations()&#32;==&#32;<link linkend="_struct_catch_1_1_show_durations_1a82fa0174554187220c1eda175f122ee1ab49682ccb55f2d6b4dfcdb027c09da9a">ShowDurations::Always</link>&#32;)
17420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;e.writeAttribute(&#32;<emphasis role="stringliteral">&quot;durationInSeconds&quot;</emphasis>,&#32;m_testCaseTimer.getElapsedSeconds()&#32;);
17421 
17422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!testCaseStats.stdOut.empty()&#32;)
17423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.scopedElement(&#32;<emphasis role="stringliteral">&quot;StdOut&quot;</emphasis>&#32;).writeText(&#32;<link linkend="_namespace_catch_1a084108b47f37d8bfd5db51c50c7451b3">trim</link>(&#32;testCaseStats.stdOut&#32;),&#32;XmlFormatting::Newline&#32;);
17424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!testCaseStats.stdErr.empty()&#32;)
17425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.scopedElement(&#32;<emphasis role="stringliteral">&quot;StdErr&quot;</emphasis>&#32;).writeText(&#32;<link linkend="_namespace_catch_1a084108b47f37d8bfd5db51c50c7451b3">trim</link>(&#32;testCaseStats.stdErr&#32;),&#32;XmlFormatting::Newline&#32;);
17426 
17427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.endElement();
17428 &#32;&#32;&#32;&#32;}
17429 
17430 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlReporter::testGroupEnded(&#32;TestGroupStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testGroupStats&#32;)&#32;{
17431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StreamingReporterBase::testGroupEnded(&#32;testGroupStats&#32;);
17432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Check&#32;testGroupStats.aborting&#32;and&#32;act&#32;accordingly.</emphasis>
17433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.scopedElement(&#32;<emphasis role="stringliteral">&quot;OverallResults&quot;</emphasis>&#32;)
17434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(&#32;<emphasis role="stringliteral">&quot;successes&quot;</emphasis>,&#32;testGroupStats.totals.assertions.passed&#32;)
17435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(&#32;<emphasis role="stringliteral">&quot;failures&quot;</emphasis>,&#32;testGroupStats.totals.assertions.failed&#32;)
17436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(&#32;<emphasis role="stringliteral">&quot;expectedFailures&quot;</emphasis>,&#32;testGroupStats.totals.assertions.failedButOk&#32;);
17437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.scopedElement(&#32;<emphasis role="stringliteral">&quot;OverallResultsCases&quot;</emphasis>)
17438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(&#32;<emphasis role="stringliteral">&quot;successes&quot;</emphasis>,&#32;testGroupStats.totals.testCases.passed&#32;)
17439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(&#32;<emphasis role="stringliteral">&quot;failures&quot;</emphasis>,&#32;testGroupStats.totals.testCases.failed&#32;)
17440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(&#32;<emphasis role="stringliteral">&quot;expectedFailures&quot;</emphasis>,&#32;testGroupStats.totals.testCases.failedButOk&#32;);
17441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.endElement();
17442 &#32;&#32;&#32;&#32;}
17443 
17444 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlReporter::testRunEnded(&#32;TestRunStats&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;testRunStats&#32;)&#32;{
17445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StreamingReporterBase::testRunEnded(&#32;testRunStats&#32;);
17446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.scopedElement(&#32;<emphasis role="stringliteral">&quot;OverallResults&quot;</emphasis>&#32;)
17447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(&#32;<emphasis role="stringliteral">&quot;successes&quot;</emphasis>,&#32;testRunStats.totals.assertions.passed&#32;)
17448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(&#32;<emphasis role="stringliteral">&quot;failures&quot;</emphasis>,&#32;testRunStats.totals.assertions.failed&#32;)
17449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(&#32;<emphasis role="stringliteral">&quot;expectedFailures&quot;</emphasis>,&#32;testRunStats.totals.assertions.failedButOk&#32;);
17450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.scopedElement(&#32;<emphasis role="stringliteral">&quot;OverallResultsCases&quot;</emphasis>)
17451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(&#32;<emphasis role="stringliteral">&quot;successes&quot;</emphasis>,&#32;testRunStats.totals.testCases.passed&#32;)
17452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(&#32;<emphasis role="stringliteral">&quot;failures&quot;</emphasis>,&#32;testRunStats.totals.testCases.failed&#32;)
17453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(&#32;<emphasis role="stringliteral">&quot;expectedFailures&quot;</emphasis>,&#32;testRunStats.totals.testCases.failedButOk&#32;);
17454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.endElement();
17455 &#32;&#32;&#32;&#32;}
17456 
17457 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</emphasis>
17458 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlReporter::benchmarkPreparing(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name)&#32;{
17459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.startElement(<emphasis role="stringliteral">&quot;BenchmarkResults&quot;</emphasis>)
17460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;name&quot;</emphasis>,&#32;name);
17461 &#32;&#32;&#32;&#32;}
17462 
17463 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlReporter::benchmarkStarting(BenchmarkInfo&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;info)&#32;{
17464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.writeAttribute(<emphasis role="stringliteral">&quot;samples&quot;</emphasis>,&#32;info.samples)
17465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;resamples&quot;</emphasis>,&#32;info.resamples)
17466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;iterations&quot;</emphasis>,&#32;info.iterations)
17467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;clockResolution&quot;</emphasis>,&#32;info.clockResolution)
17468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;estimatedDuration&quot;</emphasis>,&#32;info.estimatedDuration)
17469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeComment(<emphasis role="stringliteral">&quot;All&#32;values&#32;in&#32;nano&#32;seconds&quot;</emphasis>);
17470 &#32;&#32;&#32;&#32;}
17471 
17472 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlReporter::benchmarkEnded(BenchmarkStats&lt;&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;benchmarkStats)&#32;{
17473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.startElement(<emphasis role="stringliteral">&quot;mean&quot;</emphasis>)
17474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;value&quot;</emphasis>,&#32;benchmarkStats.mean.point.count())
17475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;lowerBound&quot;</emphasis>,&#32;benchmarkStats.mean.lower_bound.count())
17476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;upperBound&quot;</emphasis>,&#32;benchmarkStats.mean.upper_bound.count())
17477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;ci&quot;</emphasis>,&#32;benchmarkStats.mean.confidence_interval);
17478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.endElement();
17479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.startElement(<emphasis role="stringliteral">&quot;standardDeviation&quot;</emphasis>)
17480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;value&quot;</emphasis>,&#32;benchmarkStats.standardDeviation.point.count())
17481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;lowerBound&quot;</emphasis>,&#32;benchmarkStats.standardDeviation.lower_bound.count())
17482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;upperBound&quot;</emphasis>,&#32;benchmarkStats.standardDeviation.upper_bound.count())
17483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;ci&quot;</emphasis>,&#32;benchmarkStats.standardDeviation.confidence_interval);
17484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.endElement();
17485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.startElement(<emphasis role="stringliteral">&quot;outliers&quot;</emphasis>)
17486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;variance&quot;</emphasis>,&#32;benchmarkStats.outlierVariance)
17487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;lowMild&quot;</emphasis>,&#32;benchmarkStats.outliers.low_mild)
17488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;lowSevere&quot;</emphasis>,&#32;benchmarkStats.outliers.low_severe)
17489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;highMild&quot;</emphasis>,&#32;benchmarkStats.outliers.high_mild)
17490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;highSevere&quot;</emphasis>,&#32;benchmarkStats.outliers.high_severe);
17491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.endElement();
17492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.endElement();
17493 &#32;&#32;&#32;&#32;}
17494 
17495 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlReporter::benchmarkFailed(std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;error)&#32;{
17496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.scopedElement(<emphasis role="stringliteral">&quot;failed&quot;</emphasis>).
17497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writeAttribute(<emphasis role="stringliteral">&quot;message&quot;</emphasis>,&#32;error);
17498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_xml.endElement();
17499 &#32;&#32;&#32;&#32;}
17500 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_ENABLE_BENCHMARKING</emphasis>
17501 
17502 &#32;&#32;&#32;&#32;CATCH_REGISTER_REPORTER(&#32;<emphasis role="stringliteral">&quot;xml&quot;</emphasis>,&#32;XmlReporter&#32;)
17503 
17504 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;Catch</emphasis>
17505 
17506 <emphasis role="preprocessor">#if&#32;defined(_MSC_VER)</emphasis>
17507 <emphasis role="preprocessor">#pragma&#32;warning(pop)</emphasis>
17508 <emphasis role="preprocessor">#endif</emphasis>
17509 <emphasis role="comment">//&#32;end&#32;catch_reporter_xml.cpp</emphasis>
17510 
17511 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>&#32;{
17512 &#32;&#32;&#32;&#32;LeakDetector&#32;leakDetector;
17513 }
17514 
17515 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
17516 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;pop</emphasis>
17517 <emphasis role="preprocessor">#endif</emphasis>
17518 
17519 <emphasis role="comment">//&#32;end&#32;catch_impl.hpp</emphasis>
17520 <emphasis role="preprocessor">#endif</emphasis>
17521 
17522 <emphasis role="preprocessor">#ifdef&#32;CATCH_CONFIG_MAIN</emphasis>
17523 <emphasis role="comment">//&#32;start&#32;catch_default_main.hpp</emphasis>
17524 
17525 <emphasis role="preprocessor">#ifndef&#32;__OBJC__</emphasis>
17526 
17527 <emphasis role="preprocessor">#ifndef&#32;CATCH_INTERNAL_CDECL</emphasis>
17528 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
17529 <emphasis role="preprocessor">#define&#32;CATCH_INTERNAL_CDECL&#32;__cdecl</emphasis>
17530 <emphasis role="preprocessor">#else</emphasis>
17531 <emphasis role="preprocessor">#define&#32;CATCH_INTERNAL_CDECL</emphasis>
17532 <emphasis role="preprocessor">#endif</emphasis>
17533 <emphasis role="preprocessor">#endif</emphasis>
17534 
17535 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_WCHAR)&#32;&amp;&amp;&#32;defined(CATCH_PLATFORM_WINDOWS)&#32;&amp;&amp;&#32;defined(_UNICODE)&#32;&amp;&amp;&#32;!defined(DO_NOT_USE_WMAIN)</emphasis>
17536 <emphasis role="comment">//&#32;Standard&#32;C/C++&#32;Win32&#32;Unicode&#32;wmain&#32;entry&#32;point</emphasis>
17537 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;CATCH_INTERNAL_CDECL&#32;wmain&#32;(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">wchar_t</emphasis>&#32;*&#32;argv[],&#32;<emphasis role="keywordtype">wchar_t</emphasis>&#32;*&#32;[])&#32;{
17538 <emphasis role="preprocessor">#else</emphasis>
17539 <emphasis role="comment">//&#32;Standard&#32;C/C++&#32;main&#32;entry&#32;point</emphasis>
17540 <emphasis role="keywordtype">int</emphasis>&#32;CATCH_INTERNAL_CDECL&#32;<link linkend="_main_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627">main</link>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;argv[])&#32;{
17541 <emphasis role="preprocessor">#endif</emphasis>
17542 
17543 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_catch_1_1true__given">Catch::Session</link>().run(&#32;argc,&#32;argv&#32;);
17544 }
17545 
17546 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;__OBJC__</emphasis>
17547 
17548 <emphasis role="comment">//&#32;Objective-C&#32;entry&#32;point</emphasis>
17549 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_main_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627">main</link>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;<emphasis role="keyword">const</emphasis>&#32;argv[])&#32;{
17550 <emphasis role="preprocessor">#if&#32;!CATCH_ARC_ENABLED</emphasis>
17551 &#32;&#32;&#32;&#32;NSAutoreleasePool&#32;*&#32;pool&#32;=&#32;[[NSAutoreleasePool&#32;alloc]&#32;init];
17552 <emphasis role="preprocessor">#endif</emphasis>
17553 
17554 &#32;&#32;&#32;&#32;<link linkend="_struct_catch_1_1true__given">Catch::registerTestMethods</link>();
17555 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;result&#32;=&#32;<link linkend="_struct_catch_1_1true__given">Catch::Session</link>().run(&#32;argc,&#32;(<emphasis role="keywordtype">char</emphasis>**)argv&#32;);
17556 
17557 <emphasis role="preprocessor">#if&#32;!CATCH_ARC_ENABLED</emphasis>
17558 &#32;&#32;&#32;&#32;[pool&#32;drain];
17559 <emphasis role="preprocessor">#endif</emphasis>
17560 
17561 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
17562 }
17563 
17564 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__OBJC__</emphasis>
17565 
17566 <emphasis role="comment">//&#32;end&#32;catch_default_main.hpp</emphasis>
17567 <emphasis role="preprocessor">#endif</emphasis>
17568 
17569 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_IMPL_ONLY)</emphasis>
17570 
17571 <emphasis role="preprocessor">#ifdef&#32;CLARA_CONFIG_MAIN_NOT_DEFINED</emphasis>
17572 <emphasis role="preprocessor">#&#32;&#32;undef&#32;CLARA_CONFIG_MAIN</emphasis>
17573 <emphasis role="preprocessor">#endif</emphasis>
17574 
17575 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE)</emphasis>
17577 <emphasis role="comment">//&#32;If&#32;this&#32;config&#32;identifier&#32;is&#32;defined&#32;then&#32;all&#32;CATCH&#32;macros&#32;are&#32;prefixed&#32;with&#32;CATCH_</emphasis>
17578 <emphasis role="preprocessor">#ifdef&#32;CATCH_CONFIG_PREFIX_ALL</emphasis>
17579 
17580 <emphasis role="preprocessor">#define&#32;CATCH_REQUIRE(&#32;...&#32;)&#32;INTERNAL_CATCH_TEST(&#32;&quot;CATCH_REQUIRE&quot;,&#32;Catch::ResultDisposition::Normal,&#32;__VA_ARGS__&#32;)</emphasis>
17581 <emphasis role="preprocessor">#define&#32;CATCH_REQUIRE_FALSE(&#32;...&#32;)&#32;INTERNAL_CATCH_TEST(&#32;&quot;CATCH_REQUIRE_FALSE&quot;,&#32;Catch::ResultDisposition::Normal&#32;|&#32;Catch::ResultDisposition::FalseTest,&#32;__VA_ARGS__&#32;)</emphasis>
17582 
17583 <emphasis role="preprocessor">#define&#32;CATCH_REQUIRE_THROWS(&#32;...&#32;)&#32;INTERNAL_CATCH_THROWS(&#32;&quot;CATCH_REQUIRE_THROWS&quot;,&#32;Catch::ResultDisposition::Normal,&#32;__VA_ARGS__&#32;)</emphasis>
17584 <emphasis role="preprocessor">#define&#32;CATCH_REQUIRE_THROWS_AS(&#32;expr,&#32;exceptionType&#32;)&#32;INTERNAL_CATCH_THROWS_AS(&#32;&quot;CATCH_REQUIRE_THROWS_AS&quot;,&#32;exceptionType,&#32;Catch::ResultDisposition::Normal,&#32;expr&#32;)</emphasis>
17585 <emphasis role="preprocessor">#define&#32;CATCH_REQUIRE_THROWS_WITH(&#32;expr,&#32;matcher&#32;)&#32;INTERNAL_CATCH_THROWS_STR_MATCHES(&#32;&quot;CATCH_REQUIRE_THROWS_WITH&quot;,&#32;Catch::ResultDisposition::Normal,&#32;matcher,&#32;expr&#32;)</emphasis>
17586 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE_MATCHERS)</emphasis>
17587 <emphasis role="preprocessor">#define&#32;CATCH_REQUIRE_THROWS_MATCHES(&#32;expr,&#32;exceptionType,&#32;matcher&#32;)&#32;INTERNAL_CATCH_THROWS_MATCHES(&#32;&quot;CATCH_REQUIRE_THROWS_MATCHES&quot;,&#32;exceptionType,&#32;Catch::ResultDisposition::Normal,&#32;matcher,&#32;expr&#32;)</emphasis>
17588 <emphasis role="preprocessor">#endif</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_DISABLE_MATCHERS</emphasis>
17589 <emphasis role="preprocessor">#define&#32;CATCH_REQUIRE_NOTHROW(&#32;...&#32;)&#32;INTERNAL_CATCH_NO_THROW(&#32;&quot;CATCH_REQUIRE_NOTHROW&quot;,&#32;Catch::ResultDisposition::Normal,&#32;__VA_ARGS__&#32;)</emphasis>
17590 
17591 <emphasis role="preprocessor">#define&#32;CATCH_CHECK(&#32;...&#32;)&#32;INTERNAL_CATCH_TEST(&#32;&quot;CATCH_CHECK&quot;,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;__VA_ARGS__&#32;)</emphasis>
17592 <emphasis role="preprocessor">#define&#32;CATCH_CHECK_FALSE(&#32;...&#32;)&#32;INTERNAL_CATCH_TEST(&#32;&quot;CATCH_CHECK_FALSE&quot;,&#32;Catch::ResultDisposition::ContinueOnFailure&#32;|&#32;Catch::ResultDisposition::FalseTest,&#32;__VA_ARGS__&#32;)</emphasis>
17593 <emphasis role="preprocessor">#define&#32;CATCH_CHECKED_IF(&#32;...&#32;)&#32;INTERNAL_CATCH_IF(&#32;&quot;CATCH_CHECKED_IF&quot;,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;__VA_ARGS__&#32;)</emphasis>
17594 <emphasis role="preprocessor">#define&#32;CATCH_CHECKED_ELSE(&#32;...&#32;)&#32;INTERNAL_CATCH_ELSE(&#32;&quot;CATCH_CHECKED_ELSE&quot;,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;__VA_ARGS__&#32;)</emphasis>
17595 <emphasis role="preprocessor">#define&#32;CATCH_CHECK_NOFAIL(&#32;...&#32;)&#32;INTERNAL_CATCH_TEST(&#32;&quot;CATCH_CHECK_NOFAIL&quot;,&#32;Catch::ResultDisposition::ContinueOnFailure&#32;|&#32;Catch::ResultDisposition::SuppressFail,&#32;__VA_ARGS__&#32;)</emphasis>
17596 
17597 <emphasis role="preprocessor">#define&#32;CATCH_CHECK_THROWS(&#32;...&#32;)&#32;&#32;INTERNAL_CATCH_THROWS(&#32;&quot;CATCH_CHECK_THROWS&quot;,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;__VA_ARGS__&#32;)</emphasis>
17598 <emphasis role="preprocessor">#define&#32;CATCH_CHECK_THROWS_AS(&#32;expr,&#32;exceptionType&#32;)&#32;INTERNAL_CATCH_THROWS_AS(&#32;&quot;CATCH_CHECK_THROWS_AS&quot;,&#32;exceptionType,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;expr&#32;)</emphasis>
17599 <emphasis role="preprocessor">#define&#32;CATCH_CHECK_THROWS_WITH(&#32;expr,&#32;matcher&#32;)&#32;INTERNAL_CATCH_THROWS_STR_MATCHES(&#32;&quot;CATCH_CHECK_THROWS_WITH&quot;,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;matcher,&#32;expr&#32;)</emphasis>
17600 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE_MATCHERS)</emphasis>
17601 <emphasis role="preprocessor">#define&#32;CATCH_CHECK_THROWS_MATCHES(&#32;expr,&#32;exceptionType,&#32;matcher&#32;)&#32;INTERNAL_CATCH_THROWS_MATCHES(&#32;&quot;CATCH_CHECK_THROWS_MATCHES&quot;,&#32;exceptionType,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;matcher,&#32;expr&#32;)</emphasis>
17602 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_DISABLE_MATCHERS</emphasis>
17603 <emphasis role="preprocessor">#define&#32;CATCH_CHECK_NOTHROW(&#32;...&#32;)&#32;INTERNAL_CATCH_NO_THROW(&#32;&quot;CATCH_CHECK_NOTHROW&quot;,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;__VA_ARGS__&#32;)</emphasis>
17604 
17605 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE_MATCHERS)</emphasis>
17606 <emphasis role="preprocessor">#define&#32;CATCH_CHECK_THAT(&#32;arg,&#32;matcher&#32;)&#32;INTERNAL_CHECK_THAT(&#32;&quot;CATCH_CHECK_THAT&quot;,&#32;matcher,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;arg&#32;)</emphasis>
17607 
17608 <emphasis role="preprocessor">#define&#32;CATCH_REQUIRE_THAT(&#32;arg,&#32;matcher&#32;)&#32;INTERNAL_CHECK_THAT(&#32;&quot;CATCH_REQUIRE_THAT&quot;,&#32;matcher,&#32;Catch::ResultDisposition::Normal,&#32;arg&#32;)</emphasis>
17609 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_DISABLE_MATCHERS</emphasis>
17610 
17611 <emphasis role="preprocessor">#define&#32;CATCH_INFO(&#32;msg&#32;)&#32;INTERNAL_CATCH_INFO(&#32;&quot;CATCH_INFO&quot;,&#32;msg&#32;)</emphasis>
17612 <emphasis role="preprocessor">#define&#32;CATCH_UNSCOPED_INFO(&#32;msg&#32;)&#32;INTERNAL_CATCH_UNSCOPED_INFO(&#32;&quot;CATCH_UNSCOPED_INFO&quot;,&#32;msg&#32;)</emphasis>
17613 <emphasis role="preprocessor">#define&#32;CATCH_WARN(&#32;msg&#32;)&#32;INTERNAL_CATCH_MSG(&#32;&quot;CATCH_WARN&quot;,&#32;Catch::ResultWas::Warning,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;msg&#32;)</emphasis>
17614 <emphasis role="preprocessor">#define&#32;CATCH_CAPTURE(&#32;...&#32;)&#32;INTERNAL_CATCH_CAPTURE(&#32;INTERNAL_CATCH_UNIQUE_NAME(capturer),&#32;&quot;CATCH_CAPTURE&quot;,__VA_ARGS__&#32;)</emphasis>
17615 
17616 <emphasis role="preprocessor">#define&#32;CATCH_TEST_CASE(&#32;...&#32;)&#32;INTERNAL_CATCH_TESTCASE(&#32;__VA_ARGS__&#32;)</emphasis>
17617 <emphasis role="preprocessor">#define&#32;CATCH_TEST_CASE_METHOD(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_TEST_CASE_METHOD(&#32;className,&#32;__VA_ARGS__&#32;)</emphasis>
17618 <emphasis role="preprocessor">#define&#32;CATCH_METHOD_AS_TEST_CASE(&#32;method,&#32;...&#32;)&#32;INTERNAL_CATCH_METHOD_AS_TEST_CASE(&#32;method,&#32;__VA_ARGS__&#32;)</emphasis>
17619 <emphasis role="preprocessor">#define&#32;CATCH_REGISTER_TEST_CASE(&#32;Function,&#32;...&#32;)&#32;INTERNAL_CATCH_REGISTER_TESTCASE(&#32;Function,&#32;__VA_ARGS__&#32;)</emphasis>
17620 <emphasis role="preprocessor">#define&#32;CATCH_SECTION(&#32;...&#32;)&#32;INTERNAL_CATCH_SECTION(&#32;__VA_ARGS__&#32;)</emphasis>
17621 <emphasis role="preprocessor">#define&#32;CATCH_DYNAMIC_SECTION(&#32;...&#32;)&#32;INTERNAL_CATCH_DYNAMIC_SECTION(&#32;__VA_ARGS__&#32;)</emphasis>
17622 <emphasis role="preprocessor">#define&#32;CATCH_FAIL(&#32;...&#32;)&#32;INTERNAL_CATCH_MSG(&#32;&quot;CATCH_FAIL&quot;,&#32;Catch::ResultWas::ExplicitFailure,&#32;Catch::ResultDisposition::Normal,&#32;__VA_ARGS__&#32;)</emphasis>
17623 <emphasis role="preprocessor">#define&#32;CATCH_FAIL_CHECK(&#32;...&#32;)&#32;INTERNAL_CATCH_MSG(&#32;&quot;CATCH_FAIL_CHECK&quot;,&#32;Catch::ResultWas::ExplicitFailure,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;__VA_ARGS__&#32;)</emphasis>
17624 <emphasis role="preprocessor">#define&#32;CATCH_SUCCEED(&#32;...&#32;)&#32;INTERNAL_CATCH_MSG(&#32;&quot;CATCH_SUCCEED&quot;,&#32;Catch::ResultWas::Ok,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;__VA_ARGS__&#32;)</emphasis>
17625 
17626 <emphasis role="preprocessor">#define&#32;CATCH_ANON_TEST_CASE()&#32;INTERNAL_CATCH_TESTCASE()</emphasis>
17627 
17628 <emphasis role="preprocessor">#ifndef&#32;CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</emphasis>
17629 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_TEST_CASE(&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE(&#32;__VA_ARGS__&#32;)</emphasis>
17630 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_TEST_CASE_SIG(&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG(&#32;__VA_ARGS__&#32;)</emphasis>
17631 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_TEST_CASE_METHOD(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD(&#32;className,&#32;__VA_ARGS__&#32;)</emphasis>
17632 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_TEST_CASE_METHOD_SIG(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG(&#32;className,&#32;__VA_ARGS__&#32;)</emphasis>
17633 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_PRODUCT_TEST_CASE(&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE(&#32;__VA_ARGS__&#32;)</emphasis>
17634 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(&#32;__VA_ARGS__&#32;)</emphasis>
17635 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD(&#32;className,&#32;__VA_ARGS__&#32;)</emphasis>
17636 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(&#32;className,&#32;__VA_ARGS__&#32;)</emphasis>
17637 <emphasis role="preprocessor">#else</emphasis>
17638 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_TEST_CASE(&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE(&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
17639 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_TEST_CASE_SIG(&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG(&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
17640 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_TEST_CASE_METHOD(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD(&#32;className,&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
17641 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_TEST_CASE_METHOD_SIG(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG(&#32;className,&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
17642 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_PRODUCT_TEST_CASE(&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE(&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
17643 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
17644 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD(&#32;className,&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
17645 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(&#32;className,&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
17646 <emphasis role="preprocessor">#endif</emphasis>
17647 
17648 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_RUNTIME_STATIC_REQUIRE)</emphasis>
17649 <emphasis role="preprocessor">#define&#32;CATCH_STATIC_REQUIRE(&#32;...&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_assert(&#32;&#32;&#32;__VA_ARGS__&#32;,&#32;&#32;&#32;&#32;&#32;&#32;#__VA_ARGS__&#32;);&#32;&#32;&#32;&#32;&#32;CATCH_SUCCEED(&#32;#__VA_ARGS__&#32;)</emphasis>
17650 <emphasis role="preprocessor">#define&#32;CATCH_STATIC_REQUIRE_FALSE(&#32;...&#32;)&#32;static_assert(&#32;!(__VA_ARGS__),&#32;&quot;!(&quot;&#32;#__VA_ARGS__&#32;&quot;)&quot;&#32;);&#32;CATCH_SUCCEED(&#32;#__VA_ARGS__&#32;)</emphasis>
17651 <emphasis role="preprocessor">#else</emphasis>
17652 <emphasis role="preprocessor">#define&#32;CATCH_STATIC_REQUIRE(&#32;...&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;CATCH_REQUIRE(&#32;__VA_ARGS__&#32;)</emphasis>
17653 <emphasis role="preprocessor">#define&#32;CATCH_STATIC_REQUIRE_FALSE(&#32;...&#32;)&#32;CATCH_REQUIRE_FALSE(&#32;__VA_ARGS__&#32;)</emphasis>
17654 <emphasis role="preprocessor">#endif</emphasis>
17655 
17656 <emphasis role="comment">//&#32;&quot;BDD-style&quot;&#32;convenience&#32;wrappers</emphasis>
17657 <emphasis role="preprocessor">#define&#32;CATCH_SCENARIO(&#32;...&#32;)&#32;CATCH_TEST_CASE(&#32;&quot;Scenario:&#32;&quot;&#32;__VA_ARGS__&#32;)</emphasis>
17658 <emphasis role="preprocessor">#define&#32;CATCH_SCENARIO_METHOD(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_TEST_CASE_METHOD(&#32;className,&#32;&quot;Scenario:&#32;&quot;&#32;__VA_ARGS__&#32;)</emphasis>
17659 <emphasis role="preprocessor">#define&#32;CATCH_GIVEN(&#32;desc&#32;)&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_DYNAMIC_SECTION(&#32;&quot;&#32;&#32;&#32;&#32;Given:&#32;&quot;&#32;&lt;&lt;&#32;desc&#32;)</emphasis>
17660 <emphasis role="preprocessor">#define&#32;CATCH_AND_GIVEN(&#32;desc&#32;)&#32;INTERNAL_CATCH_DYNAMIC_SECTION(&#32;&quot;And&#32;given:&#32;&quot;&#32;&lt;&lt;&#32;desc&#32;)</emphasis>
17661 <emphasis role="preprocessor">#define&#32;CATCH_WHEN(&#32;desc&#32;)&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_DYNAMIC_SECTION(&#32;&quot;&#32;&#32;&#32;&#32;&#32;When:&#32;&quot;&#32;&lt;&lt;&#32;desc&#32;)</emphasis>
17662 <emphasis role="preprocessor">#define&#32;CATCH_AND_WHEN(&#32;desc&#32;)&#32;&#32;INTERNAL_CATCH_DYNAMIC_SECTION(&#32;&quot;&#32;And&#32;when:&#32;&quot;&#32;&lt;&lt;&#32;desc&#32;)</emphasis>
17663 <emphasis role="preprocessor">#define&#32;CATCH_THEN(&#32;desc&#32;)&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_DYNAMIC_SECTION(&#32;&quot;&#32;&#32;&#32;&#32;&#32;Then:&#32;&quot;&#32;&lt;&lt;&#32;desc&#32;)</emphasis>
17664 <emphasis role="preprocessor">#define&#32;CATCH_AND_THEN(&#32;desc&#32;)&#32;&#32;INTERNAL_CATCH_DYNAMIC_SECTION(&#32;&quot;&#32;&#32;&#32;&#32;&#32;&#32;And:&#32;&quot;&#32;&lt;&lt;&#32;desc&#32;)</emphasis>
17665 
17666 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</emphasis>
17667 <emphasis role="preprocessor">#define&#32;CATCH_BENCHMARK(...)&#32;\</emphasis>
17668 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;INTERNAL_CATCH_BENCHMARK(INTERNAL_CATCH_UNIQUE_NAME(C_A_T_C_H_B_E_N_C_H_),&#32;INTERNAL_CATCH_GET_1_ARG(__VA_ARGS__,,),&#32;INTERNAL_CATCH_GET_2_ARG(__VA_ARGS__,,))</emphasis>
17669 <emphasis role="preprocessor">#define&#32;CATCH_BENCHMARK_ADVANCED(name)&#32;\</emphasis>
17670 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;INTERNAL_CATCH_BENCHMARK_ADVANCED(INTERNAL_CATCH_UNIQUE_NAME(C_A_T_C_H_B_E_N_C_H_),&#32;name)</emphasis>
17671 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_ENABLE_BENCHMARKING</emphasis>
17672 
17673 <emphasis role="comment">//&#32;If&#32;CATCH_CONFIG_PREFIX_ALL&#32;is&#32;not&#32;defined&#32;then&#32;the&#32;CATCH_&#32;prefix&#32;is&#32;not&#32;required</emphasis>
17674 <emphasis role="preprocessor">#else</emphasis>
17675 
17676 <emphasis role="preprocessor">#define&#32;REQUIRE(&#32;...&#32;)&#32;INTERNAL_CATCH_TEST(&#32;&quot;REQUIRE&quot;,&#32;Catch::ResultDisposition::Normal,&#32;__VA_ARGS__&#32;&#32;)</emphasis>
17677 <emphasis role="preprocessor">#define&#32;REQUIRE_FALSE(&#32;...&#32;)&#32;INTERNAL_CATCH_TEST(&#32;&quot;REQUIRE_FALSE&quot;,&#32;Catch::ResultDisposition::Normal&#32;|&#32;Catch::ResultDisposition::FalseTest,&#32;__VA_ARGS__&#32;)</emphasis>
17678 
17679 <emphasis role="preprocessor">#define&#32;REQUIRE_THROWS(&#32;...&#32;)&#32;INTERNAL_CATCH_THROWS(&#32;&quot;REQUIRE_THROWS&quot;,&#32;Catch::ResultDisposition::Normal,&#32;__VA_ARGS__&#32;)</emphasis>
17680 <emphasis role="preprocessor">#define&#32;REQUIRE_THROWS_AS(&#32;expr,&#32;exceptionType&#32;)&#32;INTERNAL_CATCH_THROWS_AS(&#32;&quot;REQUIRE_THROWS_AS&quot;,&#32;exceptionType,&#32;Catch::ResultDisposition::Normal,&#32;expr&#32;)</emphasis>
17681 <emphasis role="preprocessor">#define&#32;REQUIRE_THROWS_WITH(&#32;expr,&#32;matcher&#32;)&#32;INTERNAL_CATCH_THROWS_STR_MATCHES(&#32;&quot;REQUIRE_THROWS_WITH&quot;,&#32;Catch::ResultDisposition::Normal,&#32;matcher,&#32;expr&#32;)</emphasis>
17682 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE_MATCHERS)</emphasis>
17683 <emphasis role="preprocessor">#define&#32;REQUIRE_THROWS_MATCHES(&#32;expr,&#32;exceptionType,&#32;matcher&#32;)&#32;INTERNAL_CATCH_THROWS_MATCHES(&#32;&quot;REQUIRE_THROWS_MATCHES&quot;,&#32;exceptionType,&#32;Catch::ResultDisposition::Normal,&#32;matcher,&#32;expr&#32;)</emphasis>
17684 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_DISABLE_MATCHERS</emphasis>
17685 <emphasis role="preprocessor">#define&#32;REQUIRE_NOTHROW(&#32;...&#32;)&#32;INTERNAL_CATCH_NO_THROW(&#32;&quot;REQUIRE_NOTHROW&quot;,&#32;Catch::ResultDisposition::Normal,&#32;__VA_ARGS__&#32;)</emphasis>
17686 
17687 <emphasis role="preprocessor">#define&#32;CHECK(&#32;...&#32;)&#32;INTERNAL_CATCH_TEST(&#32;&quot;CHECK&quot;,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;__VA_ARGS__&#32;)</emphasis>
17688 <emphasis role="preprocessor">#define&#32;CHECK_FALSE(&#32;...&#32;)&#32;INTERNAL_CATCH_TEST(&#32;&quot;CHECK_FALSE&quot;,&#32;Catch::ResultDisposition::ContinueOnFailure&#32;|&#32;Catch::ResultDisposition::FalseTest,&#32;__VA_ARGS__&#32;)</emphasis>
17689 <emphasis role="preprocessor">#define&#32;CHECKED_IF(&#32;...&#32;)&#32;INTERNAL_CATCH_IF(&#32;&quot;CHECKED_IF&quot;,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;__VA_ARGS__&#32;)</emphasis>
17690 <emphasis role="preprocessor">#define&#32;CHECKED_ELSE(&#32;...&#32;)&#32;INTERNAL_CATCH_ELSE(&#32;&quot;CHECKED_ELSE&quot;,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;__VA_ARGS__&#32;)</emphasis>
17691 <emphasis role="preprocessor">#define&#32;CHECK_NOFAIL(&#32;...&#32;)&#32;INTERNAL_CATCH_TEST(&#32;&quot;CHECK_NOFAIL&quot;,&#32;Catch::ResultDisposition::ContinueOnFailure&#32;|&#32;Catch::ResultDisposition::SuppressFail,&#32;__VA_ARGS__&#32;)</emphasis>
17692 
17693 <emphasis role="preprocessor">#define&#32;CHECK_THROWS(&#32;...&#32;)&#32;&#32;INTERNAL_CATCH_THROWS(&#32;&quot;CHECK_THROWS&quot;,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;__VA_ARGS__&#32;)</emphasis>
17694 <emphasis role="preprocessor">#define&#32;CHECK_THROWS_AS(&#32;expr,&#32;exceptionType&#32;)&#32;INTERNAL_CATCH_THROWS_AS(&#32;&quot;CHECK_THROWS_AS&quot;,&#32;exceptionType,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;expr&#32;)</emphasis>
17695 <emphasis role="preprocessor">#define&#32;CHECK_THROWS_WITH(&#32;expr,&#32;matcher&#32;)&#32;INTERNAL_CATCH_THROWS_STR_MATCHES(&#32;&quot;CHECK_THROWS_WITH&quot;,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;matcher,&#32;expr&#32;)</emphasis>
17696 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE_MATCHERS)</emphasis>
17697 <emphasis role="preprocessor">#define&#32;CHECK_THROWS_MATCHES(&#32;expr,&#32;exceptionType,&#32;matcher&#32;)&#32;INTERNAL_CATCH_THROWS_MATCHES(&#32;&quot;CHECK_THROWS_MATCHES&quot;,&#32;exceptionType,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;matcher,&#32;expr&#32;)</emphasis>
17698 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_DISABLE_MATCHERS</emphasis>
17699 <emphasis role="preprocessor">#define&#32;CHECK_NOTHROW(&#32;...&#32;)&#32;INTERNAL_CATCH_NO_THROW(&#32;&quot;CHECK_NOTHROW&quot;,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;__VA_ARGS__&#32;)</emphasis>
17700 
17701 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE_MATCHERS)</emphasis>
17702 <emphasis role="preprocessor">#define&#32;CHECK_THAT(&#32;arg,&#32;matcher&#32;)&#32;INTERNAL_CHECK_THAT(&#32;&quot;CHECK_THAT&quot;,&#32;matcher,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;arg&#32;)</emphasis>
17703 
17704 <emphasis role="preprocessor">#define&#32;REQUIRE_THAT(&#32;arg,&#32;matcher&#32;)&#32;INTERNAL_CHECK_THAT(&#32;&quot;REQUIRE_THAT&quot;,&#32;matcher,&#32;Catch::ResultDisposition::Normal,&#32;arg&#32;)</emphasis>
17705 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_DISABLE_MATCHERS</emphasis>
17706 
17707 <emphasis role="preprocessor">#define&#32;INFO(&#32;msg&#32;)&#32;INTERNAL_CATCH_INFO(&#32;&quot;INFO&quot;,&#32;msg&#32;)</emphasis>
17708 <emphasis role="preprocessor">#define&#32;UNSCOPED_INFO(&#32;msg&#32;)&#32;INTERNAL_CATCH_UNSCOPED_INFO(&#32;&quot;UNSCOPED_INFO&quot;,&#32;msg&#32;)</emphasis>
17709 <emphasis role="preprocessor">#define&#32;WARN(&#32;msg&#32;)&#32;INTERNAL_CATCH_MSG(&#32;&quot;WARN&quot;,&#32;Catch::ResultWas::Warning,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;msg&#32;)</emphasis>
17710 <emphasis role="preprocessor">#define&#32;CAPTURE(&#32;...&#32;)&#32;INTERNAL_CATCH_CAPTURE(&#32;INTERNAL_CATCH_UNIQUE_NAME(capturer),&#32;&quot;CAPTURE&quot;,__VA_ARGS__&#32;)</emphasis>
17711 
17712 <emphasis role="preprocessor">#define&#32;TEST_CASE(&#32;...&#32;)&#32;INTERNAL_CATCH_TESTCASE(&#32;__VA_ARGS__&#32;)</emphasis>
17713 <emphasis role="preprocessor">#define&#32;TEST_CASE_METHOD(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_TEST_CASE_METHOD(&#32;className,&#32;__VA_ARGS__&#32;)</emphasis>
17714 <emphasis role="preprocessor">#define&#32;METHOD_AS_TEST_CASE(&#32;method,&#32;...&#32;)&#32;INTERNAL_CATCH_METHOD_AS_TEST_CASE(&#32;method,&#32;__VA_ARGS__&#32;)</emphasis>
17715 <emphasis role="preprocessor">#define&#32;REGISTER_TEST_CASE(&#32;Function,&#32;...&#32;)&#32;INTERNAL_CATCH_REGISTER_TESTCASE(&#32;Function,&#32;__VA_ARGS__&#32;)</emphasis>
17716 <emphasis role="preprocessor">#define&#32;SECTION(&#32;...&#32;)&#32;INTERNAL_CATCH_SECTION(&#32;__VA_ARGS__&#32;)</emphasis>
17717 <emphasis role="preprocessor">#define&#32;DYNAMIC_SECTION(&#32;...&#32;)&#32;INTERNAL_CATCH_DYNAMIC_SECTION(&#32;__VA_ARGS__&#32;)</emphasis>
17718 <emphasis role="preprocessor">#define&#32;FAIL(&#32;...&#32;)&#32;INTERNAL_CATCH_MSG(&#32;&quot;FAIL&quot;,&#32;Catch::ResultWas::ExplicitFailure,&#32;Catch::ResultDisposition::Normal,&#32;__VA_ARGS__&#32;)</emphasis>
17719 <emphasis role="preprocessor">#define&#32;FAIL_CHECK(&#32;...&#32;)&#32;INTERNAL_CATCH_MSG(&#32;&quot;FAIL_CHECK&quot;,&#32;Catch::ResultWas::ExplicitFailure,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;__VA_ARGS__&#32;)</emphasis>
17720 <emphasis role="preprocessor">#define&#32;SUCCEED(&#32;...&#32;)&#32;INTERNAL_CATCH_MSG(&#32;&quot;SUCCEED&quot;,&#32;Catch::ResultWas::Ok,&#32;Catch::ResultDisposition::ContinueOnFailure,&#32;__VA_ARGS__&#32;)</emphasis>
17721 <emphasis role="preprocessor">#define&#32;ANON_TEST_CASE()&#32;INTERNAL_CATCH_TESTCASE()</emphasis>
17722 
17723 <emphasis role="preprocessor">#ifndef&#32;CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</emphasis>
17724 <emphasis role="preprocessor">#define&#32;TEMPLATE_TEST_CASE(&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE(&#32;__VA_ARGS__&#32;)</emphasis>
17725 <emphasis role="preprocessor">#define&#32;TEMPLATE_TEST_CASE_SIG(&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG(&#32;__VA_ARGS__&#32;)</emphasis>
17726 <emphasis role="preprocessor">#define&#32;TEMPLATE_TEST_CASE_METHOD(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD(&#32;className,&#32;__VA_ARGS__&#32;)</emphasis>
17727 <emphasis role="preprocessor">#define&#32;TEMPLATE_TEST_CASE_METHOD_SIG(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG(&#32;className,&#32;__VA_ARGS__&#32;)</emphasis>
17728 <emphasis role="preprocessor">#define&#32;TEMPLATE_PRODUCT_TEST_CASE(&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE(&#32;__VA_ARGS__&#32;)</emphasis>
17729 <emphasis role="preprocessor">#define&#32;TEMPLATE_PRODUCT_TEST_CASE_SIG(&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(&#32;__VA_ARGS__&#32;)</emphasis>
17730 <emphasis role="preprocessor">#define&#32;TEMPLATE_PRODUCT_TEST_CASE_METHOD(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD(&#32;className,&#32;__VA_ARGS__&#32;)</emphasis>
17731 <emphasis role="preprocessor">#define&#32;TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(&#32;className,&#32;__VA_ARGS__&#32;)</emphasis>
17732 <emphasis role="preprocessor">#define&#32;TEMPLATE_LIST_TEST_CASE(&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE(__VA_ARGS__)</emphasis>
17733 <emphasis role="preprocessor">#define&#32;TEMPLATE_LIST_TEST_CASE_METHOD(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD(&#32;className,&#32;__VA_ARGS__&#32;)</emphasis>
17734 <emphasis role="preprocessor">#else</emphasis>
17735 <emphasis role="preprocessor">#define&#32;TEMPLATE_TEST_CASE(&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE(&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
17736 <emphasis role="preprocessor">#define&#32;TEMPLATE_TEST_CASE_SIG(&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG(&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
17737 <emphasis role="preprocessor">#define&#32;TEMPLATE_TEST_CASE_METHOD(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD(&#32;className,&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
17738 <emphasis role="preprocessor">#define&#32;TEMPLATE_TEST_CASE_METHOD_SIG(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG(&#32;className,&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
17739 <emphasis role="preprocessor">#define&#32;TEMPLATE_PRODUCT_TEST_CASE(&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE(&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
17740 <emphasis role="preprocessor">#define&#32;TEMPLATE_PRODUCT_TEST_CASE_SIG(&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
17741 <emphasis role="preprocessor">#define&#32;TEMPLATE_PRODUCT_TEST_CASE_METHOD(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD(&#32;className,&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
17742 <emphasis role="preprocessor">#define&#32;TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(&#32;className,&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
17743 <emphasis role="preprocessor">#define&#32;TEMPLATE_LIST_TEST_CASE(&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE(&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
17744 <emphasis role="preprocessor">#define&#32;TEMPLATE_LIST_TEST_CASE_METHOD(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD(&#32;className,&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
17745 <emphasis role="preprocessor">#endif</emphasis>
17746 
17747 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_RUNTIME_STATIC_REQUIRE)</emphasis>
17748 <emphasis role="preprocessor">#define&#32;STATIC_REQUIRE(&#32;...&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_assert(&#32;&#32;&#32;__VA_ARGS__,&#32;&#32;#__VA_ARGS__&#32;);&#32;SUCCEED(&#32;#__VA_ARGS__&#32;)</emphasis>
17749 <emphasis role="preprocessor">#define&#32;STATIC_REQUIRE_FALSE(&#32;...&#32;)&#32;static_assert(&#32;!(__VA_ARGS__),&#32;&quot;!(&quot;&#32;#__VA_ARGS__&#32;&quot;)&quot;&#32;);&#32;SUCCEED(&#32;&quot;!(&quot;&#32;#__VA_ARGS__&#32;&quot;)&quot;&#32;)</emphasis>
17750 <emphasis role="preprocessor">#else</emphasis>
17751 <emphasis role="preprocessor">#define&#32;STATIC_REQUIRE(&#32;...&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;REQUIRE(&#32;__VA_ARGS__&#32;)</emphasis>
17752 <emphasis role="preprocessor">#define&#32;STATIC_REQUIRE_FALSE(&#32;...&#32;)&#32;REQUIRE_FALSE(&#32;__VA_ARGS__&#32;)</emphasis>
17753 <emphasis role="preprocessor">#endif</emphasis>
17754 
17755 <emphasis role="preprocessor">#endif</emphasis>
17756 
17757 <emphasis role="preprocessor">#define&#32;CATCH_TRANSLATE_EXCEPTION(&#32;signature&#32;)&#32;INTERNAL_CATCH_TRANSLATE_EXCEPTION(&#32;signature&#32;)</emphasis>
17758 
17759 <emphasis role="comment">//&#32;&quot;BDD-style&quot;&#32;convenience&#32;wrappers</emphasis>
17760 <emphasis role="preprocessor">#define&#32;SCENARIO(&#32;...&#32;)&#32;TEST_CASE(&#32;&quot;Scenario:&#32;&quot;&#32;__VA_ARGS__&#32;)</emphasis>
17761 <emphasis role="preprocessor">#define&#32;SCENARIO_METHOD(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_TEST_CASE_METHOD(&#32;className,&#32;&quot;Scenario:&#32;&quot;&#32;__VA_ARGS__&#32;)</emphasis>
17762 
17763 <emphasis role="preprocessor">#define&#32;GIVEN(&#32;desc&#32;)&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_DYNAMIC_SECTION(&#32;&quot;&#32;&#32;&#32;&#32;Given:&#32;&quot;&#32;&lt;&lt;&#32;desc&#32;)</emphasis>
17764 <emphasis role="preprocessor">#define&#32;AND_GIVEN(&#32;desc&#32;)&#32;INTERNAL_CATCH_DYNAMIC_SECTION(&#32;&quot;And&#32;given:&#32;&quot;&#32;&lt;&lt;&#32;desc&#32;)</emphasis>
17765 <emphasis role="preprocessor">#define&#32;WHEN(&#32;desc&#32;)&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_DYNAMIC_SECTION(&#32;&quot;&#32;&#32;&#32;&#32;&#32;When:&#32;&quot;&#32;&lt;&lt;&#32;desc&#32;)</emphasis>
17766 <emphasis role="preprocessor">#define&#32;AND_WHEN(&#32;desc&#32;)&#32;&#32;INTERNAL_CATCH_DYNAMIC_SECTION(&#32;&quot;&#32;And&#32;when:&#32;&quot;&#32;&lt;&lt;&#32;desc&#32;)</emphasis>
17767 <emphasis role="preprocessor">#define&#32;THEN(&#32;desc&#32;)&#32;&#32;&#32;&#32;&#32;&#32;INTERNAL_CATCH_DYNAMIC_SECTION(&#32;&quot;&#32;&#32;&#32;&#32;&#32;Then:&#32;&quot;&#32;&lt;&lt;&#32;desc&#32;)</emphasis>
17768 <emphasis role="preprocessor">#define&#32;AND_THEN(&#32;desc&#32;)&#32;&#32;INTERNAL_CATCH_DYNAMIC_SECTION(&#32;&quot;&#32;&#32;&#32;&#32;&#32;&#32;And:&#32;&quot;&#32;&lt;&lt;&#32;desc&#32;)</emphasis>
17769 
17770 <emphasis role="preprocessor">#if&#32;defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</emphasis>
17771 <emphasis role="preprocessor">#define&#32;BENCHMARK(...)&#32;\</emphasis>
17772 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;INTERNAL_CATCH_BENCHMARK(INTERNAL_CATCH_UNIQUE_NAME(C_A_T_C_H_B_E_N_C_H_),&#32;INTERNAL_CATCH_GET_1_ARG(__VA_ARGS__,,),&#32;INTERNAL_CATCH_GET_2_ARG(__VA_ARGS__,,))</emphasis>
17773 <emphasis role="preprocessor">#define&#32;BENCHMARK_ADVANCED(name)&#32;\</emphasis>
17774 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;INTERNAL_CATCH_BENCHMARK_ADVANCED(INTERNAL_CATCH_UNIQUE_NAME(C_A_T_C_H_B_E_N_C_H_),&#32;name)</emphasis>
17775 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_ENABLE_BENCHMARKING</emphasis>
17776 
17777 <emphasis role="keyword">using&#32;</emphasis><link linkend="_class_catch_1_1_detail_1_1_approx">Catch::Detail::Approx</link>;
17778 
17779 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_DISABLE</emphasis>
17780 
17782 <emphasis role="comment">//&#32;If&#32;this&#32;config&#32;identifier&#32;is&#32;defined&#32;then&#32;all&#32;CATCH&#32;macros&#32;are&#32;prefixed&#32;with&#32;CATCH_</emphasis>
17783 <emphasis role="preprocessor">#ifdef&#32;CATCH_CONFIG_PREFIX_ALL</emphasis>
17784 
17785 <emphasis role="preprocessor">#define&#32;CATCH_REQUIRE(&#32;...&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)(0)</emphasis>
17786 <emphasis role="preprocessor">#define&#32;CATCH_REQUIRE_FALSE(&#32;...&#32;)&#32;&#32;(void)(0)</emphasis>
17787 
17788 <emphasis role="preprocessor">#define&#32;CATCH_REQUIRE_THROWS(&#32;...&#32;)&#32;(void)(0)</emphasis>
17789 <emphasis role="preprocessor">#define&#32;CATCH_REQUIRE_THROWS_AS(&#32;expr,&#32;exceptionType&#32;)&#32;(void)(0)</emphasis>
17790 <emphasis role="preprocessor">#define&#32;CATCH_REQUIRE_THROWS_WITH(&#32;expr,&#32;matcher&#32;)&#32;&#32;&#32;&#32;&#32;(void)(0)</emphasis>
17791 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE_MATCHERS)</emphasis>
17792 <emphasis role="preprocessor">#define&#32;CATCH_REQUIRE_THROWS_MATCHES(&#32;expr,&#32;exceptionType,&#32;matcher&#32;)&#32;(void)(0)</emphasis>
17793 <emphasis role="preprocessor">#endif</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_DISABLE_MATCHERS</emphasis>
17794 <emphasis role="preprocessor">#define&#32;CATCH_REQUIRE_NOTHROW(&#32;...&#32;)&#32;(void)(0)</emphasis>
17795 
17796 <emphasis role="preprocessor">#define&#32;CATCH_CHECK(&#32;...&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)(0)</emphasis>
17797 <emphasis role="preprocessor">#define&#32;CATCH_CHECK_FALSE(&#32;...&#32;)&#32;&#32;&#32;(void)(0)</emphasis>
17798 <emphasis role="preprocessor">#define&#32;CATCH_CHECKED_IF(&#32;...&#32;)&#32;&#32;&#32;&#32;if&#32;(__VA_ARGS__)</emphasis>
17799 <emphasis role="preprocessor">#define&#32;CATCH_CHECKED_ELSE(&#32;...&#32;)&#32;&#32;if&#32;(!(__VA_ARGS__))</emphasis>
17800 <emphasis role="preprocessor">#define&#32;CATCH_CHECK_NOFAIL(&#32;...&#32;)&#32;&#32;(void)(0)</emphasis>
17801 
17802 <emphasis role="preprocessor">#define&#32;CATCH_CHECK_THROWS(&#32;...&#32;)&#32;&#32;(void)(0)</emphasis>
17803 <emphasis role="preprocessor">#define&#32;CATCH_CHECK_THROWS_AS(&#32;expr,&#32;exceptionType&#32;)&#32;(void)(0)</emphasis>
17804 <emphasis role="preprocessor">#define&#32;CATCH_CHECK_THROWS_WITH(&#32;expr,&#32;matcher&#32;)&#32;&#32;&#32;&#32;&#32;(void)(0)</emphasis>
17805 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE_MATCHERS)</emphasis>
17806 <emphasis role="preprocessor">#define&#32;CATCH_CHECK_THROWS_MATCHES(&#32;expr,&#32;exceptionType,&#32;matcher&#32;)&#32;(void)(0)</emphasis>
17807 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_DISABLE_MATCHERS</emphasis>
17808 <emphasis role="preprocessor">#define&#32;CATCH_CHECK_NOTHROW(&#32;...&#32;)&#32;(void)(0)</emphasis>
17809 
17810 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE_MATCHERS)</emphasis>
17811 <emphasis role="preprocessor">#define&#32;CATCH_CHECK_THAT(&#32;arg,&#32;matcher&#32;)&#32;&#32;&#32;(void)(0)</emphasis>
17812 
17813 <emphasis role="preprocessor">#define&#32;CATCH_REQUIRE_THAT(&#32;arg,&#32;matcher&#32;)&#32;(void)(0)</emphasis>
17814 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_DISABLE_MATCHERS</emphasis>
17815 
17816 <emphasis role="preprocessor">#define&#32;CATCH_INFO(&#32;msg&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)(0)</emphasis>
17817 <emphasis role="preprocessor">#define&#32;CATCH_UNSCOPED_INFO(&#32;msg&#32;)&#32;(void)(0)</emphasis>
17818 <emphasis role="preprocessor">#define&#32;CATCH_WARN(&#32;msg&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)(0)</emphasis>
17819 <emphasis role="preprocessor">#define&#32;CATCH_CAPTURE(&#32;msg&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)(0)</emphasis>
17820 
17821 <emphasis role="preprocessor">#define&#32;CATCH_TEST_CASE(&#32;...&#32;)&#32;INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_S_T_&#32;))</emphasis>
17822 <emphasis role="preprocessor">#define&#32;CATCH_TEST_CASE_METHOD(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_S_T_&#32;))</emphasis>
17823 <emphasis role="preprocessor">#define&#32;CATCH_METHOD_AS_TEST_CASE(&#32;method,&#32;...&#32;)</emphasis>
17824 <emphasis role="preprocessor">#define&#32;CATCH_REGISTER_TEST_CASE(&#32;Function,&#32;...&#32;)&#32;(void)(0)</emphasis>
17825 <emphasis role="preprocessor">#define&#32;CATCH_SECTION(&#32;...&#32;)</emphasis>
17826 <emphasis role="preprocessor">#define&#32;CATCH_DYNAMIC_SECTION(&#32;...&#32;)</emphasis>
17827 <emphasis role="preprocessor">#define&#32;CATCH_FAIL(&#32;...&#32;)&#32;(void)(0)</emphasis>
17828 <emphasis role="preprocessor">#define&#32;CATCH_FAIL_CHECK(&#32;...&#32;)&#32;(void)(0)</emphasis>
17829 <emphasis role="preprocessor">#define&#32;CATCH_SUCCEED(&#32;...&#32;)&#32;(void)(0)</emphasis>
17830 
17831 <emphasis role="preprocessor">#define&#32;CATCH_ANON_TEST_CASE()&#32;INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_S_T_&#32;))</emphasis>
17832 
17833 <emphasis role="preprocessor">#ifndef&#32;CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</emphasis>
17834 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_TEST_CASE(&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(__VA_ARGS__)</emphasis>
17835 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_TEST_CASE_SIG(&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(__VA_ARGS__)</emphasis>
17836 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_TEST_CASE_METHOD(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION(className,&#32;__VA_ARGS__)</emphasis>
17837 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_TEST_CASE_METHOD_SIG(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION(className,&#32;__VA_ARGS__&#32;)</emphasis>
17838 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_PRODUCT_TEST_CASE(&#32;...&#32;)&#32;CATCH_TEMPLATE_TEST_CASE(&#32;__VA_ARGS__&#32;)</emphasis>
17839 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(&#32;...&#32;)&#32;CATCH_TEMPLATE_TEST_CASE(&#32;__VA_ARGS__&#32;)</emphasis>
17840 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD(&#32;className,&#32;...&#32;)&#32;CATCH_TEMPLATE_TEST_CASE_METHOD(&#32;className,&#32;__VA_ARGS__&#32;)</emphasis>
17841 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(&#32;className,&#32;...&#32;)&#32;CATCH_TEMPLATE_TEST_CASE_METHOD(&#32;className,&#32;__VA_ARGS__&#32;)</emphasis>
17842 <emphasis role="preprocessor">#else</emphasis>
17843 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_TEST_CASE(&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(__VA_ARGS__)&#32;)</emphasis>
17844 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_TEST_CASE_SIG(&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(__VA_ARGS__)&#32;)</emphasis>
17845 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_TEST_CASE_METHOD(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION(className,&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
17846 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_TEST_CASE_METHOD_SIG(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION(className,&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
17847 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_PRODUCT_TEST_CASE(&#32;...&#32;)&#32;CATCH_TEMPLATE_TEST_CASE(&#32;__VA_ARGS__&#32;)</emphasis>
17848 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(&#32;...&#32;)&#32;CATCH_TEMPLATE_TEST_CASE(&#32;__VA_ARGS__&#32;)</emphasis>
17849 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD(&#32;className,&#32;...&#32;)&#32;CATCH_TEMPLATE_TEST_CASE_METHOD(&#32;className,&#32;__VA_ARGS__&#32;)</emphasis>
17850 <emphasis role="preprocessor">#define&#32;CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(&#32;className,&#32;...&#32;)&#32;CATCH_TEMPLATE_TEST_CASE_METHOD(&#32;className,&#32;__VA_ARGS__&#32;)</emphasis>
17851 <emphasis role="preprocessor">#endif</emphasis>
17852 
17853 <emphasis role="comment">//&#32;&quot;BDD-style&quot;&#32;convenience&#32;wrappers</emphasis>
17854 <emphasis role="preprocessor">#define&#32;CATCH_SCENARIO(&#32;...&#32;)&#32;INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_S_T_&#32;))</emphasis>
17855 <emphasis role="preprocessor">#define&#32;CATCH_SCENARIO_METHOD(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_S_T_&#32;),&#32;className&#32;)</emphasis>
17856 <emphasis role="preprocessor">#define&#32;CATCH_GIVEN(&#32;desc&#32;)</emphasis>
17857 <emphasis role="preprocessor">#define&#32;CATCH_AND_GIVEN(&#32;desc&#32;)</emphasis>
17858 <emphasis role="preprocessor">#define&#32;CATCH_WHEN(&#32;desc&#32;)</emphasis>
17859 <emphasis role="preprocessor">#define&#32;CATCH_AND_WHEN(&#32;desc&#32;)</emphasis>
17860 <emphasis role="preprocessor">#define&#32;CATCH_THEN(&#32;desc&#32;)</emphasis>
17861 <emphasis role="preprocessor">#define&#32;CATCH_AND_THEN(&#32;desc&#32;)</emphasis>
17862 
17863 <emphasis role="preprocessor">#define&#32;CATCH_STATIC_REQUIRE(&#32;...&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)(0)</emphasis>
17864 <emphasis role="preprocessor">#define&#32;CATCH_STATIC_REQUIRE_FALSE(&#32;...&#32;)&#32;(void)(0)</emphasis>
17865 
17866 <emphasis role="comment">//&#32;If&#32;CATCH_CONFIG_PREFIX_ALL&#32;is&#32;not&#32;defined&#32;then&#32;the&#32;CATCH_&#32;prefix&#32;is&#32;not&#32;required</emphasis>
17867 <emphasis role="preprocessor">#else</emphasis>
17868 
17869 <emphasis role="preprocessor">#define&#32;REQUIRE(&#32;...&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)(0)</emphasis>
17870 <emphasis role="preprocessor">#define&#32;REQUIRE_FALSE(&#32;...&#32;)&#32;(void)(0)</emphasis>
17871 
17872 <emphasis role="preprocessor">#define&#32;REQUIRE_THROWS(&#32;...&#32;)&#32;(void)(0)</emphasis>
17873 <emphasis role="preprocessor">#define&#32;REQUIRE_THROWS_AS(&#32;expr,&#32;exceptionType&#32;)&#32;(void)(0)</emphasis>
17874 <emphasis role="preprocessor">#define&#32;REQUIRE_THROWS_WITH(&#32;expr,&#32;matcher&#32;)&#32;(void)(0)</emphasis>
17875 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE_MATCHERS)</emphasis>
17876 <emphasis role="preprocessor">#define&#32;REQUIRE_THROWS_MATCHES(&#32;expr,&#32;exceptionType,&#32;matcher&#32;)&#32;(void)(0)</emphasis>
17877 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_DISABLE_MATCHERS</emphasis>
17878 <emphasis role="preprocessor">#define&#32;REQUIRE_NOTHROW(&#32;...&#32;)&#32;(void)(0)</emphasis>
17879 
17880 <emphasis role="preprocessor">#define&#32;CHECK(&#32;...&#32;)&#32;(void)(0)</emphasis>
17881 <emphasis role="preprocessor">#define&#32;CHECK_FALSE(&#32;...&#32;)&#32;(void)(0)</emphasis>
17882 <emphasis role="preprocessor">#define&#32;CHECKED_IF(&#32;...&#32;)&#32;if&#32;(__VA_ARGS__)</emphasis>
17883 <emphasis role="preprocessor">#define&#32;CHECKED_ELSE(&#32;...&#32;)&#32;if&#32;(!(__VA_ARGS__))</emphasis>
17884 <emphasis role="preprocessor">#define&#32;CHECK_NOFAIL(&#32;...&#32;)&#32;(void)(0)</emphasis>
17885 
17886 <emphasis role="preprocessor">#define&#32;CHECK_THROWS(&#32;...&#32;)&#32;&#32;(void)(0)</emphasis>
17887 <emphasis role="preprocessor">#define&#32;CHECK_THROWS_AS(&#32;expr,&#32;exceptionType&#32;)&#32;(void)(0)</emphasis>
17888 <emphasis role="preprocessor">#define&#32;CHECK_THROWS_WITH(&#32;expr,&#32;matcher&#32;)&#32;(void)(0)</emphasis>
17889 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE_MATCHERS)</emphasis>
17890 <emphasis role="preprocessor">#define&#32;CHECK_THROWS_MATCHES(&#32;expr,&#32;exceptionType,&#32;matcher&#32;)&#32;(void)(0)</emphasis>
17891 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_DISABLE_MATCHERS</emphasis>
17892 <emphasis role="preprocessor">#define&#32;CHECK_NOTHROW(&#32;...&#32;)&#32;(void)(0)</emphasis>
17893 
17894 <emphasis role="preprocessor">#if&#32;!defined(CATCH_CONFIG_DISABLE_MATCHERS)</emphasis>
17895 <emphasis role="preprocessor">#define&#32;CHECK_THAT(&#32;arg,&#32;matcher&#32;)&#32;(void)(0)</emphasis>
17896 
17897 <emphasis role="preprocessor">#define&#32;REQUIRE_THAT(&#32;arg,&#32;matcher&#32;)&#32;(void)(0)</emphasis>
17898 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CATCH_CONFIG_DISABLE_MATCHERS</emphasis>
17899 
17900 <emphasis role="preprocessor">#define&#32;INFO(&#32;msg&#32;)&#32;(void)(0)</emphasis>
17901 <emphasis role="preprocessor">#define&#32;UNSCOPED_INFO(&#32;msg&#32;)&#32;(void)(0)</emphasis>
17902 <emphasis role="preprocessor">#define&#32;WARN(&#32;msg&#32;)&#32;(void)(0)</emphasis>
17903 <emphasis role="preprocessor">#define&#32;CAPTURE(&#32;...&#32;)&#32;(void)(0)</emphasis>
17904 
17905 <emphasis role="preprocessor">#define&#32;TEST_CASE(&#32;...&#32;)&#32;&#32;INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_S_T_&#32;))</emphasis>
17906 <emphasis role="preprocessor">#define&#32;TEST_CASE_METHOD(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_S_T_&#32;))</emphasis>
17907 <emphasis role="preprocessor">#define&#32;METHOD_AS_TEST_CASE(&#32;method,&#32;...&#32;)</emphasis>
17908 <emphasis role="preprocessor">#define&#32;REGISTER_TEST_CASE(&#32;Function,&#32;...&#32;)&#32;(void)(0)</emphasis>
17909 <emphasis role="preprocessor">#define&#32;SECTION(&#32;...&#32;)</emphasis>
17910 <emphasis role="preprocessor">#define&#32;DYNAMIC_SECTION(&#32;...&#32;)</emphasis>
17911 <emphasis role="preprocessor">#define&#32;FAIL(&#32;...&#32;)&#32;(void)(0)</emphasis>
17912 <emphasis role="preprocessor">#define&#32;FAIL_CHECK(&#32;...&#32;)&#32;(void)(0)</emphasis>
17913 <emphasis role="preprocessor">#define&#32;SUCCEED(&#32;...&#32;)&#32;(void)(0)</emphasis>
17914 <emphasis role="preprocessor">#define&#32;ANON_TEST_CASE()&#32;INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_S_T_&#32;))</emphasis>
17915 
17916 <emphasis role="preprocessor">#ifndef&#32;CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</emphasis>
17917 <emphasis role="preprocessor">#define&#32;TEMPLATE_TEST_CASE(&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(__VA_ARGS__)</emphasis>
17918 <emphasis role="preprocessor">#define&#32;TEMPLATE_TEST_CASE_SIG(&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(__VA_ARGS__)</emphasis>
17919 <emphasis role="preprocessor">#define&#32;TEMPLATE_TEST_CASE_METHOD(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION(className,&#32;__VA_ARGS__)</emphasis>
17920 <emphasis role="preprocessor">#define&#32;TEMPLATE_TEST_CASE_METHOD_SIG(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION(className,&#32;__VA_ARGS__&#32;)</emphasis>
17921 <emphasis role="preprocessor">#define&#32;TEMPLATE_PRODUCT_TEST_CASE(&#32;...&#32;)&#32;TEMPLATE_TEST_CASE(&#32;__VA_ARGS__&#32;)</emphasis>
17922 <emphasis role="preprocessor">#define&#32;TEMPLATE_PRODUCT_TEST_CASE_SIG(&#32;...&#32;)&#32;TEMPLATE_TEST_CASE(&#32;__VA_ARGS__&#32;)</emphasis>
17923 <emphasis role="preprocessor">#define&#32;TEMPLATE_PRODUCT_TEST_CASE_METHOD(&#32;className,&#32;...&#32;)&#32;TEMPLATE_TEST_CASE_METHOD(&#32;className,&#32;__VA_ARGS__&#32;)</emphasis>
17924 <emphasis role="preprocessor">#define&#32;TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(&#32;className,&#32;...&#32;)&#32;TEMPLATE_TEST_CASE_METHOD(&#32;className,&#32;__VA_ARGS__&#32;)</emphasis>
17925 <emphasis role="preprocessor">#else</emphasis>
17926 <emphasis role="preprocessor">#define&#32;TEMPLATE_TEST_CASE(&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(__VA_ARGS__)&#32;)</emphasis>
17927 <emphasis role="preprocessor">#define&#32;TEMPLATE_TEST_CASE_SIG(&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(__VA_ARGS__)&#32;)</emphasis>
17928 <emphasis role="preprocessor">#define&#32;TEMPLATE_TEST_CASE_METHOD(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION(className,&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
17929 <emphasis role="preprocessor">#define&#32;TEMPLATE_TEST_CASE_METHOD_SIG(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_EXPAND_VARGS(&#32;INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION(className,&#32;__VA_ARGS__&#32;)&#32;)</emphasis>
17930 <emphasis role="preprocessor">#define&#32;TEMPLATE_PRODUCT_TEST_CASE(&#32;...&#32;)&#32;TEMPLATE_TEST_CASE(&#32;__VA_ARGS__&#32;)</emphasis>
17931 <emphasis role="preprocessor">#define&#32;TEMPLATE_PRODUCT_TEST_CASE_SIG(&#32;...&#32;)&#32;TEMPLATE_TEST_CASE(&#32;__VA_ARGS__&#32;)</emphasis>
17932 <emphasis role="preprocessor">#define&#32;TEMPLATE_PRODUCT_TEST_CASE_METHOD(&#32;className,&#32;...&#32;)&#32;TEMPLATE_TEST_CASE_METHOD(&#32;className,&#32;__VA_ARGS__&#32;)</emphasis>
17933 <emphasis role="preprocessor">#define&#32;TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(&#32;className,&#32;...&#32;)&#32;TEMPLATE_TEST_CASE_METHOD(&#32;className,&#32;__VA_ARGS__&#32;)</emphasis>
17934 <emphasis role="preprocessor">#endif</emphasis>
17935 
17936 <emphasis role="preprocessor">#define&#32;STATIC_REQUIRE(&#32;...&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)(0)</emphasis>
17937 <emphasis role="preprocessor">#define&#32;STATIC_REQUIRE_FALSE(&#32;...&#32;)&#32;(void)(0)</emphasis>
17938 
17939 <emphasis role="preprocessor">#endif</emphasis>
17940 
17941 <emphasis role="preprocessor">#define&#32;CATCH_TRANSLATE_EXCEPTION(&#32;signature&#32;)&#32;INTERNAL_CATCH_TRANSLATE_EXCEPTION_NO_REG(&#32;INTERNAL_CATCH_UNIQUE_NAME(&#32;catch_internal_ExceptionTranslator&#32;),&#32;signature&#32;)</emphasis>
17942 
17943 <emphasis role="comment">//&#32;&quot;BDD-style&quot;&#32;convenience&#32;wrappers</emphasis>
17944 <emphasis role="preprocessor">#define&#32;SCENARIO(&#32;...&#32;)&#32;INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_S_T_&#32;)&#32;)</emphasis>
17945 <emphasis role="preprocessor">#define&#32;SCENARIO_METHOD(&#32;className,&#32;...&#32;)&#32;INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME(&#32;C_A_T_C_H_T_E_S_T_&#32;),&#32;className&#32;)</emphasis>
17946 
17947 <emphasis role="preprocessor">#define&#32;GIVEN(&#32;desc&#32;)</emphasis>
17948 <emphasis role="preprocessor">#define&#32;AND_GIVEN(&#32;desc&#32;)</emphasis>
17949 <emphasis role="preprocessor">#define&#32;WHEN(&#32;desc&#32;)</emphasis>
17950 <emphasis role="preprocessor">#define&#32;AND_WHEN(&#32;desc&#32;)</emphasis>
17951 <emphasis role="preprocessor">#define&#32;THEN(&#32;desc&#32;)</emphasis>
17952 <emphasis role="preprocessor">#define&#32;AND_THEN(&#32;desc&#32;)</emphasis>
17953 
17954 <emphasis role="keyword">using&#32;</emphasis><link linkend="_class_catch_1_1_detail_1_1_approx">Catch::Detail::Approx</link>;
17955 
17956 <emphasis role="preprocessor">#endif</emphasis>
17957 
17958 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;!&#32;CATCH_CONFIG_IMPL_ONLY</emphasis>
17959 
17960 <emphasis role="comment">//&#32;start&#32;catch_reenable_warnings.h</emphasis>
17961 
17962 
17963 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
17964 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;ifdef&#32;__ICC&#32;</emphasis><emphasis role="comment">//&#32;icpc&#32;defines&#32;the&#32;__clang__&#32;macro</emphasis>
17965 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;warning(pop)</emphasis>
17966 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;else</emphasis>
17967 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;clang&#32;diagnostic&#32;pop</emphasis>
17968 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;endif</emphasis>
17969 <emphasis role="preprocessor">#elif&#32;defined&#32;__GNUC__</emphasis>
17970 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
17971 <emphasis role="preprocessor">#endif</emphasis>
17972 
17973 <emphasis role="comment">//&#32;end&#32;catch_reenable_warnings.h</emphasis>
17974 <emphasis role="comment">//&#32;end&#32;catch.hpp</emphasis>
17975 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED</emphasis>
</programlisting></section>
