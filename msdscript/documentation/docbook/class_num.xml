<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_num" xml:lang="en-US">
<title>Num Class Reference</title>
<indexterm><primary>Num</primary></indexterm>
<para>
<computeroutput>#include &lt;Expr.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for Num:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_num.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_num_1a9fce58e650a99ae50f4140ed9c87ec9f">Num</link> (int val)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_num_1a07316c2897aadb9257b8de74dbfdcc03">equals</link> (<link linkend="_class_expr">Expr</link> *e) override</para>
</listitem>
            <listitem><para><link linkend="_class_val">Val</link> * <link linkend="_class_num_1a4ba35020050277a80e2acbe3352c6b9f">interp</link> () override</para>
</listitem>
            <listitem><para>bool <link linkend="_class_num_1a24a51278e76d4b01b457fb5f521bcc38">has_variable</link> () override</para>
</listitem>
            <listitem><para><link linkend="_class_expr">Expr</link> * <link linkend="_class_num_1a5738b6218bd63ac81985bcd8a2748cfa">subst</link> (std::string str, <link linkend="_class_expr">Expr</link> *e) override</para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_class_expr">Expr</link>        <itemizedlist>
            <listitem><para>std::string <link linkend="_class_expr_1abe130f37bd185ec13c5113de16fc7bf7">to_string</link> ()</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_expr_1a6ad7c18234f22d96d6917089b5bd7caa">to_pretty_string</link> ()</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_expr_1aaec6172fa839cafad124775b0a43965b">pretty_print</link> (std::ostream &amp;stream)</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_expr_1ab5b1d850f98bb650ef199bb6e90133b7">pretty_print_at</link> (std::ostream &amp;stream, <link linkend="__expr_8h_1a9e5fdf365cd8dc7be4d972daf07f8bdf">prec_t</link> p, std::streampos &amp;pos, bool paren)</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_class_num_1a25174eade1d3dad04a7883d1f1895941">int_m</link></para>

<para>The integer value of the <link linkend="_class_num">Num</link> object. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_class_num_1ad82f60521546672862f44c2dc42ab5a8">print</link> (std::ostream &amp;stream) override</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_num_1a9fce58e650a99ae50f4140ed9c87ec9f"/><section>
    <title>Num()</title>
<indexterm><primary>Num</primary><secondary>Num</secondary></indexterm>
<indexterm><primary>Num</primary><secondary>Num</secondary></indexterm>
<para><computeroutput>Num::Num (int val)<computeroutput>[explicit]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_num_1a07316c2897aadb9257b8de74dbfdcc03"/><section>
    <title>equals()</title>
<indexterm><primary>equals</primary><secondary>Num</secondary></indexterm>
<indexterm><primary>Num</primary><secondary>equals</secondary></indexterm>
<para><computeroutput>bool Num::equals (<link linkend="_class_expr">Expr</link> * e)<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Implements <link linkend="_class_expr_1abf9cdb765fb84304881789d273d7594f">Expr</link>.</para>
</section>
<anchor xml:id="_class_num_1a24a51278e76d4b01b457fb5f521bcc38"/><section>
    <title>has_variable()</title>
<indexterm><primary>has_variable</primary><secondary>Num</secondary></indexterm>
<indexterm><primary>Num</primary><secondary>has_variable</secondary></indexterm>
<para><computeroutput>bool Num::has_variable ( )<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Implements <link linkend="_class_expr_1a92dc26078993a4b9721ea732274a435c">Expr</link>.</para>
</section>
<anchor xml:id="_class_num_1a4ba35020050277a80e2acbe3352c6b9f"/><section>
    <title>interp()</title>
<indexterm><primary>interp</primary><secondary>Num</secondary></indexterm>
<indexterm><primary>Num</primary><secondary>interp</secondary></indexterm>
<para><computeroutput><link linkend="_class_val">Val</link> * Num::interp ( )<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Implements <link linkend="_class_expr_1aa671ba2b665001c815588a7271735104">Expr</link>.</para>
</section>
<anchor xml:id="_class_num_1ad82f60521546672862f44c2dc42ab5a8"/><section>
    <title>print()</title>
<indexterm><primary>print</primary><secondary>Num</secondary></indexterm>
<indexterm><primary>Num</primary><secondary>print</secondary></indexterm>
<para><computeroutput>void Num::print (std::ostream &amp; stream)<computeroutput>[override]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Implements <link linkend="_class_expr_1a8e34377af275f60532d1ba76e6feaceb">Expr</link>.</para>
</section>
<anchor xml:id="_class_num_1a5738b6218bd63ac81985bcd8a2748cfa"/><section>
    <title>subst()</title>
<indexterm><primary>subst</primary><secondary>Num</secondary></indexterm>
<indexterm><primary>Num</primary><secondary>subst</secondary></indexterm>
<para><computeroutput><link linkend="_class_expr">Expr</link> * Num::subst (std::string str, <link linkend="_class_expr">Expr</link> * e)<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Implements <link linkend="_class_expr_1aa91f56b56e078594565aeba32c520b7a">Expr</link>.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_num_1a25174eade1d3dad04a7883d1f1895941"/><section>
    <title>int_m</title>
<indexterm><primary>int_m</primary><secondary>Num</secondary></indexterm>
<indexterm><primary>Num</primary><secondary>int_m</secondary></indexterm>
<para><computeroutput>int Num::int_m</computeroutput></para><para>

<para>The integer value of the <link linkend="_class_num">Num</link> object. </para>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
/Users/u0858882/Desktop/msdscript/msdscript/src/<link linkend="__expr_8h">Expr.h</link>/Users/u0858882/Desktop/msdscript/msdscript/src/<link linkend="__expr_8cpp">Expr.cpp</link></section>
</section>
