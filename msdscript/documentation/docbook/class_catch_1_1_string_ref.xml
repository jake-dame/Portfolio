<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_catch_1_1_string_ref" xml:lang="en-US">
<title>Catch::StringRef Class Reference</title>
<indexterm><primary>Catch::StringRef</primary></indexterm>
<para>
<computeroutput>#include &lt;catch.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct_catch_1_1true__given">using</link> <link linkend="_class_catch_1_1_string_ref_1a06b4db8fc82b197004291cf370b2ba7c">size_type</link> = std::size_t</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">using</link> <link linkend="_class_catch_1_1_string_ref_1ac3aa3d16f48b5429a480f823c504f93c">const_iterator</link> = <link linkend="_struct_catch_1_1true__given">const</link> <link linkend="_struct_catch_1_1true__given">char</link>*</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct_catch_1_1true__given">constexpr</link> <link linkend="_class_catch_1_1_string_ref_1a611907867225695d38198c058758c92d">StringRef</link> () <link linkend="_struct_catch_1_1true__given">noexcept</link>=<link linkend="_struct_catch_1_1true__given">default</link></para>
</listitem>
            <listitem><para><link linkend="_class_catch_1_1_string_ref_1aea45f5089c53adac362bff6bd7c40943">StringRef</link> (<link linkend="_struct_catch_1_1true__given">char</link> <link linkend="_struct_catch_1_1true__given">const</link> *<link linkend="_struct_catch_1_1true__given">rawChars</link>) <link linkend="_struct_catch_1_1true__given">noexcept</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">constexpr</link> <link linkend="_class_catch_1_1_string_ref_1a36df94807491c0ad84184fb8e44e1a7c">StringRef</link> (<link linkend="_struct_catch_1_1true__given">char</link> <link linkend="_struct_catch_1_1true__given">const</link> *<link linkend="_struct_catch_1_1true__given">rawChars</link>, <link linkend="_class_catch_1_1_string_ref_1a06b4db8fc82b197004291cf370b2ba7c">size_type</link> <link linkend="_class_catch_1_1_string_ref_1acb22719801de2b64361b4c283080d4e5">size</link>) <link linkend="_struct_catch_1_1true__given">noexcept</link></para>
</listitem>
            <listitem><para><link linkend="_class_catch_1_1_string_ref_1a7fe41469048f906e9a847798cd335f23">StringRef</link> (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">stdString</link>) <link linkend="_struct_catch_1_1true__given">noexcept</link></para>
</listitem>
            <listitem><para><link linkend="_class_catch_1_1_string_ref_1ad9fde21785affacc32d7da7a70d74e93">operator std::string</link> () <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_string_ref_1aabb30149ab961187e4b3ff3394bf6e73">operator==</link> (<link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">other</link>) <link linkend="_struct_catch_1_1true__given">const</link> <link linkend="_struct_catch_1_1true__given">noexcept</link> -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_string_ref_1aaa6c8bf61c4628034c19763d1c8ad215">operator!=</link> (<link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">other</link>) <link linkend="_struct_catch_1_1true__given">const</link> <link linkend="_struct_catch_1_1true__given">noexcept</link> -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_string_ref_1a4ba2e01eec1f0f56c257d213c796ab3b">operator[]</link> (<link linkend="_class_catch_1_1_string_ref_1a06b4db8fc82b197004291cf370b2ba7c">size_type</link> index) <link linkend="_struct_catch_1_1true__given">const</link> <link linkend="_struct_catch_1_1true__given">noexcept</link> -&gt; <link linkend="_struct_catch_1_1true__given">char</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">constexpr</link> <link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_string_ref_1a0b4841c28cbb14ba07296964a0187023">empty</link> () <link linkend="_struct_catch_1_1true__given">const</link> <link linkend="_struct_catch_1_1true__given">noexcept</link> -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">constexpr</link> <link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_string_ref_1acb22719801de2b64361b4c283080d4e5">size</link> () <link linkend="_struct_catch_1_1true__given">const</link> <link linkend="_struct_catch_1_1true__given">noexcept</link> -&gt; <link linkend="_class_catch_1_1_string_ref_1a06b4db8fc82b197004291cf370b2ba7c">size_type</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_string_ref_1a1669cb2765e820ca258159676cbd82a5">c_str</link> () <link linkend="_struct_catch_1_1true__given">const</link> -&gt; <link linkend="_struct_catch_1_1true__given">char</link> <link linkend="_struct_catch_1_1true__given">const</link> *</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_string_ref_1a594bc3e10ffad77df92f7d1a4c99d7ff">substr</link> (<link linkend="_class_catch_1_1_string_ref_1a06b4db8fc82b197004291cf370b2ba7c">size_type</link> start, <link linkend="_class_catch_1_1_string_ref_1a06b4db8fc82b197004291cf370b2ba7c">size_type</link> <link linkend="_struct_catch_1_1true__given">length</link>) <link linkend="_struct_catch_1_1true__given">const</link> <link linkend="_struct_catch_1_1true__given">noexcept</link> -&gt; <link linkend="_class_catch_1_1_string_ref">StringRef</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_string_ref_1ab0f85edde9f97153fc758fac3bb14507">data</link> () <link linkend="_struct_catch_1_1true__given">const</link> <link linkend="_struct_catch_1_1true__given">noexcept</link> -&gt; <link linkend="_struct_catch_1_1true__given">char</link> <link linkend="_struct_catch_1_1true__given">const</link> *</para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">constexpr</link> <link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_string_ref_1a646e58f5f4e1f5e82cfba06d9fd5d016">isNullTerminated</link> () <link linkend="_struct_catch_1_1true__given">const</link> <link linkend="_struct_catch_1_1true__given">noexcept</link> -&gt; <link linkend="_struct_catch_1_1true__given">bool</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">constexpr</link> <link linkend="_class_catch_1_1_string_ref_1ac3aa3d16f48b5429a480f823c504f93c">const_iterator</link> <link linkend="_class_catch_1_1_string_ref_1ab0adc7198d60867c2842b998ae456795">begin</link> () <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">constexpr</link> <link linkend="_class_catch_1_1_string_ref_1ac3aa3d16f48b5429a480f823c504f93c">const_iterator</link> <link linkend="_class_catch_1_1_string_ref_1a3ce9afc711b559d6cc59666898fc0828">end</link> () <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct_catch_1_1true__given">char</link> <link linkend="_struct_catch_1_1true__given">const</link>  * <link linkend="_class_catch_1_1_string_ref_1a0583d4e5ea88c99c121504052a4fcb6c">m_start</link> = <link linkend="_class_catch_1_1_string_ref_1a38d077e89f7f2ce666507ab28dd28653">s_empty</link></para>
</listitem>
            <listitem><para><link linkend="_class_catch_1_1_string_ref_1a06b4db8fc82b197004291cf370b2ba7c">size_type</link> <link linkend="_class_catch_1_1_string_ref_1a91ee253f5b7e43303352186139845753">m_size</link> = 0</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Private Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct_catch_1_1true__given">static</link> <link linkend="_struct_catch_1_1true__given">constexpr</link> <link linkend="_struct_catch_1_1true__given">char</link> <link linkend="_struct_catch_1_1true__given">const</link>  *<link linkend="_struct_catch_1_1true__given">const</link> <link linkend="_class_catch_1_1_string_ref_1a38d077e89f7f2ce666507ab28dd28653">s_empty</link> = &quot;&quot;</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>A non-owning string class (similar to the forthcoming std::string_view) Note that, because a <link linkend="_class_catch_1_1_string_ref">StringRef</link> may be a substring of another string, it may not be null terminated. </para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_class_catch_1_1_string_ref_1ac3aa3d16f48b5429a480f823c504f93c"/><section>
    <title>const_iterator</title>
<indexterm><primary>const_iterator</primary><secondary>Catch::StringRef</secondary></indexterm>
<indexterm><primary>Catch::StringRef</primary><secondary>const_iterator</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">using</link> <link linkend="_class_catch_1_1_string_ref_1ac3aa3d16f48b5429a480f823c504f93c">Catch::StringRef::const_iterator</link> = <link linkend="_struct_catch_1_1true__given">const</link> <link linkend="_struct_catch_1_1true__given">char</link>*</computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_string_ref_1a06b4db8fc82b197004291cf370b2ba7c"/><section>
    <title>size_type</title>
<indexterm><primary>size_type</primary><secondary>Catch::StringRef</secondary></indexterm>
<indexterm><primary>Catch::StringRef</primary><secondary>size_type</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">using</link> <link linkend="_class_catch_1_1_string_ref_1a06b4db8fc82b197004291cf370b2ba7c">Catch::StringRef::size_type</link> = std::size_t</computeroutput></para></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_catch_1_1_string_ref_1a611907867225695d38198c058758c92d"/><section>
    <title>StringRef()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>StringRef</primary><secondary>Catch::StringRef</secondary></indexterm>
<indexterm><primary>Catch::StringRef</primary><secondary>StringRef</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">constexpr</link> Catch::StringRef::StringRef ( )<computeroutput>[constexpr]</computeroutput>, <computeroutput>[default]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_string_ref_1aea45f5089c53adac362bff6bd7c40943"/><section>
    <title>StringRef()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>StringRef</primary><secondary>Catch::StringRef</secondary></indexterm>
<indexterm><primary>Catch::StringRef</primary><secondary>StringRef</secondary></indexterm>
<para><computeroutput>Catch::StringRef::StringRef (<link linkend="_struct_catch_1_1true__given">char</link> <link linkend="_struct_catch_1_1true__given">const</link> * rawChars)<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_string_ref_1a36df94807491c0ad84184fb8e44e1a7c"/><section>
    <title>StringRef()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>StringRef</primary><secondary>Catch::StringRef</secondary></indexterm>
<indexterm><primary>Catch::StringRef</primary><secondary>StringRef</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">constexpr</link> Catch::StringRef::StringRef (<link linkend="_struct_catch_1_1true__given">char</link> <link linkend="_struct_catch_1_1true__given">const</link> * rawChars, <link linkend="_class_catch_1_1_string_ref_1a06b4db8fc82b197004291cf370b2ba7c">size_type</link> size)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_string_ref_1a7fe41469048f906e9a847798cd335f23"/><section>
    <title>StringRef()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>StringRef</primary><secondary>Catch::StringRef</secondary></indexterm>
<indexterm><primary>Catch::StringRef</primary><secondary>StringRef</secondary></indexterm>
<para><computeroutput>Catch::StringRef::StringRef (std::string <link linkend="_struct_catch_1_1true__given">const</link> &amp; stdString)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_catch_1_1_string_ref_1ab0adc7198d60867c2842b998ae456795"/><section>
    <title>begin()</title>
<indexterm><primary>begin</primary><secondary>Catch::StringRef</secondary></indexterm>
<indexterm><primary>Catch::StringRef</primary><secondary>begin</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">constexpr</link> <link linkend="_class_catch_1_1_string_ref_1ac3aa3d16f48b5429a480f823c504f93c">const_iterator</link> Catch::StringRef::begin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_string_ref_1a1669cb2765e820ca258159676cbd82a5"/><section>
    <title>c_str()</title>
<indexterm><primary>c_str</primary><secondary>Catch::StringRef</secondary></indexterm>
<indexterm><primary>Catch::StringRef</primary><secondary>c_str</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> Catch::StringRef::c_str ( ) const -&gt;  <link linkend="_struct_catch_1_1true__given">char</link> <link linkend="_struct_catch_1_1true__given">const</link> *</computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_string_ref_1ab0f85edde9f97153fc758fac3bb14507"/><section>
    <title>data()</title>
<indexterm><primary>data</primary><secondary>Catch::StringRef</secondary></indexterm>
<indexterm><primary>Catch::StringRef</primary><secondary>data</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> Catch::StringRef::data ( ) const -&gt;  <link linkend="_struct_catch_1_1true__given">char</link> <link linkend="_struct_catch_1_1true__given">const</link> *<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_string_ref_1a0b4841c28cbb14ba07296964a0187023"/><section>
    <title>empty()</title>
<indexterm><primary>empty</primary><secondary>Catch::StringRef</secondary></indexterm>
<indexterm><primary>Catch::StringRef</primary><secondary>empty</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">constexpr</link> <link linkend="_struct_catch_1_1true__given">auto</link> Catch::StringRef::empty ( ) const -&gt; <link linkend="_struct_catch_1_1true__given">bool</link> <computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_string_ref_1a3ce9afc711b559d6cc59666898fc0828"/><section>
    <title>end()</title>
<indexterm><primary>end</primary><secondary>Catch::StringRef</secondary></indexterm>
<indexterm><primary>Catch::StringRef</primary><secondary>end</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">constexpr</link> <link linkend="_class_catch_1_1_string_ref_1ac3aa3d16f48b5429a480f823c504f93c">const_iterator</link> Catch::StringRef::end ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_string_ref_1a646e58f5f4e1f5e82cfba06d9fd5d016"/><section>
    <title>isNullTerminated()</title>
<indexterm><primary>isNullTerminated</primary><secondary>Catch::StringRef</secondary></indexterm>
<indexterm><primary>Catch::StringRef</primary><secondary>isNullTerminated</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">constexpr</link> <link linkend="_struct_catch_1_1true__given">auto</link> Catch::StringRef::isNullTerminated ( ) const -&gt; <link linkend="_struct_catch_1_1true__given">bool</link> <computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_string_ref_1ad9fde21785affacc32d7da7a70d74e93"/><section>
    <title>operator std::string()</title>
<indexterm><primary>operator std::string</primary><secondary>Catch::StringRef</secondary></indexterm>
<indexterm><primary>Catch::StringRef</primary><secondary>operator std::string</secondary></indexterm>
<para><computeroutput>Catch::StringRef::operator std::string ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_string_ref_1aaa6c8bf61c4628034c19763d1c8ad215"/><section>
    <title>operator!=()</title>
<indexterm><primary>operator!=</primary><secondary>Catch::StringRef</secondary></indexterm>
<indexterm><primary>Catch::StringRef</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> Catch::StringRef::operator!= (<link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; other) const -&gt; <link linkend="_struct_catch_1_1true__given">bool</link> <computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_string_ref_1aabb30149ab961187e4b3ff3394bf6e73"/><section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>Catch::StringRef</secondary></indexterm>
<indexterm><primary>Catch::StringRef</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> Catch::StringRef::operator== (<link linkend="_class_catch_1_1_string_ref">StringRef</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; other) const -&gt;  <link linkend="_struct_catch_1_1true__given">bool</link><computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_string_ref_1a4ba2e01eec1f0f56c257d213c796ab3b"/><section>
    <title>operator[]()</title>
<indexterm><primary>operator[]</primary><secondary>Catch::StringRef</secondary></indexterm>
<indexterm><primary>Catch::StringRef</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> Catch::StringRef::operator[] (<link linkend="_class_catch_1_1_string_ref_1a06b4db8fc82b197004291cf370b2ba7c">size_type</link> index) const -&gt; <link linkend="_struct_catch_1_1true__given">char</link> <computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_string_ref_1acb22719801de2b64361b4c283080d4e5"/><section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>Catch::StringRef</secondary></indexterm>
<indexterm><primary>Catch::StringRef</primary><secondary>size</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">constexpr</link> <link linkend="_struct_catch_1_1true__given">auto</link> Catch::StringRef::size ( ) const -&gt; <link linkend="_class_catch_1_1_string_ref_1a06b4db8fc82b197004291cf370b2ba7c">size_type</link> <computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_string_ref_1a594bc3e10ffad77df92f7d1a4c99d7ff"/><section>
    <title>substr()</title>
<indexterm><primary>substr</primary><secondary>Catch::StringRef</secondary></indexterm>
<indexterm><primary>Catch::StringRef</primary><secondary>substr</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> Catch::StringRef::substr (<link linkend="_class_catch_1_1_string_ref_1a06b4db8fc82b197004291cf370b2ba7c">size_type</link> start, <link linkend="_class_catch_1_1_string_ref_1a06b4db8fc82b197004291cf370b2ba7c">size_type</link> length) const -&gt;  <link linkend="_class_catch_1_1_string_ref">StringRef</link><computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_catch_1_1_string_ref_1a91ee253f5b7e43303352186139845753"/><section>
    <title>m_size</title>
<indexterm><primary>m_size</primary><secondary>Catch::StringRef</secondary></indexterm>
<indexterm><primary>Catch::StringRef</primary><secondary>m_size</secondary></indexterm>
<para><computeroutput><link linkend="_class_catch_1_1_string_ref_1a06b4db8fc82b197004291cf370b2ba7c">size_type</link> Catch::StringRef::m_size = 0<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_string_ref_1a0583d4e5ea88c99c121504052a4fcb6c"/><section>
    <title>m_start</title>
<indexterm><primary>m_start</primary><secondary>Catch::StringRef</secondary></indexterm>
<indexterm><primary>Catch::StringRef</primary><secondary>m_start</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">char</link> <link linkend="_struct_catch_1_1true__given">const</link>* Catch::StringRef::m_start = <link linkend="_class_catch_1_1_string_ref_1a38d077e89f7f2ce666507ab28dd28653">s_empty</link><computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_string_ref_1a38d077e89f7f2ce666507ab28dd28653"/><section>
    <title>s_empty</title>
<indexterm><primary>s_empty</primary><secondary>Catch::StringRef</secondary></indexterm>
<indexterm><primary>Catch::StringRef</primary><secondary>s_empty</secondary></indexterm>
<para><computeroutput><link linkend="_struct_catch_1_1true__given">constexpr</link> <link linkend="_struct_catch_1_1true__given">char</link> <link linkend="_struct_catch_1_1true__given">const</link>* <link linkend="_struct_catch_1_1true__given">const</link> Catch::StringRef::s_empty = &quot;&quot;<computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
/Users/u0858882/Desktop/msdscript/msdscript/src/<link linkend="_catch_8h">catch.h</link></section>
</section>
