<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_parse_8cpp" xml:lang="en-US">
<title>/Users/u0858882/Desktop/msdscript/msdscript/src/parse.cpp File Reference</title>
<indexterm><primary>/Users/u0858882/Desktop/msdscript/msdscript/src/parse.cpp</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;parse.h&quot;<?linebreak?></programlisting><simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_expr">Expr</link> * <link linkend="_parse_8cpp_1a014713803437f4c52ac42fcbbcfd63ea">parse_expr</link> (std::istream &amp;stream)</para>
</listitem>
            <listitem><para><link linkend="_class_expr">Expr</link> * <link linkend="_parse_8cpp_1a6762cb2ba4c36e0cd939e7d07c23a15b">parse_eqs</link> (std::istream &amp;stream)</para>
</listitem>
            <listitem><para><link linkend="_class_expr">Expr</link> * <link linkend="_parse_8cpp_1ab8404143c8d6a8ff7bb3b1c259844e1e">parse_adds</link> (std::istream &amp;stream)</para>
</listitem>
            <listitem><para><link linkend="_class_expr">Expr</link> * <link linkend="_parse_8cpp_1aea39e8b7c19dca7d5619cb62582279fc">parse_mults</link> (std::istream &amp;stream)</para>
</listitem>
            <listitem><para><link linkend="_class_expr">Expr</link> * <link linkend="_parse_8cpp_1a029d370736bc1387d4d9b9469fb546ae">parse_bases</link> (std::istream &amp;stream)</para>
</listitem>
            <listitem><para><link linkend="_class_expr">Expr</link> * <link linkend="_parse_8cpp_1a6b40e34d4ef02012069ba363323820e5">parse_num</link> (std::istream &amp;stream)</para>
</listitem>
            <listitem><para><link linkend="_class_expr">Expr</link> * <link linkend="_parse_8cpp_1a5c4f014f241af649e82263b575baeba2">parse_bool</link> (std::istream &amp;stream)</para>
</listitem>
            <listitem><para><link linkend="_class_expr">Expr</link> * <link linkend="_parse_8cpp_1a9cf630d4a207cfc3151d4b3eec182d41">parse_var</link> (std::istream &amp;stream)</para>
</listitem>
            <listitem><para><link linkend="_class_expr">Expr</link> * <link linkend="_parse_8cpp_1a00d86809891abb9c4a4e8f6f9a73a1b8">parse_let</link> (std::istream &amp;stream)</para>
</listitem>
            <listitem><para><link linkend="_class_expr">Expr</link> * <link linkend="_parse_8cpp_1ac22d65acd7a4582949398ecca2849035">parse_if</link> (std::istream &amp;stream)</para>
</listitem>
            <listitem><para><link linkend="_class_expr">Expr</link> * <link linkend="_parse_8cpp_1a3ab5235cce12075235b607903d538c0d">parse_paren</link> (std::istream &amp;stream)</para>
</listitem>
            <listitem><para>int <link linkend="_parse_8cpp_1a6e8ce61dc8d1637006008a1e844cea4c">build_number</link> (std::istream &amp;stream)</para>
</listitem>
            <listitem><para>std::string <link linkend="_parse_8cpp_1acaf404de21e5bcf0a67503e561e7ab53">peek_keyword</link> (std::istream &amp;stream)</para>
</listitem>
            <listitem><para>void <link linkend="_parse_8cpp_1ae12e0112aee1d8688cfbf024210757e2">consume</link> (std::istream &amp;stream, int expect)</para>
</listitem>
            <listitem><para>void <link linkend="_parse_8cpp_1ab8c258ca9439db5f6ad2ff154f4b685f">consume</link> (std::istream &amp;stream, const std::string &amp;str)</para>
</listitem>
            <listitem><para>void <link linkend="_parse_8cpp_1a7dc400356690d7c98c8720e80f778ece">consume_whitespace</link> (std::istream &amp;stream)</para>
</listitem>
            <listitem><para><link linkend="_class_expr">Expr</link> * <link linkend="_parse_8cpp_1af41700330914d1aae491afd9007233dc">parse_expr</link> (const std::string &amp;str)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_parse_8cpp_1a6e8ce61dc8d1637006008a1e844cea4c"/><section>
    <title>build_number()</title>
<indexterm><primary>build_number</primary><secondary>parse.cpp</secondary></indexterm>
<indexterm><primary>parse.cpp</primary><secondary>build_number</secondary></indexterm>
<para><computeroutput>int build_number (std::istream &amp; stream)</computeroutput></para></section>
<anchor xml:id="_parse_8cpp_1ab8c258ca9439db5f6ad2ff154f4b685f"/><section>
    <title>consume()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>consume</primary><secondary>parse.cpp</secondary></indexterm>
<indexterm><primary>parse.cpp</primary><secondary>consume</secondary></indexterm>
<para><computeroutput>void consume (std::istream &amp; stream, const std::string &amp; str)</computeroutput></para></section>
<anchor xml:id="_parse_8cpp_1ae12e0112aee1d8688cfbf024210757e2"/><section>
    <title>consume()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>consume</primary><secondary>parse.cpp</secondary></indexterm>
<indexterm><primary>parse.cpp</primary><secondary>consume</secondary></indexterm>
<para><computeroutput>void consume (std::istream &amp; stream, int expect)</computeroutput></para></section>
<anchor xml:id="_parse_8cpp_1a7dc400356690d7c98c8720e80f778ece"/><section>
    <title>consume_whitespace()</title>
<indexterm><primary>consume_whitespace</primary><secondary>parse.cpp</secondary></indexterm>
<indexterm><primary>parse.cpp</primary><secondary>consume_whitespace</secondary></indexterm>
<para><computeroutput>void consume_whitespace (std::istream &amp; stream)</computeroutput></para></section>
<anchor xml:id="_parse_8cpp_1ab8404143c8d6a8ff7bb3b1c259844e1e"/><section>
    <title>parse_adds()</title>
<indexterm><primary>parse_adds</primary><secondary>parse.cpp</secondary></indexterm>
<indexterm><primary>parse.cpp</primary><secondary>parse_adds</secondary></indexterm>
<para><computeroutput><link linkend="_class_expr">Expr</link> * parse_adds (std::istream &amp; stream)</computeroutput></para></section>
<anchor xml:id="_parse_8cpp_1a5c4f014f241af649e82263b575baeba2"/><section>
    <title>parse_bool()</title>
<indexterm><primary>parse_bool</primary><secondary>parse.cpp</secondary></indexterm>
<indexterm><primary>parse.cpp</primary><secondary>parse_bool</secondary></indexterm>
<para><computeroutput><link linkend="_class_expr">Expr</link> * parse_bool (std::istream &amp; stream)</computeroutput></para></section>
<anchor xml:id="_parse_8cpp_1a6762cb2ba4c36e0cd939e7d07c23a15b"/><section>
    <title>parse_eqs()</title>
<indexterm><primary>parse_eqs</primary><secondary>parse.cpp</secondary></indexterm>
<indexterm><primary>parse.cpp</primary><secondary>parse_eqs</secondary></indexterm>
<para><computeroutput><link linkend="_class_expr">Expr</link> * parse_eqs (std::istream &amp; stream)</computeroutput></para></section>
<anchor xml:id="_parse_8cpp_1af41700330914d1aae491afd9007233dc"/><section>
    <title>parse_expr()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>parse_expr</primary><secondary>parse.cpp</secondary></indexterm>
<indexterm><primary>parse.cpp</primary><secondary>parse_expr</secondary></indexterm>
<para><computeroutput><link linkend="_class_expr">Expr</link> * parse_expr (const std::string &amp; str)</computeroutput></para></section>
<anchor xml:id="_parse_8cpp_1a014713803437f4c52ac42fcbbcfd63ea"/><section>
    <title>parse_expr()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>parse_expr</primary><secondary>parse.cpp</secondary></indexterm>
<indexterm><primary>parse.cpp</primary><secondary>parse_expr</secondary></indexterm>
<para><computeroutput><link linkend="_class_expr">Expr</link> * parse_expr (std::istream &amp; stream)</computeroutput></para></section>
<anchor xml:id="_parse_8cpp_1ac22d65acd7a4582949398ecca2849035"/><section>
    <title>parse_if()</title>
<indexterm><primary>parse_if</primary><secondary>parse.cpp</secondary></indexterm>
<indexterm><primary>parse.cpp</primary><secondary>parse_if</secondary></indexterm>
<para><computeroutput><link linkend="_class_expr">Expr</link> * parse_if (std::istream &amp; stream)</computeroutput></para></section>
<anchor xml:id="_parse_8cpp_1a00d86809891abb9c4a4e8f6f9a73a1b8"/><section>
    <title>parse_let()</title>
<indexterm><primary>parse_let</primary><secondary>parse.cpp</secondary></indexterm>
<indexterm><primary>parse.cpp</primary><secondary>parse_let</secondary></indexterm>
<para><computeroutput><link linkend="_class_expr">Expr</link> * parse_let (std::istream &amp; stream)</computeroutput></para></section>
<anchor xml:id="_parse_8cpp_1aea39e8b7c19dca7d5619cb62582279fc"/><section>
    <title>parse_mults()</title>
<indexterm><primary>parse_mults</primary><secondary>parse.cpp</secondary></indexterm>
<indexterm><primary>parse.cpp</primary><secondary>parse_mults</secondary></indexterm>
<para><computeroutput><link linkend="_class_expr">Expr</link> * parse_mults (std::istream &amp; stream)</computeroutput></para></section>
<anchor xml:id="_parse_8cpp_1a6b40e34d4ef02012069ba363323820e5"/><section>
    <title>parse_num()</title>
<indexterm><primary>parse_num</primary><secondary>parse.cpp</secondary></indexterm>
<indexterm><primary>parse.cpp</primary><secondary>parse_num</secondary></indexterm>
<para><computeroutput><link linkend="_class_expr">Expr</link> * parse_num (std::istream &amp; stream)</computeroutput></para></section>
<anchor xml:id="_parse_8cpp_1a3ab5235cce12075235b607903d538c0d"/><section>
    <title>parse_paren()</title>
<indexterm><primary>parse_paren</primary><secondary>parse.cpp</secondary></indexterm>
<indexterm><primary>parse.cpp</primary><secondary>parse_paren</secondary></indexterm>
<para><computeroutput><link linkend="_class_expr">Expr</link> * parse_paren (std::istream &amp; stream)</computeroutput></para></section>
<anchor xml:id="_parse_8cpp_1a029d370736bc1387d4d9b9469fb546ae"/><section>
    <title>parse_bases()</title>
<indexterm><primary>parse_bases</primary><secondary>parse.cpp</secondary></indexterm>
<indexterm><primary>parse.cpp</primary><secondary>parse_bases</secondary></indexterm>
<para><computeroutput><link linkend="_class_expr">Expr</link> * parse_bases (std::istream &amp; stream)</computeroutput></para></section>
<anchor xml:id="_parse_8cpp_1a9cf630d4a207cfc3151d4b3eec182d41"/><section>
    <title>parse_var()</title>
<indexterm><primary>parse_var</primary><secondary>parse.cpp</secondary></indexterm>
<indexterm><primary>parse.cpp</primary><secondary>parse_var</secondary></indexterm>
<para><computeroutput><link linkend="_class_expr">Expr</link> * parse_var (std::istream &amp; stream)</computeroutput></para></section>
<anchor xml:id="_parse_8cpp_1acaf404de21e5bcf0a67503e561e7ab53"/><section>
    <title>peek_keyword()</title>
<indexterm><primary>peek_keyword</primary><secondary>parse.cpp</secondary></indexterm>
<indexterm><primary>parse.cpp</primary><secondary>peek_keyword</secondary></indexterm>
<para><computeroutput>std::string peek_keyword (std::istream &amp; stream)</computeroutput></para></section>
</section>
</section>
