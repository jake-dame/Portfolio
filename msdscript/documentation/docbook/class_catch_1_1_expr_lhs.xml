<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_catch_1_1_expr_lhs" xml:lang="en-US">
<title>Catch::ExprLhs&lt; LhsT &gt; Class Template Reference</title>
<indexterm><primary>Catch::ExprLhs&lt; LhsT &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;catch.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_catch_1_1_expr_lhs_1ad22c6af1a7d6993240624d299714a479">ExprLhs</link> (<link linkend="_struct_catch_1_1true__given">LhsT</link> <link linkend="_struct_catch_1_1true__given">lhs</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs_1af218aaf7b5b0a0ebb6b3697f2c89893d">operator==</link> (<link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; &gt; <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs_1ab707a84abdffbdc35962a495e238d393">operator==</link> (<link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">bool</link> &gt; <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs_1a2d660580c0a8e6bb24b65a4b5364b5b1">operator!=</link> (<link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; &gt; <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs_1a60eca847201d057d8a8b7222c69b619c">operator!=</link> (<link linkend="_struct_catch_1_1true__given">bool</link> <link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">bool</link> &gt; <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs_1a7f9d22b7ef87375af7a2583c9643a0f4">operator&gt;</link> (<link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; &gt; <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs_1afd1ce21cb0be233a63cbdd7724adffea">operator&lt;</link> (<link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; &gt; <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs_1a5ab1a2e91533a8b66a5d2e70774f6793">operator&gt;=</link> (<link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; &gt; <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs_1a918090c28bee54222730159b56240af1">operator&lt;=</link> (<link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; &gt; <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs_1a52358a7cbaf47578ff436a378ac818c6">operator|</link> (<link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; &gt; <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs_1a39bc6a4687580e5fef174cae9b573283">operator&amp;</link> (<link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; &gt; <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs_1a904664f51bf478b41b12ac6cb3e1ec23">operator^</link> (<link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;<link linkend="_struct_catch_1_1true__given">rhs</link>) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; &gt; <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs_1ad85684f7b02a98eb1b5d03d4cbd8284b">operator&amp;&amp;</link> (<link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; &gt; <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </para><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs_1ae9b4ee923b90af22c9e39261c2f03cd3">operator||</link> (<link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp;) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; &gt; <link linkend="_struct_catch_1_1true__given">const</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs_1ab68bd6d5d3ae21b7fba9010150fba95d">makeUnaryExpr</link> () <link linkend="_struct_catch_1_1true__given">const</link> -&gt; <link linkend="_class_catch_1_1_unary_expr">UnaryExpr</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct_catch_1_1true__given">LhsT</link> <link linkend="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a">m_lhs</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_catch_1_1_expr_lhs_1ad22c6af1a7d6993240624d299714a479"/><section>
    <title>ExprLhs()</title>
<indexterm><primary>ExprLhs</primary><secondary>Catch::ExprLhs&lt; LhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::ExprLhs&lt; LhsT &gt;</primary><secondary>ExprLhs</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt; </computeroutput><para><computeroutput><link linkend="_class_catch_1_1_expr_lhs">Catch::ExprLhs</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt;::ExprLhs (<link linkend="_struct_catch_1_1true__given">LhsT</link> lhs)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_catch_1_1_expr_lhs_1ab68bd6d5d3ae21b7fba9010150fba95d"/><section>
    <title>makeUnaryExpr()</title>
<indexterm><primary>makeUnaryExpr</primary><secondary>Catch::ExprLhs&lt; LhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::ExprLhs&lt; LhsT &gt;</primary><secondary>makeUnaryExpr</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs">Catch::ExprLhs</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt;::makeUnaryExpr ( ) const -&gt; <link linkend="_class_catch_1_1_unary_expr">UnaryExpr</link>&lt;<link linkend="_struct_catch_1_1true__given">LhsT</link>&gt; <computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_expr_lhs_1a60eca847201d057d8a8b7222c69b619c"/><section>
    <title>operator!=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>Catch::ExprLhs&lt; LhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::ExprLhs&lt; LhsT &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs">Catch::ExprLhs</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt;::operator!= (<link linkend="_struct_catch_1_1true__given">bool</link> rhs) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt;<link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">bool</link>&gt; <link linkend="_struct_catch_1_1true__given">const</link> <computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_expr_lhs_1a2d660580c0a8e6bb24b65a4b5364b5b1"/><section>
    <title>operator!=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>Catch::ExprLhs&lt; LhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::ExprLhs&lt; LhsT &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt; </computeroutput><computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs">Catch::ExprLhs</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt;::operator!= (<link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; rhs) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt;<link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link>&amp;&gt; <link linkend="_struct_catch_1_1true__given">const</link> <computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_expr_lhs_1a39bc6a4687580e5fef174cae9b573283"/><section>
    <title>operator&amp;()</title>
<indexterm><primary>operator&amp;</primary><secondary>Catch::ExprLhs&lt; LhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::ExprLhs&lt; LhsT &gt;</primary><secondary>operator&amp;</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt; </computeroutput><computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs">Catch::ExprLhs</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt;::operator&amp; (<link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; rhs) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt;<link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link>&amp;&gt; <link linkend="_struct_catch_1_1true__given">const</link> <computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_expr_lhs_1ad85684f7b02a98eb1b5d03d4cbd8284b"/><section>
    <title>operator&amp;&amp;()</title>
<indexterm><primary>operator&amp;&amp;</primary><secondary>Catch::ExprLhs&lt; LhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::ExprLhs&lt; LhsT &gt;</primary><secondary>operator&amp;&amp;</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt; </computeroutput><computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs">Catch::ExprLhs</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt;::operator&amp;&amp; (<link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; ) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt;<link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link>&amp;&gt; <link linkend="_struct_catch_1_1true__given">const</link> <computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_expr_lhs_1afd1ce21cb0be233a63cbdd7724adffea"/><section>
    <title>operator&lt;()</title>
<indexterm><primary>operator&lt;</primary><secondary>Catch::ExprLhs&lt; LhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::ExprLhs&lt; LhsT &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt; </computeroutput><computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs">Catch::ExprLhs</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt;::operator&lt; (<link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; rhs) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt;<link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link>&amp;&gt; <link linkend="_struct_catch_1_1true__given">const</link> <computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_expr_lhs_1a918090c28bee54222730159b56240af1"/><section>
    <title>operator&lt;=()</title>
<indexterm><primary>operator&lt;=</primary><secondary>Catch::ExprLhs&lt; LhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::ExprLhs&lt; LhsT &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt; </computeroutput><computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs">Catch::ExprLhs</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt;::operator&lt;= (<link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; rhs) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt;<link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link>&amp;&gt; <link linkend="_struct_catch_1_1true__given">const</link> <computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_expr_lhs_1ab707a84abdffbdc35962a495e238d393"/><section>
    <title>operator==()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>Catch::ExprLhs&lt; LhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::ExprLhs&lt; LhsT &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs">Catch::ExprLhs</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt;::operator== (<link linkend="_struct_catch_1_1true__given">bool</link> rhs) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt;<link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">bool</link>&gt; <link linkend="_struct_catch_1_1true__given">const</link> <computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_expr_lhs_1af218aaf7b5b0a0ebb6b3697f2c89893d"/><section>
    <title>operator==()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>Catch::ExprLhs&lt; LhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::ExprLhs&lt; LhsT &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt; </computeroutput><computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs">Catch::ExprLhs</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt;::operator== (<link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; rhs) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt;<link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link>&amp;&gt; <link linkend="_struct_catch_1_1true__given">const</link> <computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_expr_lhs_1a7f9d22b7ef87375af7a2583c9643a0f4"/><section>
    <title>operator&gt;()</title>
<indexterm><primary>operator&gt;</primary><secondary>Catch::ExprLhs&lt; LhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::ExprLhs&lt; LhsT &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt; </computeroutput><computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs">Catch::ExprLhs</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt;::operator&gt; (<link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; rhs) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt;<link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link>&amp;&gt; <link linkend="_struct_catch_1_1true__given">const</link> <computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_expr_lhs_1a5ab1a2e91533a8b66a5d2e70774f6793"/><section>
    <title>operator&gt;=()</title>
<indexterm><primary>operator&gt;=</primary><secondary>Catch::ExprLhs&lt; LhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::ExprLhs&lt; LhsT &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt; </computeroutput><computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs">Catch::ExprLhs</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt;::operator&gt;= (<link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; rhs) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt;<link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link>&amp;&gt; <link linkend="_struct_catch_1_1true__given">const</link> <computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_expr_lhs_1a904664f51bf478b41b12ac6cb3e1ec23"/><section>
    <title>operator^()</title>
<indexterm><primary>operator^</primary><secondary>Catch::ExprLhs&lt; LhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::ExprLhs&lt; LhsT &gt;</primary><secondary>operator^</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt; </computeroutput><computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs">Catch::ExprLhs</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt;::operator^ (<link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; rhs) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt;<link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link>&amp;&gt; <link linkend="_struct_catch_1_1true__given">const</link> <computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_expr_lhs_1a52358a7cbaf47578ff436a378ac818c6"/><section>
    <title>operator|()</title>
<indexterm><primary>operator|</primary><secondary>Catch::ExprLhs&lt; LhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::ExprLhs&lt; LhsT &gt;</primary><secondary>operator|</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt; </computeroutput><computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs">Catch::ExprLhs</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt;::operator| (<link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; rhs) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt;<link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link>&amp;&gt; <link linkend="_struct_catch_1_1true__given">const</link> <computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_expr_lhs_1ae9b4ee923b90af22c9e39261c2f03cd3"/><section>
    <title>operator||()</title>
<indexterm><primary>operator||</primary><secondary>Catch::ExprLhs&lt; LhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::ExprLhs&lt; LhsT &gt;</primary><secondary>operator||</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt; </computeroutput><computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">RhsT</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">auto</link> <link linkend="_class_catch_1_1_expr_lhs">Catch::ExprLhs</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt;::operator|| (<link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link> &amp; ) -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt;<link linkend="_struct_catch_1_1true__given">LhsT</link>, <link linkend="_struct_catch_1_1true__given">RhsT</link> <link linkend="_struct_catch_1_1true__given">const</link>&amp;&gt; <link linkend="_struct_catch_1_1true__given">const</link> <computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_catch_1_1_expr_lhs_1af290873a8427ccbdae6acb915fb7366a"/><section>
    <title>m_lhs</title>
<indexterm><primary>m_lhs</primary><secondary>Catch::ExprLhs&lt; LhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::ExprLhs&lt; LhsT &gt;</primary><secondary>m_lhs</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_struct_catch_1_1true__given">typename</link> <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt; </computeroutput><para><computeroutput><link linkend="_struct_catch_1_1true__given">LhsT</link> <link linkend="_class_catch_1_1_expr_lhs">Catch::ExprLhs</link>&lt; <link linkend="_struct_catch_1_1true__given">LhsT</link> &gt;::m_lhs<computeroutput>[private]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
/Users/u0858882/Desktop/msdscript/msdscript/src/<link linkend="_catch_8h">catch.h</link></section>
</section>
