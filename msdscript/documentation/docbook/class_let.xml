<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_let" xml:lang="en-US">
<title>Let Class Reference</title>
<indexterm><primary>Let</primary></indexterm>
<para>
<computeroutput>#include &lt;Expr.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for Let:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_let.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_let_1ae328a35e232e97c26d4bb77d7f4309ee">Let</link> (std::string lhs, <link linkend="_class_expr">Expr</link> *rhs, <link linkend="_class_expr">Expr</link> *body)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_let_1aa0defef255c02323cf36929a67bbe95e">equals</link> (<link linkend="_class_expr">Expr</link> *e) override</para>
</listitem>
            <listitem><para><link linkend="_class_val">Val</link> * <link linkend="_class_let_1a497897b0e97322f01c5d6605d6ec3bd7">interp</link> () override</para>
</listitem>
            <listitem><para>bool <link linkend="_class_let_1a9ecf8ca9ef5b8b7843fc5386381ca147">has_variable</link> () override</para>
</listitem>
            <listitem><para><link linkend="_class_expr">Expr</link> * <link linkend="_class_let_1a64f2108ae264929fdebd34c66415de72">subst</link> (std::string str, <link linkend="_class_expr">Expr</link> *e) override</para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_class_expr">Expr</link>        <itemizedlist>
            <listitem><para>std::string <link linkend="_class_expr_1abe130f37bd185ec13c5113de16fc7bf7">to_string</link> ()</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_expr_1a6ad7c18234f22d96d6917089b5bd7caa">to_pretty_string</link> ()</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>std::string <link linkend="_class_let_1af70d7b738039534855ce24de6760e06f">lhs_m</link></para>

<para>The <link linkend="_class_let">Let</link> object&apos;s variable name. </para>
</listitem>
            <listitem><para><link linkend="_class_expr">Expr</link> * <link linkend="_class_let_1a33d7bbe2ccce8bebe368bdae93e5da64">rhs_m</link></para>

<para>The <link linkend="_class_let">Let</link> object&apos;s variable definition. </para>
</listitem>
            <listitem><para><link linkend="_class_expr">Expr</link> * <link linkend="_class_let_1ab0a50714d9e5e273fbe27a44d98da5dc">body_m</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_class_let_1a57bcfd3190ebaf84e8adb0e64cdef2d8">print</link> (std::ostream &amp;stream) override</para>
</listitem>
            <listitem><para>void <link linkend="_class_let_1a0288f5ca2a9d18fc5cd5dfef276fda04">pretty_print</link> (std::ostream &amp;stream) override</para>
</listitem>
            <listitem><para>void <link linkend="_class_let_1ae9837b23534fe6739ea117041643ae59">pretty_print_at</link> (std::ostream &amp;stream, <link linkend="__expr_8h_1a9e5fdf365cd8dc7be4d972daf07f8bdf">prec_t</link> p, std::streampos &amp;caller_pos, bool has_paren) override</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_let_1ae328a35e232e97c26d4bb77d7f4309ee"/><section>
    <title>Let()</title>
<indexterm><primary>Let</primary><secondary>Let</secondary></indexterm>
<indexterm><primary>Let</primary><secondary>Let</secondary></indexterm>
<para><computeroutput>Let::Let (std::string lhs, <link linkend="_class_expr">Expr</link> * rhs, <link linkend="_class_expr">Expr</link> * body)</computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_let_1aa0defef255c02323cf36929a67bbe95e"/><section>
    <title>equals()</title>
<indexterm><primary>equals</primary><secondary>Let</secondary></indexterm>
<indexterm><primary>Let</primary><secondary>equals</secondary></indexterm>
<para><computeroutput>bool Let::equals (<link linkend="_class_expr">Expr</link> * e)<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Implements <link linkend="_class_expr_1abf9cdb765fb84304881789d273d7594f">Expr</link>.</para>
</section>
<anchor xml:id="_class_let_1a9ecf8ca9ef5b8b7843fc5386381ca147"/><section>
    <title>has_variable()</title>
<indexterm><primary>has_variable</primary><secondary>Let</secondary></indexterm>
<indexterm><primary>Let</primary><secondary>has_variable</secondary></indexterm>
<para><computeroutput>bool Let::has_variable ( )<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Implements <link linkend="_class_expr_1a92dc26078993a4b9721ea732274a435c">Expr</link>.</para>
</section>
<anchor xml:id="_class_let_1a497897b0e97322f01c5d6605d6ec3bd7"/><section>
    <title>interp()</title>
<indexterm><primary>interp</primary><secondary>Let</secondary></indexterm>
<indexterm><primary>Let</primary><secondary>interp</secondary></indexterm>
<para><computeroutput><link linkend="_class_val">Val</link> * Let::interp ( )<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Implements <link linkend="_class_expr_1aa671ba2b665001c815588a7271735104">Expr</link>.</para>
</section>
<anchor xml:id="_class_let_1a0288f5ca2a9d18fc5cd5dfef276fda04"/><section>
    <title>pretty_print()</title>
<indexterm><primary>pretty_print</primary><secondary>Let</secondary></indexterm>
<indexterm><primary>Let</primary><secondary>pretty_print</secondary></indexterm>
<para><computeroutput>void Let::pretty_print (std::ostream &amp; stream)<computeroutput>[override]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Reimplemented from <link linkend="_class_expr_1aaec6172fa839cafad124775b0a43965b">Expr</link>.</para>
</section>
<anchor xml:id="_class_let_1ae9837b23534fe6739ea117041643ae59"/><section>
    <title>pretty_print_at()</title>
<indexterm><primary>pretty_print_at</primary><secondary>Let</secondary></indexterm>
<indexterm><primary>Let</primary><secondary>pretty_print_at</secondary></indexterm>
<para><computeroutput>void Let::pretty_print_at (std::ostream &amp; stream, <link linkend="__expr_8h_1a9e5fdf365cd8dc7be4d972daf07f8bdf">prec_t</link> p, std::streampos &amp; caller_pos, bool has_paren)<computeroutput>[override]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Reimplemented from <link linkend="_class_expr_1ab5b1d850f98bb650ef199bb6e90133b7">Expr</link>.</para>
</section>
<anchor xml:id="_class_let_1a57bcfd3190ebaf84e8adb0e64cdef2d8"/><section>
    <title>print()</title>
<indexterm><primary>print</primary><secondary>Let</secondary></indexterm>
<indexterm><primary>Let</primary><secondary>print</secondary></indexterm>
<para><computeroutput>void Let::print (std::ostream &amp; stream)<computeroutput>[override]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Implements <link linkend="_class_expr_1a8e34377af275f60532d1ba76e6feaceb">Expr</link>.</para>
</section>
<anchor xml:id="_class_let_1a64f2108ae264929fdebd34c66415de72"/><section>
    <title>subst()</title>
<indexterm><primary>subst</primary><secondary>Let</secondary></indexterm>
<indexterm><primary>Let</primary><secondary>subst</secondary></indexterm>
<para><computeroutput><link linkend="_class_expr">Expr</link> * Let::subst (std::string str, <link linkend="_class_expr">Expr</link> * e)<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Implements <link linkend="_class_expr_1aa91f56b56e078594565aeba32c520b7a">Expr</link>.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_let_1ab0a50714d9e5e273fbe27a44d98da5dc"/><section>
    <title>body_m</title>
<indexterm><primary>body_m</primary><secondary>Let</secondary></indexterm>
<indexterm><primary>Let</primary><secondary>body_m</secondary></indexterm>
<para><computeroutput><link linkend="_class_expr">Expr</link>* Let::body_m</computeroutput></para>
<para>The expression in which the variable declaration/definition applies </para>
</section>
<anchor xml:id="_class_let_1af70d7b738039534855ce24de6760e06f"/><section>
    <title>lhs_m</title>
<indexterm><primary>lhs_m</primary><secondary>Let</secondary></indexterm>
<indexterm><primary>Let</primary><secondary>lhs_m</secondary></indexterm>
<para><computeroutput>std::string Let::lhs_m</computeroutput></para><para>

<para>The <link linkend="_class_let">Let</link> object&apos;s variable name. </para>
</para>
</section>
<anchor xml:id="_class_let_1a33d7bbe2ccce8bebe368bdae93e5da64"/><section>
    <title>rhs_m</title>
<indexterm><primary>rhs_m</primary><secondary>Let</secondary></indexterm>
<indexterm><primary>Let</primary><secondary>rhs_m</secondary></indexterm>
<para><computeroutput><link linkend="_class_expr">Expr</link>* Let::rhs_m</computeroutput></para><para>

<para>The <link linkend="_class_let">Let</link> object&apos;s variable definition. </para>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
/Users/u0858882/Desktop/msdscript/msdscript/src/<link linkend="__expr_8h">Expr.h</link>/Users/u0858882/Desktop/msdscript/msdscript/src/<link linkend="__expr_8cpp">Expr.cpp</link></section>
</section>
